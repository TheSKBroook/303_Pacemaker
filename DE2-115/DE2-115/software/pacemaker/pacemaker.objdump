
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000ec28 memsz 0x0000ec28 flags r-x
    LOAD off    0x0000fc48 vaddr 0x0080ec48 paddr 0x008108a0 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x000124f8 vaddr 0x008124f8 paddr 0x008124f8 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e624  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e0  0080e868  0080e868  0000f868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080ec48  008108a0  0000fc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  008124f8  008124f8  000124f8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081264c  0081264c  000118a0  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  000118a0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000118a0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c20  00000000  00000000  000118c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001a0f9  00000000  00000000  000124e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007132  00000000  00000000  0002c5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009c45  00000000  00000000  00033713  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001b44  00000000  00000000  0003d358  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003875  00000000  00000000  0003ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007a33  00000000  00000000  00042711  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0004a144  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000c88  00000000  00000000  0004a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0004da5e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0004da61  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0004da64  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0004da65  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0004da66  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0004da6f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0004da78  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0004da81  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000025  00000000  00000000  0004da8d  2**0
                  CONTENTS, READONLY
 27 .jdi          00004de2  00000000  00000000  0004dab2  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000677b7  00000000  00000000  00052894  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080e868 l    d  .rodata	00000000 .rodata
0080ec48 l    d  .rwdata	00000000 .rwdata
008124f8 l    d  .bss	00000000 .bss
0081264c l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sschart.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00807aec l     F .text	00000008 __fp_unlock
00807b00 l     F .text	0000019c __sinit.part.1
00807c9c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080ec48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a854 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a880 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a96c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080aa4c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ab38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ad0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00810888 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080af58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080b08c l     F .text	00000034 alt_dev_reg
0080f61c l     O .rwdata	00001060 jtag_uart
0081067c l     O .rwdata	00000120 lcd
0081079c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080b3b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080b5c0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081088c l     O .rwdata	00000004 colstart
0080bbf8 l     F .text	000000b8 lcd_write_command
0080bcb0 l     F .text	000000d8 lcd_write_data
0080bd88 l     F .text	000000d0 lcd_clear_screen
0080be58 l     F .text	000001ec lcd_repaint_screen
0080c044 l     F .text	000000cc lcd_scroll_up
0080c110 l     F .text	000002ac lcd_handle_escape
0080c894 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080cad4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080cd84 l     F .text	0000009c altera_avalon_uart_irq
0080ce20 l     F .text	000000e4 altera_avalon_uart_rxirq
0080cf04 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080d0a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080d2b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080d614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080da88 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080dbc8 l     F .text	0000003c alt_get_errno
0080dc04 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080eac7 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00812520 g     O .bss	00000004 alt_instruction_exception_handler
0080a540 g     F .text	00000054 _isatty_r
0080ac48 g     F .text	0000007c alt_main
00807980 g     F .text	000000c0 _puts_r
0081254c g     O .bss	00000100 alt_irq
0080a268 g     F .text	00000060 _lseek_r
008108a0 g       *ABS*	00000000 __flash_rwdata_start
0081264c g       *ABS*	00000000 __alt_heap_start
0080981c g     F .text	0000005c __sseek
00807e3c g     F .text	00000010 __sinit
00807ca4 g     F .text	00000068 __sfmoreglue
0080ace8 g     F .text	00000024 __malloc_unlock
00808f08 g     F .text	0000015c memmove
00807e24 g     F .text	00000018 _cleanup
00806e50 g     F .text	000000dc .hidden __gtdf2
0080dff0 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080a4e4 g     F .text	0000005c _fstat_r
00812504 g     O .bss	00000004 errno
00809798 g     F .text	00000008 __seofread
0081250c g     O .bss	00000004 alt_argv
00818860 g       *ABS*	00000000 _gp
0080dfc0 g     F .text	00000030 usleep
00806170 g     F .text	000001a8 reset
0080f49c g     O .rwdata	00000180 alt_fd_list
0080e16c g     F .text	00000090 alt_find_dev
00808dc0 g     F .text	00000148 memcpy
00807af4 g     F .text	0000000c _cleanup_r
0080db4c g     F .text	0000007c alt_io_redirect
00806f2c g     F .text	000000f4 .hidden __ltdf2
0080e868 g       *ABS*	00000000 __DTOR_END__
00807a40 g     F .text	00000014 puts
0080e438 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080b7b8 g     F .text	0000021c altera_avalon_jtag_uart_read
0080a68c g     F .text	00000064 .hidden __udivsi3
0080a9a8 g     F .text	000000a4 isatty
0080e3a8 g     F .text	00000090 alt_icache_flush
00812500 g     O .bss	00000004 __malloc_top_pad
00807e8c g     F .text	000004bc __sfvwrite_r
008096f0 g     F .text	00000054 _sbrk_r
0080a484 g     F .text	00000060 _read_r
00810880 g     O .rwdata	00000004 alt_max_fd
00809a88 g     F .text	000000f0 _fclose_r
00809e04 g     F .text	00000030 fflush
008124fc g     O .bss	00000004 __malloc_max_sbrked_mem
008065a4 g     F .text	000008ac .hidden __adddf3
0080ab74 g     F .text	000000d4 lseek
00810860 g     O .rwdata	00000004 _global_impure_ptr
0080918c g     F .text	00000564 _realloc_r
0081264c g       *ABS*	00000000 __bss_end
0080d998 g     F .text	000000f0 alt_iic_isr_register
0080deb8 g     F .text	00000108 alt_tick
0080ccd8 g     F .text	000000ac altera_avalon_uart_init
00807e5c g     F .text	00000018 __fp_lock_all
0080d94c g     F .text	0000004c alt_ic_irq_enabled
0080de1c g     F .text	0000009c alt_alarm_stop
00812514 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080f474 g     O .rwdata	00000028 alt_dev_null
0080d5cc g     F .text	00000048 alt_dcache_flush_all
008108a0 g       *ABS*	00000000 __ram_rwdata_end
00810878 g     O .rwdata	00000008 alt_dev_list
0080af94 g     F .text	000000f8 write
0080ec48 g       *ABS*	00000000 __ram_rodata_end
0080a8bc g     F .text	000000b0 fstat
00806f2c g     F .text	000000f4 .hidden __ledf2
0080a6f0 g     F .text	00000058 .hidden __umodsi3
0081264c g       *ABS*	00000000 end
0080c3bc g     F .text	000004d8 altera_avalon_lcd_16207_write
0080d2f4 g     F .text	000001ac altera_avalon_uart_write
0080b2f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080e868 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080cb4c g     F .text	0000007c alt_avalon_timer_sc_init
0080cc28 g     F .text	00000060 altera_avalon_uart_write_fd
0080791c g     F .text	00000064 .hidden __clzsi2
0080cc88 g     F .text	00000050 altera_avalon_uart_close_fd
0080b9d4 g     F .text	00000224 altera_avalon_jtag_uart_write
00807e4c g     F .text	00000004 __sfp_lock_acquire
00808cdc g     F .text	000000e4 memchr
00809f58 g     F .text	00000310 _free_r
0080e6b4 g     F .text	00000180 __call_exitprocs
00810868 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00812518 g     O .bss	00000004 _alt_tick_rate
0081251c g     O .bss	00000004 _alt_nticks
0080ad48 g     F .text	000000fc read
0080b0f8 g     F .text	00000098 alt_sys_init
0080e59c g     F .text	00000118 __register_exitproc
0080b660 g     F .text	00000068 altera_avalon_jtag_uart_close
0080ec48 g       *ABS*	00000000 __ram_rwdata_start
0080e868 g       *ABS*	00000000 __ram_rodata_start
00812524 g     O .bss	00000028 __malloc_current_mallinfo
0080b190 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080e304 g     F .text	000000a4 alt_get_fd
0080e014 g     F .text	00000158 alt_busy_sleep
00809a34 g     F .text	00000054 _close_r
0080e520 g     F .text	0000007c memcmp
0080b250 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081264c g       *ABS*	00000000 __alt_stack_base
0080b2a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008098e0 g     F .text	00000154 __swsetup_r
00806318 g     F .text	0000028c tick
00807d0c g     F .text	00000118 __sfp
0080f06c g     O .rwdata	00000408 __malloc_av_
00807e58 g     F .text	00000004 __sinit_lock_release
00809744 g     F .text	00000054 __sread
0080e1fc g     F .text	00000108 alt_find_file
0080d650 g     F .text	000000a4 alt_dev_llist_insert
0080acc4 g     F .text	00000024 __malloc_lock
0080aea8 g     F .text	000000b0 sbrk
00809da8 g     F .text	0000005c _fflush_r
008124f8 g       *ABS*	00000000 __bss_start
00809064 g     F .text	00000128 memset
00800290 g     F .text	00000034 main
00812510 g     O .bss	00000004 alt_envp
008124f8 g     O .bss	00000004 __malloc_max_total_mem
0080b1f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c940 g     F .text	00000134 altera_avalon_lcd_16207_init
00809878 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00809b78 g     F .text	00000014 fclose
008084d0 g     F .text	0000080c _malloc_r
00810884 g     O .rwdata	00000004 alt_errno
00808348 g     F .text	000000c4 _fwalk
0080a594 g     F .text	00000084 .hidden __divsi3
00809e34 g     F .text	00000124 _malloc_trim_r
0080e868 g       *ABS*	00000000 __CTOR_END__
0080e868 g       *ABS*	00000000 __flash_rodata_start
0080e868 g       *ABS*	00000000 __DTOR_LIST__
0080b0c0 g     F .text	00000038 alt_irq_init
0080ae44 g     F .text	00000064 alt_release_fd
0080e87c g     O .rodata	00000100 .hidden __clz_tab
0080e4d4 g     F .text	00000014 atexit
00809880 g     F .text	00000060 _write_r
00810864 g     O .rwdata	00000004 _impure_ptr
00812508 g     O .bss	00000004 alt_argc
00809b8c g     F .text	0000021c __sflush_r
0080d754 g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00807e74 g     F .text	00000018 __fp_unlock_all
0080ca74 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00810870 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080d7e8 g     F .text	00000050 alt_ic_isr_register
008108a0 g       *ABS*	00000000 _edata
0080cbc8 g     F .text	00000060 altera_avalon_uart_read_fd
0081264c g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080b6c8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080d8c0 g     F .text	0000008c alt_ic_irq_disable
008097a0 g     F .text	0000007c __swrite
0081086c g     O .rwdata	00000004 __malloc_trim_threshold
0080e4e8 g     F .text	00000038 exit
0080840c g     F .text	000000c4 _fwalk_reent
0080a618 g     F .text	00000074 .hidden __modsi3
008002c4 g     F .text	00005eac logic
0081089c g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807e50 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080e9c6 g     O .rodata	00000101 _ctype_
0080d04c g     F .text	00000054 altera_avalon_uart_close
0080e834 g     F .text	00000034 _exit
0080d4a0 g     F .text	0000012c alt_alarm_start
0080a2c8 g     F .text	000001bc __smakebuf_r
00807a54 g     F .text	00000098 strlen
0080dcc8 g     F .text	00000154 open
00806e50 g     F .text	000000dc .hidden __gedf2
0080d7b4 g     F .text	00000034 alt_icache_flush_all
00810890 g     O .rwdata	00000004 alt_priority_mask
0080d838 g     F .text	00000088 alt_ic_irq_enable
0080d0dc g     F .text	000001dc altera_avalon_uart_read
00807020 g     F .text	000008fc .hidden __subdf3
00810894 g     O .rwdata	00000008 alt_alarm_list
0080d6f4 g     F .text	00000060 _do_ctors
0080a784 g     F .text	000000d0 close
0080aab4 g     F .text	00000084 alt_load
00807e54 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10895304 	addi	r2,r2,9548
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10895304 	addi	r2,r2,9548
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73017 	ldw	r2,-25408(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73017 	ldw	r2,-25408(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6a21814 	ori	gp,gp,34912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10893e14 	ori	r2,r2,9464

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18c99314 	ori	r3,r3,9804

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080aab40 	call	80aab4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080ac480 	call	80ac48 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <main>:
 */

#include <stdio.h>

int main()
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  8002a0:	01002074 	movhi	r4,129
  8002a4:	213a1a04 	addi	r4,r4,-6040
  8002a8:	0807a400 	call	807a40 <puts>

  return 0;
  8002ac:	0005883a 	mov	r2,zero
}
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	dfc00117 	ldw	ra,4(sp)
  8002b8:	df000017 	ldw	fp,0(sp)
  8002bc:	dec00204 	addi	sp,sp,8
  8002c0:	f800283a 	ret

008002c4 <logic>:

#include "timing.h"

#include "sschart.h"

void logic(TickData* d) {
  8002c4:	defffb04 	addi	sp,sp,-20
  8002c8:	dfc00415 	stw	ra,16(sp)
  8002cc:	df000315 	stw	fp,12(sp)
  8002d0:	dc400215 	stw	r17,8(sp)
  8002d4:	dc000115 	stw	r16,4(sp)
  8002d8:	df000304 	addi	fp,sp,12
  8002dc:	e13ffd15 	stw	r4,-12(fp)
  d->_g25 = d->_pg25;
  8002e0:	e0bffd17 	ldw	r2,-12(fp)
  8002e4:	10c05043 	ldbu	r3,321(r2)
  8002e8:	e0bffd17 	ldw	r2,-12(fp)
  8002ec:	10c019c5 	stb	r3,103(r2)
  if (d->_g25) {
  8002f0:	e0bffd17 	ldw	r2,-12(fp)
  8002f4:	108019c3 	ldbu	r2,103(r2)
  8002f8:	10803fcc 	andi	r2,r2,255
  8002fc:	1080201c 	xori	r2,r2,128
  800300:	10bfe004 	addi	r2,r2,-128
  800304:	10001226 	beq	r2,zero,800350 <logic+0x8c>
    d->_PaceMaker_local_vrp_clk += d->deltaT;
  800308:	e13ffd17 	ldw	r4,-12(fp)
  80030c:	20800717 	ldw	r2,28(r4)
  800310:	20c00817 	ldw	r3,32(r4)
  800314:	e1bffd17 	ldw	r6,-12(fp)
  800318:	31000017 	ldw	r4,0(r6)
  80031c:	31400117 	ldw	r5,4(r6)
  800320:	200d883a 	mov	r6,r4
  800324:	280f883a 	mov	r7,r5
  800328:	1009883a 	mov	r4,r2
  80032c:	180b883a 	mov	r5,r3
  800330:	08065a40 	call	8065a4 <__adddf3>
  800334:	1009883a 	mov	r4,r2
  800338:	180b883a 	mov	r5,r3
  80033c:	2005883a 	mov	r2,r4
  800340:	2807883a 	mov	r3,r5
  800344:	e13ffd17 	ldw	r4,-12(fp)
  800348:	20800715 	stw	r2,28(r4)
  80034c:	20c00815 	stw	r3,32(r4)
  }
  d->_g28 = d->_pg28;
  800350:	e0bffd17 	ldw	r2,-12(fp)
  800354:	10c05083 	ldbu	r3,322(r2)
  800358:	e0bffd17 	ldw	r2,-12(fp)
  80035c:	10c01a05 	stb	r3,104(r2)
  d->_cg28 = d->_PaceMaker_local_vrp_clk >= VRP_VALUE;
  800360:	e13ffd17 	ldw	r4,-12(fp)
  800364:	20800717 	ldw	r2,28(r4)
  800368:	20c00817 	ldw	r3,32(r4)
  80036c:	04000044 	movi	r16,1
  800370:	000d883a 	mov	r6,zero
  800374:	01d018f4 	movhi	r7,16483
  800378:	39f00004 	addi	r7,r7,-16384
  80037c:	1009883a 	mov	r4,r2
  800380:	180b883a 	mov	r5,r3
  800384:	0806e500 	call	806e50 <__gedf2>
  800388:	1000010e 	bge	r2,zero,800390 <logic+0xcc>
  80038c:	0021883a 	mov	r16,zero
  800390:	8007883a 	mov	r3,r16
  800394:	e0bffd17 	ldw	r2,-12(fp)
  800398:	10c03805 	stb	r3,224(r2)
  d->_g29 = d->_g28 && d->_cg28;
  80039c:	e0bffd17 	ldw	r2,-12(fp)
  8003a0:	10801a03 	ldbu	r2,104(r2)
  8003a4:	10803fcc 	andi	r2,r2,255
  8003a8:	1080201c 	xori	r2,r2,128
  8003ac:	10bfe004 	addi	r2,r2,-128
  8003b0:	10000826 	beq	r2,zero,8003d4 <logic+0x110>
  8003b4:	e0bffd17 	ldw	r2,-12(fp)
  8003b8:	10803803 	ldbu	r2,224(r2)
  8003bc:	10803fcc 	andi	r2,r2,255
  8003c0:	1080201c 	xori	r2,r2,128
  8003c4:	10bfe004 	addi	r2,r2,-128
  8003c8:	10000226 	beq	r2,zero,8003d4 <logic+0x110>
  8003cc:	00800044 	movi	r2,1
  8003d0:	00000106 	br	8003d8 <logic+0x114>
  8003d4:	0005883a 	mov	r2,zero
  8003d8:	1007883a 	mov	r3,r2
  8003dc:	e0bffd17 	ldw	r2,-12(fp)
  8003e0:	10c01a45 	stb	r3,105(r2)
  if (d->_g29) {
  8003e4:	e0bffd17 	ldw	r2,-12(fp)
  8003e8:	10801a43 	ldbu	r2,105(r2)
  8003ec:	10803fcc 	andi	r2,r2,255
  8003f0:	1080201c 	xori	r2,r2,128
  8003f4:	10bfe004 	addi	r2,r2,-128
  8003f8:	10000326 	beq	r2,zero,800408 <logic+0x144>
    d->_PaceMaker_local__Atrig = 1;
  8003fc:	e0bffd17 	ldw	r2,-12(fp)
  800400:	00c00044 	movi	r3,1
  800404:	10c00605 	stb	r3,24(r2)
  }
  d->AP = 0;
  800408:	e0bffd17 	ldw	r2,-12(fp)
  80040c:	10000485 	stb	zero,18(r2)
  d->VP = 0;
  800410:	e0bffd17 	ldw	r2,-12(fp)
  800414:	100004c5 	stb	zero,19(r2)
  d->ignore_AEvent = 0;
  800418:	e0bffd17 	ldw	r2,-12(fp)
  80041c:	10000505 	stb	zero,20(r2)
  d->ignore_VEvent = 0;
  800420:	e0bffd17 	ldw	r2,-12(fp)
  800424:	10000545 	stb	zero,21(r2)
  d->uri_time = 0;
  800428:	e0bffd17 	ldw	r2,-12(fp)
  80042c:	10000585 	stb	zero,22(r2)
  d->lri_time = 0;
  800430:	e0bffd17 	ldw	r2,-12(fp)
  800434:	100005c5 	stb	zero,23(r2)
  d->_g153 = d->_pg169;
  800438:	e0bffd17 	ldw	r2,-12(fp)
  80043c:	10c050c3 	ldbu	r3,323(r2)
  800440:	e0bffd17 	ldw	r2,-12(fp)
  800444:	10c02e85 	stb	r3,186(r2)
  if (d->_g153) {
  800448:	e0bffd17 	ldw	r2,-12(fp)
  80044c:	10802e83 	ldbu	r2,186(r2)
  800450:	10803fcc 	andi	r2,r2,255
  800454:	1080201c 	xori	r2,r2,128
  800458:	10bfe004 	addi	r2,r2,-128
  80045c:	10000626 	beq	r2,zero,800478 <logic+0x1b4>
    d->uri_time |= 1;
  800460:	e0bffd17 	ldw	r2,-12(fp)
  800464:	10800583 	ldbu	r2,22(r2)
  800468:	10800054 	ori	r2,r2,1
  80046c:	1007883a 	mov	r3,r2
  800470:	e0bffd17 	ldw	r2,-12(fp)
  800474:	10c00585 	stb	r3,22(r2)
  }
  d->_g109 = d->_pg74;
  800478:	e0bffd17 	ldw	r2,-12(fp)
  80047c:	10c05103 	ldbu	r3,324(r2)
  800480:	e0bffd17 	ldw	r2,-12(fp)
  800484:	10c027c5 	stb	r3,159(r2)
  d->_cg109 = !d->uri_time;
  800488:	e0bffd17 	ldw	r2,-12(fp)
  80048c:	10800583 	ldbu	r2,22(r2)
  800490:	10803fcc 	andi	r2,r2,255
  800494:	1080201c 	xori	r2,r2,128
  800498:	10bfe004 	addi	r2,r2,-128
  80049c:	1005003a 	cmpeq	r2,r2,zero
  8004a0:	1007883a 	mov	r3,r2
  8004a4:	e0bffd17 	ldw	r2,-12(fp)
  8004a8:	10c03f85 	stb	r3,254(r2)
  d->_g110 = d->_g109 && d->_cg109;
  8004ac:	e0bffd17 	ldw	r2,-12(fp)
  8004b0:	108027c3 	ldbu	r2,159(r2)
  8004b4:	10803fcc 	andi	r2,r2,255
  8004b8:	1080201c 	xori	r2,r2,128
  8004bc:	10bfe004 	addi	r2,r2,-128
  8004c0:	10000826 	beq	r2,zero,8004e4 <logic+0x220>
  8004c4:	e0bffd17 	ldw	r2,-12(fp)
  8004c8:	10803f83 	ldbu	r2,254(r2)
  8004cc:	10803fcc 	andi	r2,r2,255
  8004d0:	1080201c 	xori	r2,r2,128
  8004d4:	10bfe004 	addi	r2,r2,-128
  8004d8:	10000226 	beq	r2,zero,8004e4 <logic+0x220>
  8004dc:	00800044 	movi	r2,1
  8004e0:	00000106 	br	8004e8 <logic+0x224>
  8004e4:	0005883a 	mov	r2,zero
  8004e8:	1007883a 	mov	r3,r2
  8004ec:	e0bffd17 	ldw	r2,-12(fp)
  8004f0:	10c02805 	stb	r3,160(r2)
  if (d->_g110) {
  8004f4:	e0bffd17 	ldw	r2,-12(fp)
  8004f8:	10802803 	ldbu	r2,160(r2)
  8004fc:	10803fcc 	andi	r2,r2,255
  800500:	1080201c 	xori	r2,r2,128
  800504:	10bfe004 	addi	r2,r2,-128
  800508:	10000626 	beq	r2,zero,800524 <logic+0x260>
    d->VP |= 1;
  80050c:	e0bffd17 	ldw	r2,-12(fp)
  800510:	108004c3 	ldbu	r2,19(r2)
  800514:	10800054 	ori	r2,r2,1
  800518:	1007883a 	mov	r3,r2
  80051c:	e0bffd17 	ldw	r2,-12(fp)
  800520:	10c004c5 	stb	r3,19(r2)
  }
  d->_g76 = d->_pg111;
  800524:	e0bffd17 	ldw	r2,-12(fp)
  800528:	10c05143 	ldbu	r3,325(r2)
  80052c:	e0bffd17 	ldw	r2,-12(fp)
  800530:	10c02185 	stb	r3,134(r2)
  d->_g70 = d->_pg136_e3;
  800534:	e0bffd17 	ldw	r2,-12(fp)
  800538:	10c05183 	ldbu	r3,326(r2)
  80053c:	e0bffd17 	ldw	r2,-12(fp)
  800540:	10c02045 	stb	r3,129(r2)
  d->_g73_e1 = !(d->_g76 || d->_g70);
  800544:	e0bffd17 	ldw	r2,-12(fp)
  800548:	10802183 	ldbu	r2,134(r2)
  80054c:	10803fcc 	andi	r2,r2,255
  800550:	1080201c 	xori	r2,r2,128
  800554:	10bfe004 	addi	r2,r2,-128
  800558:	1000081e 	bne	r2,zero,80057c <logic+0x2b8>
  80055c:	e0bffd17 	ldw	r2,-12(fp)
  800560:	10802043 	ldbu	r2,129(r2)
  800564:	10803fcc 	andi	r2,r2,255
  800568:	1080201c 	xori	r2,r2,128
  80056c:	10bfe004 	addi	r2,r2,-128
  800570:	1000021e 	bne	r2,zero,80057c <logic+0x2b8>
  800574:	00800044 	movi	r2,1
  800578:	00000106 	br	800580 <logic+0x2bc>
  80057c:	0005883a 	mov	r2,zero
  800580:	1007883a 	mov	r3,r2
  800584:	e0bffd17 	ldw	r2,-12(fp)
  800588:	10c04c45 	stb	r3,305(r2)
  d->_g95 = d->_pg77;
  80058c:	e0bffd17 	ldw	r2,-12(fp)
  800590:	10c051c3 	ldbu	r3,327(r2)
  800594:	e0bffd17 	ldw	r2,-12(fp)
  800598:	10c02485 	stb	r3,146(r2)
  d->_g96 = d->_g95 && d->VS;
  80059c:	e0bffd17 	ldw	r2,-12(fp)
  8005a0:	10802483 	ldbu	r2,146(r2)
  8005a4:	10803fcc 	andi	r2,r2,255
  8005a8:	1080201c 	xori	r2,r2,128
  8005ac:	10bfe004 	addi	r2,r2,-128
  8005b0:	10000826 	beq	r2,zero,8005d4 <logic+0x310>
  8005b4:	e0bffd17 	ldw	r2,-12(fp)
  8005b8:	10800443 	ldbu	r2,17(r2)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	1080201c 	xori	r2,r2,128
  8005c4:	10bfe004 	addi	r2,r2,-128
  8005c8:	10000226 	beq	r2,zero,8005d4 <logic+0x310>
  8005cc:	00800044 	movi	r2,1
  8005d0:	00000106 	br	8005d8 <logic+0x314>
  8005d4:	0005883a 	mov	r2,zero
  8005d8:	1007883a 	mov	r3,r2
  8005dc:	e0bffd17 	ldw	r2,-12(fp)
  8005e0:	10c024c5 	stb	r3,147(r2)
  if (d->_g96) {
  8005e4:	e0bffd17 	ldw	r2,-12(fp)
  8005e8:	108024c3 	ldbu	r2,147(r2)
  8005ec:	10803fcc 	andi	r2,r2,255
  8005f0:	1080201c 	xori	r2,r2,128
  8005f4:	10bfe004 	addi	r2,r2,-128
  8005f8:	10000326 	beq	r2,zero,800608 <logic+0x344>
    d->_PaceMaker_local__Atrig2 = 1;
  8005fc:	e0bffd17 	ldw	r2,-12(fp)
  800600:	00c00044 	movi	r3,1
  800604:	10c00b05 	stb	r3,44(r2)
  }
  d->_g91 = d->_pg72;
  800608:	e0bffd17 	ldw	r2,-12(fp)
  80060c:	10c05203 	ldbu	r3,328(r2)
  800610:	e0bffd17 	ldw	r2,-12(fp)
  800614:	10c02405 	stb	r3,144(r2)
  if (d->_g91) {
  800618:	e0bffd17 	ldw	r2,-12(fp)
  80061c:	10802403 	ldbu	r2,144(r2)
  800620:	10803fcc 	andi	r2,r2,255
  800624:	1080201c 	xori	r2,r2,128
  800628:	10bfe004 	addi	r2,r2,-128
  80062c:	10001226 	beq	r2,zero,800678 <logic+0x3b4>
    d->_PaceMaker_local_avi_clk += d->deltaT;
  800630:	e13ffd17 	ldw	r4,-12(fp)
  800634:	20800d17 	ldw	r2,52(r4)
  800638:	20c00e17 	ldw	r3,56(r4)
  80063c:	e1bffd17 	ldw	r6,-12(fp)
  800640:	31000017 	ldw	r4,0(r6)
  800644:	31400117 	ldw	r5,4(r6)
  800648:	200d883a 	mov	r6,r4
  80064c:	280f883a 	mov	r7,r5
  800650:	1009883a 	mov	r4,r2
  800654:	180b883a 	mov	r5,r3
  800658:	08065a40 	call	8065a4 <__adddf3>
  80065c:	1009883a 	mov	r4,r2
  800660:	180b883a 	mov	r5,r3
  800664:	2005883a 	mov	r2,r4
  800668:	2807883a 	mov	r3,r5
  80066c:	e13ffd17 	ldw	r4,-12(fp)
  800670:	20800d15 	stw	r2,52(r4)
  800674:	20c00e15 	stw	r3,56(r4)
  }
  d->_g185 = d->_pg186_e1;
  800678:	e0bffd17 	ldw	r2,-12(fp)
  80067c:	10c05243 	ldbu	r3,329(r2)
  800680:	e0bffd17 	ldw	r2,-12(fp)
  800684:	10c03345 	stb	r3,205(r2)
  if (d->_g185) {
  800688:	e0bffd17 	ldw	r2,-12(fp)
  80068c:	10803343 	ldbu	r2,205(r2)
  800690:	10803fcc 	andi	r2,r2,255
  800694:	1080201c 	xori	r2,r2,128
  800698:	10bfe004 	addi	r2,r2,-128
  80069c:	10000626 	beq	r2,zero,8006b8 <logic+0x3f4>
    d->lri_time |= 1;
  8006a0:	e0bffd17 	ldw	r2,-12(fp)
  8006a4:	108005c3 	ldbu	r2,23(r2)
  8006a8:	10800054 	ori	r2,r2,1
  8006ac:	1007883a 	mov	r3,r2
  8006b0:	e0bffd17 	ldw	r2,-12(fp)
  8006b4:	10c005c5 	stb	r3,23(r2)
  }
  d->_g98 = d->_g95 && !d->VS;
  8006b8:	e0bffd17 	ldw	r2,-12(fp)
  8006bc:	10802483 	ldbu	r2,146(r2)
  8006c0:	10803fcc 	andi	r2,r2,255
  8006c4:	1080201c 	xori	r2,r2,128
  8006c8:	10bfe004 	addi	r2,r2,-128
  8006cc:	10000826 	beq	r2,zero,8006f0 <logic+0x42c>
  8006d0:	e0bffd17 	ldw	r2,-12(fp)
  8006d4:	10800443 	ldbu	r2,17(r2)
  8006d8:	10803fcc 	andi	r2,r2,255
  8006dc:	1080201c 	xori	r2,r2,128
  8006e0:	10bfe004 	addi	r2,r2,-128
  8006e4:	1000021e 	bne	r2,zero,8006f0 <logic+0x42c>
  8006e8:	00800044 	movi	r2,1
  8006ec:	00000106 	br	8006f4 <logic+0x430>
  8006f0:	0005883a 	mov	r2,zero
  8006f4:	1007883a 	mov	r3,r2
  8006f8:	e0bffd17 	ldw	r2,-12(fp)
  8006fc:	10c02545 	stb	r3,149(r2)
  d->_cg98 = !d->VS && d->_PaceMaker_local_avi_clk >= AVI_VALUE - 1 && !d->uri_time && d->lri_time;
  800700:	e0bffd17 	ldw	r2,-12(fp)
  800704:	10800443 	ldbu	r2,17(r2)
  800708:	10803fcc 	andi	r2,r2,255
  80070c:	1080201c 	xori	r2,r2,128
  800710:	10bfe004 	addi	r2,r2,-128
  800714:	1000181e 	bne	r2,zero,800778 <logic+0x4b4>
  800718:	e13ffd17 	ldw	r4,-12(fp)
  80071c:	20800d17 	ldw	r2,52(r4)
  800720:	20c00e17 	ldw	r3,56(r4)
  800724:	000d883a 	mov	r6,zero
  800728:	01d01cf4 	movhi	r7,16499
  80072c:	39ec0004 	addi	r7,r7,-20480
  800730:	1009883a 	mov	r4,r2
  800734:	180b883a 	mov	r5,r3
  800738:	0806e500 	call	806e50 <__gedf2>
  80073c:	10000e16 	blt	r2,zero,800778 <logic+0x4b4>
  800740:	e0bffd17 	ldw	r2,-12(fp)
  800744:	10800583 	ldbu	r2,22(r2)
  800748:	10803fcc 	andi	r2,r2,255
  80074c:	1080201c 	xori	r2,r2,128
  800750:	10bfe004 	addi	r2,r2,-128
  800754:	1000081e 	bne	r2,zero,800778 <logic+0x4b4>
  800758:	e0bffd17 	ldw	r2,-12(fp)
  80075c:	108005c3 	ldbu	r2,23(r2)
  800760:	10803fcc 	andi	r2,r2,255
  800764:	1080201c 	xori	r2,r2,128
  800768:	10bfe004 	addi	r2,r2,-128
  80076c:	10000226 	beq	r2,zero,800778 <logic+0x4b4>
  800770:	00800044 	movi	r2,1
  800774:	00000106 	br	80077c <logic+0x4b8>
  800778:	0005883a 	mov	r2,zero
  80077c:	1007883a 	mov	r3,r2
  800780:	e0bffd17 	ldw	r2,-12(fp)
  800784:	10c03e85 	stb	r3,250(r2)
  d->_g99 = d->_g98 && d->_cg98;
  800788:	e0bffd17 	ldw	r2,-12(fp)
  80078c:	10802543 	ldbu	r2,149(r2)
  800790:	10803fcc 	andi	r2,r2,255
  800794:	1080201c 	xori	r2,r2,128
  800798:	10bfe004 	addi	r2,r2,-128
  80079c:	10000826 	beq	r2,zero,8007c0 <logic+0x4fc>
  8007a0:	e0bffd17 	ldw	r2,-12(fp)
  8007a4:	10803e83 	ldbu	r2,250(r2)
  8007a8:	10803fcc 	andi	r2,r2,255
  8007ac:	1080201c 	xori	r2,r2,128
  8007b0:	10bfe004 	addi	r2,r2,-128
  8007b4:	10000226 	beq	r2,zero,8007c0 <logic+0x4fc>
  8007b8:	00800044 	movi	r2,1
  8007bc:	00000106 	br	8007c4 <logic+0x500>
  8007c0:	0005883a 	mov	r2,zero
  8007c4:	1007883a 	mov	r3,r2
  8007c8:	e0bffd17 	ldw	r2,-12(fp)
  8007cc:	10c02585 	stb	r3,150(r2)
  if (d->_g99) {
  8007d0:	e0bffd17 	ldw	r2,-12(fp)
  8007d4:	10802583 	ldbu	r2,150(r2)
  8007d8:	10803fcc 	andi	r2,r2,255
  8007dc:	1080201c 	xori	r2,r2,128
  8007e0:	10bfe004 	addi	r2,r2,-128
  8007e4:	10000326 	beq	r2,zero,8007f4 <logic+0x530>
    d->_PaceMaker_local__Atrig3 = 1;
  8007e8:	e0bffd17 	ldw	r2,-12(fp)
  8007ec:	00c00044 	movi	r3,1
  8007f0:	10c00b45 	stb	r3,45(r2)
  }
  d->_g98 = d->_g98 && !d->_cg98;
  8007f4:	e0bffd17 	ldw	r2,-12(fp)
  8007f8:	10802543 	ldbu	r2,149(r2)
  8007fc:	10803fcc 	andi	r2,r2,255
  800800:	1080201c 	xori	r2,r2,128
  800804:	10bfe004 	addi	r2,r2,-128
  800808:	10000826 	beq	r2,zero,80082c <logic+0x568>
  80080c:	e0bffd17 	ldw	r2,-12(fp)
  800810:	10803e83 	ldbu	r2,250(r2)
  800814:	10803fcc 	andi	r2,r2,255
  800818:	1080201c 	xori	r2,r2,128
  80081c:	10bfe004 	addi	r2,r2,-128
  800820:	1000021e 	bne	r2,zero,80082c <logic+0x568>
  800824:	00800044 	movi	r2,1
  800828:	00000106 	br	800830 <logic+0x56c>
  80082c:	0005883a 	mov	r2,zero
  800830:	1007883a 	mov	r3,r2
  800834:	e0bffd17 	ldw	r2,-12(fp)
  800838:	10c02545 	stb	r3,149(r2)
  d->_cg100 = !d->VS && d->_PaceMaker_local_avi_clk >= AVI_VALUE - 1 && d->uri_time;
  80083c:	e0bffd17 	ldw	r2,-12(fp)
  800840:	10800443 	ldbu	r2,17(r2)
  800844:	10803fcc 	andi	r2,r2,255
  800848:	1080201c 	xori	r2,r2,128
  80084c:	10bfe004 	addi	r2,r2,-128
  800850:	1000121e 	bne	r2,zero,80089c <logic+0x5d8>
  800854:	e13ffd17 	ldw	r4,-12(fp)
  800858:	20800d17 	ldw	r2,52(r4)
  80085c:	20c00e17 	ldw	r3,56(r4)
  800860:	000d883a 	mov	r6,zero
  800864:	01d01cf4 	movhi	r7,16499
  800868:	39ec0004 	addi	r7,r7,-20480
  80086c:	1009883a 	mov	r4,r2
  800870:	180b883a 	mov	r5,r3
  800874:	0806e500 	call	806e50 <__gedf2>
  800878:	10000816 	blt	r2,zero,80089c <logic+0x5d8>
  80087c:	e0bffd17 	ldw	r2,-12(fp)
  800880:	10800583 	ldbu	r2,22(r2)
  800884:	10803fcc 	andi	r2,r2,255
  800888:	1080201c 	xori	r2,r2,128
  80088c:	10bfe004 	addi	r2,r2,-128
  800890:	10000226 	beq	r2,zero,80089c <logic+0x5d8>
  800894:	00800044 	movi	r2,1
  800898:	00000106 	br	8008a0 <logic+0x5dc>
  80089c:	0005883a 	mov	r2,zero
  8008a0:	1007883a 	mov	r3,r2
  8008a4:	e0bffd17 	ldw	r2,-12(fp)
  8008a8:	10c03ec5 	stb	r3,251(r2)
  d->_g101 = d->_g98 && d->_cg100;
  8008ac:	e0bffd17 	ldw	r2,-12(fp)
  8008b0:	10802543 	ldbu	r2,149(r2)
  8008b4:	10803fcc 	andi	r2,r2,255
  8008b8:	1080201c 	xori	r2,r2,128
  8008bc:	10bfe004 	addi	r2,r2,-128
  8008c0:	10000826 	beq	r2,zero,8008e4 <logic+0x620>
  8008c4:	e0bffd17 	ldw	r2,-12(fp)
  8008c8:	10803ec3 	ldbu	r2,251(r2)
  8008cc:	10803fcc 	andi	r2,r2,255
  8008d0:	1080201c 	xori	r2,r2,128
  8008d4:	10bfe004 	addi	r2,r2,-128
  8008d8:	10000226 	beq	r2,zero,8008e4 <logic+0x620>
  8008dc:	00800044 	movi	r2,1
  8008e0:	00000106 	br	8008e8 <logic+0x624>
  8008e4:	0005883a 	mov	r2,zero
  8008e8:	1007883a 	mov	r3,r2
  8008ec:	e0bffd17 	ldw	r2,-12(fp)
  8008f0:	10c02605 	stb	r3,152(r2)
  if (d->_g101) {
  8008f4:	e0bffd17 	ldw	r2,-12(fp)
  8008f8:	10802603 	ldbu	r2,152(r2)
  8008fc:	10803fcc 	andi	r2,r2,255
  800900:	1080201c 	xori	r2,r2,128
  800904:	10bfe004 	addi	r2,r2,-128
  800908:	10000326 	beq	r2,zero,800918 <logic+0x654>
    d->_PaceMaker_local__Atrig4 = 1;
  80090c:	e0bffd17 	ldw	r2,-12(fp)
  800910:	00c00044 	movi	r3,1
  800914:	10c00b85 	stb	r3,46(r2)
  }
  d->_g100 = d->_g98 && !d->_cg100;
  800918:	e0bffd17 	ldw	r2,-12(fp)
  80091c:	10802543 	ldbu	r2,149(r2)
  800920:	10803fcc 	andi	r2,r2,255
  800924:	1080201c 	xori	r2,r2,128
  800928:	10bfe004 	addi	r2,r2,-128
  80092c:	10000826 	beq	r2,zero,800950 <logic+0x68c>
  800930:	e0bffd17 	ldw	r2,-12(fp)
  800934:	10803ec3 	ldbu	r2,251(r2)
  800938:	10803fcc 	andi	r2,r2,255
  80093c:	1080201c 	xori	r2,r2,128
  800940:	10bfe004 	addi	r2,r2,-128
  800944:	1000021e 	bne	r2,zero,800950 <logic+0x68c>
  800948:	00800044 	movi	r2,1
  80094c:	00000106 	br	800954 <logic+0x690>
  800950:	0005883a 	mov	r2,zero
  800954:	1007883a 	mov	r3,r2
  800958:	e0bffd17 	ldw	r2,-12(fp)
  80095c:	10c025c5 	stb	r3,151(r2)
  d->_cg102 = !d->VS && !d->lri_time;
  800960:	e0bffd17 	ldw	r2,-12(fp)
  800964:	10800443 	ldbu	r2,17(r2)
  800968:	10803fcc 	andi	r2,r2,255
  80096c:	1080201c 	xori	r2,r2,128
  800970:	10bfe004 	addi	r2,r2,-128
  800974:	1000081e 	bne	r2,zero,800998 <logic+0x6d4>
  800978:	e0bffd17 	ldw	r2,-12(fp)
  80097c:	108005c3 	ldbu	r2,23(r2)
  800980:	10803fcc 	andi	r2,r2,255
  800984:	1080201c 	xori	r2,r2,128
  800988:	10bfe004 	addi	r2,r2,-128
  80098c:	1000021e 	bne	r2,zero,800998 <logic+0x6d4>
  800990:	00800044 	movi	r2,1
  800994:	00000106 	br	80099c <logic+0x6d8>
  800998:	0005883a 	mov	r2,zero
  80099c:	1007883a 	mov	r3,r2
  8009a0:	e0bffd17 	ldw	r2,-12(fp)
  8009a4:	10c03e05 	stb	r3,248(r2)
  d->_g103 = d->_g100 && d->_cg102;
  8009a8:	e0bffd17 	ldw	r2,-12(fp)
  8009ac:	108025c3 	ldbu	r2,151(r2)
  8009b0:	10803fcc 	andi	r2,r2,255
  8009b4:	1080201c 	xori	r2,r2,128
  8009b8:	10bfe004 	addi	r2,r2,-128
  8009bc:	10000826 	beq	r2,zero,8009e0 <logic+0x71c>
  8009c0:	e0bffd17 	ldw	r2,-12(fp)
  8009c4:	10803e03 	ldbu	r2,248(r2)
  8009c8:	10803fcc 	andi	r2,r2,255
  8009cc:	1080201c 	xori	r2,r2,128
  8009d0:	10bfe004 	addi	r2,r2,-128
  8009d4:	10000226 	beq	r2,zero,8009e0 <logic+0x71c>
  8009d8:	00800044 	movi	r2,1
  8009dc:	00000106 	br	8009e4 <logic+0x720>
  8009e0:	0005883a 	mov	r2,zero
  8009e4:	1007883a 	mov	r3,r2
  8009e8:	e0bffd17 	ldw	r2,-12(fp)
  8009ec:	10c02685 	stb	r3,154(r2)
  if (d->_g103) {
  8009f0:	e0bffd17 	ldw	r2,-12(fp)
  8009f4:	10802683 	ldbu	r2,154(r2)
  8009f8:	10803fcc 	andi	r2,r2,255
  8009fc:	1080201c 	xori	r2,r2,128
  800a00:	10bfe004 	addi	r2,r2,-128
  800a04:	10000326 	beq	r2,zero,800a14 <logic+0x750>
    d->_PaceMaker_local__Atrig5 = 1;
  800a08:	e0bffd17 	ldw	r2,-12(fp)
  800a0c:	00c00044 	movi	r3,1
  800a10:	10c00bc5 	stb	r3,47(r2)
  }
  d->sleepT = 1000.0;
  800a14:	e0fffd17 	ldw	r3,-12(fp)
  800a18:	18000215 	stw	zero,8(r3)
  800a1c:	009023f4 	movhi	r2,16527
  800a20:	10900004 	addi	r2,r2,16384
  800a24:	18800315 	stw	r2,12(r3)
  d->_g70 = d->_g70 || d->_g76;
  800a28:	e0bffd17 	ldw	r2,-12(fp)
  800a2c:	10802043 	ldbu	r2,129(r2)
  800a30:	10803fcc 	andi	r2,r2,255
  800a34:	1080201c 	xori	r2,r2,128
  800a38:	10bfe004 	addi	r2,r2,-128
  800a3c:	1000061e 	bne	r2,zero,800a58 <logic+0x794>
  800a40:	e0bffd17 	ldw	r2,-12(fp)
  800a44:	10802183 	ldbu	r2,134(r2)
  800a48:	10803fcc 	andi	r2,r2,255
  800a4c:	1080201c 	xori	r2,r2,128
  800a50:	10bfe004 	addi	r2,r2,-128
  800a54:	10000226 	beq	r2,zero,800a60 <logic+0x79c>
  800a58:	00800044 	movi	r2,1
  800a5c:	00000106 	br	800a64 <logic+0x7a0>
  800a60:	0005883a 	mov	r2,zero
  800a64:	1007883a 	mov	r3,r2
  800a68:	e0bffd17 	ldw	r2,-12(fp)
  800a6c:	10c02045 	stb	r3,129(r2)
  d->_cg71 = d->_PaceMaker_local_avi_clk < AVI_VALUE - 1;
  800a70:	e13ffd17 	ldw	r4,-12(fp)
  800a74:	20800d17 	ldw	r2,52(r4)
  800a78:	20c00e17 	ldw	r3,56(r4)
  800a7c:	04000044 	movi	r16,1
  800a80:	000d883a 	mov	r6,zero
  800a84:	01d01cf4 	movhi	r7,16499
  800a88:	39ec0004 	addi	r7,r7,-20480
  800a8c:	1009883a 	mov	r4,r2
  800a90:	180b883a 	mov	r5,r3
  800a94:	0806f2c0 	call	806f2c <__ledf2>
  800a98:	10000116 	blt	r2,zero,800aa0 <logic+0x7dc>
  800a9c:	0021883a 	mov	r16,zero
  800aa0:	8007883a 	mov	r3,r16
  800aa4:	e0bffd17 	ldw	r2,-12(fp)
  800aa8:	10c03b45 	stb	r3,237(r2)
  d->_g76 = d->_g70 && d->_cg71;
  800aac:	e0bffd17 	ldw	r2,-12(fp)
  800ab0:	10802043 	ldbu	r2,129(r2)
  800ab4:	10803fcc 	andi	r2,r2,255
  800ab8:	1080201c 	xori	r2,r2,128
  800abc:	10bfe004 	addi	r2,r2,-128
  800ac0:	10000826 	beq	r2,zero,800ae4 <logic+0x820>
  800ac4:	e0bffd17 	ldw	r2,-12(fp)
  800ac8:	10803b43 	ldbu	r2,237(r2)
  800acc:	10803fcc 	andi	r2,r2,255
  800ad0:	1080201c 	xori	r2,r2,128
  800ad4:	10bfe004 	addi	r2,r2,-128
  800ad8:	10000226 	beq	r2,zero,800ae4 <logic+0x820>
  800adc:	00800044 	movi	r2,1
  800ae0:	00000106 	br	800ae8 <logic+0x824>
  800ae4:	0005883a 	mov	r2,zero
  800ae8:	1007883a 	mov	r3,r2
  800aec:	e0bffd17 	ldw	r2,-12(fp)
  800af0:	10c02185 	stb	r3,134(r2)
  if (d->_g76) {
  800af4:	e0bffd17 	ldw	r2,-12(fp)
  800af8:	10802183 	ldbu	r2,134(r2)
  800afc:	10803fcc 	andi	r2,r2,255
  800b00:	1080201c 	xori	r2,r2,128
  800b04:	10bfe004 	addi	r2,r2,-128
  800b08:	10002a26 	beq	r2,zero,800bb4 <logic+0x8f0>
    d->sleepT = (d->sleepT < (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk)) ? d->sleepT : (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk);
  800b0c:	e0bffd17 	ldw	r2,-12(fp)
  800b10:	14000217 	ldw	r16,8(r2)
  800b14:	14400317 	ldw	r17,12(r2)
  800b18:	e13ffd17 	ldw	r4,-12(fp)
  800b1c:	20800d17 	ldw	r2,52(r4)
  800b20:	20c00e17 	ldw	r3,56(r4)
  800b24:	100d883a 	mov	r6,r2
  800b28:	180f883a 	mov	r7,r3
  800b2c:	0009883a 	mov	r4,zero
  800b30:	01501cf4 	movhi	r5,16499
  800b34:	296c0004 	addi	r5,r5,-20480
  800b38:	08070200 	call	807020 <__subdf3>
  800b3c:	1009883a 	mov	r4,r2
  800b40:	180b883a 	mov	r5,r3
  800b44:	2005883a 	mov	r2,r4
  800b48:	2807883a 	mov	r3,r5
  800b4c:	100d883a 	mov	r6,r2
  800b50:	180f883a 	mov	r7,r3
  800b54:	8009883a 	mov	r4,r16
  800b58:	880b883a 	mov	r5,r17
  800b5c:	0806f2c0 	call	806f2c <__ledf2>
  800b60:	1000040e 	bge	r2,zero,800b74 <logic+0x8b0>
  800b64:	e13ffd17 	ldw	r4,-12(fp)
  800b68:	20800217 	ldw	r2,8(r4)
  800b6c:	20c00317 	ldw	r3,12(r4)
  800b70:	00000d06 	br	800ba8 <logic+0x8e4>
  800b74:	e13ffd17 	ldw	r4,-12(fp)
  800b78:	20800d17 	ldw	r2,52(r4)
  800b7c:	20c00e17 	ldw	r3,56(r4)
  800b80:	100d883a 	mov	r6,r2
  800b84:	180f883a 	mov	r7,r3
  800b88:	0009883a 	mov	r4,zero
  800b8c:	01501cf4 	movhi	r5,16499
  800b90:	296c0004 	addi	r5,r5,-20480
  800b94:	08070200 	call	807020 <__subdf3>
  800b98:	1009883a 	mov	r4,r2
  800b9c:	180b883a 	mov	r5,r3
  800ba0:	2005883a 	mov	r2,r4
  800ba4:	2807883a 	mov	r3,r5
  800ba8:	e13ffd17 	ldw	r4,-12(fp)
  800bac:	20800215 	stw	r2,8(r4)
  800bb0:	20c00315 	stw	r3,12(r4)
  }
  d->_cg72 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  800bb4:	e0bffd17 	ldw	r2,-12(fp)
  800bb8:	10800b03 	ldbu	r2,44(r2)
  800bbc:	10803fcc 	andi	r2,r2,255
  800bc0:	1080201c 	xori	r2,r2,128
  800bc4:	10bfe004 	addi	r2,r2,-128
  800bc8:	1000121e 	bne	r2,zero,800c14 <logic+0x950>
  800bcc:	e0bffd17 	ldw	r2,-12(fp)
  800bd0:	10800b43 	ldbu	r2,45(r2)
  800bd4:	10803fcc 	andi	r2,r2,255
  800bd8:	1080201c 	xori	r2,r2,128
  800bdc:	10bfe004 	addi	r2,r2,-128
  800be0:	10000c1e 	bne	r2,zero,800c14 <logic+0x950>
  800be4:	e0bffd17 	ldw	r2,-12(fp)
  800be8:	10800b83 	ldbu	r2,46(r2)
  800bec:	10803fcc 	andi	r2,r2,255
  800bf0:	1080201c 	xori	r2,r2,128
  800bf4:	10bfe004 	addi	r2,r2,-128
  800bf8:	1000061e 	bne	r2,zero,800c14 <logic+0x950>
  800bfc:	e0bffd17 	ldw	r2,-12(fp)
  800c00:	10800bc3 	ldbu	r2,47(r2)
  800c04:	10803fcc 	andi	r2,r2,255
  800c08:	1080201c 	xori	r2,r2,128
  800c0c:	10bfe004 	addi	r2,r2,-128
  800c10:	10000226 	beq	r2,zero,800c1c <logic+0x958>
  800c14:	00800044 	movi	r2,1
  800c18:	00000106 	br	800c20 <logic+0x95c>
  800c1c:	0005883a 	mov	r2,zero
  800c20:	1007883a 	mov	r3,r2
  800c24:	e0bffd17 	ldw	r2,-12(fp)
  800c28:	10c03b05 	stb	r3,236(r2)
  d->_g71 = d->_g70 && !d->_cg71;
  800c2c:	e0bffd17 	ldw	r2,-12(fp)
  800c30:	10802043 	ldbu	r2,129(r2)
  800c34:	10803fcc 	andi	r2,r2,255
  800c38:	1080201c 	xori	r2,r2,128
  800c3c:	10bfe004 	addi	r2,r2,-128
  800c40:	10000826 	beq	r2,zero,800c64 <logic+0x9a0>
  800c44:	e0bffd17 	ldw	r2,-12(fp)
  800c48:	10803b43 	ldbu	r2,237(r2)
  800c4c:	10803fcc 	andi	r2,r2,255
  800c50:	1080201c 	xori	r2,r2,128
  800c54:	10bfe004 	addi	r2,r2,-128
  800c58:	1000021e 	bne	r2,zero,800c64 <logic+0x9a0>
  800c5c:	00800044 	movi	r2,1
  800c60:	00000106 	br	800c68 <logic+0x9a4>
  800c64:	0005883a 	mov	r2,zero
  800c68:	1007883a 	mov	r3,r2
  800c6c:	e0bffd17 	ldw	r2,-12(fp)
  800c70:	10c02085 	stb	r3,130(r2)
  d->_cg74 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  800c74:	e0bffd17 	ldw	r2,-12(fp)
  800c78:	10800b03 	ldbu	r2,44(r2)
  800c7c:	10803fcc 	andi	r2,r2,255
  800c80:	1080201c 	xori	r2,r2,128
  800c84:	10bfe004 	addi	r2,r2,-128
  800c88:	1000121e 	bne	r2,zero,800cd4 <logic+0xa10>
  800c8c:	e0bffd17 	ldw	r2,-12(fp)
  800c90:	10800b43 	ldbu	r2,45(r2)
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	1080201c 	xori	r2,r2,128
  800c9c:	10bfe004 	addi	r2,r2,-128
  800ca0:	10000c1e 	bne	r2,zero,800cd4 <logic+0xa10>
  800ca4:	e0bffd17 	ldw	r2,-12(fp)
  800ca8:	10800b83 	ldbu	r2,46(r2)
  800cac:	10803fcc 	andi	r2,r2,255
  800cb0:	1080201c 	xori	r2,r2,128
  800cb4:	10bfe004 	addi	r2,r2,-128
  800cb8:	1000061e 	bne	r2,zero,800cd4 <logic+0xa10>
  800cbc:	e0bffd17 	ldw	r2,-12(fp)
  800cc0:	10800bc3 	ldbu	r2,47(r2)
  800cc4:	10803fcc 	andi	r2,r2,255
  800cc8:	1080201c 	xori	r2,r2,128
  800ccc:	10bfe004 	addi	r2,r2,-128
  800cd0:	10000226 	beq	r2,zero,800cdc <logic+0xa18>
  800cd4:	00800044 	movi	r2,1
  800cd8:	00000106 	br	800ce0 <logic+0xa1c>
  800cdc:	0005883a 	mov	r2,zero
  800ce0:	1007883a 	mov	r3,r2
  800ce4:	e0bffd17 	ldw	r2,-12(fp)
  800ce8:	10c03b85 	stb	r3,238(r2)
  d->_g73 = (d->_g76 && d->_cg72) || (d->_g71 && d->_cg74);
  800cec:	e0bffd17 	ldw	r2,-12(fp)
  800cf0:	10802183 	ldbu	r2,134(r2)
  800cf4:	10803fcc 	andi	r2,r2,255
  800cf8:	1080201c 	xori	r2,r2,128
  800cfc:	10bfe004 	addi	r2,r2,-128
  800d00:	10000626 	beq	r2,zero,800d1c <logic+0xa58>
  800d04:	e0bffd17 	ldw	r2,-12(fp)
  800d08:	10803b03 	ldbu	r2,236(r2)
  800d0c:	10803fcc 	andi	r2,r2,255
  800d10:	1080201c 	xori	r2,r2,128
  800d14:	10bfe004 	addi	r2,r2,-128
  800d18:	10000c1e 	bne	r2,zero,800d4c <logic+0xa88>
  800d1c:	e0bffd17 	ldw	r2,-12(fp)
  800d20:	10802083 	ldbu	r2,130(r2)
  800d24:	10803fcc 	andi	r2,r2,255
  800d28:	1080201c 	xori	r2,r2,128
  800d2c:	10bfe004 	addi	r2,r2,-128
  800d30:	10000826 	beq	r2,zero,800d54 <logic+0xa90>
  800d34:	e0bffd17 	ldw	r2,-12(fp)
  800d38:	10803b83 	ldbu	r2,238(r2)
  800d3c:	10803fcc 	andi	r2,r2,255
  800d40:	1080201c 	xori	r2,r2,128
  800d44:	10bfe004 	addi	r2,r2,-128
  800d48:	10000226 	beq	r2,zero,800d54 <logic+0xa90>
  800d4c:	00800044 	movi	r2,1
  800d50:	00000106 	br	800d58 <logic+0xa94>
  800d54:	0005883a 	mov	r2,zero
  800d58:	1007883a 	mov	r3,r2
  800d5c:	e0bffd17 	ldw	r2,-12(fp)
  800d60:	10c02105 	stb	r3,132(r2)
  d->_g87 = d->_pg68;
  800d64:	e0bffd17 	ldw	r2,-12(fp)
  800d68:	10c05283 	ldbu	r3,330(r2)
  800d6c:	e0bffd17 	ldw	r2,-12(fp)
  800d70:	10c02385 	stb	r3,142(r2)
  d->_g81 = d->_pg104;
  800d74:	e0bffd17 	ldw	r2,-12(fp)
  800d78:	10c052c3 	ldbu	r3,331(r2)
  800d7c:	e0bffd17 	ldw	r2,-12(fp)
  800d80:	10c02245 	stb	r3,137(r2)
  d->_g84_e2 = !(d->_g87 || d->_g81);
  800d84:	e0bffd17 	ldw	r2,-12(fp)
  800d88:	10802383 	ldbu	r2,142(r2)
  800d8c:	10803fcc 	andi	r2,r2,255
  800d90:	1080201c 	xori	r2,r2,128
  800d94:	10bfe004 	addi	r2,r2,-128
  800d98:	1000081e 	bne	r2,zero,800dbc <logic+0xaf8>
  800d9c:	e0bffd17 	ldw	r2,-12(fp)
  800da0:	10802243 	ldbu	r2,137(r2)
  800da4:	10803fcc 	andi	r2,r2,255
  800da8:	1080201c 	xori	r2,r2,128
  800dac:	10bfe004 	addi	r2,r2,-128
  800db0:	1000021e 	bne	r2,zero,800dbc <logic+0xaf8>
  800db4:	00800044 	movi	r2,1
  800db8:	00000106 	br	800dc0 <logic+0xafc>
  800dbc:	0005883a 	mov	r2,zero
  800dc0:	1007883a 	mov	r3,r2
  800dc4:	e0bffd17 	ldw	r2,-12(fp)
  800dc8:	10c04c85 	stb	r3,306(r2)
  d->_g81 = d->_g81 || d->_g87;
  800dcc:	e0bffd17 	ldw	r2,-12(fp)
  800dd0:	10802243 	ldbu	r2,137(r2)
  800dd4:	10803fcc 	andi	r2,r2,255
  800dd8:	1080201c 	xori	r2,r2,128
  800ddc:	10bfe004 	addi	r2,r2,-128
  800de0:	1000061e 	bne	r2,zero,800dfc <logic+0xb38>
  800de4:	e0bffd17 	ldw	r2,-12(fp)
  800de8:	10802383 	ldbu	r2,142(r2)
  800dec:	10803fcc 	andi	r2,r2,255
  800df0:	1080201c 	xori	r2,r2,128
  800df4:	10bfe004 	addi	r2,r2,-128
  800df8:	10000226 	beq	r2,zero,800e04 <logic+0xb40>
  800dfc:	00800044 	movi	r2,1
  800e00:	00000106 	br	800e08 <logic+0xb44>
  800e04:	0005883a 	mov	r2,zero
  800e08:	1007883a 	mov	r3,r2
  800e0c:	e0bffd17 	ldw	r2,-12(fp)
  800e10:	10c02245 	stb	r3,137(r2)
  d->_cg82 = d->_PaceMaker_local_avi_clk < AVI_VALUE - 1;
  800e14:	e13ffd17 	ldw	r4,-12(fp)
  800e18:	20800d17 	ldw	r2,52(r4)
  800e1c:	20c00e17 	ldw	r3,56(r4)
  800e20:	04000044 	movi	r16,1
  800e24:	000d883a 	mov	r6,zero
  800e28:	01d01cf4 	movhi	r7,16499
  800e2c:	39ec0004 	addi	r7,r7,-20480
  800e30:	1009883a 	mov	r4,r2
  800e34:	180b883a 	mov	r5,r3
  800e38:	0806f2c0 	call	806f2c <__ledf2>
  800e3c:	10000116 	blt	r2,zero,800e44 <logic+0xb80>
  800e40:	0021883a 	mov	r16,zero
  800e44:	8007883a 	mov	r3,r16
  800e48:	e0bffd17 	ldw	r2,-12(fp)
  800e4c:	10c03cc5 	stb	r3,243(r2)
  d->_g87 = d->_g81 && d->_cg82;
  800e50:	e0bffd17 	ldw	r2,-12(fp)
  800e54:	10802243 	ldbu	r2,137(r2)
  800e58:	10803fcc 	andi	r2,r2,255
  800e5c:	1080201c 	xori	r2,r2,128
  800e60:	10bfe004 	addi	r2,r2,-128
  800e64:	10000826 	beq	r2,zero,800e88 <logic+0xbc4>
  800e68:	e0bffd17 	ldw	r2,-12(fp)
  800e6c:	10803cc3 	ldbu	r2,243(r2)
  800e70:	10803fcc 	andi	r2,r2,255
  800e74:	1080201c 	xori	r2,r2,128
  800e78:	10bfe004 	addi	r2,r2,-128
  800e7c:	10000226 	beq	r2,zero,800e88 <logic+0xbc4>
  800e80:	00800044 	movi	r2,1
  800e84:	00000106 	br	800e8c <logic+0xbc8>
  800e88:	0005883a 	mov	r2,zero
  800e8c:	1007883a 	mov	r3,r2
  800e90:	e0bffd17 	ldw	r2,-12(fp)
  800e94:	10c02385 	stb	r3,142(r2)
  if (d->_g87) {
  800e98:	e0bffd17 	ldw	r2,-12(fp)
  800e9c:	10802383 	ldbu	r2,142(r2)
  800ea0:	10803fcc 	andi	r2,r2,255
  800ea4:	1080201c 	xori	r2,r2,128
  800ea8:	10bfe004 	addi	r2,r2,-128
  800eac:	10002a26 	beq	r2,zero,800f58 <logic+0xc94>
    d->sleepT = (d->sleepT < (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk)) ? d->sleepT : (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk);
  800eb0:	e0bffd17 	ldw	r2,-12(fp)
  800eb4:	14000217 	ldw	r16,8(r2)
  800eb8:	14400317 	ldw	r17,12(r2)
  800ebc:	e13ffd17 	ldw	r4,-12(fp)
  800ec0:	20800d17 	ldw	r2,52(r4)
  800ec4:	20c00e17 	ldw	r3,56(r4)
  800ec8:	100d883a 	mov	r6,r2
  800ecc:	180f883a 	mov	r7,r3
  800ed0:	0009883a 	mov	r4,zero
  800ed4:	01501cf4 	movhi	r5,16499
  800ed8:	296c0004 	addi	r5,r5,-20480
  800edc:	08070200 	call	807020 <__subdf3>
  800ee0:	1009883a 	mov	r4,r2
  800ee4:	180b883a 	mov	r5,r3
  800ee8:	2005883a 	mov	r2,r4
  800eec:	2807883a 	mov	r3,r5
  800ef0:	100d883a 	mov	r6,r2
  800ef4:	180f883a 	mov	r7,r3
  800ef8:	8009883a 	mov	r4,r16
  800efc:	880b883a 	mov	r5,r17
  800f00:	0806f2c0 	call	806f2c <__ledf2>
  800f04:	1000040e 	bge	r2,zero,800f18 <logic+0xc54>
  800f08:	e13ffd17 	ldw	r4,-12(fp)
  800f0c:	20800217 	ldw	r2,8(r4)
  800f10:	20c00317 	ldw	r3,12(r4)
  800f14:	00000d06 	br	800f4c <logic+0xc88>
  800f18:	e13ffd17 	ldw	r4,-12(fp)
  800f1c:	20800d17 	ldw	r2,52(r4)
  800f20:	20c00e17 	ldw	r3,56(r4)
  800f24:	100d883a 	mov	r6,r2
  800f28:	180f883a 	mov	r7,r3
  800f2c:	0009883a 	mov	r4,zero
  800f30:	01501cf4 	movhi	r5,16499
  800f34:	296c0004 	addi	r5,r5,-20480
  800f38:	08070200 	call	807020 <__subdf3>
  800f3c:	1009883a 	mov	r4,r2
  800f40:	180b883a 	mov	r5,r3
  800f44:	2005883a 	mov	r2,r4
  800f48:	2807883a 	mov	r3,r5
  800f4c:	e13ffd17 	ldw	r4,-12(fp)
  800f50:	20800215 	stw	r2,8(r4)
  800f54:	20c00315 	stw	r3,12(r4)
  }
  d->_cg83 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  800f58:	e0bffd17 	ldw	r2,-12(fp)
  800f5c:	10800b03 	ldbu	r2,44(r2)
  800f60:	10803fcc 	andi	r2,r2,255
  800f64:	1080201c 	xori	r2,r2,128
  800f68:	10bfe004 	addi	r2,r2,-128
  800f6c:	1000121e 	bne	r2,zero,800fb8 <logic+0xcf4>
  800f70:	e0bffd17 	ldw	r2,-12(fp)
  800f74:	10800b43 	ldbu	r2,45(r2)
  800f78:	10803fcc 	andi	r2,r2,255
  800f7c:	1080201c 	xori	r2,r2,128
  800f80:	10bfe004 	addi	r2,r2,-128
  800f84:	10000c1e 	bne	r2,zero,800fb8 <logic+0xcf4>
  800f88:	e0bffd17 	ldw	r2,-12(fp)
  800f8c:	10800b83 	ldbu	r2,46(r2)
  800f90:	10803fcc 	andi	r2,r2,255
  800f94:	1080201c 	xori	r2,r2,128
  800f98:	10bfe004 	addi	r2,r2,-128
  800f9c:	1000061e 	bne	r2,zero,800fb8 <logic+0xcf4>
  800fa0:	e0bffd17 	ldw	r2,-12(fp)
  800fa4:	10800bc3 	ldbu	r2,47(r2)
  800fa8:	10803fcc 	andi	r2,r2,255
  800fac:	1080201c 	xori	r2,r2,128
  800fb0:	10bfe004 	addi	r2,r2,-128
  800fb4:	10000226 	beq	r2,zero,800fc0 <logic+0xcfc>
  800fb8:	00800044 	movi	r2,1
  800fbc:	00000106 	br	800fc4 <logic+0xd00>
  800fc0:	0005883a 	mov	r2,zero
  800fc4:	1007883a 	mov	r3,r2
  800fc8:	e0bffd17 	ldw	r2,-12(fp)
  800fcc:	10c03c85 	stb	r3,242(r2)
  d->_g82 = d->_g81 && !d->_cg82;
  800fd0:	e0bffd17 	ldw	r2,-12(fp)
  800fd4:	10802243 	ldbu	r2,137(r2)
  800fd8:	10803fcc 	andi	r2,r2,255
  800fdc:	1080201c 	xori	r2,r2,128
  800fe0:	10bfe004 	addi	r2,r2,-128
  800fe4:	10000826 	beq	r2,zero,801008 <logic+0xd44>
  800fe8:	e0bffd17 	ldw	r2,-12(fp)
  800fec:	10803cc3 	ldbu	r2,243(r2)
  800ff0:	10803fcc 	andi	r2,r2,255
  800ff4:	1080201c 	xori	r2,r2,128
  800ff8:	10bfe004 	addi	r2,r2,-128
  800ffc:	1000021e 	bne	r2,zero,801008 <logic+0xd44>
  801000:	00800044 	movi	r2,1
  801004:	00000106 	br	80100c <logic+0xd48>
  801008:	0005883a 	mov	r2,zero
  80100c:	1007883a 	mov	r3,r2
  801010:	e0bffd17 	ldw	r2,-12(fp)
  801014:	10c02285 	stb	r3,138(r2)
  d->_cg85 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  801018:	e0bffd17 	ldw	r2,-12(fp)
  80101c:	10800b03 	ldbu	r2,44(r2)
  801020:	10803fcc 	andi	r2,r2,255
  801024:	1080201c 	xori	r2,r2,128
  801028:	10bfe004 	addi	r2,r2,-128
  80102c:	1000121e 	bne	r2,zero,801078 <logic+0xdb4>
  801030:	e0bffd17 	ldw	r2,-12(fp)
  801034:	10800b43 	ldbu	r2,45(r2)
  801038:	10803fcc 	andi	r2,r2,255
  80103c:	1080201c 	xori	r2,r2,128
  801040:	10bfe004 	addi	r2,r2,-128
  801044:	10000c1e 	bne	r2,zero,801078 <logic+0xdb4>
  801048:	e0bffd17 	ldw	r2,-12(fp)
  80104c:	10800b83 	ldbu	r2,46(r2)
  801050:	10803fcc 	andi	r2,r2,255
  801054:	1080201c 	xori	r2,r2,128
  801058:	10bfe004 	addi	r2,r2,-128
  80105c:	1000061e 	bne	r2,zero,801078 <logic+0xdb4>
  801060:	e0bffd17 	ldw	r2,-12(fp)
  801064:	10800bc3 	ldbu	r2,47(r2)
  801068:	10803fcc 	andi	r2,r2,255
  80106c:	1080201c 	xori	r2,r2,128
  801070:	10bfe004 	addi	r2,r2,-128
  801074:	10000226 	beq	r2,zero,801080 <logic+0xdbc>
  801078:	00800044 	movi	r2,1
  80107c:	00000106 	br	801084 <logic+0xdc0>
  801080:	0005883a 	mov	r2,zero
  801084:	1007883a 	mov	r3,r2
  801088:	e0bffd17 	ldw	r2,-12(fp)
  80108c:	10c03d05 	stb	r3,244(r2)
  d->_g84 = (d->_g87 && d->_cg83) || (d->_g82 && d->_cg85);
  801090:	e0bffd17 	ldw	r2,-12(fp)
  801094:	10802383 	ldbu	r2,142(r2)
  801098:	10803fcc 	andi	r2,r2,255
  80109c:	1080201c 	xori	r2,r2,128
  8010a0:	10bfe004 	addi	r2,r2,-128
  8010a4:	10000626 	beq	r2,zero,8010c0 <logic+0xdfc>
  8010a8:	e0bffd17 	ldw	r2,-12(fp)
  8010ac:	10803c83 	ldbu	r2,242(r2)
  8010b0:	10803fcc 	andi	r2,r2,255
  8010b4:	1080201c 	xori	r2,r2,128
  8010b8:	10bfe004 	addi	r2,r2,-128
  8010bc:	10000c1e 	bne	r2,zero,8010f0 <logic+0xe2c>
  8010c0:	e0bffd17 	ldw	r2,-12(fp)
  8010c4:	10802283 	ldbu	r2,138(r2)
  8010c8:	10803fcc 	andi	r2,r2,255
  8010cc:	1080201c 	xori	r2,r2,128
  8010d0:	10bfe004 	addi	r2,r2,-128
  8010d4:	10000826 	beq	r2,zero,8010f8 <logic+0xe34>
  8010d8:	e0bffd17 	ldw	r2,-12(fp)
  8010dc:	10803d03 	ldbu	r2,244(r2)
  8010e0:	10803fcc 	andi	r2,r2,255
  8010e4:	1080201c 	xori	r2,r2,128
  8010e8:	10bfe004 	addi	r2,r2,-128
  8010ec:	10000226 	beq	r2,zero,8010f8 <logic+0xe34>
  8010f0:	00800044 	movi	r2,1
  8010f4:	00000106 	br	8010fc <logic+0xe38>
  8010f8:	0005883a 	mov	r2,zero
  8010fc:	1007883a 	mov	r3,r2
  801100:	e0bffd17 	ldw	r2,-12(fp)
  801104:	10c02305 	stb	r3,140(r2)
  d->_g92_e3 = !d->_g91;
  801108:	e0bffd17 	ldw	r2,-12(fp)
  80110c:	10802403 	ldbu	r2,144(r2)
  801110:	10803fcc 	andi	r2,r2,255
  801114:	1080201c 	xori	r2,r2,128
  801118:	10bfe004 	addi	r2,r2,-128
  80111c:	1005003a 	cmpeq	r2,r2,zero
  801120:	1007883a 	mov	r3,r2
  801124:	e0bffd17 	ldw	r2,-12(fp)
  801128:	10c04cc5 	stb	r3,307(r2)
  d->_cg91 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  80112c:	e0bffd17 	ldw	r2,-12(fp)
  801130:	10800b03 	ldbu	r2,44(r2)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	1000121e 	bne	r2,zero,80118c <logic+0xec8>
  801144:	e0bffd17 	ldw	r2,-12(fp)
  801148:	10800b43 	ldbu	r2,45(r2)
  80114c:	10803fcc 	andi	r2,r2,255
  801150:	1080201c 	xori	r2,r2,128
  801154:	10bfe004 	addi	r2,r2,-128
  801158:	10000c1e 	bne	r2,zero,80118c <logic+0xec8>
  80115c:	e0bffd17 	ldw	r2,-12(fp)
  801160:	10800b83 	ldbu	r2,46(r2)
  801164:	10803fcc 	andi	r2,r2,255
  801168:	1080201c 	xori	r2,r2,128
  80116c:	10bfe004 	addi	r2,r2,-128
  801170:	1000061e 	bne	r2,zero,80118c <logic+0xec8>
  801174:	e0bffd17 	ldw	r2,-12(fp)
  801178:	10800bc3 	ldbu	r2,47(r2)
  80117c:	10803fcc 	andi	r2,r2,255
  801180:	1080201c 	xori	r2,r2,128
  801184:	10bfe004 	addi	r2,r2,-128
  801188:	10000226 	beq	r2,zero,801194 <logic+0xed0>
  80118c:	00800044 	movi	r2,1
  801190:	00000106 	br	801198 <logic+0xed4>
  801194:	0005883a 	mov	r2,zero
  801198:	1007883a 	mov	r3,r2
  80119c:	e0bffd17 	ldw	r2,-12(fp)
  8011a0:	10c03dc5 	stb	r3,247(r2)
  d->_g92 = d->_g91 && d->_cg91;
  8011a4:	e0bffd17 	ldw	r2,-12(fp)
  8011a8:	10802403 	ldbu	r2,144(r2)
  8011ac:	10803fcc 	andi	r2,r2,255
  8011b0:	1080201c 	xori	r2,r2,128
  8011b4:	10bfe004 	addi	r2,r2,-128
  8011b8:	10000826 	beq	r2,zero,8011dc <logic+0xf18>
  8011bc:	e0bffd17 	ldw	r2,-12(fp)
  8011c0:	10803dc3 	ldbu	r2,247(r2)
  8011c4:	10803fcc 	andi	r2,r2,255
  8011c8:	1080201c 	xori	r2,r2,128
  8011cc:	10bfe004 	addi	r2,r2,-128
  8011d0:	10000226 	beq	r2,zero,8011dc <logic+0xf18>
  8011d4:	00800044 	movi	r2,1
  8011d8:	00000106 	br	8011e0 <logic+0xf1c>
  8011dc:	0005883a 	mov	r2,zero
  8011e0:	1007883a 	mov	r3,r2
  8011e4:	e0bffd17 	ldw	r2,-12(fp)
  8011e8:	10c02445 	stb	r3,145(r2)
  d->_g95 = !d->_g95;
  8011ec:	e0bffd17 	ldw	r2,-12(fp)
  8011f0:	10802483 	ldbu	r2,146(r2)
  8011f4:	10803fcc 	andi	r2,r2,255
  8011f8:	1080201c 	xori	r2,r2,128
  8011fc:	10bfe004 	addi	r2,r2,-128
  801200:	1005003a 	cmpeq	r2,r2,zero
  801204:	1007883a 	mov	r3,r2
  801208:	e0bffd17 	ldw	r2,-12(fp)
  80120c:	10c02485 	stb	r3,146(r2)
  d->_g101 = d->_g96 || d->_g99 || d->_g101 || d->_g103;
  801210:	e0bffd17 	ldw	r2,-12(fp)
  801214:	108024c3 	ldbu	r2,147(r2)
  801218:	10803fcc 	andi	r2,r2,255
  80121c:	1080201c 	xori	r2,r2,128
  801220:	10bfe004 	addi	r2,r2,-128
  801224:	1000121e 	bne	r2,zero,801270 <logic+0xfac>
  801228:	e0bffd17 	ldw	r2,-12(fp)
  80122c:	10802583 	ldbu	r2,150(r2)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1080201c 	xori	r2,r2,128
  801238:	10bfe004 	addi	r2,r2,-128
  80123c:	10000c1e 	bne	r2,zero,801270 <logic+0xfac>
  801240:	e0bffd17 	ldw	r2,-12(fp)
  801244:	10802603 	ldbu	r2,152(r2)
  801248:	10803fcc 	andi	r2,r2,255
  80124c:	1080201c 	xori	r2,r2,128
  801250:	10bfe004 	addi	r2,r2,-128
  801254:	1000061e 	bne	r2,zero,801270 <logic+0xfac>
  801258:	e0bffd17 	ldw	r2,-12(fp)
  80125c:	10802683 	ldbu	r2,154(r2)
  801260:	10803fcc 	andi	r2,r2,255
  801264:	1080201c 	xori	r2,r2,128
  801268:	10bfe004 	addi	r2,r2,-128
  80126c:	10000226 	beq	r2,zero,801278 <logic+0xfb4>
  801270:	00800044 	movi	r2,1
  801274:	00000106 	br	80127c <logic+0xfb8>
  801278:	0005883a 	mov	r2,zero
  80127c:	1007883a 	mov	r3,r2
  801280:	e0bffd17 	ldw	r2,-12(fp)
  801284:	10c02605 	stb	r3,152(r2)
  d->_g96 = (d->_g73_e1 || d->_g73) && (d->_g84_e2 || d->_g84) && (d->_g92_e3 || d->_g92) && (d->_g95 || d->_g101) && (d->_g73 || d->_g84 || d->_g92 || d->_g101);
  801288:	e0bffd17 	ldw	r2,-12(fp)
  80128c:	10804c43 	ldbu	r2,305(r2)
  801290:	10803fcc 	andi	r2,r2,255
  801294:	1080201c 	xori	r2,r2,128
  801298:	10bfe004 	addi	r2,r2,-128
  80129c:	1000061e 	bne	r2,zero,8012b8 <logic+0xff4>
  8012a0:	e0bffd17 	ldw	r2,-12(fp)
  8012a4:	10802103 	ldbu	r2,132(r2)
  8012a8:	10803fcc 	andi	r2,r2,255
  8012ac:	1080201c 	xori	r2,r2,128
  8012b0:	10bfe004 	addi	r2,r2,-128
  8012b4:	10003e26 	beq	r2,zero,8013b0 <logic+0x10ec>
  8012b8:	e0bffd17 	ldw	r2,-12(fp)
  8012bc:	10804c83 	ldbu	r2,306(r2)
  8012c0:	10803fcc 	andi	r2,r2,255
  8012c4:	1080201c 	xori	r2,r2,128
  8012c8:	10bfe004 	addi	r2,r2,-128
  8012cc:	1000061e 	bne	r2,zero,8012e8 <logic+0x1024>
  8012d0:	e0bffd17 	ldw	r2,-12(fp)
  8012d4:	10802303 	ldbu	r2,140(r2)
  8012d8:	10803fcc 	andi	r2,r2,255
  8012dc:	1080201c 	xori	r2,r2,128
  8012e0:	10bfe004 	addi	r2,r2,-128
  8012e4:	10003226 	beq	r2,zero,8013b0 <logic+0x10ec>
  8012e8:	e0bffd17 	ldw	r2,-12(fp)
  8012ec:	10804cc3 	ldbu	r2,307(r2)
  8012f0:	10803fcc 	andi	r2,r2,255
  8012f4:	1080201c 	xori	r2,r2,128
  8012f8:	10bfe004 	addi	r2,r2,-128
  8012fc:	1000061e 	bne	r2,zero,801318 <logic+0x1054>
  801300:	e0bffd17 	ldw	r2,-12(fp)
  801304:	10802443 	ldbu	r2,145(r2)
  801308:	10803fcc 	andi	r2,r2,255
  80130c:	1080201c 	xori	r2,r2,128
  801310:	10bfe004 	addi	r2,r2,-128
  801314:	10002626 	beq	r2,zero,8013b0 <logic+0x10ec>
  801318:	e0bffd17 	ldw	r2,-12(fp)
  80131c:	10802483 	ldbu	r2,146(r2)
  801320:	10803fcc 	andi	r2,r2,255
  801324:	1080201c 	xori	r2,r2,128
  801328:	10bfe004 	addi	r2,r2,-128
  80132c:	1000061e 	bne	r2,zero,801348 <logic+0x1084>
  801330:	e0bffd17 	ldw	r2,-12(fp)
  801334:	10802603 	ldbu	r2,152(r2)
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1080201c 	xori	r2,r2,128
  801340:	10bfe004 	addi	r2,r2,-128
  801344:	10001a26 	beq	r2,zero,8013b0 <logic+0x10ec>
  801348:	e0bffd17 	ldw	r2,-12(fp)
  80134c:	10802103 	ldbu	r2,132(r2)
  801350:	10803fcc 	andi	r2,r2,255
  801354:	1080201c 	xori	r2,r2,128
  801358:	10bfe004 	addi	r2,r2,-128
  80135c:	1000121e 	bne	r2,zero,8013a8 <logic+0x10e4>
  801360:	e0bffd17 	ldw	r2,-12(fp)
  801364:	10802303 	ldbu	r2,140(r2)
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	1080201c 	xori	r2,r2,128
  801370:	10bfe004 	addi	r2,r2,-128
  801374:	10000c1e 	bne	r2,zero,8013a8 <logic+0x10e4>
  801378:	e0bffd17 	ldw	r2,-12(fp)
  80137c:	10802443 	ldbu	r2,145(r2)
  801380:	10803fcc 	andi	r2,r2,255
  801384:	1080201c 	xori	r2,r2,128
  801388:	10bfe004 	addi	r2,r2,-128
  80138c:	1000061e 	bne	r2,zero,8013a8 <logic+0x10e4>
  801390:	e0bffd17 	ldw	r2,-12(fp)
  801394:	10802603 	ldbu	r2,152(r2)
  801398:	10803fcc 	andi	r2,r2,255
  80139c:	1080201c 	xori	r2,r2,128
  8013a0:	10bfe004 	addi	r2,r2,-128
  8013a4:	10000226 	beq	r2,zero,8013b0 <logic+0x10ec>
  8013a8:	00800044 	movi	r2,1
  8013ac:	00000106 	br	8013b4 <logic+0x10f0>
  8013b0:	0005883a 	mov	r2,zero
  8013b4:	1007883a 	mov	r3,r2
  8013b8:	e0bffd17 	ldw	r2,-12(fp)
  8013bc:	10c024c5 	stb	r3,147(r2)
  d->_cg104 = d->_PaceMaker_local__Atrig2;
  8013c0:	e0bffd17 	ldw	r2,-12(fp)
  8013c4:	10c00b03 	ldbu	r3,44(r2)
  8013c8:	e0bffd17 	ldw	r2,-12(fp)
  8013cc:	10c03a05 	stb	r3,232(r2)
  d->_g99 = d->_g96 && !d->_cg104;
  8013d0:	e0bffd17 	ldw	r2,-12(fp)
  8013d4:	108024c3 	ldbu	r2,147(r2)
  8013d8:	10803fcc 	andi	r2,r2,255
  8013dc:	1080201c 	xori	r2,r2,128
  8013e0:	10bfe004 	addi	r2,r2,-128
  8013e4:	10000826 	beq	r2,zero,801408 <logic+0x1144>
  8013e8:	e0bffd17 	ldw	r2,-12(fp)
  8013ec:	10803a03 	ldbu	r2,232(r2)
  8013f0:	10803fcc 	andi	r2,r2,255
  8013f4:	1080201c 	xori	r2,r2,128
  8013f8:	10bfe004 	addi	r2,r2,-128
  8013fc:	1000021e 	bne	r2,zero,801408 <logic+0x1144>
  801400:	00800044 	movi	r2,1
  801404:	00000106 	br	80140c <logic+0x1148>
  801408:	0005883a 	mov	r2,zero
  80140c:	1007883a 	mov	r3,r2
  801410:	e0bffd17 	ldw	r2,-12(fp)
  801414:	10c02585 	stb	r3,150(r2)
  d->_cg105 = d->_PaceMaker_local__Atrig3;
  801418:	e0bffd17 	ldw	r2,-12(fp)
  80141c:	10c00b43 	ldbu	r3,45(r2)
  801420:	e0bffd17 	ldw	r2,-12(fp)
  801424:	10c03f05 	stb	r3,252(r2)
  d->_g103 = d->_g99 && d->_cg105;
  801428:	e0bffd17 	ldw	r2,-12(fp)
  80142c:	10802583 	ldbu	r2,150(r2)
  801430:	10803fcc 	andi	r2,r2,255
  801434:	1080201c 	xori	r2,r2,128
  801438:	10bfe004 	addi	r2,r2,-128
  80143c:	10000826 	beq	r2,zero,801460 <logic+0x119c>
  801440:	e0bffd17 	ldw	r2,-12(fp)
  801444:	10803f03 	ldbu	r2,252(r2)
  801448:	10803fcc 	andi	r2,r2,255
  80144c:	1080201c 	xori	r2,r2,128
  801450:	10bfe004 	addi	r2,r2,-128
  801454:	10000226 	beq	r2,zero,801460 <logic+0x119c>
  801458:	00800044 	movi	r2,1
  80145c:	00000106 	br	801464 <logic+0x11a0>
  801460:	0005883a 	mov	r2,zero
  801464:	1007883a 	mov	r3,r2
  801468:	e0bffd17 	ldw	r2,-12(fp)
  80146c:	10c02685 	stb	r3,154(r2)
  if (d->_g103) {
  801470:	e0bffd17 	ldw	r2,-12(fp)
  801474:	10802683 	ldbu	r2,154(r2)
  801478:	10803fcc 	andi	r2,r2,255
  80147c:	1080201c 	xori	r2,r2,128
  801480:	10bfe004 	addi	r2,r2,-128
  801484:	10000626 	beq	r2,zero,8014a0 <logic+0x11dc>
    d->VP |= 1;
  801488:	e0bffd17 	ldw	r2,-12(fp)
  80148c:	108004c3 	ldbu	r2,19(r2)
  801490:	10800054 	ori	r2,r2,1
  801494:	1007883a 	mov	r3,r2
  801498:	e0bffd17 	ldw	r2,-12(fp)
  80149c:	10c004c5 	stb	r3,19(r2)
  }
  d->_g92_e3 = d->_g99 && !d->_cg105;
  8014a0:	e0bffd17 	ldw	r2,-12(fp)
  8014a4:	10802583 	ldbu	r2,150(r2)
  8014a8:	10803fcc 	andi	r2,r2,255
  8014ac:	1080201c 	xori	r2,r2,128
  8014b0:	10bfe004 	addi	r2,r2,-128
  8014b4:	10000826 	beq	r2,zero,8014d8 <logic+0x1214>
  8014b8:	e0bffd17 	ldw	r2,-12(fp)
  8014bc:	10803f03 	ldbu	r2,252(r2)
  8014c0:	10803fcc 	andi	r2,r2,255
  8014c4:	1080201c 	xori	r2,r2,128
  8014c8:	10bfe004 	addi	r2,r2,-128
  8014cc:	1000021e 	bne	r2,zero,8014d8 <logic+0x1214>
  8014d0:	00800044 	movi	r2,1
  8014d4:	00000106 	br	8014dc <logic+0x1218>
  8014d8:	0005883a 	mov	r2,zero
  8014dc:	1007883a 	mov	r3,r2
  8014e0:	e0bffd17 	ldw	r2,-12(fp)
  8014e4:	10c04cc5 	stb	r3,307(r2)
  d->_cg107 = d->_PaceMaker_local__Atrig4;
  8014e8:	e0bffd17 	ldw	r2,-12(fp)
  8014ec:	10c00b83 	ldbu	r3,46(r2)
  8014f0:	e0bffd17 	ldw	r2,-12(fp)
  8014f4:	10c03f45 	stb	r3,253(r2)
  d->_g73_e1 = d->_g92_e3 && !d->_cg107;
  8014f8:	e0bffd17 	ldw	r2,-12(fp)
  8014fc:	10804cc3 	ldbu	r2,307(r2)
  801500:	10803fcc 	andi	r2,r2,255
  801504:	1080201c 	xori	r2,r2,128
  801508:	10bfe004 	addi	r2,r2,-128
  80150c:	10000826 	beq	r2,zero,801530 <logic+0x126c>
  801510:	e0bffd17 	ldw	r2,-12(fp)
  801514:	10803f43 	ldbu	r2,253(r2)
  801518:	10803fcc 	andi	r2,r2,255
  80151c:	1080201c 	xori	r2,r2,128
  801520:	10bfe004 	addi	r2,r2,-128
  801524:	1000021e 	bne	r2,zero,801530 <logic+0x126c>
  801528:	00800044 	movi	r2,1
  80152c:	00000106 	br	801534 <logic+0x1270>
  801530:	0005883a 	mov	r2,zero
  801534:	1007883a 	mov	r3,r2
  801538:	e0bffd17 	ldw	r2,-12(fp)
  80153c:	10c04c45 	stb	r3,305(r2)
  if (d->_g73_e1) {
  801540:	e0bffd17 	ldw	r2,-12(fp)
  801544:	10804c43 	ldbu	r2,305(r2)
  801548:	10803fcc 	andi	r2,r2,255
  80154c:	1080201c 	xori	r2,r2,128
  801550:	10bfe004 	addi	r2,r2,-128
  801554:	10000626 	beq	r2,zero,801570 <logic+0x12ac>
    d->VP |= 1;
  801558:	e0bffd17 	ldw	r2,-12(fp)
  80155c:	108004c3 	ldbu	r2,19(r2)
  801560:	10800054 	ori	r2,r2,1
  801564:	1007883a 	mov	r3,r2
  801568:	e0bffd17 	ldw	r2,-12(fp)
  80156c:	10c004c5 	stb	r3,19(r2)
  }
  d->_g97_e4 = d->_pg29_e4;
  801570:	e0bffd17 	ldw	r2,-12(fp)
  801574:	10c05303 	ldbu	r3,332(r2)
  801578:	e0bffd17 	ldw	r2,-12(fp)
  80157c:	10c04d05 	stb	r3,308(r2)
  d->_cg5 = d->VS || d->VP;
  801580:	e0bffd17 	ldw	r2,-12(fp)
  801584:	10800443 	ldbu	r2,17(r2)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	1080201c 	xori	r2,r2,128
  801590:	10bfe004 	addi	r2,r2,-128
  801594:	1000061e 	bne	r2,zero,8015b0 <logic+0x12ec>
  801598:	e0bffd17 	ldw	r2,-12(fp)
  80159c:	108004c3 	ldbu	r2,19(r2)
  8015a0:	10803fcc 	andi	r2,r2,255
  8015a4:	1080201c 	xori	r2,r2,128
  8015a8:	10bfe004 	addi	r2,r2,-128
  8015ac:	10000226 	beq	r2,zero,8015b8 <logic+0x12f4>
  8015b0:	00800044 	movi	r2,1
  8015b4:	00000106 	br	8015bc <logic+0x12f8>
  8015b8:	0005883a 	mov	r2,zero
  8015bc:	1007883a 	mov	r3,r2
  8015c0:	e0bffd17 	ldw	r2,-12(fp)
  8015c4:	10c03685 	stb	r3,218(r2)
  d->_g84 = d->_g97_e4 && d->_cg5;
  8015c8:	e0bffd17 	ldw	r2,-12(fp)
  8015cc:	10804d03 	ldbu	r2,308(r2)
  8015d0:	10803fcc 	andi	r2,r2,255
  8015d4:	1080201c 	xori	r2,r2,128
  8015d8:	10bfe004 	addi	r2,r2,-128
  8015dc:	10000826 	beq	r2,zero,801600 <logic+0x133c>
  8015e0:	e0bffd17 	ldw	r2,-12(fp)
  8015e4:	10803683 	ldbu	r2,218(r2)
  8015e8:	10803fcc 	andi	r2,r2,255
  8015ec:	1080201c 	xori	r2,r2,128
  8015f0:	10bfe004 	addi	r2,r2,-128
  8015f4:	10000226 	beq	r2,zero,801600 <logic+0x133c>
  8015f8:	00800044 	movi	r2,1
  8015fc:	00000106 	br	801604 <logic+0x1340>
  801600:	0005883a 	mov	r2,zero
  801604:	1007883a 	mov	r3,r2
  801608:	e0bffd17 	ldw	r2,-12(fp)
  80160c:	10c02305 	stb	r3,140(r2)
  if (d->_g84) {
  801610:	e0bffd17 	ldw	r2,-12(fp)
  801614:	10802303 	ldbu	r2,140(r2)
  801618:	10803fcc 	andi	r2,r2,255
  80161c:	1080201c 	xori	r2,r2,128
  801620:	10bfe004 	addi	r2,r2,-128
  801624:	10000526 	beq	r2,zero,80163c <logic+0x1378>
    d->_PaceMaker_local_vrp_clk = 0.0;
  801628:	e0bffd17 	ldw	r2,-12(fp)
  80162c:	10000715 	stw	zero,28(r2)
  801630:	10000815 	stw	zero,32(r2)
    d->_PaceMaker_local__Atrig = 0;
  801634:	e0bffd17 	ldw	r2,-12(fp)
  801638:	10000605 	stb	zero,24(r2)
  }
  d->_g73 = d->_pg97;
  80163c:	e0bffd17 	ldw	r2,-12(fp)
  801640:	10c05343 	ldbu	r3,333(r2)
  801644:	e0bffd17 	ldw	r2,-12(fp)
  801648:	10c02105 	stb	r3,132(r2)
  if (d->_g73) {
  80164c:	e0bffd17 	ldw	r2,-12(fp)
  801650:	10802103 	ldbu	r2,132(r2)
  801654:	10803fcc 	andi	r2,r2,255
  801658:	1080201c 	xori	r2,r2,128
  80165c:	10bfe004 	addi	r2,r2,-128
  801660:	10000626 	beq	r2,zero,80167c <logic+0x13b8>
    d->ignore_VEvent |= 1;
  801664:	e0bffd17 	ldw	r2,-12(fp)
  801668:	10800543 	ldbu	r2,21(r2)
  80166c:	10800054 	ori	r2,r2,1
  801670:	1007883a 	mov	r3,r2
  801674:	e0bffd17 	ldw	r2,-12(fp)
  801678:	10c00545 	stb	r3,21(r2)
  }
  d->_g84_e2 = d->_g84 || d->_g73;
  80167c:	e0bffd17 	ldw	r2,-12(fp)
  801680:	10802303 	ldbu	r2,140(r2)
  801684:	10803fcc 	andi	r2,r2,255
  801688:	1080201c 	xori	r2,r2,128
  80168c:	10bfe004 	addi	r2,r2,-128
  801690:	1000061e 	bne	r2,zero,8016ac <logic+0x13e8>
  801694:	e0bffd17 	ldw	r2,-12(fp)
  801698:	10802103 	ldbu	r2,132(r2)
  80169c:	10803fcc 	andi	r2,r2,255
  8016a0:	1080201c 	xori	r2,r2,128
  8016a4:	10bfe004 	addi	r2,r2,-128
  8016a8:	10000226 	beq	r2,zero,8016b4 <logic+0x13f0>
  8016ac:	00800044 	movi	r2,1
  8016b0:	00000106 	br	8016b8 <logic+0x13f4>
  8016b4:	0005883a 	mov	r2,zero
  8016b8:	1007883a 	mov	r3,r2
  8016bc:	e0bffd17 	ldw	r2,-12(fp)
  8016c0:	10c04c85 	stb	r3,306(r2)
  d->_cg8 = d->_PaceMaker_local__Atrig;
  8016c4:	e0bffd17 	ldw	r2,-12(fp)
  8016c8:	10c00603 	ldbu	r3,24(r2)
  8016cc:	e0bffd17 	ldw	r2,-12(fp)
  8016d0:	10c036c5 	stb	r3,219(r2)
  d->_g97 = d->_g84_e2 && !d->_cg8;
  8016d4:	e0bffd17 	ldw	r2,-12(fp)
  8016d8:	10804c83 	ldbu	r2,306(r2)
  8016dc:	10803fcc 	andi	r2,r2,255
  8016e0:	1080201c 	xori	r2,r2,128
  8016e4:	10bfe004 	addi	r2,r2,-128
  8016e8:	10000826 	beq	r2,zero,80170c <logic+0x1448>
  8016ec:	e0bffd17 	ldw	r2,-12(fp)
  8016f0:	108036c3 	ldbu	r2,219(r2)
  8016f4:	10803fcc 	andi	r2,r2,255
  8016f8:	1080201c 	xori	r2,r2,128
  8016fc:	10bfe004 	addi	r2,r2,-128
  801700:	1000021e 	bne	r2,zero,80170c <logic+0x1448>
  801704:	00800044 	movi	r2,1
  801708:	00000106 	br	801710 <logic+0x144c>
  80170c:	0005883a 	mov	r2,zero
  801710:	1007883a 	mov	r3,r2
  801714:	e0bffd17 	ldw	r2,-12(fp)
  801718:	10c02505 	stb	r3,148(r2)
  d->_g92 = !d->_g97;
  80171c:	e0bffd17 	ldw	r2,-12(fp)
  801720:	10802503 	ldbu	r2,148(r2)
  801724:	10803fcc 	andi	r2,r2,255
  801728:	1080201c 	xori	r2,r2,128
  80172c:	10bfe004 	addi	r2,r2,-128
  801730:	1005003a 	cmpeq	r2,r2,zero
  801734:	1007883a 	mov	r3,r2
  801738:	e0bffd17 	ldw	r2,-12(fp)
  80173c:	10c02445 	stb	r3,145(r2)
  d->_g105 = d->_g84_e2 && d->_cg8;
  801740:	e0bffd17 	ldw	r2,-12(fp)
  801744:	10804c83 	ldbu	r2,306(r2)
  801748:	10803fcc 	andi	r2,r2,255
  80174c:	1080201c 	xori	r2,r2,128
  801750:	10bfe004 	addi	r2,r2,-128
  801754:	10000826 	beq	r2,zero,801778 <logic+0x14b4>
  801758:	e0bffd17 	ldw	r2,-12(fp)
  80175c:	108036c3 	ldbu	r2,219(r2)
  801760:	10803fcc 	andi	r2,r2,255
  801764:	1080201c 	xori	r2,r2,128
  801768:	10bfe004 	addi	r2,r2,-128
  80176c:	10000226 	beq	r2,zero,801778 <logic+0x14b4>
  801770:	00800044 	movi	r2,1
  801774:	00000106 	br	80177c <logic+0x14b8>
  801778:	0005883a 	mov	r2,zero
  80177c:	1007883a 	mov	r3,r2
  801780:	e0bffd17 	ldw	r2,-12(fp)
  801784:	10c02705 	stb	r3,156(r2)
  d->_g11 = d->_pg16;
  801788:	e0bffd17 	ldw	r2,-12(fp)
  80178c:	10c05383 	ldbu	r3,334(r2)
  801790:	e0bffd17 	ldw	r2,-12(fp)
  801794:	10c01705 	stb	r3,92(r2)
  d->_g8 = d->_pg19;
  801798:	e0bffd17 	ldw	r2,-12(fp)
  80179c:	10c053c3 	ldbu	r3,335(r2)
  8017a0:	e0bffd17 	ldw	r2,-12(fp)
  8017a4:	10c01685 	stb	r3,90(r2)
  d->_g20 = d->_g84 || d->_g11 || d->_g8;
  8017a8:	e0bffd17 	ldw	r2,-12(fp)
  8017ac:	10802303 	ldbu	r2,140(r2)
  8017b0:	10803fcc 	andi	r2,r2,255
  8017b4:	1080201c 	xori	r2,r2,128
  8017b8:	10bfe004 	addi	r2,r2,-128
  8017bc:	10000c1e 	bne	r2,zero,8017f0 <logic+0x152c>
  8017c0:	e0bffd17 	ldw	r2,-12(fp)
  8017c4:	10801703 	ldbu	r2,92(r2)
  8017c8:	10803fcc 	andi	r2,r2,255
  8017cc:	1080201c 	xori	r2,r2,128
  8017d0:	10bfe004 	addi	r2,r2,-128
  8017d4:	1000061e 	bne	r2,zero,8017f0 <logic+0x152c>
  8017d8:	e0bffd17 	ldw	r2,-12(fp)
  8017dc:	10801683 	ldbu	r2,90(r2)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1080201c 	xori	r2,r2,128
  8017e8:	10bfe004 	addi	r2,r2,-128
  8017ec:	10000226 	beq	r2,zero,8017f8 <logic+0x1534>
  8017f0:	00800044 	movi	r2,1
  8017f4:	00000106 	br	8017fc <logic+0x1538>
  8017f8:	0005883a 	mov	r2,zero
  8017fc:	1007883a 	mov	r3,r2
  801800:	e0bffd17 	ldw	r2,-12(fp)
  801804:	10c01905 	stb	r3,100(r2)
  d->_cg13 = d->_PaceMaker_local_vrp_clk < VRP_VALUE;
  801808:	e13ffd17 	ldw	r4,-12(fp)
  80180c:	20800717 	ldw	r2,28(r4)
  801810:	20c00817 	ldw	r3,32(r4)
  801814:	04000044 	movi	r16,1
  801818:	000d883a 	mov	r6,zero
  80181c:	01d018f4 	movhi	r7,16483
  801820:	39f00004 	addi	r7,r7,-16384
  801824:	1009883a 	mov	r4,r2
  801828:	180b883a 	mov	r5,r3
  80182c:	0806f2c0 	call	806f2c <__ledf2>
  801830:	10000116 	blt	r2,zero,801838 <logic+0x1574>
  801834:	0021883a 	mov	r16,zero
  801838:	8007883a 	mov	r3,r16
  80183c:	e0bffd17 	ldw	r2,-12(fp)
  801840:	10c03705 	stb	r3,220(r2)
  d->_g17 = d->_g20 && !d->_cg13;
  801844:	e0bffd17 	ldw	r2,-12(fp)
  801848:	10801903 	ldbu	r2,100(r2)
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1080201c 	xori	r2,r2,128
  801854:	10bfe004 	addi	r2,r2,-128
  801858:	10000826 	beq	r2,zero,80187c <logic+0x15b8>
  80185c:	e0bffd17 	ldw	r2,-12(fp)
  801860:	10803703 	ldbu	r2,220(r2)
  801864:	10803fcc 	andi	r2,r2,255
  801868:	1080201c 	xori	r2,r2,128
  80186c:	10bfe004 	addi	r2,r2,-128
  801870:	1000021e 	bne	r2,zero,80187c <logic+0x15b8>
  801874:	00800044 	movi	r2,1
  801878:	00000106 	br	801880 <logic+0x15bc>
  80187c:	0005883a 	mov	r2,zero
  801880:	1007883a 	mov	r3,r2
  801884:	e0bffd17 	ldw	r2,-12(fp)
  801888:	10c01845 	stb	r3,97(r2)
  d->_cg18 = d->_PaceMaker_local__Atrig;
  80188c:	e0bffd17 	ldw	r2,-12(fp)
  801890:	10c00603 	ldbu	r3,24(r2)
  801894:	e0bffd17 	ldw	r2,-12(fp)
  801898:	10c03785 	stb	r3,222(r2)
  d->_g19 = d->_g17 && !d->_cg18;
  80189c:	e0bffd17 	ldw	r2,-12(fp)
  8018a0:	10801843 	ldbu	r2,97(r2)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	1080201c 	xori	r2,r2,128
  8018ac:	10bfe004 	addi	r2,r2,-128
  8018b0:	10000826 	beq	r2,zero,8018d4 <logic+0x1610>
  8018b4:	e0bffd17 	ldw	r2,-12(fp)
  8018b8:	10803783 	ldbu	r2,222(r2)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1080201c 	xori	r2,r2,128
  8018c4:	10bfe004 	addi	r2,r2,-128
  8018c8:	1000021e 	bne	r2,zero,8018d4 <logic+0x1610>
  8018cc:	00800044 	movi	r2,1
  8018d0:	00000106 	br	8018d8 <logic+0x1614>
  8018d4:	0005883a 	mov	r2,zero
  8018d8:	1007883a 	mov	r3,r2
  8018dc:	e0bffd17 	ldw	r2,-12(fp)
  8018e0:	10c018c5 	stb	r3,99(r2)
  d->_g13 = d->_g20 && d->_cg13;
  8018e4:	e0bffd17 	ldw	r2,-12(fp)
  8018e8:	10801903 	ldbu	r2,100(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	1080201c 	xori	r2,r2,128
  8018f4:	10bfe004 	addi	r2,r2,-128
  8018f8:	10000826 	beq	r2,zero,80191c <logic+0x1658>
  8018fc:	e0bffd17 	ldw	r2,-12(fp)
  801900:	10803703 	ldbu	r2,220(r2)
  801904:	10803fcc 	andi	r2,r2,255
  801908:	1080201c 	xori	r2,r2,128
  80190c:	10bfe004 	addi	r2,r2,-128
  801910:	10000226 	beq	r2,zero,80191c <logic+0x1658>
  801914:	00800044 	movi	r2,1
  801918:	00000106 	br	801920 <logic+0x165c>
  80191c:	0005883a 	mov	r2,zero
  801920:	1007883a 	mov	r3,r2
  801924:	e0bffd17 	ldw	r2,-12(fp)
  801928:	10c01745 	stb	r3,93(r2)
  if (d->_g13) {
  80192c:	e0bffd17 	ldw	r2,-12(fp)
  801930:	10801743 	ldbu	r2,93(r2)
  801934:	10803fcc 	andi	r2,r2,255
  801938:	1080201c 	xori	r2,r2,128
  80193c:	10bfe004 	addi	r2,r2,-128
  801940:	10002a26 	beq	r2,zero,8019ec <logic+0x1728>
    d->sleepT = (d->sleepT < (VRP_VALUE - d->_PaceMaker_local_vrp_clk)) ? d->sleepT : (VRP_VALUE - d->_PaceMaker_local_vrp_clk);
  801944:	e0bffd17 	ldw	r2,-12(fp)
  801948:	14000217 	ldw	r16,8(r2)
  80194c:	14400317 	ldw	r17,12(r2)
  801950:	e13ffd17 	ldw	r4,-12(fp)
  801954:	20800717 	ldw	r2,28(r4)
  801958:	20c00817 	ldw	r3,32(r4)
  80195c:	100d883a 	mov	r6,r2
  801960:	180f883a 	mov	r7,r3
  801964:	0009883a 	mov	r4,zero
  801968:	015018f4 	movhi	r5,16483
  80196c:	29700004 	addi	r5,r5,-16384
  801970:	08070200 	call	807020 <__subdf3>
  801974:	1009883a 	mov	r4,r2
  801978:	180b883a 	mov	r5,r3
  80197c:	2005883a 	mov	r2,r4
  801980:	2807883a 	mov	r3,r5
  801984:	100d883a 	mov	r6,r2
  801988:	180f883a 	mov	r7,r3
  80198c:	8009883a 	mov	r4,r16
  801990:	880b883a 	mov	r5,r17
  801994:	0806f2c0 	call	806f2c <__ledf2>
  801998:	1000040e 	bge	r2,zero,8019ac <logic+0x16e8>
  80199c:	e13ffd17 	ldw	r4,-12(fp)
  8019a0:	20800217 	ldw	r2,8(r4)
  8019a4:	20c00317 	ldw	r3,12(r4)
  8019a8:	00000d06 	br	8019e0 <logic+0x171c>
  8019ac:	e13ffd17 	ldw	r4,-12(fp)
  8019b0:	20800717 	ldw	r2,28(r4)
  8019b4:	20c00817 	ldw	r3,32(r4)
  8019b8:	100d883a 	mov	r6,r2
  8019bc:	180f883a 	mov	r7,r3
  8019c0:	0009883a 	mov	r4,zero
  8019c4:	015018f4 	movhi	r5,16483
  8019c8:	29700004 	addi	r5,r5,-16384
  8019cc:	08070200 	call	807020 <__subdf3>
  8019d0:	1009883a 	mov	r4,r2
  8019d4:	180b883a 	mov	r5,r3
  8019d8:	2005883a 	mov	r2,r4
  8019dc:	2807883a 	mov	r3,r5
  8019e0:	e13ffd17 	ldw	r4,-12(fp)
  8019e4:	20800215 	stw	r2,8(r4)
  8019e8:	20c00315 	stw	r3,12(r4)
  }
  d->_cg14 = d->_PaceMaker_local__Atrig;
  8019ec:	e0bffd17 	ldw	r2,-12(fp)
  8019f0:	10c00603 	ldbu	r3,24(r2)
  8019f4:	e0bffd17 	ldw	r2,-12(fp)
  8019f8:	10c03745 	stb	r3,221(r2)
  d->_g16 = d->_g13 && !d->_cg14;
  8019fc:	e0bffd17 	ldw	r2,-12(fp)
  801a00:	10801743 	ldbu	r2,93(r2)
  801a04:	10803fcc 	andi	r2,r2,255
  801a08:	1080201c 	xori	r2,r2,128
  801a0c:	10bfe004 	addi	r2,r2,-128
  801a10:	10000826 	beq	r2,zero,801a34 <logic+0x1770>
  801a14:	e0bffd17 	ldw	r2,-12(fp)
  801a18:	10803743 	ldbu	r2,221(r2)
  801a1c:	10803fcc 	andi	r2,r2,255
  801a20:	1080201c 	xori	r2,r2,128
  801a24:	10bfe004 	addi	r2,r2,-128
  801a28:	1000021e 	bne	r2,zero,801a34 <logic+0x1770>
  801a2c:	00800044 	movi	r2,1
  801a30:	00000106 	br	801a38 <logic+0x1774>
  801a34:	0005883a 	mov	r2,zero
  801a38:	1007883a 	mov	r3,r2
  801a3c:	e0bffd17 	ldw	r2,-12(fp)
  801a40:	10c01805 	stb	r3,96(r2)
  d->_g15_e2 = !(d->_g19 || d->_g16);
  801a44:	e0bffd17 	ldw	r2,-12(fp)
  801a48:	108018c3 	ldbu	r2,99(r2)
  801a4c:	10803fcc 	andi	r2,r2,255
  801a50:	1080201c 	xori	r2,r2,128
  801a54:	10bfe004 	addi	r2,r2,-128
  801a58:	1000081e 	bne	r2,zero,801a7c <logic+0x17b8>
  801a5c:	e0bffd17 	ldw	r2,-12(fp)
  801a60:	10801803 	ldbu	r2,96(r2)
  801a64:	10803fcc 	andi	r2,r2,255
  801a68:	1080201c 	xori	r2,r2,128
  801a6c:	10bfe004 	addi	r2,r2,-128
  801a70:	1000021e 	bne	r2,zero,801a7c <logic+0x17b8>
  801a74:	00800044 	movi	r2,1
  801a78:	00000106 	br	801a80 <logic+0x17bc>
  801a7c:	0005883a 	mov	r2,zero
  801a80:	1007883a 	mov	r3,r2
  801a84:	e0bffd17 	ldw	r2,-12(fp)
  801a88:	10c04a85 	stb	r3,298(r2)
  d->_g18 = (d->_g13 && d->_cg14) || (d->_g17 && d->_cg18);
  801a8c:	e0bffd17 	ldw	r2,-12(fp)
  801a90:	10801743 	ldbu	r2,93(r2)
  801a94:	10803fcc 	andi	r2,r2,255
  801a98:	1080201c 	xori	r2,r2,128
  801a9c:	10bfe004 	addi	r2,r2,-128
  801aa0:	10000626 	beq	r2,zero,801abc <logic+0x17f8>
  801aa4:	e0bffd17 	ldw	r2,-12(fp)
  801aa8:	10803743 	ldbu	r2,221(r2)
  801aac:	10803fcc 	andi	r2,r2,255
  801ab0:	1080201c 	xori	r2,r2,128
  801ab4:	10bfe004 	addi	r2,r2,-128
  801ab8:	10000c1e 	bne	r2,zero,801aec <logic+0x1828>
  801abc:	e0bffd17 	ldw	r2,-12(fp)
  801ac0:	10801843 	ldbu	r2,97(r2)
  801ac4:	10803fcc 	andi	r2,r2,255
  801ac8:	1080201c 	xori	r2,r2,128
  801acc:	10bfe004 	addi	r2,r2,-128
  801ad0:	10000826 	beq	r2,zero,801af4 <logic+0x1830>
  801ad4:	e0bffd17 	ldw	r2,-12(fp)
  801ad8:	10803783 	ldbu	r2,222(r2)
  801adc:	10803fcc 	andi	r2,r2,255
  801ae0:	1080201c 	xori	r2,r2,128
  801ae4:	10bfe004 	addi	r2,r2,-128
  801ae8:	10000226 	beq	r2,zero,801af4 <logic+0x1830>
  801aec:	00800044 	movi	r2,1
  801af0:	00000106 	br	801af8 <logic+0x1834>
  801af4:	0005883a 	mov	r2,zero
  801af8:	1007883a 	mov	r3,r2
  801afc:	e0bffd17 	ldw	r2,-12(fp)
  801b00:	10c01885 	stb	r3,98(r2)
  d->_g14 = d->_g84 || d->_g25;
  801b04:	e0bffd17 	ldw	r2,-12(fp)
  801b08:	10802303 	ldbu	r2,140(r2)
  801b0c:	10803fcc 	andi	r2,r2,255
  801b10:	1080201c 	xori	r2,r2,128
  801b14:	10bfe004 	addi	r2,r2,-128
  801b18:	1000061e 	bne	r2,zero,801b34 <logic+0x1870>
  801b1c:	e0bffd17 	ldw	r2,-12(fp)
  801b20:	108019c3 	ldbu	r2,103(r2)
  801b24:	10803fcc 	andi	r2,r2,255
  801b28:	1080201c 	xori	r2,r2,128
  801b2c:	10bfe004 	addi	r2,r2,-128
  801b30:	10000226 	beq	r2,zero,801b3c <logic+0x1878>
  801b34:	00800044 	movi	r2,1
  801b38:	00000106 	br	801b40 <logic+0x187c>
  801b3c:	0005883a 	mov	r2,zero
  801b40:	1007883a 	mov	r3,r2
  801b44:	e0bffd17 	ldw	r2,-12(fp)
  801b48:	10c01785 	stb	r3,94(r2)
  d->_cg22 = d->_PaceMaker_local__Atrig;
  801b4c:	e0bffd17 	ldw	r2,-12(fp)
  801b50:	10c00603 	ldbu	r3,24(r2)
  801b54:	e0bffd17 	ldw	r2,-12(fp)
  801b58:	10c037c5 	stb	r3,223(r2)
  d->_g25 = d->_g14 && !d->_cg22;
  801b5c:	e0bffd17 	ldw	r2,-12(fp)
  801b60:	10801783 	ldbu	r2,94(r2)
  801b64:	10803fcc 	andi	r2,r2,255
  801b68:	1080201c 	xori	r2,r2,128
  801b6c:	10bfe004 	addi	r2,r2,-128
  801b70:	10000826 	beq	r2,zero,801b94 <logic+0x18d0>
  801b74:	e0bffd17 	ldw	r2,-12(fp)
  801b78:	108037c3 	ldbu	r2,223(r2)
  801b7c:	10803fcc 	andi	r2,r2,255
  801b80:	1080201c 	xori	r2,r2,128
  801b84:	10bfe004 	addi	r2,r2,-128
  801b88:	1000021e 	bne	r2,zero,801b94 <logic+0x18d0>
  801b8c:	00800044 	movi	r2,1
  801b90:	00000106 	br	801b98 <logic+0x18d4>
  801b94:	0005883a 	mov	r2,zero
  801b98:	1007883a 	mov	r3,r2
  801b9c:	e0bffd17 	ldw	r2,-12(fp)
  801ba0:	10c019c5 	stb	r3,103(r2)
  d->_g23_e3 = !d->_g25;
  801ba4:	e0bffd17 	ldw	r2,-12(fp)
  801ba8:	108019c3 	ldbu	r2,103(r2)
  801bac:	10803fcc 	andi	r2,r2,255
  801bb0:	1080201c 	xori	r2,r2,128
  801bb4:	10bfe004 	addi	r2,r2,-128
  801bb8:	1005003a 	cmpeq	r2,r2,zero
  801bbc:	1007883a 	mov	r3,r2
  801bc0:	e0bffd17 	ldw	r2,-12(fp)
  801bc4:	10c04ac5 	stb	r3,299(r2)
  d->_g22 = d->_g14 && d->_cg22;
  801bc8:	e0bffd17 	ldw	r2,-12(fp)
  801bcc:	10801783 	ldbu	r2,94(r2)
  801bd0:	10803fcc 	andi	r2,r2,255
  801bd4:	1080201c 	xori	r2,r2,128
  801bd8:	10bfe004 	addi	r2,r2,-128
  801bdc:	10000826 	beq	r2,zero,801c00 <logic+0x193c>
  801be0:	e0bffd17 	ldw	r2,-12(fp)
  801be4:	108037c3 	ldbu	r2,223(r2)
  801be8:	10803fcc 	andi	r2,r2,255
  801bec:	1080201c 	xori	r2,r2,128
  801bf0:	10bfe004 	addi	r2,r2,-128
  801bf4:	10000226 	beq	r2,zero,801c00 <logic+0x193c>
  801bf8:	00800044 	movi	r2,1
  801bfc:	00000106 	br	801c04 <logic+0x1940>
  801c00:	0005883a 	mov	r2,zero
  801c04:	1007883a 	mov	r3,r2
  801c08:	e0bffd17 	ldw	r2,-12(fp)
  801c0c:	10c01945 	stb	r3,101(r2)
  d->_g28 = d->_g84 || (d->_g28 && !d->_cg28);
  801c10:	e0bffd17 	ldw	r2,-12(fp)
  801c14:	10802303 	ldbu	r2,140(r2)
  801c18:	10803fcc 	andi	r2,r2,255
  801c1c:	1080201c 	xori	r2,r2,128
  801c20:	10bfe004 	addi	r2,r2,-128
  801c24:	10000c1e 	bne	r2,zero,801c58 <logic+0x1994>
  801c28:	e0bffd17 	ldw	r2,-12(fp)
  801c2c:	10801a03 	ldbu	r2,104(r2)
  801c30:	10803fcc 	andi	r2,r2,255
  801c34:	1080201c 	xori	r2,r2,128
  801c38:	10bfe004 	addi	r2,r2,-128
  801c3c:	10000826 	beq	r2,zero,801c60 <logic+0x199c>
  801c40:	e0bffd17 	ldw	r2,-12(fp)
  801c44:	10803803 	ldbu	r2,224(r2)
  801c48:	10803fcc 	andi	r2,r2,255
  801c4c:	1080201c 	xori	r2,r2,128
  801c50:	10bfe004 	addi	r2,r2,-128
  801c54:	1000021e 	bne	r2,zero,801c60 <logic+0x199c>
  801c58:	00800044 	movi	r2,1
  801c5c:	00000106 	br	801c64 <logic+0x19a0>
  801c60:	0005883a 	mov	r2,zero
  801c64:	1007883a 	mov	r3,r2
  801c68:	e0bffd17 	ldw	r2,-12(fp)
  801c6c:	10c01a05 	stb	r3,104(r2)
  d->_g6 = !d->_g28;
  801c70:	e0bffd17 	ldw	r2,-12(fp)
  801c74:	10801a03 	ldbu	r2,104(r2)
  801c78:	10803fcc 	andi	r2,r2,255
  801c7c:	1080201c 	xori	r2,r2,128
  801c80:	10bfe004 	addi	r2,r2,-128
  801c84:	1005003a 	cmpeq	r2,r2,zero
  801c88:	1007883a 	mov	r3,r2
  801c8c:	e0bffd17 	ldw	r2,-12(fp)
  801c90:	10c01645 	stb	r3,89(r2)
  d->_g15 = (d->_g92 || d->_g105) && (d->_g15_e2 || d->_g18) && (d->_g23_e3 || d->_g22) && (d->_g6 || d->_g29) && (d->_g105 || d->_g18 || d->_g22 || d->_g29);
  801c94:	e0bffd17 	ldw	r2,-12(fp)
  801c98:	10802443 	ldbu	r2,145(r2)
  801c9c:	10803fcc 	andi	r2,r2,255
  801ca0:	1080201c 	xori	r2,r2,128
  801ca4:	10bfe004 	addi	r2,r2,-128
  801ca8:	1000061e 	bne	r2,zero,801cc4 <logic+0x1a00>
  801cac:	e0bffd17 	ldw	r2,-12(fp)
  801cb0:	10802703 	ldbu	r2,156(r2)
  801cb4:	10803fcc 	andi	r2,r2,255
  801cb8:	1080201c 	xori	r2,r2,128
  801cbc:	10bfe004 	addi	r2,r2,-128
  801cc0:	10003e26 	beq	r2,zero,801dbc <logic+0x1af8>
  801cc4:	e0bffd17 	ldw	r2,-12(fp)
  801cc8:	10804a83 	ldbu	r2,298(r2)
  801ccc:	10803fcc 	andi	r2,r2,255
  801cd0:	1080201c 	xori	r2,r2,128
  801cd4:	10bfe004 	addi	r2,r2,-128
  801cd8:	1000061e 	bne	r2,zero,801cf4 <logic+0x1a30>
  801cdc:	e0bffd17 	ldw	r2,-12(fp)
  801ce0:	10801883 	ldbu	r2,98(r2)
  801ce4:	10803fcc 	andi	r2,r2,255
  801ce8:	1080201c 	xori	r2,r2,128
  801cec:	10bfe004 	addi	r2,r2,-128
  801cf0:	10003226 	beq	r2,zero,801dbc <logic+0x1af8>
  801cf4:	e0bffd17 	ldw	r2,-12(fp)
  801cf8:	10804ac3 	ldbu	r2,299(r2)
  801cfc:	10803fcc 	andi	r2,r2,255
  801d00:	1080201c 	xori	r2,r2,128
  801d04:	10bfe004 	addi	r2,r2,-128
  801d08:	1000061e 	bne	r2,zero,801d24 <logic+0x1a60>
  801d0c:	e0bffd17 	ldw	r2,-12(fp)
  801d10:	10801943 	ldbu	r2,101(r2)
  801d14:	10803fcc 	andi	r2,r2,255
  801d18:	1080201c 	xori	r2,r2,128
  801d1c:	10bfe004 	addi	r2,r2,-128
  801d20:	10002626 	beq	r2,zero,801dbc <logic+0x1af8>
  801d24:	e0bffd17 	ldw	r2,-12(fp)
  801d28:	10801643 	ldbu	r2,89(r2)
  801d2c:	10803fcc 	andi	r2,r2,255
  801d30:	1080201c 	xori	r2,r2,128
  801d34:	10bfe004 	addi	r2,r2,-128
  801d38:	1000061e 	bne	r2,zero,801d54 <logic+0x1a90>
  801d3c:	e0bffd17 	ldw	r2,-12(fp)
  801d40:	10801a43 	ldbu	r2,105(r2)
  801d44:	10803fcc 	andi	r2,r2,255
  801d48:	1080201c 	xori	r2,r2,128
  801d4c:	10bfe004 	addi	r2,r2,-128
  801d50:	10001a26 	beq	r2,zero,801dbc <logic+0x1af8>
  801d54:	e0bffd17 	ldw	r2,-12(fp)
  801d58:	10802703 	ldbu	r2,156(r2)
  801d5c:	10803fcc 	andi	r2,r2,255
  801d60:	1080201c 	xori	r2,r2,128
  801d64:	10bfe004 	addi	r2,r2,-128
  801d68:	1000121e 	bne	r2,zero,801db4 <logic+0x1af0>
  801d6c:	e0bffd17 	ldw	r2,-12(fp)
  801d70:	10801883 	ldbu	r2,98(r2)
  801d74:	10803fcc 	andi	r2,r2,255
  801d78:	1080201c 	xori	r2,r2,128
  801d7c:	10bfe004 	addi	r2,r2,-128
  801d80:	10000c1e 	bne	r2,zero,801db4 <logic+0x1af0>
  801d84:	e0bffd17 	ldw	r2,-12(fp)
  801d88:	10801943 	ldbu	r2,101(r2)
  801d8c:	10803fcc 	andi	r2,r2,255
  801d90:	1080201c 	xori	r2,r2,128
  801d94:	10bfe004 	addi	r2,r2,-128
  801d98:	1000061e 	bne	r2,zero,801db4 <logic+0x1af0>
  801d9c:	e0bffd17 	ldw	r2,-12(fp)
  801da0:	10801a43 	ldbu	r2,105(r2)
  801da4:	10803fcc 	andi	r2,r2,255
  801da8:	1080201c 	xori	r2,r2,128
  801dac:	10bfe004 	addi	r2,r2,-128
  801db0:	10000226 	beq	r2,zero,801dbc <logic+0x1af8>
  801db4:	00800044 	movi	r2,1
  801db8:	00000106 	br	801dc0 <logic+0x1afc>
  801dbc:	0005883a 	mov	r2,zero
  801dc0:	1007883a 	mov	r3,r2
  801dc4:	e0bffd17 	ldw	r2,-12(fp)
  801dc8:	10c017c5 	stb	r3,95(r2)
  d->_g29_e4 = d->_GO || d->_g15 || (d->_g97_e4 && !d->_cg5);
  801dcc:	e0bffd17 	ldw	r2,-12(fp)
  801dd0:	10803643 	ldbu	r2,217(r2)
  801dd4:	10803fcc 	andi	r2,r2,255
  801dd8:	1080201c 	xori	r2,r2,128
  801ddc:	10bfe004 	addi	r2,r2,-128
  801de0:	1000121e 	bne	r2,zero,801e2c <logic+0x1b68>
  801de4:	e0bffd17 	ldw	r2,-12(fp)
  801de8:	108017c3 	ldbu	r2,95(r2)
  801dec:	10803fcc 	andi	r2,r2,255
  801df0:	1080201c 	xori	r2,r2,128
  801df4:	10bfe004 	addi	r2,r2,-128
  801df8:	10000c1e 	bne	r2,zero,801e2c <logic+0x1b68>
  801dfc:	e0bffd17 	ldw	r2,-12(fp)
  801e00:	10804d03 	ldbu	r2,308(r2)
  801e04:	10803fcc 	andi	r2,r2,255
  801e08:	1080201c 	xori	r2,r2,128
  801e0c:	10bfe004 	addi	r2,r2,-128
  801e10:	10000826 	beq	r2,zero,801e34 <logic+0x1b70>
  801e14:	e0bffd17 	ldw	r2,-12(fp)
  801e18:	10803683 	ldbu	r2,218(r2)
  801e1c:	10803fcc 	andi	r2,r2,255
  801e20:	1080201c 	xori	r2,r2,128
  801e24:	10bfe004 	addi	r2,r2,-128
  801e28:	1000021e 	bne	r2,zero,801e34 <logic+0x1b70>
  801e2c:	00800044 	movi	r2,1
  801e30:	00000106 	br	801e38 <logic+0x1b74>
  801e34:	0005883a 	mov	r2,zero
  801e38:	1007883a 	mov	r3,r2
  801e3c:	e0bffd17 	ldw	r2,-12(fp)
  801e40:	10c04b05 	stb	r3,300(r2)
  d->_g9 = d->_pg54;
  801e44:	e0bffd17 	ldw	r2,-12(fp)
  801e48:	10c05403 	ldbu	r3,336(r2)
  801e4c:	e0bffd17 	ldw	r2,-12(fp)
  801e50:	10c016c5 	stb	r3,91(r2)
  if (d->_g9) {
  801e54:	e0bffd17 	ldw	r2,-12(fp)
  801e58:	108016c3 	ldbu	r2,91(r2)
  801e5c:	10803fcc 	andi	r2,r2,255
  801e60:	1080201c 	xori	r2,r2,128
  801e64:	10bfe004 	addi	r2,r2,-128
  801e68:	10001226 	beq	r2,zero,801eb4 <logic+0x1bf0>
    d->_PaceMaker_local_pvarp_clk += d->deltaT;
  801e6c:	e13ffd17 	ldw	r4,-12(fp)
  801e70:	20800917 	ldw	r2,36(r4)
  801e74:	20c00a17 	ldw	r3,40(r4)
  801e78:	e1bffd17 	ldw	r6,-12(fp)
  801e7c:	31000017 	ldw	r4,0(r6)
  801e80:	31400117 	ldw	r5,4(r6)
  801e84:	200d883a 	mov	r6,r4
  801e88:	280f883a 	mov	r7,r5
  801e8c:	1009883a 	mov	r4,r2
  801e90:	180b883a 	mov	r5,r3
  801e94:	08065a40 	call	8065a4 <__adddf3>
  801e98:	1009883a 	mov	r4,r2
  801e9c:	180b883a 	mov	r5,r3
  801ea0:	2005883a 	mov	r2,r4
  801ea4:	2807883a 	mov	r3,r5
  801ea8:	e13ffd17 	ldw	r4,-12(fp)
  801eac:	20800915 	stw	r2,36(r4)
  801eb0:	20c00a15 	stw	r3,40(r4)
  }
  d->_g29 = d->_pg35;
  801eb4:	e0bffd17 	ldw	r2,-12(fp)
  801eb8:	10c05443 	ldbu	r3,337(r2)
  801ebc:	e0bffd17 	ldw	r2,-12(fp)
  801ec0:	10c01a45 	stb	r3,105(r2)
  d->_cg57 = d->_PaceMaker_local_pvarp_clk >= PVARP_VALUE;
  801ec4:	e13ffd17 	ldw	r4,-12(fp)
  801ec8:	20800917 	ldw	r2,36(r4)
  801ecc:	20c00a17 	ldw	r3,40(r4)
  801ed0:	04000044 	movi	r16,1
  801ed4:	000d883a 	mov	r6,zero
  801ed8:	01d01274 	movhi	r7,16457
  801edc:	1009883a 	mov	r4,r2
  801ee0:	180b883a 	mov	r5,r3
  801ee4:	0806e500 	call	806e50 <__gedf2>
  801ee8:	1000010e 	bge	r2,zero,801ef0 <logic+0x1c2c>
  801eec:	0021883a 	mov	r16,zero
  801ef0:	8007883a 	mov	r3,r16
  801ef4:	e0bffd17 	ldw	r2,-12(fp)
  801ef8:	10c039c5 	stb	r3,231(r2)
  d->_g23 = d->_g29 && d->_cg57;
  801efc:	e0bffd17 	ldw	r2,-12(fp)
  801f00:	10801a43 	ldbu	r2,105(r2)
  801f04:	10803fcc 	andi	r2,r2,255
  801f08:	1080201c 	xori	r2,r2,128
  801f0c:	10bfe004 	addi	r2,r2,-128
  801f10:	10000826 	beq	r2,zero,801f34 <logic+0x1c70>
  801f14:	e0bffd17 	ldw	r2,-12(fp)
  801f18:	108039c3 	ldbu	r2,231(r2)
  801f1c:	10803fcc 	andi	r2,r2,255
  801f20:	1080201c 	xori	r2,r2,128
  801f24:	10bfe004 	addi	r2,r2,-128
  801f28:	10000226 	beq	r2,zero,801f34 <logic+0x1c70>
  801f2c:	00800044 	movi	r2,1
  801f30:	00000106 	br	801f38 <logic+0x1c74>
  801f34:	0005883a 	mov	r2,zero
  801f38:	1007883a 	mov	r3,r2
  801f3c:	e0bffd17 	ldw	r2,-12(fp)
  801f40:	10c01985 	stb	r3,102(r2)
  if (d->_g23) {
  801f44:	e0bffd17 	ldw	r2,-12(fp)
  801f48:	10801983 	ldbu	r2,102(r2)
  801f4c:	10803fcc 	andi	r2,r2,255
  801f50:	1080201c 	xori	r2,r2,128
  801f54:	10bfe004 	addi	r2,r2,-128
  801f58:	10000326 	beq	r2,zero,801f68 <logic+0x1ca4>
    d->_PaceMaker_local__Atrig1 = 1;
  801f5c:	e0bffd17 	ldw	r2,-12(fp)
  801f60:	00c00044 	movi	r3,1
  801f64:	10c00645 	stb	r3,25(r2)
  }
  d->_g23_e3 = d->_pg38_e1;
  801f68:	e0bffd17 	ldw	r2,-12(fp)
  801f6c:	10c05483 	ldbu	r3,338(r2)
  801f70:	e0bffd17 	ldw	r2,-12(fp)
  801f74:	10c04ac5 	stb	r3,299(r2)
  d->_cg34 = d->VS || d->VP;
  801f78:	e0bffd17 	ldw	r2,-12(fp)
  801f7c:	10800443 	ldbu	r2,17(r2)
  801f80:	10803fcc 	andi	r2,r2,255
  801f84:	1080201c 	xori	r2,r2,128
  801f88:	10bfe004 	addi	r2,r2,-128
  801f8c:	1000061e 	bne	r2,zero,801fa8 <logic+0x1ce4>
  801f90:	e0bffd17 	ldw	r2,-12(fp)
  801f94:	108004c3 	ldbu	r2,19(r2)
  801f98:	10803fcc 	andi	r2,r2,255
  801f9c:	1080201c 	xori	r2,r2,128
  801fa0:	10bfe004 	addi	r2,r2,-128
  801fa4:	10000226 	beq	r2,zero,801fb0 <logic+0x1cec>
  801fa8:	00800044 	movi	r2,1
  801fac:	00000106 	br	801fb4 <logic+0x1cf0>
  801fb0:	0005883a 	mov	r2,zero
  801fb4:	1007883a 	mov	r3,r2
  801fb8:	e0bffd17 	ldw	r2,-12(fp)
  801fbc:	10c03845 	stb	r3,225(r2)
  d->_g9_e1 = d->_g23_e3 && d->_cg34;
  801fc0:	e0bffd17 	ldw	r2,-12(fp)
  801fc4:	10804ac3 	ldbu	r2,299(r2)
  801fc8:	10803fcc 	andi	r2,r2,255
  801fcc:	1080201c 	xori	r2,r2,128
  801fd0:	10bfe004 	addi	r2,r2,-128
  801fd4:	10000826 	beq	r2,zero,801ff8 <logic+0x1d34>
  801fd8:	e0bffd17 	ldw	r2,-12(fp)
  801fdc:	10803843 	ldbu	r2,225(r2)
  801fe0:	10803fcc 	andi	r2,r2,255
  801fe4:	1080201c 	xori	r2,r2,128
  801fe8:	10bfe004 	addi	r2,r2,-128
  801fec:	10000226 	beq	r2,zero,801ff8 <logic+0x1d34>
  801ff0:	00800044 	movi	r2,1
  801ff4:	00000106 	br	801ffc <logic+0x1d38>
  801ff8:	0005883a 	mov	r2,zero
  801ffc:	1007883a 	mov	r3,r2
  802000:	e0bffd17 	ldw	r2,-12(fp)
  802004:	10c04a45 	stb	r3,297(r2)
  if (d->_g9_e1) {
  802008:	e0bffd17 	ldw	r2,-12(fp)
  80200c:	10804a43 	ldbu	r2,297(r2)
  802010:	10803fcc 	andi	r2,r2,255
  802014:	1080201c 	xori	r2,r2,128
  802018:	10bfe004 	addi	r2,r2,-128
  80201c:	10000526 	beq	r2,zero,802034 <logic+0x1d70>
    d->_PaceMaker_local_pvarp_clk = 0.0;
  802020:	e0bffd17 	ldw	r2,-12(fp)
  802024:	10000915 	stw	zero,36(r2)
  802028:	10000a15 	stw	zero,40(r2)
    d->_PaceMaker_local__Atrig1 = 0;
  80202c:	e0bffd17 	ldw	r2,-12(fp)
  802030:	10000645 	stb	zero,25(r2)
  }
  d->_g15_e2 = d->_pg30;
  802034:	e0bffd17 	ldw	r2,-12(fp)
  802038:	10c054c3 	ldbu	r3,339(r2)
  80203c:	e0bffd17 	ldw	r2,-12(fp)
  802040:	10c04a85 	stb	r3,298(r2)
  if (d->_g15_e2) {
  802044:	e0bffd17 	ldw	r2,-12(fp)
  802048:	10804a83 	ldbu	r2,298(r2)
  80204c:	10803fcc 	andi	r2,r2,255
  802050:	1080201c 	xori	r2,r2,128
  802054:	10bfe004 	addi	r2,r2,-128
  802058:	10000626 	beq	r2,zero,802074 <logic+0x1db0>
    d->ignore_AEvent |= 1;
  80205c:	e0bffd17 	ldw	r2,-12(fp)
  802060:	10800503 	ldbu	r2,20(r2)
  802064:	10800054 	ori	r2,r2,1
  802068:	1007883a 	mov	r3,r2
  80206c:	e0bffd17 	ldw	r2,-12(fp)
  802070:	10c00505 	stb	r3,20(r2)
  }
  d->_g5 = d->_g9_e1 || d->_g15_e2;
  802074:	e0bffd17 	ldw	r2,-12(fp)
  802078:	10804a43 	ldbu	r2,297(r2)
  80207c:	10803fcc 	andi	r2,r2,255
  802080:	1080201c 	xori	r2,r2,128
  802084:	10bfe004 	addi	r2,r2,-128
  802088:	1000061e 	bne	r2,zero,8020a4 <logic+0x1de0>
  80208c:	e0bffd17 	ldw	r2,-12(fp)
  802090:	10804a83 	ldbu	r2,298(r2)
  802094:	10803fcc 	andi	r2,r2,255
  802098:	1080201c 	xori	r2,r2,128
  80209c:	10bfe004 	addi	r2,r2,-128
  8020a0:	10000226 	beq	r2,zero,8020ac <logic+0x1de8>
  8020a4:	00800044 	movi	r2,1
  8020a8:	00000106 	br	8020b0 <logic+0x1dec>
  8020ac:	0005883a 	mov	r2,zero
  8020b0:	1007883a 	mov	r3,r2
  8020b4:	e0bffd17 	ldw	r2,-12(fp)
  8020b8:	10c01605 	stb	r3,88(r2)
  d->_cg37 = d->_PaceMaker_local__Atrig1;
  8020bc:	e0bffd17 	ldw	r2,-12(fp)
  8020c0:	10c00643 	ldbu	r3,25(r2)
  8020c4:	e0bffd17 	ldw	r2,-12(fp)
  8020c8:	10c03885 	stb	r3,226(r2)
  d->_g30 = d->_g5 && !d->_cg37;
  8020cc:	e0bffd17 	ldw	r2,-12(fp)
  8020d0:	10801603 	ldbu	r2,88(r2)
  8020d4:	10803fcc 	andi	r2,r2,255
  8020d8:	1080201c 	xori	r2,r2,128
  8020dc:	10bfe004 	addi	r2,r2,-128
  8020e0:	10000826 	beq	r2,zero,802104 <logic+0x1e40>
  8020e4:	e0bffd17 	ldw	r2,-12(fp)
  8020e8:	10803883 	ldbu	r2,226(r2)
  8020ec:	10803fcc 	andi	r2,r2,255
  8020f0:	1080201c 	xori	r2,r2,128
  8020f4:	10bfe004 	addi	r2,r2,-128
  8020f8:	1000021e 	bne	r2,zero,802104 <logic+0x1e40>
  8020fc:	00800044 	movi	r2,1
  802100:	00000106 	br	802108 <logic+0x1e44>
  802104:	0005883a 	mov	r2,zero
  802108:	1007883a 	mov	r3,r2
  80210c:	e0bffd17 	ldw	r2,-12(fp)
  802110:	10c01a85 	stb	r3,106(r2)
  d->_g40 = !d->_g30;
  802114:	e0bffd17 	ldw	r2,-12(fp)
  802118:	10801a83 	ldbu	r2,106(r2)
  80211c:	10803fcc 	andi	r2,r2,255
  802120:	1080201c 	xori	r2,r2,128
  802124:	10bfe004 	addi	r2,r2,-128
  802128:	1005003a 	cmpeq	r2,r2,zero
  80212c:	1007883a 	mov	r3,r2
  802130:	e0bffd17 	ldw	r2,-12(fp)
  802134:	10c01bc5 	stb	r3,111(r2)
  d->_g37 = d->_g5 && d->_cg37;
  802138:	e0bffd17 	ldw	r2,-12(fp)
  80213c:	10801603 	ldbu	r2,88(r2)
  802140:	10803fcc 	andi	r2,r2,255
  802144:	1080201c 	xori	r2,r2,128
  802148:	10bfe004 	addi	r2,r2,-128
  80214c:	10000826 	beq	r2,zero,802170 <logic+0x1eac>
  802150:	e0bffd17 	ldw	r2,-12(fp)
  802154:	10803883 	ldbu	r2,226(r2)
  802158:	10803fcc 	andi	r2,r2,255
  80215c:	1080201c 	xori	r2,r2,128
  802160:	10bfe004 	addi	r2,r2,-128
  802164:	10000226 	beq	r2,zero,802170 <logic+0x1eac>
  802168:	00800044 	movi	r2,1
  80216c:	00000106 	br	802174 <logic+0x1eb0>
  802170:	0005883a 	mov	r2,zero
  802174:	1007883a 	mov	r3,r2
  802178:	e0bffd17 	ldw	r2,-12(fp)
  80217c:	10c01b45 	stb	r3,109(r2)
  d->_g46 = d->_pg45;
  802180:	e0bffd17 	ldw	r2,-12(fp)
  802184:	10c05503 	ldbu	r3,340(r2)
  802188:	e0bffd17 	ldw	r2,-12(fp)
  80218c:	10c01d05 	stb	r3,116(r2)
  d->_g49 = d->_pg48;
  802190:	e0bffd17 	ldw	r2,-12(fp)
  802194:	10c05543 	ldbu	r3,341(r2)
  802198:	e0bffd17 	ldw	r2,-12(fp)
  80219c:	10c01dc5 	stb	r3,119(r2)
  d->_g49 = d->_g9_e1 || d->_g46 || d->_g49;
  8021a0:	e0bffd17 	ldw	r2,-12(fp)
  8021a4:	10804a43 	ldbu	r2,297(r2)
  8021a8:	10803fcc 	andi	r2,r2,255
  8021ac:	1080201c 	xori	r2,r2,128
  8021b0:	10bfe004 	addi	r2,r2,-128
  8021b4:	10000c1e 	bne	r2,zero,8021e8 <logic+0x1f24>
  8021b8:	e0bffd17 	ldw	r2,-12(fp)
  8021bc:	10801d03 	ldbu	r2,116(r2)
  8021c0:	10803fcc 	andi	r2,r2,255
  8021c4:	1080201c 	xori	r2,r2,128
  8021c8:	10bfe004 	addi	r2,r2,-128
  8021cc:	1000061e 	bne	r2,zero,8021e8 <logic+0x1f24>
  8021d0:	e0bffd17 	ldw	r2,-12(fp)
  8021d4:	10801dc3 	ldbu	r2,119(r2)
  8021d8:	10803fcc 	andi	r2,r2,255
  8021dc:	1080201c 	xori	r2,r2,128
  8021e0:	10bfe004 	addi	r2,r2,-128
  8021e4:	10000226 	beq	r2,zero,8021f0 <logic+0x1f2c>
  8021e8:	00800044 	movi	r2,1
  8021ec:	00000106 	br	8021f4 <logic+0x1f30>
  8021f0:	0005883a 	mov	r2,zero
  8021f4:	1007883a 	mov	r3,r2
  8021f8:	e0bffd17 	ldw	r2,-12(fp)
  8021fc:	10c01dc5 	stb	r3,119(r2)
  d->_cg42 = d->_PaceMaker_local_pvarp_clk < PVARP_VALUE;
  802200:	e13ffd17 	ldw	r4,-12(fp)
  802204:	20800917 	ldw	r2,36(r4)
  802208:	20c00a17 	ldw	r3,40(r4)
  80220c:	04000044 	movi	r16,1
  802210:	000d883a 	mov	r6,zero
  802214:	01d01274 	movhi	r7,16457
  802218:	1009883a 	mov	r4,r2
  80221c:	180b883a 	mov	r5,r3
  802220:	0806f2c0 	call	806f2c <__ledf2>
  802224:	10000116 	blt	r2,zero,80222c <logic+0x1f68>
  802228:	0021883a 	mov	r16,zero
  80222c:	8007883a 	mov	r3,r16
  802230:	e0bffd17 	ldw	r2,-12(fp)
  802234:	10c038c5 	stb	r3,227(r2)
  d->_g46 = d->_g49 && !d->_cg42;
  802238:	e0bffd17 	ldw	r2,-12(fp)
  80223c:	10801dc3 	ldbu	r2,119(r2)
  802240:	10803fcc 	andi	r2,r2,255
  802244:	1080201c 	xori	r2,r2,128
  802248:	10bfe004 	addi	r2,r2,-128
  80224c:	10000826 	beq	r2,zero,802270 <logic+0x1fac>
  802250:	e0bffd17 	ldw	r2,-12(fp)
  802254:	108038c3 	ldbu	r2,227(r2)
  802258:	10803fcc 	andi	r2,r2,255
  80225c:	1080201c 	xori	r2,r2,128
  802260:	10bfe004 	addi	r2,r2,-128
  802264:	1000021e 	bne	r2,zero,802270 <logic+0x1fac>
  802268:	00800044 	movi	r2,1
  80226c:	00000106 	br	802274 <logic+0x1fb0>
  802270:	0005883a 	mov	r2,zero
  802274:	1007883a 	mov	r3,r2
  802278:	e0bffd17 	ldw	r2,-12(fp)
  80227c:	10c01d05 	stb	r3,116(r2)
  d->_cg47 = d->_PaceMaker_local__Atrig1;
  802280:	e0bffd17 	ldw	r2,-12(fp)
  802284:	10c00643 	ldbu	r3,25(r2)
  802288:	e0bffd17 	ldw	r2,-12(fp)
  80228c:	10c03945 	stb	r3,229(r2)
  d->_g48 = d->_g46 && !d->_cg47;
  802290:	e0bffd17 	ldw	r2,-12(fp)
  802294:	10801d03 	ldbu	r2,116(r2)
  802298:	10803fcc 	andi	r2,r2,255
  80229c:	1080201c 	xori	r2,r2,128
  8022a0:	10bfe004 	addi	r2,r2,-128
  8022a4:	10000826 	beq	r2,zero,8022c8 <logic+0x2004>
  8022a8:	e0bffd17 	ldw	r2,-12(fp)
  8022ac:	10803943 	ldbu	r2,229(r2)
  8022b0:	10803fcc 	andi	r2,r2,255
  8022b4:	1080201c 	xori	r2,r2,128
  8022b8:	10bfe004 	addi	r2,r2,-128
  8022bc:	1000021e 	bne	r2,zero,8022c8 <logic+0x2004>
  8022c0:	00800044 	movi	r2,1
  8022c4:	00000106 	br	8022cc <logic+0x2008>
  8022c8:	0005883a 	mov	r2,zero
  8022cc:	1007883a 	mov	r3,r2
  8022d0:	e0bffd17 	ldw	r2,-12(fp)
  8022d4:	10c01d85 	stb	r3,118(r2)
  d->_g42 = d->_g49 && d->_cg42;
  8022d8:	e0bffd17 	ldw	r2,-12(fp)
  8022dc:	10801dc3 	ldbu	r2,119(r2)
  8022e0:	10803fcc 	andi	r2,r2,255
  8022e4:	1080201c 	xori	r2,r2,128
  8022e8:	10bfe004 	addi	r2,r2,-128
  8022ec:	10000826 	beq	r2,zero,802310 <logic+0x204c>
  8022f0:	e0bffd17 	ldw	r2,-12(fp)
  8022f4:	108038c3 	ldbu	r2,227(r2)
  8022f8:	10803fcc 	andi	r2,r2,255
  8022fc:	1080201c 	xori	r2,r2,128
  802300:	10bfe004 	addi	r2,r2,-128
  802304:	10000226 	beq	r2,zero,802310 <logic+0x204c>
  802308:	00800044 	movi	r2,1
  80230c:	00000106 	br	802314 <logic+0x2050>
  802310:	0005883a 	mov	r2,zero
  802314:	1007883a 	mov	r3,r2
  802318:	e0bffd17 	ldw	r2,-12(fp)
  80231c:	10c01c05 	stb	r3,112(r2)
  if (d->_g42) {
  802320:	e0bffd17 	ldw	r2,-12(fp)
  802324:	10801c03 	ldbu	r2,112(r2)
  802328:	10803fcc 	andi	r2,r2,255
  80232c:	1080201c 	xori	r2,r2,128
  802330:	10bfe004 	addi	r2,r2,-128
  802334:	10002826 	beq	r2,zero,8023d8 <logic+0x2114>
    d->sleepT = (d->sleepT < (PVARP_VALUE - d->_PaceMaker_local_pvarp_clk)) ? d->sleepT : (PVARP_VALUE - d->_PaceMaker_local_pvarp_clk);
  802338:	e0bffd17 	ldw	r2,-12(fp)
  80233c:	14000217 	ldw	r16,8(r2)
  802340:	14400317 	ldw	r17,12(r2)
  802344:	e13ffd17 	ldw	r4,-12(fp)
  802348:	20800917 	ldw	r2,36(r4)
  80234c:	20c00a17 	ldw	r3,40(r4)
  802350:	100d883a 	mov	r6,r2
  802354:	180f883a 	mov	r7,r3
  802358:	0009883a 	mov	r4,zero
  80235c:	01501274 	movhi	r5,16457
  802360:	08070200 	call	807020 <__subdf3>
  802364:	1009883a 	mov	r4,r2
  802368:	180b883a 	mov	r5,r3
  80236c:	2005883a 	mov	r2,r4
  802370:	2807883a 	mov	r3,r5
  802374:	100d883a 	mov	r6,r2
  802378:	180f883a 	mov	r7,r3
  80237c:	8009883a 	mov	r4,r16
  802380:	880b883a 	mov	r5,r17
  802384:	0806f2c0 	call	806f2c <__ledf2>
  802388:	1000040e 	bge	r2,zero,80239c <logic+0x20d8>
  80238c:	e13ffd17 	ldw	r4,-12(fp)
  802390:	20800217 	ldw	r2,8(r4)
  802394:	20c00317 	ldw	r3,12(r4)
  802398:	00000c06 	br	8023cc <logic+0x2108>
  80239c:	e13ffd17 	ldw	r4,-12(fp)
  8023a0:	20800917 	ldw	r2,36(r4)
  8023a4:	20c00a17 	ldw	r3,40(r4)
  8023a8:	100d883a 	mov	r6,r2
  8023ac:	180f883a 	mov	r7,r3
  8023b0:	0009883a 	mov	r4,zero
  8023b4:	01501274 	movhi	r5,16457
  8023b8:	08070200 	call	807020 <__subdf3>
  8023bc:	1009883a 	mov	r4,r2
  8023c0:	180b883a 	mov	r5,r3
  8023c4:	2005883a 	mov	r2,r4
  8023c8:	2807883a 	mov	r3,r5
  8023cc:	e13ffd17 	ldw	r4,-12(fp)
  8023d0:	20800215 	stw	r2,8(r4)
  8023d4:	20c00315 	stw	r3,12(r4)
  }
  d->_cg43 = d->_PaceMaker_local__Atrig1;
  8023d8:	e0bffd17 	ldw	r2,-12(fp)
  8023dc:	10c00643 	ldbu	r3,25(r2)
  8023e0:	e0bffd17 	ldw	r2,-12(fp)
  8023e4:	10c03905 	stb	r3,228(r2)
  d->_g45 = d->_g42 && !d->_cg43;
  8023e8:	e0bffd17 	ldw	r2,-12(fp)
  8023ec:	10801c03 	ldbu	r2,112(r2)
  8023f0:	10803fcc 	andi	r2,r2,255
  8023f4:	1080201c 	xori	r2,r2,128
  8023f8:	10bfe004 	addi	r2,r2,-128
  8023fc:	10000826 	beq	r2,zero,802420 <logic+0x215c>
  802400:	e0bffd17 	ldw	r2,-12(fp)
  802404:	10803903 	ldbu	r2,228(r2)
  802408:	10803fcc 	andi	r2,r2,255
  80240c:	1080201c 	xori	r2,r2,128
  802410:	10bfe004 	addi	r2,r2,-128
  802414:	1000021e 	bne	r2,zero,802420 <logic+0x215c>
  802418:	00800044 	movi	r2,1
  80241c:	00000106 	br	802424 <logic+0x2160>
  802420:	0005883a 	mov	r2,zero
  802424:	1007883a 	mov	r3,r2
  802428:	e0bffd17 	ldw	r2,-12(fp)
  80242c:	10c01cc5 	stb	r3,115(r2)
  d->_g44_e2 = !(d->_g48 || d->_g45);
  802430:	e0bffd17 	ldw	r2,-12(fp)
  802434:	10801d83 	ldbu	r2,118(r2)
  802438:	10803fcc 	andi	r2,r2,255
  80243c:	1080201c 	xori	r2,r2,128
  802440:	10bfe004 	addi	r2,r2,-128
  802444:	1000081e 	bne	r2,zero,802468 <logic+0x21a4>
  802448:	e0bffd17 	ldw	r2,-12(fp)
  80244c:	10801cc3 	ldbu	r2,115(r2)
  802450:	10803fcc 	andi	r2,r2,255
  802454:	1080201c 	xori	r2,r2,128
  802458:	10bfe004 	addi	r2,r2,-128
  80245c:	1000021e 	bne	r2,zero,802468 <logic+0x21a4>
  802460:	00800044 	movi	r2,1
  802464:	00000106 	br	80246c <logic+0x21a8>
  802468:	0005883a 	mov	r2,zero
  80246c:	1007883a 	mov	r3,r2
  802470:	e0bffd17 	ldw	r2,-12(fp)
  802474:	10c04b85 	stb	r3,302(r2)
  d->_g47 = (d->_g42 && d->_cg43) || (d->_g46 && d->_cg47);
  802478:	e0bffd17 	ldw	r2,-12(fp)
  80247c:	10801c03 	ldbu	r2,112(r2)
  802480:	10803fcc 	andi	r2,r2,255
  802484:	1080201c 	xori	r2,r2,128
  802488:	10bfe004 	addi	r2,r2,-128
  80248c:	10000626 	beq	r2,zero,8024a8 <logic+0x21e4>
  802490:	e0bffd17 	ldw	r2,-12(fp)
  802494:	10803903 	ldbu	r2,228(r2)
  802498:	10803fcc 	andi	r2,r2,255
  80249c:	1080201c 	xori	r2,r2,128
  8024a0:	10bfe004 	addi	r2,r2,-128
  8024a4:	10000c1e 	bne	r2,zero,8024d8 <logic+0x2214>
  8024a8:	e0bffd17 	ldw	r2,-12(fp)
  8024ac:	10801d03 	ldbu	r2,116(r2)
  8024b0:	10803fcc 	andi	r2,r2,255
  8024b4:	1080201c 	xori	r2,r2,128
  8024b8:	10bfe004 	addi	r2,r2,-128
  8024bc:	10000826 	beq	r2,zero,8024e0 <logic+0x221c>
  8024c0:	e0bffd17 	ldw	r2,-12(fp)
  8024c4:	10803943 	ldbu	r2,229(r2)
  8024c8:	10803fcc 	andi	r2,r2,255
  8024cc:	1080201c 	xori	r2,r2,128
  8024d0:	10bfe004 	addi	r2,r2,-128
  8024d4:	10000226 	beq	r2,zero,8024e0 <logic+0x221c>
  8024d8:	00800044 	movi	r2,1
  8024dc:	00000106 	br	8024e4 <logic+0x2220>
  8024e0:	0005883a 	mov	r2,zero
  8024e4:	1007883a 	mov	r3,r2
  8024e8:	e0bffd17 	ldw	r2,-12(fp)
  8024ec:	10c01d45 	stb	r3,117(r2)
  d->_g43 = d->_g9_e1 || d->_g9;
  8024f0:	e0bffd17 	ldw	r2,-12(fp)
  8024f4:	10804a43 	ldbu	r2,297(r2)
  8024f8:	10803fcc 	andi	r2,r2,255
  8024fc:	1080201c 	xori	r2,r2,128
  802500:	10bfe004 	addi	r2,r2,-128
  802504:	1000061e 	bne	r2,zero,802520 <logic+0x225c>
  802508:	e0bffd17 	ldw	r2,-12(fp)
  80250c:	108016c3 	ldbu	r2,91(r2)
  802510:	10803fcc 	andi	r2,r2,255
  802514:	1080201c 	xori	r2,r2,128
  802518:	10bfe004 	addi	r2,r2,-128
  80251c:	10000226 	beq	r2,zero,802528 <logic+0x2264>
  802520:	00800044 	movi	r2,1
  802524:	00000106 	br	80252c <logic+0x2268>
  802528:	0005883a 	mov	r2,zero
  80252c:	1007883a 	mov	r3,r2
  802530:	e0bffd17 	ldw	r2,-12(fp)
  802534:	10c01c45 	stb	r3,113(r2)
  d->_cg51 = d->_PaceMaker_local__Atrig1;
  802538:	e0bffd17 	ldw	r2,-12(fp)
  80253c:	10c00643 	ldbu	r3,25(r2)
  802540:	e0bffd17 	ldw	r2,-12(fp)
  802544:	10c03985 	stb	r3,230(r2)
  d->_g54 = d->_g43 && !d->_cg51;
  802548:	e0bffd17 	ldw	r2,-12(fp)
  80254c:	10801c43 	ldbu	r2,113(r2)
  802550:	10803fcc 	andi	r2,r2,255
  802554:	1080201c 	xori	r2,r2,128
  802558:	10bfe004 	addi	r2,r2,-128
  80255c:	10000826 	beq	r2,zero,802580 <logic+0x22bc>
  802560:	e0bffd17 	ldw	r2,-12(fp)
  802564:	10803983 	ldbu	r2,230(r2)
  802568:	10803fcc 	andi	r2,r2,255
  80256c:	1080201c 	xori	r2,r2,128
  802570:	10bfe004 	addi	r2,r2,-128
  802574:	1000021e 	bne	r2,zero,802580 <logic+0x22bc>
  802578:	00800044 	movi	r2,1
  80257c:	00000106 	br	802584 <logic+0x22c0>
  802580:	0005883a 	mov	r2,zero
  802584:	1007883a 	mov	r3,r2
  802588:	e0bffd17 	ldw	r2,-12(fp)
  80258c:	10c01e85 	stb	r3,122(r2)
  d->_g52_e3 = !d->_g54;
  802590:	e0bffd17 	ldw	r2,-12(fp)
  802594:	10801e83 	ldbu	r2,122(r2)
  802598:	10803fcc 	andi	r2,r2,255
  80259c:	1080201c 	xori	r2,r2,128
  8025a0:	10bfe004 	addi	r2,r2,-128
  8025a4:	1005003a 	cmpeq	r2,r2,zero
  8025a8:	1007883a 	mov	r3,r2
  8025ac:	e0bffd17 	ldw	r2,-12(fp)
  8025b0:	10c04bc5 	stb	r3,303(r2)
  d->_g51 = d->_g43 && d->_cg51;
  8025b4:	e0bffd17 	ldw	r2,-12(fp)
  8025b8:	10801c43 	ldbu	r2,113(r2)
  8025bc:	10803fcc 	andi	r2,r2,255
  8025c0:	1080201c 	xori	r2,r2,128
  8025c4:	10bfe004 	addi	r2,r2,-128
  8025c8:	10000826 	beq	r2,zero,8025ec <logic+0x2328>
  8025cc:	e0bffd17 	ldw	r2,-12(fp)
  8025d0:	10803983 	ldbu	r2,230(r2)
  8025d4:	10803fcc 	andi	r2,r2,255
  8025d8:	1080201c 	xori	r2,r2,128
  8025dc:	10bfe004 	addi	r2,r2,-128
  8025e0:	10000226 	beq	r2,zero,8025ec <logic+0x2328>
  8025e4:	00800044 	movi	r2,1
  8025e8:	00000106 	br	8025f0 <logic+0x232c>
  8025ec:	0005883a 	mov	r2,zero
  8025f0:	1007883a 	mov	r3,r2
  8025f4:	e0bffd17 	ldw	r2,-12(fp)
  8025f8:	10c01e05 	stb	r3,120(r2)
  d->_g35 = d->_g9_e1 || (d->_g29 && !d->_cg57);
  8025fc:	e0bffd17 	ldw	r2,-12(fp)
  802600:	10804a43 	ldbu	r2,297(r2)
  802604:	10803fcc 	andi	r2,r2,255
  802608:	1080201c 	xori	r2,r2,128
  80260c:	10bfe004 	addi	r2,r2,-128
  802610:	10000c1e 	bne	r2,zero,802644 <logic+0x2380>
  802614:	e0bffd17 	ldw	r2,-12(fp)
  802618:	10801a43 	ldbu	r2,105(r2)
  80261c:	10803fcc 	andi	r2,r2,255
  802620:	1080201c 	xori	r2,r2,128
  802624:	10bfe004 	addi	r2,r2,-128
  802628:	10000826 	beq	r2,zero,80264c <logic+0x2388>
  80262c:	e0bffd17 	ldw	r2,-12(fp)
  802630:	108039c3 	ldbu	r2,231(r2)
  802634:	10803fcc 	andi	r2,r2,255
  802638:	1080201c 	xori	r2,r2,128
  80263c:	10bfe004 	addi	r2,r2,-128
  802640:	1000021e 	bne	r2,zero,80264c <logic+0x2388>
  802644:	00800044 	movi	r2,1
  802648:	00000106 	br	802650 <logic+0x238c>
  80264c:	0005883a 	mov	r2,zero
  802650:	1007883a 	mov	r3,r2
  802654:	e0bffd17 	ldw	r2,-12(fp)
  802658:	10c01b05 	stb	r3,108(r2)
  d->_g57 = !d->_g35;
  80265c:	e0bffd17 	ldw	r2,-12(fp)
  802660:	10801b03 	ldbu	r2,108(r2)
  802664:	10803fcc 	andi	r2,r2,255
  802668:	1080201c 	xori	r2,r2,128
  80266c:	10bfe004 	addi	r2,r2,-128
  802670:	1005003a 	cmpeq	r2,r2,zero
  802674:	1007883a 	mov	r3,r2
  802678:	e0bffd17 	ldw	r2,-12(fp)
  80267c:	10c01ec5 	stb	r3,123(r2)
  d->_g38 = (d->_g40 || d->_g37) && (d->_g44_e2 || d->_g47) && (d->_g52_e3 || d->_g51) && (d->_g57 || d->_g23) && (d->_g37 || d->_g47 || d->_g51 || d->_g23);
  802680:	e0bffd17 	ldw	r2,-12(fp)
  802684:	10801bc3 	ldbu	r2,111(r2)
  802688:	10803fcc 	andi	r2,r2,255
  80268c:	1080201c 	xori	r2,r2,128
  802690:	10bfe004 	addi	r2,r2,-128
  802694:	1000061e 	bne	r2,zero,8026b0 <logic+0x23ec>
  802698:	e0bffd17 	ldw	r2,-12(fp)
  80269c:	10801b43 	ldbu	r2,109(r2)
  8026a0:	10803fcc 	andi	r2,r2,255
  8026a4:	1080201c 	xori	r2,r2,128
  8026a8:	10bfe004 	addi	r2,r2,-128
  8026ac:	10003e26 	beq	r2,zero,8027a8 <logic+0x24e4>
  8026b0:	e0bffd17 	ldw	r2,-12(fp)
  8026b4:	10804b83 	ldbu	r2,302(r2)
  8026b8:	10803fcc 	andi	r2,r2,255
  8026bc:	1080201c 	xori	r2,r2,128
  8026c0:	10bfe004 	addi	r2,r2,-128
  8026c4:	1000061e 	bne	r2,zero,8026e0 <logic+0x241c>
  8026c8:	e0bffd17 	ldw	r2,-12(fp)
  8026cc:	10801d43 	ldbu	r2,117(r2)
  8026d0:	10803fcc 	andi	r2,r2,255
  8026d4:	1080201c 	xori	r2,r2,128
  8026d8:	10bfe004 	addi	r2,r2,-128
  8026dc:	10003226 	beq	r2,zero,8027a8 <logic+0x24e4>
  8026e0:	e0bffd17 	ldw	r2,-12(fp)
  8026e4:	10804bc3 	ldbu	r2,303(r2)
  8026e8:	10803fcc 	andi	r2,r2,255
  8026ec:	1080201c 	xori	r2,r2,128
  8026f0:	10bfe004 	addi	r2,r2,-128
  8026f4:	1000061e 	bne	r2,zero,802710 <logic+0x244c>
  8026f8:	e0bffd17 	ldw	r2,-12(fp)
  8026fc:	10801e03 	ldbu	r2,120(r2)
  802700:	10803fcc 	andi	r2,r2,255
  802704:	1080201c 	xori	r2,r2,128
  802708:	10bfe004 	addi	r2,r2,-128
  80270c:	10002626 	beq	r2,zero,8027a8 <logic+0x24e4>
  802710:	e0bffd17 	ldw	r2,-12(fp)
  802714:	10801ec3 	ldbu	r2,123(r2)
  802718:	10803fcc 	andi	r2,r2,255
  80271c:	1080201c 	xori	r2,r2,128
  802720:	10bfe004 	addi	r2,r2,-128
  802724:	1000061e 	bne	r2,zero,802740 <logic+0x247c>
  802728:	e0bffd17 	ldw	r2,-12(fp)
  80272c:	10801983 	ldbu	r2,102(r2)
  802730:	10803fcc 	andi	r2,r2,255
  802734:	1080201c 	xori	r2,r2,128
  802738:	10bfe004 	addi	r2,r2,-128
  80273c:	10001a26 	beq	r2,zero,8027a8 <logic+0x24e4>
  802740:	e0bffd17 	ldw	r2,-12(fp)
  802744:	10801b43 	ldbu	r2,109(r2)
  802748:	10803fcc 	andi	r2,r2,255
  80274c:	1080201c 	xori	r2,r2,128
  802750:	10bfe004 	addi	r2,r2,-128
  802754:	1000121e 	bne	r2,zero,8027a0 <logic+0x24dc>
  802758:	e0bffd17 	ldw	r2,-12(fp)
  80275c:	10801d43 	ldbu	r2,117(r2)
  802760:	10803fcc 	andi	r2,r2,255
  802764:	1080201c 	xori	r2,r2,128
  802768:	10bfe004 	addi	r2,r2,-128
  80276c:	10000c1e 	bne	r2,zero,8027a0 <logic+0x24dc>
  802770:	e0bffd17 	ldw	r2,-12(fp)
  802774:	10801e03 	ldbu	r2,120(r2)
  802778:	10803fcc 	andi	r2,r2,255
  80277c:	1080201c 	xori	r2,r2,128
  802780:	10bfe004 	addi	r2,r2,-128
  802784:	1000061e 	bne	r2,zero,8027a0 <logic+0x24dc>
  802788:	e0bffd17 	ldw	r2,-12(fp)
  80278c:	10801983 	ldbu	r2,102(r2)
  802790:	10803fcc 	andi	r2,r2,255
  802794:	1080201c 	xori	r2,r2,128
  802798:	10bfe004 	addi	r2,r2,-128
  80279c:	10000226 	beq	r2,zero,8027a8 <logic+0x24e4>
  8027a0:	00800044 	movi	r2,1
  8027a4:	00000106 	br	8027ac <logic+0x24e8>
  8027a8:	0005883a 	mov	r2,zero
  8027ac:	1007883a 	mov	r3,r2
  8027b0:	e0bffd17 	ldw	r2,-12(fp)
  8027b4:	10c01b85 	stb	r3,110(r2)
  d->_g38_e1 = d->_GO || d->_g38 || (d->_g23_e3 && !d->_cg34);
  8027b8:	e0bffd17 	ldw	r2,-12(fp)
  8027bc:	10803643 	ldbu	r2,217(r2)
  8027c0:	10803fcc 	andi	r2,r2,255
  8027c4:	1080201c 	xori	r2,r2,128
  8027c8:	10bfe004 	addi	r2,r2,-128
  8027cc:	1000121e 	bne	r2,zero,802818 <logic+0x2554>
  8027d0:	e0bffd17 	ldw	r2,-12(fp)
  8027d4:	10801b83 	ldbu	r2,110(r2)
  8027d8:	10803fcc 	andi	r2,r2,255
  8027dc:	1080201c 	xori	r2,r2,128
  8027e0:	10bfe004 	addi	r2,r2,-128
  8027e4:	10000c1e 	bne	r2,zero,802818 <logic+0x2554>
  8027e8:	e0bffd17 	ldw	r2,-12(fp)
  8027ec:	10804ac3 	ldbu	r2,299(r2)
  8027f0:	10803fcc 	andi	r2,r2,255
  8027f4:	1080201c 	xori	r2,r2,128
  8027f8:	10bfe004 	addi	r2,r2,-128
  8027fc:	10000826 	beq	r2,zero,802820 <logic+0x255c>
  802800:	e0bffd17 	ldw	r2,-12(fp)
  802804:	10803843 	ldbu	r2,225(r2)
  802808:	10803fcc 	andi	r2,r2,255
  80280c:	1080201c 	xori	r2,r2,128
  802810:	10bfe004 	addi	r2,r2,-128
  802814:	1000021e 	bne	r2,zero,802820 <logic+0x255c>
  802818:	00800044 	movi	r2,1
  80281c:	00000106 	br	802824 <logic+0x2560>
  802820:	0005883a 	mov	r2,zero
  802824:	1007883a 	mov	r3,r2
  802828:	e0bffd17 	ldw	r2,-12(fp)
  80282c:	10c04b45 	stb	r3,301(r2)
  d->_g44 = d->_pg102;
  802830:	e0bffd17 	ldw	r2,-12(fp)
  802834:	10c05583 	ldbu	r3,342(r2)
  802838:	e0bffd17 	ldw	r2,-12(fp)
  80283c:	10c01c85 	stb	r3,114(r2)
  d->_g58 = d->_pg91;
  802840:	e0bffd17 	ldw	r2,-12(fp)
  802844:	10c055c3 	ldbu	r3,343(r2)
  802848:	e0bffd17 	ldw	r2,-12(fp)
  80284c:	10c01f05 	stb	r3,124(r2)
  d->_g52 = !(d->_g44 || d->_g58);
  802850:	e0bffd17 	ldw	r2,-12(fp)
  802854:	10801c83 	ldbu	r2,114(r2)
  802858:	10803fcc 	andi	r2,r2,255
  80285c:	1080201c 	xori	r2,r2,128
  802860:	10bfe004 	addi	r2,r2,-128
  802864:	1000081e 	bne	r2,zero,802888 <logic+0x25c4>
  802868:	e0bffd17 	ldw	r2,-12(fp)
  80286c:	10801f03 	ldbu	r2,124(r2)
  802870:	10803fcc 	andi	r2,r2,255
  802874:	1080201c 	xori	r2,r2,128
  802878:	10bfe004 	addi	r2,r2,-128
  80287c:	1000021e 	bne	r2,zero,802888 <logic+0x25c4>
  802880:	00800044 	movi	r2,1
  802884:	00000106 	br	80288c <logic+0x25c8>
  802888:	0005883a 	mov	r2,zero
  80288c:	1007883a 	mov	r3,r2
  802890:	e0bffd17 	ldw	r2,-12(fp)
  802894:	10c01e45 	stb	r3,121(r2)
  d->_g58_e4 = d->_pg107;
  802898:	e0bffd17 	ldw	r2,-12(fp)
  80289c:	10c05603 	ldbu	r3,344(r2)
  8028a0:	e0bffd17 	ldw	r2,-12(fp)
  8028a4:	10c04c05 	stb	r3,304(r2)
  d->_cg134 = d->VS && !d->ignore_VEvent;
  8028a8:	e0bffd17 	ldw	r2,-12(fp)
  8028ac:	10800443 	ldbu	r2,17(r2)
  8028b0:	10803fcc 	andi	r2,r2,255
  8028b4:	1080201c 	xori	r2,r2,128
  8028b8:	10bfe004 	addi	r2,r2,-128
  8028bc:	10000826 	beq	r2,zero,8028e0 <logic+0x261c>
  8028c0:	e0bffd17 	ldw	r2,-12(fp)
  8028c4:	10800543 	ldbu	r2,21(r2)
  8028c8:	10803fcc 	andi	r2,r2,255
  8028cc:	1080201c 	xori	r2,r2,128
  8028d0:	10bfe004 	addi	r2,r2,-128
  8028d4:	1000021e 	bne	r2,zero,8028e0 <logic+0x261c>
  8028d8:	00800044 	movi	r2,1
  8028dc:	00000106 	br	8028e4 <logic+0x2620>
  8028e0:	0005883a 	mov	r2,zero
  8028e4:	1007883a 	mov	r3,r2
  8028e8:	e0bffd17 	ldw	r2,-12(fp)
  8028ec:	10c042c5 	stb	r3,267(r2)
  d->_g44_e2 = d->_g58_e4 && d->_cg134;
  8028f0:	e0bffd17 	ldw	r2,-12(fp)
  8028f4:	10804c03 	ldbu	r2,304(r2)
  8028f8:	10803fcc 	andi	r2,r2,255
  8028fc:	1080201c 	xori	r2,r2,128
  802900:	10bfe004 	addi	r2,r2,-128
  802904:	10000826 	beq	r2,zero,802928 <logic+0x2664>
  802908:	e0bffd17 	ldw	r2,-12(fp)
  80290c:	108042c3 	ldbu	r2,267(r2)
  802910:	10803fcc 	andi	r2,r2,255
  802914:	1080201c 	xori	r2,r2,128
  802918:	10bfe004 	addi	r2,r2,-128
  80291c:	10000226 	beq	r2,zero,802928 <logic+0x2664>
  802920:	00800044 	movi	r2,1
  802924:	00000106 	br	80292c <logic+0x2668>
  802928:	0005883a 	mov	r2,zero
  80292c:	1007883a 	mov	r3,r2
  802930:	e0bffd17 	ldw	r2,-12(fp)
  802934:	10c04b85 	stb	r3,302(r2)
  if (d->_g44_e2) {
  802938:	e0bffd17 	ldw	r2,-12(fp)
  80293c:	10804b83 	ldbu	r2,302(r2)
  802940:	10803fcc 	andi	r2,r2,255
  802944:	1080201c 	xori	r2,r2,128
  802948:	10bfe004 	addi	r2,r2,-128
  80294c:	10000326 	beq	r2,zero,80295c <logic+0x2698>
    d->_PaceMaker_local__Atrig6 = 1;
  802950:	e0bffd17 	ldw	r2,-12(fp)
  802954:	00c00044 	movi	r3,1
  802958:	10c00c05 	stb	r3,48(r2)
  }
  d->_g52_e3 = d->_g58_e4 && !d->_cg134;
  80295c:	e0bffd17 	ldw	r2,-12(fp)
  802960:	10804c03 	ldbu	r2,304(r2)
  802964:	10803fcc 	andi	r2,r2,255
  802968:	1080201c 	xori	r2,r2,128
  80296c:	10bfe004 	addi	r2,r2,-128
  802970:	10000826 	beq	r2,zero,802994 <logic+0x26d0>
  802974:	e0bffd17 	ldw	r2,-12(fp)
  802978:	108042c3 	ldbu	r2,267(r2)
  80297c:	10803fcc 	andi	r2,r2,255
  802980:	1080201c 	xori	r2,r2,128
  802984:	10bfe004 	addi	r2,r2,-128
  802988:	1000021e 	bne	r2,zero,802994 <logic+0x26d0>
  80298c:	00800044 	movi	r2,1
  802990:	00000106 	br	802998 <logic+0x26d4>
  802994:	0005883a 	mov	r2,zero
  802998:	1007883a 	mov	r3,r2
  80299c:	e0bffd17 	ldw	r2,-12(fp)
  8029a0:	10c04bc5 	stb	r3,303(r2)
  d->_cg137 = d->AS && !d->ignore_AEvent;
  8029a4:	e0bffd17 	ldw	r2,-12(fp)
  8029a8:	10800403 	ldbu	r2,16(r2)
  8029ac:	10803fcc 	andi	r2,r2,255
  8029b0:	1080201c 	xori	r2,r2,128
  8029b4:	10bfe004 	addi	r2,r2,-128
  8029b8:	10000826 	beq	r2,zero,8029dc <logic+0x2718>
  8029bc:	e0bffd17 	ldw	r2,-12(fp)
  8029c0:	10800503 	ldbu	r2,20(r2)
  8029c4:	10803fcc 	andi	r2,r2,255
  8029c8:	1080201c 	xori	r2,r2,128
  8029cc:	10bfe004 	addi	r2,r2,-128
  8029d0:	1000021e 	bne	r2,zero,8029dc <logic+0x2718>
  8029d4:	00800044 	movi	r2,1
  8029d8:	00000106 	br	8029e0 <logic+0x271c>
  8029dc:	0005883a 	mov	r2,zero
  8029e0:	1007883a 	mov	r3,r2
  8029e4:	e0bffd17 	ldw	r2,-12(fp)
  8029e8:	10c04305 	stb	r3,268(r2)
  d->_g59 = d->_g52_e3 && d->_cg137;
  8029ec:	e0bffd17 	ldw	r2,-12(fp)
  8029f0:	10804bc3 	ldbu	r2,303(r2)
  8029f4:	10803fcc 	andi	r2,r2,255
  8029f8:	1080201c 	xori	r2,r2,128
  8029fc:	10bfe004 	addi	r2,r2,-128
  802a00:	10000826 	beq	r2,zero,802a24 <logic+0x2760>
  802a04:	e0bffd17 	ldw	r2,-12(fp)
  802a08:	10804303 	ldbu	r2,268(r2)
  802a0c:	10803fcc 	andi	r2,r2,255
  802a10:	1080201c 	xori	r2,r2,128
  802a14:	10bfe004 	addi	r2,r2,-128
  802a18:	10000226 	beq	r2,zero,802a24 <logic+0x2760>
  802a1c:	00800044 	movi	r2,1
  802a20:	00000106 	br	802a28 <logic+0x2764>
  802a24:	0005883a 	mov	r2,zero
  802a28:	1007883a 	mov	r3,r2
  802a2c:	e0bffd17 	ldw	r2,-12(fp)
  802a30:	10c01f45 	stb	r3,125(r2)
  if (d->_g59) {
  802a34:	e0bffd17 	ldw	r2,-12(fp)
  802a38:	10801f43 	ldbu	r2,125(r2)
  802a3c:	10803fcc 	andi	r2,r2,255
  802a40:	1080201c 	xori	r2,r2,128
  802a44:	10bfe004 	addi	r2,r2,-128
  802a48:	10000326 	beq	r2,zero,802a58 <logic+0x2794>
    d->_PaceMaker_local__Atrig7 = 1;
  802a4c:	e0bffd17 	ldw	r2,-12(fp)
  802a50:	00c00044 	movi	r3,1
  802a54:	10c00c45 	stb	r3,49(r2)
  }
  d->_g34 = d->_pg109;
  802a58:	e0bffd17 	ldw	r2,-12(fp)
  802a5c:	10c05643 	ldbu	r3,345(r2)
  802a60:	e0bffd17 	ldw	r2,-12(fp)
  802a64:	10c01ac5 	stb	r3,107(r2)
  if (d->_g34) {
  802a68:	e0bffd17 	ldw	r2,-12(fp)
  802a6c:	10801ac3 	ldbu	r2,107(r2)
  802a70:	10803fcc 	andi	r2,r2,255
  802a74:	1080201c 	xori	r2,r2,128
  802a78:	10bfe004 	addi	r2,r2,-128
  802a7c:	10001226 	beq	r2,zero,802ac8 <logic+0x2804>
    d->_PaceMaker_local_aei_clk += d->deltaT;
  802a80:	e13ffd17 	ldw	r4,-12(fp)
  802a84:	20800f17 	ldw	r2,60(r4)
  802a88:	20c01017 	ldw	r3,64(r4)
  802a8c:	e1bffd17 	ldw	r6,-12(fp)
  802a90:	31000017 	ldw	r4,0(r6)
  802a94:	31400117 	ldw	r5,4(r6)
  802a98:	200d883a 	mov	r6,r4
  802a9c:	280f883a 	mov	r7,r5
  802aa0:	1009883a 	mov	r4,r2
  802aa4:	180b883a 	mov	r5,r3
  802aa8:	08065a40 	call	8065a4 <__adddf3>
  802aac:	1009883a 	mov	r4,r2
  802ab0:	180b883a 	mov	r5,r3
  802ab4:	2005883a 	mov	r2,r4
  802ab8:	2807883a 	mov	r3,r5
  802abc:	e13ffd17 	ldw	r4,-12(fp)
  802ac0:	20800f15 	stw	r2,60(r4)
  802ac4:	20c01015 	stw	r3,64(r4)
  }
  d->_g137 = d->_g52_e3 && !d->_cg137;
  802ac8:	e0bffd17 	ldw	r2,-12(fp)
  802acc:	10804bc3 	ldbu	r2,303(r2)
  802ad0:	10803fcc 	andi	r2,r2,255
  802ad4:	1080201c 	xori	r2,r2,128
  802ad8:	10bfe004 	addi	r2,r2,-128
  802adc:	10000826 	beq	r2,zero,802b00 <logic+0x283c>
  802ae0:	e0bffd17 	ldw	r2,-12(fp)
  802ae4:	10804303 	ldbu	r2,268(r2)
  802ae8:	10803fcc 	andi	r2,r2,255
  802aec:	1080201c 	xori	r2,r2,128
  802af0:	10bfe004 	addi	r2,r2,-128
  802af4:	1000021e 	bne	r2,zero,802b00 <logic+0x283c>
  802af8:	00800044 	movi	r2,1
  802afc:	00000106 	br	802b04 <logic+0x2840>
  802b00:	0005883a 	mov	r2,zero
  802b04:	1007883a 	mov	r3,r2
  802b08:	e0bffd17 	ldw	r2,-12(fp)
  802b0c:	10c02c45 	stb	r3,177(r2)
  d->_cg139 = !d->AS && d->_PaceMaker_local_aei_clk >= AEI_VALUE;
  802b10:	e0bffd17 	ldw	r2,-12(fp)
  802b14:	10800403 	ldbu	r2,16(r2)
  802b18:	10803fcc 	andi	r2,r2,255
  802b1c:	1080201c 	xori	r2,r2,128
  802b20:	10bfe004 	addi	r2,r2,-128
  802b24:	10000b1e 	bne	r2,zero,802b54 <logic+0x2890>
  802b28:	e13ffd17 	ldw	r4,-12(fp)
  802b2c:	20800f17 	ldw	r2,60(r4)
  802b30:	20c01017 	ldw	r3,64(r4)
  802b34:	000d883a 	mov	r6,zero
  802b38:	01d02274 	movhi	r7,16521
  802b3c:	1009883a 	mov	r4,r2
  802b40:	180b883a 	mov	r5,r3
  802b44:	0806e500 	call	806e50 <__gedf2>
  802b48:	10000216 	blt	r2,zero,802b54 <logic+0x2890>
  802b4c:	00800044 	movi	r2,1
  802b50:	00000106 	br	802b58 <logic+0x2894>
  802b54:	0005883a 	mov	r2,zero
  802b58:	1007883a 	mov	r3,r2
  802b5c:	e0bffd17 	ldw	r2,-12(fp)
  802b60:	10c04285 	stb	r3,266(r2)
  d->_g140 = d->_g137 && d->_cg139;
  802b64:	e0bffd17 	ldw	r2,-12(fp)
  802b68:	10802c43 	ldbu	r2,177(r2)
  802b6c:	10803fcc 	andi	r2,r2,255
  802b70:	1080201c 	xori	r2,r2,128
  802b74:	10bfe004 	addi	r2,r2,-128
  802b78:	10000826 	beq	r2,zero,802b9c <logic+0x28d8>
  802b7c:	e0bffd17 	ldw	r2,-12(fp)
  802b80:	10804283 	ldbu	r2,266(r2)
  802b84:	10803fcc 	andi	r2,r2,255
  802b88:	1080201c 	xori	r2,r2,128
  802b8c:	10bfe004 	addi	r2,r2,-128
  802b90:	10000226 	beq	r2,zero,802b9c <logic+0x28d8>
  802b94:	00800044 	movi	r2,1
  802b98:	00000106 	br	802ba0 <logic+0x28dc>
  802b9c:	0005883a 	mov	r2,zero
  802ba0:	1007883a 	mov	r3,r2
  802ba4:	e0bffd17 	ldw	r2,-12(fp)
  802ba8:	10c02d05 	stb	r3,180(r2)
  if (d->_g140) {
  802bac:	e0bffd17 	ldw	r2,-12(fp)
  802bb0:	10802d03 	ldbu	r2,180(r2)
  802bb4:	10803fcc 	andi	r2,r2,255
  802bb8:	1080201c 	xori	r2,r2,128
  802bbc:	10bfe004 	addi	r2,r2,-128
  802bc0:	10000326 	beq	r2,zero,802bd0 <logic+0x290c>
    d->_PaceMaker_local__Atrig8 = 1;
  802bc4:	e0bffd17 	ldw	r2,-12(fp)
  802bc8:	00c00044 	movi	r3,1
  802bcc:	10c00c85 	stb	r3,50(r2)
  }
  d->_g120 = d->_g58 || d->_g44;
  802bd0:	e0bffd17 	ldw	r2,-12(fp)
  802bd4:	10801f03 	ldbu	r2,124(r2)
  802bd8:	10803fcc 	andi	r2,r2,255
  802bdc:	1080201c 	xori	r2,r2,128
  802be0:	10bfe004 	addi	r2,r2,-128
  802be4:	1000061e 	bne	r2,zero,802c00 <logic+0x293c>
  802be8:	e0bffd17 	ldw	r2,-12(fp)
  802bec:	10801c83 	ldbu	r2,114(r2)
  802bf0:	10803fcc 	andi	r2,r2,255
  802bf4:	1080201c 	xori	r2,r2,128
  802bf8:	10bfe004 	addi	r2,r2,-128
  802bfc:	10000226 	beq	r2,zero,802c08 <logic+0x2944>
  802c00:	00800044 	movi	r2,1
  802c04:	00000106 	br	802c0c <logic+0x2948>
  802c08:	0005883a 	mov	r2,zero
  802c0c:	1007883a 	mov	r3,r2
  802c10:	e0bffd17 	ldw	r2,-12(fp)
  802c14:	10c02945 	stb	r3,165(r2)
  d->_cg121 = d->_PaceMaker_local_aei_clk < AEI_VALUE;
  802c18:	e13ffd17 	ldw	r4,-12(fp)
  802c1c:	20800f17 	ldw	r2,60(r4)
  802c20:	20c01017 	ldw	r3,64(r4)
  802c24:	04000044 	movi	r16,1
  802c28:	000d883a 	mov	r6,zero
  802c2c:	01d02274 	movhi	r7,16521
  802c30:	1009883a 	mov	r4,r2
  802c34:	180b883a 	mov	r5,r3
  802c38:	0806f2c0 	call	806f2c <__ledf2>
  802c3c:	10000116 	blt	r2,zero,802c44 <logic+0x2980>
  802c40:	0021883a 	mov	r16,zero
  802c44:	8007883a 	mov	r3,r16
  802c48:	e0bffd17 	ldw	r2,-12(fp)
  802c4c:	10c04145 	stb	r3,261(r2)
  d->_g126 = d->_g120 && d->_cg121;
  802c50:	e0bffd17 	ldw	r2,-12(fp)
  802c54:	10802943 	ldbu	r2,165(r2)
  802c58:	10803fcc 	andi	r2,r2,255
  802c5c:	1080201c 	xori	r2,r2,128
  802c60:	10bfe004 	addi	r2,r2,-128
  802c64:	10000826 	beq	r2,zero,802c88 <logic+0x29c4>
  802c68:	e0bffd17 	ldw	r2,-12(fp)
  802c6c:	10804143 	ldbu	r2,261(r2)
  802c70:	10803fcc 	andi	r2,r2,255
  802c74:	1080201c 	xori	r2,r2,128
  802c78:	10bfe004 	addi	r2,r2,-128
  802c7c:	10000226 	beq	r2,zero,802c88 <logic+0x29c4>
  802c80:	00800044 	movi	r2,1
  802c84:	00000106 	br	802c8c <logic+0x29c8>
  802c88:	0005883a 	mov	r2,zero
  802c8c:	1007883a 	mov	r3,r2
  802c90:	e0bffd17 	ldw	r2,-12(fp)
  802c94:	10c02a85 	stb	r3,170(r2)
  if (d->_g126) {
  802c98:	e0bffd17 	ldw	r2,-12(fp)
  802c9c:	10802a83 	ldbu	r2,170(r2)
  802ca0:	10803fcc 	andi	r2,r2,255
  802ca4:	1080201c 	xori	r2,r2,128
  802ca8:	10bfe004 	addi	r2,r2,-128
  802cac:	10002826 	beq	r2,zero,802d50 <logic+0x2a8c>
    d->sleepT = (d->sleepT < (AEI_VALUE - d->_PaceMaker_local_aei_clk)) ? d->sleepT : (AEI_VALUE - d->_PaceMaker_local_aei_clk);
  802cb0:	e0bffd17 	ldw	r2,-12(fp)
  802cb4:	14000217 	ldw	r16,8(r2)
  802cb8:	14400317 	ldw	r17,12(r2)
  802cbc:	e13ffd17 	ldw	r4,-12(fp)
  802cc0:	20800f17 	ldw	r2,60(r4)
  802cc4:	20c01017 	ldw	r3,64(r4)
  802cc8:	100d883a 	mov	r6,r2
  802ccc:	180f883a 	mov	r7,r3
  802cd0:	0009883a 	mov	r4,zero
  802cd4:	01502274 	movhi	r5,16521
  802cd8:	08070200 	call	807020 <__subdf3>
  802cdc:	1009883a 	mov	r4,r2
  802ce0:	180b883a 	mov	r5,r3
  802ce4:	2005883a 	mov	r2,r4
  802ce8:	2807883a 	mov	r3,r5
  802cec:	100d883a 	mov	r6,r2
  802cf0:	180f883a 	mov	r7,r3
  802cf4:	8009883a 	mov	r4,r16
  802cf8:	880b883a 	mov	r5,r17
  802cfc:	0806f2c0 	call	806f2c <__ledf2>
  802d00:	1000040e 	bge	r2,zero,802d14 <logic+0x2a50>
  802d04:	e13ffd17 	ldw	r4,-12(fp)
  802d08:	20800217 	ldw	r2,8(r4)
  802d0c:	20c00317 	ldw	r3,12(r4)
  802d10:	00000c06 	br	802d44 <logic+0x2a80>
  802d14:	e13ffd17 	ldw	r4,-12(fp)
  802d18:	20800f17 	ldw	r2,60(r4)
  802d1c:	20c01017 	ldw	r3,64(r4)
  802d20:	100d883a 	mov	r6,r2
  802d24:	180f883a 	mov	r7,r3
  802d28:	0009883a 	mov	r4,zero
  802d2c:	01502274 	movhi	r5,16521
  802d30:	08070200 	call	807020 <__subdf3>
  802d34:	1009883a 	mov	r4,r2
  802d38:	180b883a 	mov	r5,r3
  802d3c:	2005883a 	mov	r2,r4
  802d40:	2807883a 	mov	r3,r5
  802d44:	e13ffd17 	ldw	r4,-12(fp)
  802d48:	20800215 	stw	r2,8(r4)
  802d4c:	20c00315 	stw	r3,12(r4)
  }
  d->_cg122 = d->_PaceMaker_local__Atrig6 || d->_PaceMaker_local__Atrig7 || d->_PaceMaker_local__Atrig8;
  802d50:	e0bffd17 	ldw	r2,-12(fp)
  802d54:	10800c03 	ldbu	r2,48(r2)
  802d58:	10803fcc 	andi	r2,r2,255
  802d5c:	1080201c 	xori	r2,r2,128
  802d60:	10bfe004 	addi	r2,r2,-128
  802d64:	10000c1e 	bne	r2,zero,802d98 <logic+0x2ad4>
  802d68:	e0bffd17 	ldw	r2,-12(fp)
  802d6c:	10800c43 	ldbu	r2,49(r2)
  802d70:	10803fcc 	andi	r2,r2,255
  802d74:	1080201c 	xori	r2,r2,128
  802d78:	10bfe004 	addi	r2,r2,-128
  802d7c:	1000061e 	bne	r2,zero,802d98 <logic+0x2ad4>
  802d80:	e0bffd17 	ldw	r2,-12(fp)
  802d84:	10800c83 	ldbu	r2,50(r2)
  802d88:	10803fcc 	andi	r2,r2,255
  802d8c:	1080201c 	xori	r2,r2,128
  802d90:	10bfe004 	addi	r2,r2,-128
  802d94:	10000226 	beq	r2,zero,802da0 <logic+0x2adc>
  802d98:	00800044 	movi	r2,1
  802d9c:	00000106 	br	802da4 <logic+0x2ae0>
  802da0:	0005883a 	mov	r2,zero
  802da4:	1007883a 	mov	r3,r2
  802da8:	e0bffd17 	ldw	r2,-12(fp)
  802dac:	10c04105 	stb	r3,260(r2)
  d->_g121 = d->_g120 && !d->_cg121;
  802db0:	e0bffd17 	ldw	r2,-12(fp)
  802db4:	10802943 	ldbu	r2,165(r2)
  802db8:	10803fcc 	andi	r2,r2,255
  802dbc:	1080201c 	xori	r2,r2,128
  802dc0:	10bfe004 	addi	r2,r2,-128
  802dc4:	10000826 	beq	r2,zero,802de8 <logic+0x2b24>
  802dc8:	e0bffd17 	ldw	r2,-12(fp)
  802dcc:	10804143 	ldbu	r2,261(r2)
  802dd0:	10803fcc 	andi	r2,r2,255
  802dd4:	1080201c 	xori	r2,r2,128
  802dd8:	10bfe004 	addi	r2,r2,-128
  802ddc:	1000021e 	bne	r2,zero,802de8 <logic+0x2b24>
  802de0:	00800044 	movi	r2,1
  802de4:	00000106 	br	802dec <logic+0x2b28>
  802de8:	0005883a 	mov	r2,zero
  802dec:	1007883a 	mov	r3,r2
  802df0:	e0bffd17 	ldw	r2,-12(fp)
  802df4:	10c02985 	stb	r3,166(r2)
  d->_cg124 = d->_PaceMaker_local__Atrig6 || d->_PaceMaker_local__Atrig7 || d->_PaceMaker_local__Atrig8;
  802df8:	e0bffd17 	ldw	r2,-12(fp)
  802dfc:	10800c03 	ldbu	r2,48(r2)
  802e00:	10803fcc 	andi	r2,r2,255
  802e04:	1080201c 	xori	r2,r2,128
  802e08:	10bfe004 	addi	r2,r2,-128
  802e0c:	10000c1e 	bne	r2,zero,802e40 <logic+0x2b7c>
  802e10:	e0bffd17 	ldw	r2,-12(fp)
  802e14:	10800c43 	ldbu	r2,49(r2)
  802e18:	10803fcc 	andi	r2,r2,255
  802e1c:	1080201c 	xori	r2,r2,128
  802e20:	10bfe004 	addi	r2,r2,-128
  802e24:	1000061e 	bne	r2,zero,802e40 <logic+0x2b7c>
  802e28:	e0bffd17 	ldw	r2,-12(fp)
  802e2c:	10800c83 	ldbu	r2,50(r2)
  802e30:	10803fcc 	andi	r2,r2,255
  802e34:	1080201c 	xori	r2,r2,128
  802e38:	10bfe004 	addi	r2,r2,-128
  802e3c:	10000226 	beq	r2,zero,802e48 <logic+0x2b84>
  802e40:	00800044 	movi	r2,1
  802e44:	00000106 	br	802e4c <logic+0x2b88>
  802e48:	0005883a 	mov	r2,zero
  802e4c:	1007883a 	mov	r3,r2
  802e50:	e0bffd17 	ldw	r2,-12(fp)
  802e54:	10c04185 	stb	r3,262(r2)
  d->_g123 = (d->_g126 && d->_cg122) || (d->_g121 && d->_cg124);
  802e58:	e0bffd17 	ldw	r2,-12(fp)
  802e5c:	10802a83 	ldbu	r2,170(r2)
  802e60:	10803fcc 	andi	r2,r2,255
  802e64:	1080201c 	xori	r2,r2,128
  802e68:	10bfe004 	addi	r2,r2,-128
  802e6c:	10000626 	beq	r2,zero,802e88 <logic+0x2bc4>
  802e70:	e0bffd17 	ldw	r2,-12(fp)
  802e74:	10804103 	ldbu	r2,260(r2)
  802e78:	10803fcc 	andi	r2,r2,255
  802e7c:	1080201c 	xori	r2,r2,128
  802e80:	10bfe004 	addi	r2,r2,-128
  802e84:	10000c1e 	bne	r2,zero,802eb8 <logic+0x2bf4>
  802e88:	e0bffd17 	ldw	r2,-12(fp)
  802e8c:	10802983 	ldbu	r2,166(r2)
  802e90:	10803fcc 	andi	r2,r2,255
  802e94:	1080201c 	xori	r2,r2,128
  802e98:	10bfe004 	addi	r2,r2,-128
  802e9c:	10000826 	beq	r2,zero,802ec0 <logic+0x2bfc>
  802ea0:	e0bffd17 	ldw	r2,-12(fp)
  802ea4:	10804183 	ldbu	r2,262(r2)
  802ea8:	10803fcc 	andi	r2,r2,255
  802eac:	1080201c 	xori	r2,r2,128
  802eb0:	10bfe004 	addi	r2,r2,-128
  802eb4:	10000226 	beq	r2,zero,802ec0 <logic+0x2bfc>
  802eb8:	00800044 	movi	r2,1
  802ebc:	00000106 	br	802ec4 <logic+0x2c00>
  802ec0:	0005883a 	mov	r2,zero
  802ec4:	1007883a 	mov	r3,r2
  802ec8:	e0bffd17 	ldw	r2,-12(fp)
  802ecc:	10c02a05 	stb	r3,168(r2)
  d->_g131_e2 = !d->_g34;
  802ed0:	e0bffd17 	ldw	r2,-12(fp)
  802ed4:	10801ac3 	ldbu	r2,107(r2)
  802ed8:	10803fcc 	andi	r2,r2,255
  802edc:	1080201c 	xori	r2,r2,128
  802ee0:	10bfe004 	addi	r2,r2,-128
  802ee4:	1005003a 	cmpeq	r2,r2,zero
  802ee8:	1007883a 	mov	r3,r2
  802eec:	e0bffd17 	ldw	r2,-12(fp)
  802ef0:	10c04d85 	stb	r3,310(r2)
  d->_cg130 = d->_PaceMaker_local__Atrig6 || d->_PaceMaker_local__Atrig7 || d->_PaceMaker_local__Atrig8;
  802ef4:	e0bffd17 	ldw	r2,-12(fp)
  802ef8:	10800c03 	ldbu	r2,48(r2)
  802efc:	10803fcc 	andi	r2,r2,255
  802f00:	1080201c 	xori	r2,r2,128
  802f04:	10bfe004 	addi	r2,r2,-128
  802f08:	10000c1e 	bne	r2,zero,802f3c <logic+0x2c78>
  802f0c:	e0bffd17 	ldw	r2,-12(fp)
  802f10:	10800c43 	ldbu	r2,49(r2)
  802f14:	10803fcc 	andi	r2,r2,255
  802f18:	1080201c 	xori	r2,r2,128
  802f1c:	10bfe004 	addi	r2,r2,-128
  802f20:	1000061e 	bne	r2,zero,802f3c <logic+0x2c78>
  802f24:	e0bffd17 	ldw	r2,-12(fp)
  802f28:	10800c83 	ldbu	r2,50(r2)
  802f2c:	10803fcc 	andi	r2,r2,255
  802f30:	1080201c 	xori	r2,r2,128
  802f34:	10bfe004 	addi	r2,r2,-128
  802f38:	10000226 	beq	r2,zero,802f44 <logic+0x2c80>
  802f3c:	00800044 	movi	r2,1
  802f40:	00000106 	br	802f48 <logic+0x2c84>
  802f44:	0005883a 	mov	r2,zero
  802f48:	1007883a 	mov	r3,r2
  802f4c:	e0bffd17 	ldw	r2,-12(fp)
  802f50:	10c04245 	stb	r3,265(r2)
  d->_g131 = d->_g34 && d->_cg130;
  802f54:	e0bffd17 	ldw	r2,-12(fp)
  802f58:	10801ac3 	ldbu	r2,107(r2)
  802f5c:	10803fcc 	andi	r2,r2,255
  802f60:	1080201c 	xori	r2,r2,128
  802f64:	10bfe004 	addi	r2,r2,-128
  802f68:	10000826 	beq	r2,zero,802f8c <logic+0x2cc8>
  802f6c:	e0bffd17 	ldw	r2,-12(fp)
  802f70:	10804243 	ldbu	r2,265(r2)
  802f74:	10803fcc 	andi	r2,r2,255
  802f78:	1080201c 	xori	r2,r2,128
  802f7c:	10bfe004 	addi	r2,r2,-128
  802f80:	10000226 	beq	r2,zero,802f8c <logic+0x2cc8>
  802f84:	00800044 	movi	r2,1
  802f88:	00000106 	br	802f90 <logic+0x2ccc>
  802f8c:	0005883a 	mov	r2,zero
  802f90:	1007883a 	mov	r3,r2
  802f94:	e0bffd17 	ldw	r2,-12(fp)
  802f98:	10c02b45 	stb	r3,173(r2)
  d->_g134 = !d->_g58_e4;
  802f9c:	e0bffd17 	ldw	r2,-12(fp)
  802fa0:	10804c03 	ldbu	r2,304(r2)
  802fa4:	10803fcc 	andi	r2,r2,255
  802fa8:	1080201c 	xori	r2,r2,128
  802fac:	10bfe004 	addi	r2,r2,-128
  802fb0:	1005003a 	cmpeq	r2,r2,zero
  802fb4:	1007883a 	mov	r3,r2
  802fb8:	e0bffd17 	ldw	r2,-12(fp)
  802fbc:	10c02b85 	stb	r3,174(r2)
  d->_g138 = d->_g44_e2 || d->_g59 || d->_g140;
  802fc0:	e0bffd17 	ldw	r2,-12(fp)
  802fc4:	10804b83 	ldbu	r2,302(r2)
  802fc8:	10803fcc 	andi	r2,r2,255
  802fcc:	1080201c 	xori	r2,r2,128
  802fd0:	10bfe004 	addi	r2,r2,-128
  802fd4:	10000c1e 	bne	r2,zero,803008 <logic+0x2d44>
  802fd8:	e0bffd17 	ldw	r2,-12(fp)
  802fdc:	10801f43 	ldbu	r2,125(r2)
  802fe0:	10803fcc 	andi	r2,r2,255
  802fe4:	1080201c 	xori	r2,r2,128
  802fe8:	10bfe004 	addi	r2,r2,-128
  802fec:	1000061e 	bne	r2,zero,803008 <logic+0x2d44>
  802ff0:	e0bffd17 	ldw	r2,-12(fp)
  802ff4:	10802d03 	ldbu	r2,180(r2)
  802ff8:	10803fcc 	andi	r2,r2,255
  802ffc:	1080201c 	xori	r2,r2,128
  803000:	10bfe004 	addi	r2,r2,-128
  803004:	10000226 	beq	r2,zero,803010 <logic+0x2d4c>
  803008:	00800044 	movi	r2,1
  80300c:	00000106 	br	803014 <logic+0x2d50>
  803010:	0005883a 	mov	r2,zero
  803014:	1007883a 	mov	r3,r2
  803018:	e0bffd17 	ldw	r2,-12(fp)
  80301c:	10c02c85 	stb	r3,178(r2)
  d->_g135 = (d->_g52 || d->_g123) && (d->_g131_e2 || d->_g131) && (d->_g134 || d->_g138) && (d->_g123 || d->_g131 || d->_g138);
  803020:	e0bffd17 	ldw	r2,-12(fp)
  803024:	10801e43 	ldbu	r2,121(r2)
  803028:	10803fcc 	andi	r2,r2,255
  80302c:	1080201c 	xori	r2,r2,128
  803030:	10bfe004 	addi	r2,r2,-128
  803034:	1000061e 	bne	r2,zero,803050 <logic+0x2d8c>
  803038:	e0bffd17 	ldw	r2,-12(fp)
  80303c:	10802a03 	ldbu	r2,168(r2)
  803040:	10803fcc 	andi	r2,r2,255
  803044:	1080201c 	xori	r2,r2,128
  803048:	10bfe004 	addi	r2,r2,-128
  80304c:	10002c26 	beq	r2,zero,803100 <logic+0x2e3c>
  803050:	e0bffd17 	ldw	r2,-12(fp)
  803054:	10804d83 	ldbu	r2,310(r2)
  803058:	10803fcc 	andi	r2,r2,255
  80305c:	1080201c 	xori	r2,r2,128
  803060:	10bfe004 	addi	r2,r2,-128
  803064:	1000061e 	bne	r2,zero,803080 <logic+0x2dbc>
  803068:	e0bffd17 	ldw	r2,-12(fp)
  80306c:	10802b43 	ldbu	r2,173(r2)
  803070:	10803fcc 	andi	r2,r2,255
  803074:	1080201c 	xori	r2,r2,128
  803078:	10bfe004 	addi	r2,r2,-128
  80307c:	10002026 	beq	r2,zero,803100 <logic+0x2e3c>
  803080:	e0bffd17 	ldw	r2,-12(fp)
  803084:	10802b83 	ldbu	r2,174(r2)
  803088:	10803fcc 	andi	r2,r2,255
  80308c:	1080201c 	xori	r2,r2,128
  803090:	10bfe004 	addi	r2,r2,-128
  803094:	1000061e 	bne	r2,zero,8030b0 <logic+0x2dec>
  803098:	e0bffd17 	ldw	r2,-12(fp)
  80309c:	10802c83 	ldbu	r2,178(r2)
  8030a0:	10803fcc 	andi	r2,r2,255
  8030a4:	1080201c 	xori	r2,r2,128
  8030a8:	10bfe004 	addi	r2,r2,-128
  8030ac:	10001426 	beq	r2,zero,803100 <logic+0x2e3c>
  8030b0:	e0bffd17 	ldw	r2,-12(fp)
  8030b4:	10802a03 	ldbu	r2,168(r2)
  8030b8:	10803fcc 	andi	r2,r2,255
  8030bc:	1080201c 	xori	r2,r2,128
  8030c0:	10bfe004 	addi	r2,r2,-128
  8030c4:	10000c1e 	bne	r2,zero,8030f8 <logic+0x2e34>
  8030c8:	e0bffd17 	ldw	r2,-12(fp)
  8030cc:	10802b43 	ldbu	r2,173(r2)
  8030d0:	10803fcc 	andi	r2,r2,255
  8030d4:	1080201c 	xori	r2,r2,128
  8030d8:	10bfe004 	addi	r2,r2,-128
  8030dc:	1000061e 	bne	r2,zero,8030f8 <logic+0x2e34>
  8030e0:	e0bffd17 	ldw	r2,-12(fp)
  8030e4:	10802c83 	ldbu	r2,178(r2)
  8030e8:	10803fcc 	andi	r2,r2,255
  8030ec:	1080201c 	xori	r2,r2,128
  8030f0:	10bfe004 	addi	r2,r2,-128
  8030f4:	10000226 	beq	r2,zero,803100 <logic+0x2e3c>
  8030f8:	00800044 	movi	r2,1
  8030fc:	00000106 	br	803104 <logic+0x2e40>
  803100:	0005883a 	mov	r2,zero
  803104:	1007883a 	mov	r3,r2
  803108:	e0bffd17 	ldw	r2,-12(fp)
  80310c:	10c02bc5 	stb	r3,175(r2)
  d->_cg141 = d->_PaceMaker_local__Atrig6;
  803110:	e0bffd17 	ldw	r2,-12(fp)
  803114:	10c00c03 	ldbu	r3,48(r2)
  803118:	e0bffd17 	ldw	r2,-12(fp)
  80311c:	10c04045 	stb	r3,257(r2)
  d->_g140 = d->_g135 && !d->_cg141;
  803120:	e0bffd17 	ldw	r2,-12(fp)
  803124:	10802bc3 	ldbu	r2,175(r2)
  803128:	10803fcc 	andi	r2,r2,255
  80312c:	1080201c 	xori	r2,r2,128
  803130:	10bfe004 	addi	r2,r2,-128
  803134:	10000826 	beq	r2,zero,803158 <logic+0x2e94>
  803138:	e0bffd17 	ldw	r2,-12(fp)
  80313c:	10804043 	ldbu	r2,257(r2)
  803140:	10803fcc 	andi	r2,r2,255
  803144:	1080201c 	xori	r2,r2,128
  803148:	10bfe004 	addi	r2,r2,-128
  80314c:	1000021e 	bne	r2,zero,803158 <logic+0x2e94>
  803150:	00800044 	movi	r2,1
  803154:	00000106 	br	80315c <logic+0x2e98>
  803158:	0005883a 	mov	r2,zero
  80315c:	1007883a 	mov	r3,r2
  803160:	e0bffd17 	ldw	r2,-12(fp)
  803164:	10c02d05 	stb	r3,180(r2)
  d->_cg142 = d->_PaceMaker_local__Atrig7;
  803168:	e0bffd17 	ldw	r2,-12(fp)
  80316c:	10c00c43 	ldbu	r3,49(r2)
  803170:	e0bffd17 	ldw	r2,-12(fp)
  803174:	10c03fc5 	stb	r3,255(r2)
  d->_g123 = d->_g140 && !d->_cg142;
  803178:	e0bffd17 	ldw	r2,-12(fp)
  80317c:	10802d03 	ldbu	r2,180(r2)
  803180:	10803fcc 	andi	r2,r2,255
  803184:	1080201c 	xori	r2,r2,128
  803188:	10bfe004 	addi	r2,r2,-128
  80318c:	10000826 	beq	r2,zero,8031b0 <logic+0x2eec>
  803190:	e0bffd17 	ldw	r2,-12(fp)
  803194:	10803fc3 	ldbu	r2,255(r2)
  803198:	10803fcc 	andi	r2,r2,255
  80319c:	1080201c 	xori	r2,r2,128
  8031a0:	10bfe004 	addi	r2,r2,-128
  8031a4:	1000021e 	bne	r2,zero,8031b0 <logic+0x2eec>
  8031a8:	00800044 	movi	r2,1
  8031ac:	00000106 	br	8031b4 <logic+0x2ef0>
  8031b0:	0005883a 	mov	r2,zero
  8031b4:	1007883a 	mov	r3,r2
  8031b8:	e0bffd17 	ldw	r2,-12(fp)
  8031bc:	10c02a05 	stb	r3,168(r2)
  if (d->_g123) {
  8031c0:	e0bffd17 	ldw	r2,-12(fp)
  8031c4:	10802a03 	ldbu	r2,168(r2)
  8031c8:	10803fcc 	andi	r2,r2,255
  8031cc:	1080201c 	xori	r2,r2,128
  8031d0:	10bfe004 	addi	r2,r2,-128
  8031d4:	10000626 	beq	r2,zero,8031f0 <logic+0x2f2c>
    d->AP |= 1;
  8031d8:	e0bffd17 	ldw	r2,-12(fp)
  8031dc:	10800483 	ldbu	r2,18(r2)
  8031e0:	10800054 	ori	r2,r2,1
  8031e4:	1007883a 	mov	r3,r2
  8031e8:	e0bffd17 	ldw	r2,-12(fp)
  8031ec:	10c00485 	stb	r3,18(r2)
  }
  d->_g131_e2 = d->_pg123_e1;
  8031f0:	e0bffd17 	ldw	r2,-12(fp)
  8031f4:	10c05683 	ldbu	r3,346(r2)
  8031f8:	e0bffd17 	ldw	r2,-12(fp)
  8031fc:	10c04d85 	stb	r3,310(r2)
  d->_cg65 = (d->AS || d->AP) && !d->ignore_AEvent;
  803200:	e0bffd17 	ldw	r2,-12(fp)
  803204:	10800403 	ldbu	r2,16(r2)
  803208:	10803fcc 	andi	r2,r2,255
  80320c:	1080201c 	xori	r2,r2,128
  803210:	10bfe004 	addi	r2,r2,-128
  803214:	1000061e 	bne	r2,zero,803230 <logic+0x2f6c>
  803218:	e0bffd17 	ldw	r2,-12(fp)
  80321c:	10800483 	ldbu	r2,18(r2)
  803220:	10803fcc 	andi	r2,r2,255
  803224:	1080201c 	xori	r2,r2,128
  803228:	10bfe004 	addi	r2,r2,-128
  80322c:	10000826 	beq	r2,zero,803250 <logic+0x2f8c>
  803230:	e0bffd17 	ldw	r2,-12(fp)
  803234:	10800503 	ldbu	r2,20(r2)
  803238:	10803fcc 	andi	r2,r2,255
  80323c:	1080201c 	xori	r2,r2,128
  803240:	10bfe004 	addi	r2,r2,-128
  803244:	1000021e 	bne	r2,zero,803250 <logic+0x2f8c>
  803248:	00800044 	movi	r2,1
  80324c:	00000106 	br	803254 <logic+0x2f90>
  803250:	0005883a 	mov	r2,zero
  803254:	1007883a 	mov	r3,r2
  803258:	e0bffd17 	ldw	r2,-12(fp)
  80325c:	10c03a45 	stb	r3,233(r2)
  d->_g123_e1 = d->_GO || (d->_g96 && d->_cg104) || d->_g103 || d->_g110 || d->_g73_e1 || (d->_g131_e2 && !d->_cg65);
  803260:	e0bffd17 	ldw	r2,-12(fp)
  803264:	10803643 	ldbu	r2,217(r2)
  803268:	10803fcc 	andi	r2,r2,255
  80326c:	1080201c 	xori	r2,r2,128
  803270:	10bfe004 	addi	r2,r2,-128
  803274:	10002a1e 	bne	r2,zero,803320 <logic+0x305c>
  803278:	e0bffd17 	ldw	r2,-12(fp)
  80327c:	108024c3 	ldbu	r2,147(r2)
  803280:	10803fcc 	andi	r2,r2,255
  803284:	1080201c 	xori	r2,r2,128
  803288:	10bfe004 	addi	r2,r2,-128
  80328c:	10000626 	beq	r2,zero,8032a8 <logic+0x2fe4>
  803290:	e0bffd17 	ldw	r2,-12(fp)
  803294:	10803a03 	ldbu	r2,232(r2)
  803298:	10803fcc 	andi	r2,r2,255
  80329c:	1080201c 	xori	r2,r2,128
  8032a0:	10bfe004 	addi	r2,r2,-128
  8032a4:	10001e1e 	bne	r2,zero,803320 <logic+0x305c>
  8032a8:	e0bffd17 	ldw	r2,-12(fp)
  8032ac:	10802683 	ldbu	r2,154(r2)
  8032b0:	10803fcc 	andi	r2,r2,255
  8032b4:	1080201c 	xori	r2,r2,128
  8032b8:	10bfe004 	addi	r2,r2,-128
  8032bc:	1000181e 	bne	r2,zero,803320 <logic+0x305c>
  8032c0:	e0bffd17 	ldw	r2,-12(fp)
  8032c4:	10802803 	ldbu	r2,160(r2)
  8032c8:	10803fcc 	andi	r2,r2,255
  8032cc:	1080201c 	xori	r2,r2,128
  8032d0:	10bfe004 	addi	r2,r2,-128
  8032d4:	1000121e 	bne	r2,zero,803320 <logic+0x305c>
  8032d8:	e0bffd17 	ldw	r2,-12(fp)
  8032dc:	10804c43 	ldbu	r2,305(r2)
  8032e0:	10803fcc 	andi	r2,r2,255
  8032e4:	1080201c 	xori	r2,r2,128
  8032e8:	10bfe004 	addi	r2,r2,-128
  8032ec:	10000c1e 	bne	r2,zero,803320 <logic+0x305c>
  8032f0:	e0bffd17 	ldw	r2,-12(fp)
  8032f4:	10804d83 	ldbu	r2,310(r2)
  8032f8:	10803fcc 	andi	r2,r2,255
  8032fc:	1080201c 	xori	r2,r2,128
  803300:	10bfe004 	addi	r2,r2,-128
  803304:	10000826 	beq	r2,zero,803328 <logic+0x3064>
  803308:	e0bffd17 	ldw	r2,-12(fp)
  80330c:	10803a43 	ldbu	r2,233(r2)
  803310:	10803fcc 	andi	r2,r2,255
  803314:	1080201c 	xori	r2,r2,128
  803318:	10bfe004 	addi	r2,r2,-128
  80331c:	1000021e 	bne	r2,zero,803328 <logic+0x3064>
  803320:	00800044 	movi	r2,1
  803324:	00000106 	br	80332c <logic+0x3068>
  803328:	0005883a 	mov	r2,zero
  80332c:	1007883a 	mov	r3,r2
  803330:	e0bffd17 	ldw	r2,-12(fp)
  803334:	10c04d45 	stb	r3,309(r2)
  d->_g131 = d->_g131_e2 && d->_cg65;
  803338:	e0bffd17 	ldw	r2,-12(fp)
  80333c:	10804d83 	ldbu	r2,310(r2)
  803340:	10803fcc 	andi	r2,r2,255
  803344:	1080201c 	xori	r2,r2,128
  803348:	10bfe004 	addi	r2,r2,-128
  80334c:	10000826 	beq	r2,zero,803370 <logic+0x30ac>
  803350:	e0bffd17 	ldw	r2,-12(fp)
  803354:	10803a43 	ldbu	r2,233(r2)
  803358:	10803fcc 	andi	r2,r2,255
  80335c:	1080201c 	xori	r2,r2,128
  803360:	10bfe004 	addi	r2,r2,-128
  803364:	10000226 	beq	r2,zero,803370 <logic+0x30ac>
  803368:	00800044 	movi	r2,1
  80336c:	00000106 	br	803374 <logic+0x30b0>
  803370:	0005883a 	mov	r2,zero
  803374:	1007883a 	mov	r3,r2
  803378:	e0bffd17 	ldw	r2,-12(fp)
  80337c:	10c02b45 	stb	r3,173(r2)
  if (d->_g131) {
  803380:	e0bffd17 	ldw	r2,-12(fp)
  803384:	10802b43 	ldbu	r2,173(r2)
  803388:	10803fcc 	andi	r2,r2,255
  80338c:	1080201c 	xori	r2,r2,128
  803390:	10bfe004 	addi	r2,r2,-128
  803394:	10000b26 	beq	r2,zero,8033c4 <logic+0x3100>
    d->_PaceMaker_local_avi_clk = 0.0;
  803398:	e0bffd17 	ldw	r2,-12(fp)
  80339c:	10000d15 	stw	zero,52(r2)
  8033a0:	10000e15 	stw	zero,56(r2)
    d->_PaceMaker_local__Atrig2 = 0;
  8033a4:	e0bffd17 	ldw	r2,-12(fp)
  8033a8:	10000b05 	stb	zero,44(r2)
    d->_PaceMaker_local__Atrig3 = 0;
  8033ac:	e0bffd17 	ldw	r2,-12(fp)
  8033b0:	10000b45 	stb	zero,45(r2)
    d->_PaceMaker_local__Atrig4 = 0;
  8033b4:	e0bffd17 	ldw	r2,-12(fp)
  8033b8:	10000b85 	stb	zero,46(r2)
    d->_PaceMaker_local__Atrig5 = 0;
  8033bc:	e0bffd17 	ldw	r2,-12(fp)
  8033c0:	10000bc5 	stb	zero,47(r2)
  }
  d->_cg67 = d->_PaceMaker_local_avi_clk < AVI_VALUE - 1;
  8033c4:	e13ffd17 	ldw	r4,-12(fp)
  8033c8:	20800d17 	ldw	r2,52(r4)
  8033cc:	20c00e17 	ldw	r3,56(r4)
  8033d0:	04000044 	movi	r16,1
  8033d4:	000d883a 	mov	r6,zero
  8033d8:	01d01cf4 	movhi	r7,16499
  8033dc:	39ec0004 	addi	r7,r7,-20480
  8033e0:	1009883a 	mov	r4,r2
  8033e4:	180b883a 	mov	r5,r3
  8033e8:	0806f2c0 	call	806f2c <__ledf2>
  8033ec:	10000116 	blt	r2,zero,8033f4 <logic+0x3130>
  8033f0:	0021883a 	mov	r16,zero
  8033f4:	8007883a 	mov	r3,r16
  8033f8:	e0bffd17 	ldw	r2,-12(fp)
  8033fc:	10c03a85 	stb	r3,234(r2)
  d->_g136 = d->_g131 && d->_cg67;
  803400:	e0bffd17 	ldw	r2,-12(fp)
  803404:	10802b43 	ldbu	r2,173(r2)
  803408:	10803fcc 	andi	r2,r2,255
  80340c:	1080201c 	xori	r2,r2,128
  803410:	10bfe004 	addi	r2,r2,-128
  803414:	10000826 	beq	r2,zero,803438 <logic+0x3174>
  803418:	e0bffd17 	ldw	r2,-12(fp)
  80341c:	10803a83 	ldbu	r2,234(r2)
  803420:	10803fcc 	andi	r2,r2,255
  803424:	1080201c 	xori	r2,r2,128
  803428:	10bfe004 	addi	r2,r2,-128
  80342c:	10000226 	beq	r2,zero,803438 <logic+0x3174>
  803430:	00800044 	movi	r2,1
  803434:	00000106 	br	80343c <logic+0x3178>
  803438:	0005883a 	mov	r2,zero
  80343c:	1007883a 	mov	r3,r2
  803440:	e0bffd17 	ldw	r2,-12(fp)
  803444:	10c02c05 	stb	r3,176(r2)
  if (d->_g136) {
  803448:	e0bffd17 	ldw	r2,-12(fp)
  80344c:	10802c03 	ldbu	r2,176(r2)
  803450:	10803fcc 	andi	r2,r2,255
  803454:	1080201c 	xori	r2,r2,128
  803458:	10bfe004 	addi	r2,r2,-128
  80345c:	10002a26 	beq	r2,zero,803508 <logic+0x3244>
    d->sleepT = (d->sleepT < (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk)) ? d->sleepT : (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk);
  803460:	e0bffd17 	ldw	r2,-12(fp)
  803464:	14000217 	ldw	r16,8(r2)
  803468:	14400317 	ldw	r17,12(r2)
  80346c:	e13ffd17 	ldw	r4,-12(fp)
  803470:	20800d17 	ldw	r2,52(r4)
  803474:	20c00e17 	ldw	r3,56(r4)
  803478:	100d883a 	mov	r6,r2
  80347c:	180f883a 	mov	r7,r3
  803480:	0009883a 	mov	r4,zero
  803484:	01501cf4 	movhi	r5,16499
  803488:	296c0004 	addi	r5,r5,-20480
  80348c:	08070200 	call	807020 <__subdf3>
  803490:	1009883a 	mov	r4,r2
  803494:	180b883a 	mov	r5,r3
  803498:	2005883a 	mov	r2,r4
  80349c:	2807883a 	mov	r3,r5
  8034a0:	100d883a 	mov	r6,r2
  8034a4:	180f883a 	mov	r7,r3
  8034a8:	8009883a 	mov	r4,r16
  8034ac:	880b883a 	mov	r5,r17
  8034b0:	0806f2c0 	call	806f2c <__ledf2>
  8034b4:	1000040e 	bge	r2,zero,8034c8 <logic+0x3204>
  8034b8:	e13ffd17 	ldw	r4,-12(fp)
  8034bc:	20800217 	ldw	r2,8(r4)
  8034c0:	20c00317 	ldw	r3,12(r4)
  8034c4:	00000d06 	br	8034fc <logic+0x3238>
  8034c8:	e13ffd17 	ldw	r4,-12(fp)
  8034cc:	20800d17 	ldw	r2,52(r4)
  8034d0:	20c00e17 	ldw	r3,56(r4)
  8034d4:	100d883a 	mov	r6,r2
  8034d8:	180f883a 	mov	r7,r3
  8034dc:	0009883a 	mov	r4,zero
  8034e0:	01501cf4 	movhi	r5,16499
  8034e4:	296c0004 	addi	r5,r5,-20480
  8034e8:	08070200 	call	807020 <__subdf3>
  8034ec:	1009883a 	mov	r4,r2
  8034f0:	180b883a 	mov	r5,r3
  8034f4:	2005883a 	mov	r2,r4
  8034f8:	2807883a 	mov	r3,r5
  8034fc:	e13ffd17 	ldw	r4,-12(fp)
  803500:	20800215 	stw	r2,8(r4)
  803504:	20c00315 	stw	r3,12(r4)
  }
  d->_cg68 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  803508:	e0bffd17 	ldw	r2,-12(fp)
  80350c:	10800b03 	ldbu	r2,44(r2)
  803510:	10803fcc 	andi	r2,r2,255
  803514:	1080201c 	xori	r2,r2,128
  803518:	10bfe004 	addi	r2,r2,-128
  80351c:	1000121e 	bne	r2,zero,803568 <logic+0x32a4>
  803520:	e0bffd17 	ldw	r2,-12(fp)
  803524:	10800b43 	ldbu	r2,45(r2)
  803528:	10803fcc 	andi	r2,r2,255
  80352c:	1080201c 	xori	r2,r2,128
  803530:	10bfe004 	addi	r2,r2,-128
  803534:	10000c1e 	bne	r2,zero,803568 <logic+0x32a4>
  803538:	e0bffd17 	ldw	r2,-12(fp)
  80353c:	10800b83 	ldbu	r2,46(r2)
  803540:	10803fcc 	andi	r2,r2,255
  803544:	1080201c 	xori	r2,r2,128
  803548:	10bfe004 	addi	r2,r2,-128
  80354c:	1000061e 	bne	r2,zero,803568 <logic+0x32a4>
  803550:	e0bffd17 	ldw	r2,-12(fp)
  803554:	10800bc3 	ldbu	r2,47(r2)
  803558:	10803fcc 	andi	r2,r2,255
  80355c:	1080201c 	xori	r2,r2,128
  803560:	10bfe004 	addi	r2,r2,-128
  803564:	10000226 	beq	r2,zero,803570 <logic+0x32ac>
  803568:	00800044 	movi	r2,1
  80356c:	00000106 	br	803574 <logic+0x32b0>
  803570:	0005883a 	mov	r2,zero
  803574:	1007883a 	mov	r3,r2
  803578:	e0bffd17 	ldw	r2,-12(fp)
  80357c:	10c03ac5 	stb	r3,235(r2)
  d->_g136_e3 = (d->_g136 && !d->_cg68) || (d->_g76 && !d->_cg72);
  803580:	e0bffd17 	ldw	r2,-12(fp)
  803584:	10802c03 	ldbu	r2,176(r2)
  803588:	10803fcc 	andi	r2,r2,255
  80358c:	1080201c 	xori	r2,r2,128
  803590:	10bfe004 	addi	r2,r2,-128
  803594:	10000626 	beq	r2,zero,8035b0 <logic+0x32ec>
  803598:	e0bffd17 	ldw	r2,-12(fp)
  80359c:	10803ac3 	ldbu	r2,235(r2)
  8035a0:	10803fcc 	andi	r2,r2,255
  8035a4:	1080201c 	xori	r2,r2,128
  8035a8:	10bfe004 	addi	r2,r2,-128
  8035ac:	10000c26 	beq	r2,zero,8035e0 <logic+0x331c>
  8035b0:	e0bffd17 	ldw	r2,-12(fp)
  8035b4:	10802183 	ldbu	r2,134(r2)
  8035b8:	10803fcc 	andi	r2,r2,255
  8035bc:	1080201c 	xori	r2,r2,128
  8035c0:	10bfe004 	addi	r2,r2,-128
  8035c4:	10000826 	beq	r2,zero,8035e8 <logic+0x3324>
  8035c8:	e0bffd17 	ldw	r2,-12(fp)
  8035cc:	10803b03 	ldbu	r2,236(r2)
  8035d0:	10803fcc 	andi	r2,r2,255
  8035d4:	1080201c 	xori	r2,r2,128
  8035d8:	10bfe004 	addi	r2,r2,-128
  8035dc:	1000021e 	bne	r2,zero,8035e8 <logic+0x3324>
  8035e0:	00800044 	movi	r2,1
  8035e4:	00000106 	br	8035ec <logic+0x3328>
  8035e8:	0005883a 	mov	r2,zero
  8035ec:	1007883a 	mov	r3,r2
  8035f0:	e0bffd17 	ldw	r2,-12(fp)
  8035f4:	10c04dc5 	stb	r3,311(r2)
  d->_g110 = d->_g131 && !d->_cg67;
  8035f8:	e0bffd17 	ldw	r2,-12(fp)
  8035fc:	10802b43 	ldbu	r2,173(r2)
  803600:	10803fcc 	andi	r2,r2,255
  803604:	1080201c 	xori	r2,r2,128
  803608:	10bfe004 	addi	r2,r2,-128
  80360c:	10000826 	beq	r2,zero,803630 <logic+0x336c>
  803610:	e0bffd17 	ldw	r2,-12(fp)
  803614:	10803a83 	ldbu	r2,234(r2)
  803618:	10803fcc 	andi	r2,r2,255
  80361c:	1080201c 	xori	r2,r2,128
  803620:	10bfe004 	addi	r2,r2,-128
  803624:	1000021e 	bne	r2,zero,803630 <logic+0x336c>
  803628:	00800044 	movi	r2,1
  80362c:	00000106 	br	803634 <logic+0x3370>
  803630:	0005883a 	mov	r2,zero
  803634:	1007883a 	mov	r3,r2
  803638:	e0bffd17 	ldw	r2,-12(fp)
  80363c:	10c02805 	stb	r3,160(r2)
  d->_cg77 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  803640:	e0bffd17 	ldw	r2,-12(fp)
  803644:	10800b03 	ldbu	r2,44(r2)
  803648:	10803fcc 	andi	r2,r2,255
  80364c:	1080201c 	xori	r2,r2,128
  803650:	10bfe004 	addi	r2,r2,-128
  803654:	1000121e 	bne	r2,zero,8036a0 <logic+0x33dc>
  803658:	e0bffd17 	ldw	r2,-12(fp)
  80365c:	10800b43 	ldbu	r2,45(r2)
  803660:	10803fcc 	andi	r2,r2,255
  803664:	1080201c 	xori	r2,r2,128
  803668:	10bfe004 	addi	r2,r2,-128
  80366c:	10000c1e 	bne	r2,zero,8036a0 <logic+0x33dc>
  803670:	e0bffd17 	ldw	r2,-12(fp)
  803674:	10800b83 	ldbu	r2,46(r2)
  803678:	10803fcc 	andi	r2,r2,255
  80367c:	1080201c 	xori	r2,r2,128
  803680:	10bfe004 	addi	r2,r2,-128
  803684:	1000061e 	bne	r2,zero,8036a0 <logic+0x33dc>
  803688:	e0bffd17 	ldw	r2,-12(fp)
  80368c:	10800bc3 	ldbu	r2,47(r2)
  803690:	10803fcc 	andi	r2,r2,255
  803694:	1080201c 	xori	r2,r2,128
  803698:	10bfe004 	addi	r2,r2,-128
  80369c:	10000226 	beq	r2,zero,8036a8 <logic+0x33e4>
  8036a0:	00800044 	movi	r2,1
  8036a4:	00000106 	br	8036ac <logic+0x33e8>
  8036a8:	0005883a 	mov	r2,zero
  8036ac:	1007883a 	mov	r3,r2
  8036b0:	e0bffd17 	ldw	r2,-12(fp)
  8036b4:	10c03bc5 	stb	r3,239(r2)
  d->_g111 = (d->_g71 && !d->_cg74) || (d->_g110 && !d->_cg77);
  8036b8:	e0bffd17 	ldw	r2,-12(fp)
  8036bc:	10802083 	ldbu	r2,130(r2)
  8036c0:	10803fcc 	andi	r2,r2,255
  8036c4:	1080201c 	xori	r2,r2,128
  8036c8:	10bfe004 	addi	r2,r2,-128
  8036cc:	10000626 	beq	r2,zero,8036e8 <logic+0x3424>
  8036d0:	e0bffd17 	ldw	r2,-12(fp)
  8036d4:	10803b83 	ldbu	r2,238(r2)
  8036d8:	10803fcc 	andi	r2,r2,255
  8036dc:	1080201c 	xori	r2,r2,128
  8036e0:	10bfe004 	addi	r2,r2,-128
  8036e4:	10000c26 	beq	r2,zero,803718 <logic+0x3454>
  8036e8:	e0bffd17 	ldw	r2,-12(fp)
  8036ec:	10802803 	ldbu	r2,160(r2)
  8036f0:	10803fcc 	andi	r2,r2,255
  8036f4:	1080201c 	xori	r2,r2,128
  8036f8:	10bfe004 	addi	r2,r2,-128
  8036fc:	10000826 	beq	r2,zero,803720 <logic+0x345c>
  803700:	e0bffd17 	ldw	r2,-12(fp)
  803704:	10803bc3 	ldbu	r2,239(r2)
  803708:	10803fcc 	andi	r2,r2,255
  80370c:	1080201c 	xori	r2,r2,128
  803710:	10bfe004 	addi	r2,r2,-128
  803714:	1000021e 	bne	r2,zero,803720 <logic+0x345c>
  803718:	00800044 	movi	r2,1
  80371c:	00000106 	br	803724 <logic+0x3460>
  803720:	0005883a 	mov	r2,zero
  803724:	1007883a 	mov	r3,r2
  803728:	e0bffd17 	ldw	r2,-12(fp)
  80372c:	10c02845 	stb	r3,161(r2)
  d->_cg78 = d->_PaceMaker_local_avi_clk < AVI_VALUE - 1;
  803730:	e13ffd17 	ldw	r4,-12(fp)
  803734:	20800d17 	ldw	r2,52(r4)
  803738:	20c00e17 	ldw	r3,56(r4)
  80373c:	04000044 	movi	r16,1
  803740:	000d883a 	mov	r6,zero
  803744:	01d01cf4 	movhi	r7,16499
  803748:	39ec0004 	addi	r7,r7,-20480
  80374c:	1009883a 	mov	r4,r2
  803750:	180b883a 	mov	r5,r3
  803754:	0806f2c0 	call	806f2c <__ledf2>
  803758:	10000116 	blt	r2,zero,803760 <logic+0x349c>
  80375c:	0021883a 	mov	r16,zero
  803760:	8007883a 	mov	r3,r16
  803764:	e0bffd17 	ldw	r2,-12(fp)
  803768:	10c03c05 	stb	r3,240(r2)
  d->_g106 = d->_g131 && d->_cg78;
  80376c:	e0bffd17 	ldw	r2,-12(fp)
  803770:	10802b43 	ldbu	r2,173(r2)
  803774:	10803fcc 	andi	r2,r2,255
  803778:	1080201c 	xori	r2,r2,128
  80377c:	10bfe004 	addi	r2,r2,-128
  803780:	10000826 	beq	r2,zero,8037a4 <logic+0x34e0>
  803784:	e0bffd17 	ldw	r2,-12(fp)
  803788:	10803c03 	ldbu	r2,240(r2)
  80378c:	10803fcc 	andi	r2,r2,255
  803790:	1080201c 	xori	r2,r2,128
  803794:	10bfe004 	addi	r2,r2,-128
  803798:	10000226 	beq	r2,zero,8037a4 <logic+0x34e0>
  80379c:	00800044 	movi	r2,1
  8037a0:	00000106 	br	8037a8 <logic+0x34e4>
  8037a4:	0005883a 	mov	r2,zero
  8037a8:	1007883a 	mov	r3,r2
  8037ac:	e0bffd17 	ldw	r2,-12(fp)
  8037b0:	10c02745 	stb	r3,157(r2)
  if (d->_g106) {
  8037b4:	e0bffd17 	ldw	r2,-12(fp)
  8037b8:	10802743 	ldbu	r2,157(r2)
  8037bc:	10803fcc 	andi	r2,r2,255
  8037c0:	1080201c 	xori	r2,r2,128
  8037c4:	10bfe004 	addi	r2,r2,-128
  8037c8:	10002a26 	beq	r2,zero,803874 <logic+0x35b0>
    d->sleepT = (d->sleepT < (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk)) ? d->sleepT : (AVI_VALUE - 1 - d->_PaceMaker_local_avi_clk);
  8037cc:	e0bffd17 	ldw	r2,-12(fp)
  8037d0:	14000217 	ldw	r16,8(r2)
  8037d4:	14400317 	ldw	r17,12(r2)
  8037d8:	e13ffd17 	ldw	r4,-12(fp)
  8037dc:	20800d17 	ldw	r2,52(r4)
  8037e0:	20c00e17 	ldw	r3,56(r4)
  8037e4:	100d883a 	mov	r6,r2
  8037e8:	180f883a 	mov	r7,r3
  8037ec:	0009883a 	mov	r4,zero
  8037f0:	01501cf4 	movhi	r5,16499
  8037f4:	296c0004 	addi	r5,r5,-20480
  8037f8:	08070200 	call	807020 <__subdf3>
  8037fc:	1009883a 	mov	r4,r2
  803800:	180b883a 	mov	r5,r3
  803804:	2005883a 	mov	r2,r4
  803808:	2807883a 	mov	r3,r5
  80380c:	100d883a 	mov	r6,r2
  803810:	180f883a 	mov	r7,r3
  803814:	8009883a 	mov	r4,r16
  803818:	880b883a 	mov	r5,r17
  80381c:	0806f2c0 	call	806f2c <__ledf2>
  803820:	1000040e 	bge	r2,zero,803834 <logic+0x3570>
  803824:	e13ffd17 	ldw	r4,-12(fp)
  803828:	20800217 	ldw	r2,8(r4)
  80382c:	20c00317 	ldw	r3,12(r4)
  803830:	00000d06 	br	803868 <logic+0x35a4>
  803834:	e13ffd17 	ldw	r4,-12(fp)
  803838:	20800d17 	ldw	r2,52(r4)
  80383c:	20c00e17 	ldw	r3,56(r4)
  803840:	100d883a 	mov	r6,r2
  803844:	180f883a 	mov	r7,r3
  803848:	0009883a 	mov	r4,zero
  80384c:	01501cf4 	movhi	r5,16499
  803850:	296c0004 	addi	r5,r5,-20480
  803854:	08070200 	call	807020 <__subdf3>
  803858:	1009883a 	mov	r4,r2
  80385c:	180b883a 	mov	r5,r3
  803860:	2005883a 	mov	r2,r4
  803864:	2807883a 	mov	r3,r5
  803868:	e13ffd17 	ldw	r4,-12(fp)
  80386c:	20800215 	stw	r2,8(r4)
  803870:	20c00315 	stw	r3,12(r4)
  }
  d->_cg79 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  803874:	e0bffd17 	ldw	r2,-12(fp)
  803878:	10800b03 	ldbu	r2,44(r2)
  80387c:	10803fcc 	andi	r2,r2,255
  803880:	1080201c 	xori	r2,r2,128
  803884:	10bfe004 	addi	r2,r2,-128
  803888:	1000121e 	bne	r2,zero,8038d4 <logic+0x3610>
  80388c:	e0bffd17 	ldw	r2,-12(fp)
  803890:	10800b43 	ldbu	r2,45(r2)
  803894:	10803fcc 	andi	r2,r2,255
  803898:	1080201c 	xori	r2,r2,128
  80389c:	10bfe004 	addi	r2,r2,-128
  8038a0:	10000c1e 	bne	r2,zero,8038d4 <logic+0x3610>
  8038a4:	e0bffd17 	ldw	r2,-12(fp)
  8038a8:	10800b83 	ldbu	r2,46(r2)
  8038ac:	10803fcc 	andi	r2,r2,255
  8038b0:	1080201c 	xori	r2,r2,128
  8038b4:	10bfe004 	addi	r2,r2,-128
  8038b8:	1000061e 	bne	r2,zero,8038d4 <logic+0x3610>
  8038bc:	e0bffd17 	ldw	r2,-12(fp)
  8038c0:	10800bc3 	ldbu	r2,47(r2)
  8038c4:	10803fcc 	andi	r2,r2,255
  8038c8:	1080201c 	xori	r2,r2,128
  8038cc:	10bfe004 	addi	r2,r2,-128
  8038d0:	10000226 	beq	r2,zero,8038dc <logic+0x3618>
  8038d4:	00800044 	movi	r2,1
  8038d8:	00000106 	br	8038e0 <logic+0x361c>
  8038dc:	0005883a 	mov	r2,zero
  8038e0:	1007883a 	mov	r3,r2
  8038e4:	e0bffd17 	ldw	r2,-12(fp)
  8038e8:	10c03c45 	stb	r3,241(r2)
  d->_g104 = (d->_g106 && !d->_cg79) || (d->_g87 && !d->_cg83);
  8038ec:	e0bffd17 	ldw	r2,-12(fp)
  8038f0:	10802743 	ldbu	r2,157(r2)
  8038f4:	10803fcc 	andi	r2,r2,255
  8038f8:	1080201c 	xori	r2,r2,128
  8038fc:	10bfe004 	addi	r2,r2,-128
  803900:	10000626 	beq	r2,zero,80391c <logic+0x3658>
  803904:	e0bffd17 	ldw	r2,-12(fp)
  803908:	10803c43 	ldbu	r2,241(r2)
  80390c:	10803fcc 	andi	r2,r2,255
  803910:	1080201c 	xori	r2,r2,128
  803914:	10bfe004 	addi	r2,r2,-128
  803918:	10000c26 	beq	r2,zero,80394c <logic+0x3688>
  80391c:	e0bffd17 	ldw	r2,-12(fp)
  803920:	10802383 	ldbu	r2,142(r2)
  803924:	10803fcc 	andi	r2,r2,255
  803928:	1080201c 	xori	r2,r2,128
  80392c:	10bfe004 	addi	r2,r2,-128
  803930:	10000826 	beq	r2,zero,803954 <logic+0x3690>
  803934:	e0bffd17 	ldw	r2,-12(fp)
  803938:	10803c83 	ldbu	r2,242(r2)
  80393c:	10803fcc 	andi	r2,r2,255
  803940:	1080201c 	xori	r2,r2,128
  803944:	10bfe004 	addi	r2,r2,-128
  803948:	1000021e 	bne	r2,zero,803954 <logic+0x3690>
  80394c:	00800044 	movi	r2,1
  803950:	00000106 	br	803958 <logic+0x3694>
  803954:	0005883a 	mov	r2,zero
  803958:	1007883a 	mov	r3,r2
  80395c:	e0bffd17 	ldw	r2,-12(fp)
  803960:	10c026c5 	stb	r3,155(r2)
  d->_g65 = d->_g131 && !d->_cg78;
  803964:	e0bffd17 	ldw	r2,-12(fp)
  803968:	10802b43 	ldbu	r2,173(r2)
  80396c:	10803fcc 	andi	r2,r2,255
  803970:	1080201c 	xori	r2,r2,128
  803974:	10bfe004 	addi	r2,r2,-128
  803978:	10000826 	beq	r2,zero,80399c <logic+0x36d8>
  80397c:	e0bffd17 	ldw	r2,-12(fp)
  803980:	10803c03 	ldbu	r2,240(r2)
  803984:	10803fcc 	andi	r2,r2,255
  803988:	1080201c 	xori	r2,r2,128
  80398c:	10bfe004 	addi	r2,r2,-128
  803990:	1000021e 	bne	r2,zero,80399c <logic+0x36d8>
  803994:	00800044 	movi	r2,1
  803998:	00000106 	br	8039a0 <logic+0x36dc>
  80399c:	0005883a 	mov	r2,zero
  8039a0:	1007883a 	mov	r3,r2
  8039a4:	e0bffd17 	ldw	r2,-12(fp)
  8039a8:	10c01f85 	stb	r3,126(r2)
  d->_cg88 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  8039ac:	e0bffd17 	ldw	r2,-12(fp)
  8039b0:	10800b03 	ldbu	r2,44(r2)
  8039b4:	10803fcc 	andi	r2,r2,255
  8039b8:	1080201c 	xori	r2,r2,128
  8039bc:	10bfe004 	addi	r2,r2,-128
  8039c0:	1000121e 	bne	r2,zero,803a0c <logic+0x3748>
  8039c4:	e0bffd17 	ldw	r2,-12(fp)
  8039c8:	10800b43 	ldbu	r2,45(r2)
  8039cc:	10803fcc 	andi	r2,r2,255
  8039d0:	1080201c 	xori	r2,r2,128
  8039d4:	10bfe004 	addi	r2,r2,-128
  8039d8:	10000c1e 	bne	r2,zero,803a0c <logic+0x3748>
  8039dc:	e0bffd17 	ldw	r2,-12(fp)
  8039e0:	10800b83 	ldbu	r2,46(r2)
  8039e4:	10803fcc 	andi	r2,r2,255
  8039e8:	1080201c 	xori	r2,r2,128
  8039ec:	10bfe004 	addi	r2,r2,-128
  8039f0:	1000061e 	bne	r2,zero,803a0c <logic+0x3748>
  8039f4:	e0bffd17 	ldw	r2,-12(fp)
  8039f8:	10800bc3 	ldbu	r2,47(r2)
  8039fc:	10803fcc 	andi	r2,r2,255
  803a00:	1080201c 	xori	r2,r2,128
  803a04:	10bfe004 	addi	r2,r2,-128
  803a08:	10000226 	beq	r2,zero,803a14 <logic+0x3750>
  803a0c:	00800044 	movi	r2,1
  803a10:	00000106 	br	803a18 <logic+0x3754>
  803a14:	0005883a 	mov	r2,zero
  803a18:	1007883a 	mov	r3,r2
  803a1c:	e0bffd17 	ldw	r2,-12(fp)
  803a20:	10c03d45 	stb	r3,245(r2)
  d->_g68 = (d->_g82 && !d->_cg85) || (d->_g65 && !d->_cg88);
  803a24:	e0bffd17 	ldw	r2,-12(fp)
  803a28:	10802283 	ldbu	r2,138(r2)
  803a2c:	10803fcc 	andi	r2,r2,255
  803a30:	1080201c 	xori	r2,r2,128
  803a34:	10bfe004 	addi	r2,r2,-128
  803a38:	10000626 	beq	r2,zero,803a54 <logic+0x3790>
  803a3c:	e0bffd17 	ldw	r2,-12(fp)
  803a40:	10803d03 	ldbu	r2,244(r2)
  803a44:	10803fcc 	andi	r2,r2,255
  803a48:	1080201c 	xori	r2,r2,128
  803a4c:	10bfe004 	addi	r2,r2,-128
  803a50:	10000c26 	beq	r2,zero,803a84 <logic+0x37c0>
  803a54:	e0bffd17 	ldw	r2,-12(fp)
  803a58:	10801f83 	ldbu	r2,126(r2)
  803a5c:	10803fcc 	andi	r2,r2,255
  803a60:	1080201c 	xori	r2,r2,128
  803a64:	10bfe004 	addi	r2,r2,-128
  803a68:	10000826 	beq	r2,zero,803a8c <logic+0x37c8>
  803a6c:	e0bffd17 	ldw	r2,-12(fp)
  803a70:	10803d43 	ldbu	r2,245(r2)
  803a74:	10803fcc 	andi	r2,r2,255
  803a78:	1080201c 	xori	r2,r2,128
  803a7c:	10bfe004 	addi	r2,r2,-128
  803a80:	1000021e 	bne	r2,zero,803a8c <logic+0x37c8>
  803a84:	00800044 	movi	r2,1
  803a88:	00000106 	br	803a90 <logic+0x37cc>
  803a8c:	0005883a 	mov	r2,zero
  803a90:	1007883a 	mov	r3,r2
  803a94:	e0bffd17 	ldw	r2,-12(fp)
  803a98:	10c02005 	stb	r3,128(r2)
  d->_cg89 = d->_PaceMaker_local__Atrig2 || d->_PaceMaker_local__Atrig3 || d->_PaceMaker_local__Atrig4 || d->_PaceMaker_local__Atrig5;
  803a9c:	e0bffd17 	ldw	r2,-12(fp)
  803aa0:	10800b03 	ldbu	r2,44(r2)
  803aa4:	10803fcc 	andi	r2,r2,255
  803aa8:	1080201c 	xori	r2,r2,128
  803aac:	10bfe004 	addi	r2,r2,-128
  803ab0:	1000121e 	bne	r2,zero,803afc <logic+0x3838>
  803ab4:	e0bffd17 	ldw	r2,-12(fp)
  803ab8:	10800b43 	ldbu	r2,45(r2)
  803abc:	10803fcc 	andi	r2,r2,255
  803ac0:	1080201c 	xori	r2,r2,128
  803ac4:	10bfe004 	addi	r2,r2,-128
  803ac8:	10000c1e 	bne	r2,zero,803afc <logic+0x3838>
  803acc:	e0bffd17 	ldw	r2,-12(fp)
  803ad0:	10800b83 	ldbu	r2,46(r2)
  803ad4:	10803fcc 	andi	r2,r2,255
  803ad8:	1080201c 	xori	r2,r2,128
  803adc:	10bfe004 	addi	r2,r2,-128
  803ae0:	1000061e 	bne	r2,zero,803afc <logic+0x3838>
  803ae4:	e0bffd17 	ldw	r2,-12(fp)
  803ae8:	10800bc3 	ldbu	r2,47(r2)
  803aec:	10803fcc 	andi	r2,r2,255
  803af0:	1080201c 	xori	r2,r2,128
  803af4:	10bfe004 	addi	r2,r2,-128
  803af8:	10000226 	beq	r2,zero,803b04 <logic+0x3840>
  803afc:	00800044 	movi	r2,1
  803b00:	00000106 	br	803b08 <logic+0x3844>
  803b04:	0005883a 	mov	r2,zero
  803b08:	1007883a 	mov	r3,r2
  803b0c:	e0bffd17 	ldw	r2,-12(fp)
  803b10:	10c03d85 	stb	r3,246(r2)
  d->_g72 = (d->_g131 && !d->_cg89) || (d->_g91 && !d->_cg91);
  803b14:	e0bffd17 	ldw	r2,-12(fp)
  803b18:	10802b43 	ldbu	r2,173(r2)
  803b1c:	10803fcc 	andi	r2,r2,255
  803b20:	1080201c 	xori	r2,r2,128
  803b24:	10bfe004 	addi	r2,r2,-128
  803b28:	10000626 	beq	r2,zero,803b44 <logic+0x3880>
  803b2c:	e0bffd17 	ldw	r2,-12(fp)
  803b30:	10803d83 	ldbu	r2,246(r2)
  803b34:	10803fcc 	andi	r2,r2,255
  803b38:	1080201c 	xori	r2,r2,128
  803b3c:	10bfe004 	addi	r2,r2,-128
  803b40:	10000c26 	beq	r2,zero,803b74 <logic+0x38b0>
  803b44:	e0bffd17 	ldw	r2,-12(fp)
  803b48:	10802403 	ldbu	r2,144(r2)
  803b4c:	10803fcc 	andi	r2,r2,255
  803b50:	1080201c 	xori	r2,r2,128
  803b54:	10bfe004 	addi	r2,r2,-128
  803b58:	10000826 	beq	r2,zero,803b7c <logic+0x38b8>
  803b5c:	e0bffd17 	ldw	r2,-12(fp)
  803b60:	10803dc3 	ldbu	r2,247(r2)
  803b64:	10803fcc 	andi	r2,r2,255
  803b68:	1080201c 	xori	r2,r2,128
  803b6c:	10bfe004 	addi	r2,r2,-128
  803b70:	1000021e 	bne	r2,zero,803b7c <logic+0x38b8>
  803b74:	00800044 	movi	r2,1
  803b78:	00000106 	br	803b80 <logic+0x38bc>
  803b7c:	0005883a 	mov	r2,zero
  803b80:	1007883a 	mov	r3,r2
  803b84:	e0bffd17 	ldw	r2,-12(fp)
  803b88:	10c020c5 	stb	r3,131(r2)
  d->_g77 = d->_g131 || (d->_g100 && !d->_cg102);
  803b8c:	e0bffd17 	ldw	r2,-12(fp)
  803b90:	10802b43 	ldbu	r2,173(r2)
  803b94:	10803fcc 	andi	r2,r2,255
  803b98:	1080201c 	xori	r2,r2,128
  803b9c:	10bfe004 	addi	r2,r2,-128
  803ba0:	10000c1e 	bne	r2,zero,803bd4 <logic+0x3910>
  803ba4:	e0bffd17 	ldw	r2,-12(fp)
  803ba8:	108025c3 	ldbu	r2,151(r2)
  803bac:	10803fcc 	andi	r2,r2,255
  803bb0:	1080201c 	xori	r2,r2,128
  803bb4:	10bfe004 	addi	r2,r2,-128
  803bb8:	10000826 	beq	r2,zero,803bdc <logic+0x3918>
  803bbc:	e0bffd17 	ldw	r2,-12(fp)
  803bc0:	10803e03 	ldbu	r2,248(r2)
  803bc4:	10803fcc 	andi	r2,r2,255
  803bc8:	1080201c 	xori	r2,r2,128
  803bcc:	10bfe004 	addi	r2,r2,-128
  803bd0:	1000021e 	bne	r2,zero,803bdc <logic+0x3918>
  803bd4:	00800044 	movi	r2,1
  803bd8:	00000106 	br	803be0 <logic+0x391c>
  803bdc:	0005883a 	mov	r2,zero
  803be0:	1007883a 	mov	r3,r2
  803be4:	e0bffd17 	ldw	r2,-12(fp)
  803be8:	10c021c5 	stb	r3,135(r2)
  d->_g74 = (d->_g92_e3 && d->_cg107) || (d->_g109 && !d->_cg109);
  803bec:	e0bffd17 	ldw	r2,-12(fp)
  803bf0:	10804cc3 	ldbu	r2,307(r2)
  803bf4:	10803fcc 	andi	r2,r2,255
  803bf8:	1080201c 	xori	r2,r2,128
  803bfc:	10bfe004 	addi	r2,r2,-128
  803c00:	10000626 	beq	r2,zero,803c1c <logic+0x3958>
  803c04:	e0bffd17 	ldw	r2,-12(fp)
  803c08:	10803f43 	ldbu	r2,253(r2)
  803c0c:	10803fcc 	andi	r2,r2,255
  803c10:	1080201c 	xori	r2,r2,128
  803c14:	10bfe004 	addi	r2,r2,-128
  803c18:	10000c1e 	bne	r2,zero,803c4c <logic+0x3988>
  803c1c:	e0bffd17 	ldw	r2,-12(fp)
  803c20:	108027c3 	ldbu	r2,159(r2)
  803c24:	10803fcc 	andi	r2,r2,255
  803c28:	1080201c 	xori	r2,r2,128
  803c2c:	10bfe004 	addi	r2,r2,-128
  803c30:	10000826 	beq	r2,zero,803c54 <logic+0x3990>
  803c34:	e0bffd17 	ldw	r2,-12(fp)
  803c38:	10803f83 	ldbu	r2,254(r2)
  803c3c:	10803fcc 	andi	r2,r2,255
  803c40:	1080201c 	xori	r2,r2,128
  803c44:	10bfe004 	addi	r2,r2,-128
  803c48:	1000021e 	bne	r2,zero,803c54 <logic+0x3990>
  803c4c:	00800044 	movi	r2,1
  803c50:	00000106 	br	803c58 <logic+0x3994>
  803c54:	0005883a 	mov	r2,zero
  803c58:	1007883a 	mov	r3,r2
  803c5c:	e0bffd17 	ldw	r2,-12(fp)
  803c60:	10c02145 	stb	r3,133(r2)
  d->_g79 = d->_pg83;
  803c64:	e0bffd17 	ldw	r2,-12(fp)
  803c68:	10c056c3 	ldbu	r3,347(r2)
  803c6c:	e0bffd17 	ldw	r2,-12(fp)
  803c70:	10c02205 	stb	r3,136(r2)
  d->_cg115 = (d->VS || d->VP) && !d->ignore_VEvent;
  803c74:	e0bffd17 	ldw	r2,-12(fp)
  803c78:	10800443 	ldbu	r2,17(r2)
  803c7c:	10803fcc 	andi	r2,r2,255
  803c80:	1080201c 	xori	r2,r2,128
  803c84:	10bfe004 	addi	r2,r2,-128
  803c88:	1000061e 	bne	r2,zero,803ca4 <logic+0x39e0>
  803c8c:	e0bffd17 	ldw	r2,-12(fp)
  803c90:	108004c3 	ldbu	r2,19(r2)
  803c94:	10803fcc 	andi	r2,r2,255
  803c98:	1080201c 	xori	r2,r2,128
  803c9c:	10bfe004 	addi	r2,r2,-128
  803ca0:	10000826 	beq	r2,zero,803cc4 <logic+0x3a00>
  803ca4:	e0bffd17 	ldw	r2,-12(fp)
  803ca8:	10800543 	ldbu	r2,21(r2)
  803cac:	10803fcc 	andi	r2,r2,255
  803cb0:	1080201c 	xori	r2,r2,128
  803cb4:	10bfe004 	addi	r2,r2,-128
  803cb8:	1000021e 	bne	r2,zero,803cc4 <logic+0x3a00>
  803cbc:	00800044 	movi	r2,1
  803cc0:	00000106 	br	803cc8 <logic+0x3a04>
  803cc4:	0005883a 	mov	r2,zero
  803cc8:	1007883a 	mov	r3,r2
  803ccc:	e0bffd17 	ldw	r2,-12(fp)
  803cd0:	10c04005 	stb	r3,256(r2)
  d->_g83 = d->_GO || (d->_g140 && d->_cg142) || d->_g123 || (d->_g79 && !d->_cg115);
  803cd4:	e0bffd17 	ldw	r2,-12(fp)
  803cd8:	10803643 	ldbu	r2,217(r2)
  803cdc:	10803fcc 	andi	r2,r2,255
  803ce0:	1080201c 	xori	r2,r2,128
  803ce4:	10bfe004 	addi	r2,r2,-128
  803ce8:	10001e1e 	bne	r2,zero,803d64 <logic+0x3aa0>
  803cec:	e0bffd17 	ldw	r2,-12(fp)
  803cf0:	10802d03 	ldbu	r2,180(r2)
  803cf4:	10803fcc 	andi	r2,r2,255
  803cf8:	1080201c 	xori	r2,r2,128
  803cfc:	10bfe004 	addi	r2,r2,-128
  803d00:	10000626 	beq	r2,zero,803d1c <logic+0x3a58>
  803d04:	e0bffd17 	ldw	r2,-12(fp)
  803d08:	10803fc3 	ldbu	r2,255(r2)
  803d0c:	10803fcc 	andi	r2,r2,255
  803d10:	1080201c 	xori	r2,r2,128
  803d14:	10bfe004 	addi	r2,r2,-128
  803d18:	1000121e 	bne	r2,zero,803d64 <logic+0x3aa0>
  803d1c:	e0bffd17 	ldw	r2,-12(fp)
  803d20:	10802a03 	ldbu	r2,168(r2)
  803d24:	10803fcc 	andi	r2,r2,255
  803d28:	1080201c 	xori	r2,r2,128
  803d2c:	10bfe004 	addi	r2,r2,-128
  803d30:	10000c1e 	bne	r2,zero,803d64 <logic+0x3aa0>
  803d34:	e0bffd17 	ldw	r2,-12(fp)
  803d38:	10802203 	ldbu	r2,136(r2)
  803d3c:	10803fcc 	andi	r2,r2,255
  803d40:	1080201c 	xori	r2,r2,128
  803d44:	10bfe004 	addi	r2,r2,-128
  803d48:	10000826 	beq	r2,zero,803d6c <logic+0x3aa8>
  803d4c:	e0bffd17 	ldw	r2,-12(fp)
  803d50:	10804003 	ldbu	r2,256(r2)
  803d54:	10803fcc 	andi	r2,r2,255
  803d58:	1080201c 	xori	r2,r2,128
  803d5c:	10bfe004 	addi	r2,r2,-128
  803d60:	1000021e 	bne	r2,zero,803d6c <logic+0x3aa8>
  803d64:	00800044 	movi	r2,1
  803d68:	00000106 	br	803d70 <logic+0x3aac>
  803d6c:	0005883a 	mov	r2,zero
  803d70:	1007883a 	mov	r3,r2
  803d74:	e0bffd17 	ldw	r2,-12(fp)
  803d78:	10c022c5 	stb	r3,139(r2)
  d->_g88 = (d->_g79 && d->_cg115) || (d->_g135 && d->_cg141);
  803d7c:	e0bffd17 	ldw	r2,-12(fp)
  803d80:	10802203 	ldbu	r2,136(r2)
  803d84:	10803fcc 	andi	r2,r2,255
  803d88:	1080201c 	xori	r2,r2,128
  803d8c:	10bfe004 	addi	r2,r2,-128
  803d90:	10000626 	beq	r2,zero,803dac <logic+0x3ae8>
  803d94:	e0bffd17 	ldw	r2,-12(fp)
  803d98:	10804003 	ldbu	r2,256(r2)
  803d9c:	10803fcc 	andi	r2,r2,255
  803da0:	1080201c 	xori	r2,r2,128
  803da4:	10bfe004 	addi	r2,r2,-128
  803da8:	10000c1e 	bne	r2,zero,803ddc <logic+0x3b18>
  803dac:	e0bffd17 	ldw	r2,-12(fp)
  803db0:	10802bc3 	ldbu	r2,175(r2)
  803db4:	10803fcc 	andi	r2,r2,255
  803db8:	1080201c 	xori	r2,r2,128
  803dbc:	10bfe004 	addi	r2,r2,-128
  803dc0:	10000826 	beq	r2,zero,803de4 <logic+0x3b20>
  803dc4:	e0bffd17 	ldw	r2,-12(fp)
  803dc8:	10804043 	ldbu	r2,257(r2)
  803dcc:	10803fcc 	andi	r2,r2,255
  803dd0:	1080201c 	xori	r2,r2,128
  803dd4:	10bfe004 	addi	r2,r2,-128
  803dd8:	10000226 	beq	r2,zero,803de4 <logic+0x3b20>
  803ddc:	00800044 	movi	r2,1
  803de0:	00000106 	br	803de8 <logic+0x3b24>
  803de4:	0005883a 	mov	r2,zero
  803de8:	1007883a 	mov	r3,r2
  803dec:	e0bffd17 	ldw	r2,-12(fp)
  803df0:	10c023c5 	stb	r3,143(r2)
  if (d->_g88) {
  803df4:	e0bffd17 	ldw	r2,-12(fp)
  803df8:	108023c3 	ldbu	r2,143(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	1080201c 	xori	r2,r2,128
  803e04:	10bfe004 	addi	r2,r2,-128
  803e08:	10000926 	beq	r2,zero,803e30 <logic+0x3b6c>
    d->_PaceMaker_local_aei_clk = 0.0;
  803e0c:	e0bffd17 	ldw	r2,-12(fp)
  803e10:	10000f15 	stw	zero,60(r2)
  803e14:	10001015 	stw	zero,64(r2)
    d->_PaceMaker_local__Atrig6 = 0;
  803e18:	e0bffd17 	ldw	r2,-12(fp)
  803e1c:	10000c05 	stb	zero,48(r2)
    d->_PaceMaker_local__Atrig7 = 0;
  803e20:	e0bffd17 	ldw	r2,-12(fp)
  803e24:	10000c45 	stb	zero,49(r2)
    d->_PaceMaker_local__Atrig8 = 0;
  803e28:	e0bffd17 	ldw	r2,-12(fp)
  803e2c:	10000c85 	stb	zero,50(r2)
  }
  d->_cg117 = d->_PaceMaker_local_aei_clk < AEI_VALUE;
  803e30:	e13ffd17 	ldw	r4,-12(fp)
  803e34:	20800f17 	ldw	r2,60(r4)
  803e38:	20c01017 	ldw	r3,64(r4)
  803e3c:	04000044 	movi	r16,1
  803e40:	000d883a 	mov	r6,zero
  803e44:	01d02274 	movhi	r7,16521
  803e48:	1009883a 	mov	r4,r2
  803e4c:	180b883a 	mov	r5,r3
  803e50:	0806f2c0 	call	806f2c <__ledf2>
  803e54:	10000116 	blt	r2,zero,803e5c <logic+0x3b98>
  803e58:	0021883a 	mov	r16,zero
  803e5c:	8007883a 	mov	r3,r16
  803e60:	e0bffd17 	ldw	r2,-12(fp)
  803e64:	10c04085 	stb	r3,258(r2)
  d->_g85 = d->_g88 && d->_cg117;
  803e68:	e0bffd17 	ldw	r2,-12(fp)
  803e6c:	108023c3 	ldbu	r2,143(r2)
  803e70:	10803fcc 	andi	r2,r2,255
  803e74:	1080201c 	xori	r2,r2,128
  803e78:	10bfe004 	addi	r2,r2,-128
  803e7c:	10000826 	beq	r2,zero,803ea0 <logic+0x3bdc>
  803e80:	e0bffd17 	ldw	r2,-12(fp)
  803e84:	10804083 	ldbu	r2,258(r2)
  803e88:	10803fcc 	andi	r2,r2,255
  803e8c:	1080201c 	xori	r2,r2,128
  803e90:	10bfe004 	addi	r2,r2,-128
  803e94:	10000226 	beq	r2,zero,803ea0 <logic+0x3bdc>
  803e98:	00800044 	movi	r2,1
  803e9c:	00000106 	br	803ea4 <logic+0x3be0>
  803ea0:	0005883a 	mov	r2,zero
  803ea4:	1007883a 	mov	r3,r2
  803ea8:	e0bffd17 	ldw	r2,-12(fp)
  803eac:	10c02345 	stb	r3,141(r2)
  if (d->_g85) {
  803eb0:	e0bffd17 	ldw	r2,-12(fp)
  803eb4:	10802343 	ldbu	r2,141(r2)
  803eb8:	10803fcc 	andi	r2,r2,255
  803ebc:	1080201c 	xori	r2,r2,128
  803ec0:	10bfe004 	addi	r2,r2,-128
  803ec4:	10002826 	beq	r2,zero,803f68 <logic+0x3ca4>
    d->sleepT = (d->sleepT < (AEI_VALUE - d->_PaceMaker_local_aei_clk)) ? d->sleepT : (AEI_VALUE - d->_PaceMaker_local_aei_clk);
  803ec8:	e0bffd17 	ldw	r2,-12(fp)
  803ecc:	14000217 	ldw	r16,8(r2)
  803ed0:	14400317 	ldw	r17,12(r2)
  803ed4:	e13ffd17 	ldw	r4,-12(fp)
  803ed8:	20800f17 	ldw	r2,60(r4)
  803edc:	20c01017 	ldw	r3,64(r4)
  803ee0:	100d883a 	mov	r6,r2
  803ee4:	180f883a 	mov	r7,r3
  803ee8:	0009883a 	mov	r4,zero
  803eec:	01502274 	movhi	r5,16521
  803ef0:	08070200 	call	807020 <__subdf3>
  803ef4:	1009883a 	mov	r4,r2
  803ef8:	180b883a 	mov	r5,r3
  803efc:	2005883a 	mov	r2,r4
  803f00:	2807883a 	mov	r3,r5
  803f04:	100d883a 	mov	r6,r2
  803f08:	180f883a 	mov	r7,r3
  803f0c:	8009883a 	mov	r4,r16
  803f10:	880b883a 	mov	r5,r17
  803f14:	0806f2c0 	call	806f2c <__ledf2>
  803f18:	1000040e 	bge	r2,zero,803f2c <logic+0x3c68>
  803f1c:	e13ffd17 	ldw	r4,-12(fp)
  803f20:	20800217 	ldw	r2,8(r4)
  803f24:	20c00317 	ldw	r3,12(r4)
  803f28:	00000c06 	br	803f5c <logic+0x3c98>
  803f2c:	e13ffd17 	ldw	r4,-12(fp)
  803f30:	20800f17 	ldw	r2,60(r4)
  803f34:	20c01017 	ldw	r3,64(r4)
  803f38:	100d883a 	mov	r6,r2
  803f3c:	180f883a 	mov	r7,r3
  803f40:	0009883a 	mov	r4,zero
  803f44:	01502274 	movhi	r5,16521
  803f48:	08070200 	call	807020 <__subdf3>
  803f4c:	1009883a 	mov	r4,r2
  803f50:	180b883a 	mov	r5,r3
  803f54:	2005883a 	mov	r2,r4
  803f58:	2807883a 	mov	r3,r5
  803f5c:	e13ffd17 	ldw	r4,-12(fp)
  803f60:	20800215 	stw	r2,8(r4)
  803f64:	20c00315 	stw	r3,12(r4)
  }
  d->_cg118 = d->_PaceMaker_local__Atrig6 || d->_PaceMaker_local__Atrig7 || d->_PaceMaker_local__Atrig8;
  803f68:	e0bffd17 	ldw	r2,-12(fp)
  803f6c:	10800c03 	ldbu	r2,48(r2)
  803f70:	10803fcc 	andi	r2,r2,255
  803f74:	1080201c 	xori	r2,r2,128
  803f78:	10bfe004 	addi	r2,r2,-128
  803f7c:	10000c1e 	bne	r2,zero,803fb0 <logic+0x3cec>
  803f80:	e0bffd17 	ldw	r2,-12(fp)
  803f84:	10800c43 	ldbu	r2,49(r2)
  803f88:	10803fcc 	andi	r2,r2,255
  803f8c:	1080201c 	xori	r2,r2,128
  803f90:	10bfe004 	addi	r2,r2,-128
  803f94:	1000061e 	bne	r2,zero,803fb0 <logic+0x3cec>
  803f98:	e0bffd17 	ldw	r2,-12(fp)
  803f9c:	10800c83 	ldbu	r2,50(r2)
  803fa0:	10803fcc 	andi	r2,r2,255
  803fa4:	1080201c 	xori	r2,r2,128
  803fa8:	10bfe004 	addi	r2,r2,-128
  803fac:	10000226 	beq	r2,zero,803fb8 <logic+0x3cf4>
  803fb0:	00800044 	movi	r2,1
  803fb4:	00000106 	br	803fbc <logic+0x3cf8>
  803fb8:	0005883a 	mov	r2,zero
  803fbc:	1007883a 	mov	r3,r2
  803fc0:	e0bffd17 	ldw	r2,-12(fp)
  803fc4:	10c040c5 	stb	r3,259(r2)
  d->_g91 = (d->_g85 && !d->_cg118) || (d->_g126 && !d->_cg122);
  803fc8:	e0bffd17 	ldw	r2,-12(fp)
  803fcc:	10802343 	ldbu	r2,141(r2)
  803fd0:	10803fcc 	andi	r2,r2,255
  803fd4:	1080201c 	xori	r2,r2,128
  803fd8:	10bfe004 	addi	r2,r2,-128
  803fdc:	10000626 	beq	r2,zero,803ff8 <logic+0x3d34>
  803fe0:	e0bffd17 	ldw	r2,-12(fp)
  803fe4:	108040c3 	ldbu	r2,259(r2)
  803fe8:	10803fcc 	andi	r2,r2,255
  803fec:	1080201c 	xori	r2,r2,128
  803ff0:	10bfe004 	addi	r2,r2,-128
  803ff4:	10000c26 	beq	r2,zero,804028 <logic+0x3d64>
  803ff8:	e0bffd17 	ldw	r2,-12(fp)
  803ffc:	10802a83 	ldbu	r2,170(r2)
  804000:	10803fcc 	andi	r2,r2,255
  804004:	1080201c 	xori	r2,r2,128
  804008:	10bfe004 	addi	r2,r2,-128
  80400c:	10000826 	beq	r2,zero,804030 <logic+0x3d6c>
  804010:	e0bffd17 	ldw	r2,-12(fp)
  804014:	10804103 	ldbu	r2,260(r2)
  804018:	10803fcc 	andi	r2,r2,255
  80401c:	1080201c 	xori	r2,r2,128
  804020:	10bfe004 	addi	r2,r2,-128
  804024:	1000021e 	bne	r2,zero,804030 <logic+0x3d6c>
  804028:	00800044 	movi	r2,1
  80402c:	00000106 	br	804034 <logic+0x3d70>
  804030:	0005883a 	mov	r2,zero
  804034:	1007883a 	mov	r3,r2
  804038:	e0bffd17 	ldw	r2,-12(fp)
  80403c:	10c02405 	stb	r3,144(r2)
  d->_g66 = d->_g88 && !d->_cg117;
  804040:	e0bffd17 	ldw	r2,-12(fp)
  804044:	108023c3 	ldbu	r2,143(r2)
  804048:	10803fcc 	andi	r2,r2,255
  80404c:	1080201c 	xori	r2,r2,128
  804050:	10bfe004 	addi	r2,r2,-128
  804054:	10000826 	beq	r2,zero,804078 <logic+0x3db4>
  804058:	e0bffd17 	ldw	r2,-12(fp)
  80405c:	10804083 	ldbu	r2,258(r2)
  804060:	10803fcc 	andi	r2,r2,255
  804064:	1080201c 	xori	r2,r2,128
  804068:	10bfe004 	addi	r2,r2,-128
  80406c:	1000021e 	bne	r2,zero,804078 <logic+0x3db4>
  804070:	00800044 	movi	r2,1
  804074:	00000106 	br	80407c <logic+0x3db8>
  804078:	0005883a 	mov	r2,zero
  80407c:	1007883a 	mov	r3,r2
  804080:	e0bffd17 	ldw	r2,-12(fp)
  804084:	10c01fc5 	stb	r3,127(r2)
  d->_cg127 = d->_PaceMaker_local__Atrig6 || d->_PaceMaker_local__Atrig7 || d->_PaceMaker_local__Atrig8;
  804088:	e0bffd17 	ldw	r2,-12(fp)
  80408c:	10800c03 	ldbu	r2,48(r2)
  804090:	10803fcc 	andi	r2,r2,255
  804094:	1080201c 	xori	r2,r2,128
  804098:	10bfe004 	addi	r2,r2,-128
  80409c:	10000c1e 	bne	r2,zero,8040d0 <logic+0x3e0c>
  8040a0:	e0bffd17 	ldw	r2,-12(fp)
  8040a4:	10800c43 	ldbu	r2,49(r2)
  8040a8:	10803fcc 	andi	r2,r2,255
  8040ac:	1080201c 	xori	r2,r2,128
  8040b0:	10bfe004 	addi	r2,r2,-128
  8040b4:	1000061e 	bne	r2,zero,8040d0 <logic+0x3e0c>
  8040b8:	e0bffd17 	ldw	r2,-12(fp)
  8040bc:	10800c83 	ldbu	r2,50(r2)
  8040c0:	10803fcc 	andi	r2,r2,255
  8040c4:	1080201c 	xori	r2,r2,128
  8040c8:	10bfe004 	addi	r2,r2,-128
  8040cc:	10000226 	beq	r2,zero,8040d8 <logic+0x3e14>
  8040d0:	00800044 	movi	r2,1
  8040d4:	00000106 	br	8040dc <logic+0x3e18>
  8040d8:	0005883a 	mov	r2,zero
  8040dc:	1007883a 	mov	r3,r2
  8040e0:	e0bffd17 	ldw	r2,-12(fp)
  8040e4:	10c041c5 	stb	r3,263(r2)
  d->_g102 = (d->_g121 && !d->_cg124) || (d->_g66 && !d->_cg127);
  8040e8:	e0bffd17 	ldw	r2,-12(fp)
  8040ec:	10802983 	ldbu	r2,166(r2)
  8040f0:	10803fcc 	andi	r2,r2,255
  8040f4:	1080201c 	xori	r2,r2,128
  8040f8:	10bfe004 	addi	r2,r2,-128
  8040fc:	10000626 	beq	r2,zero,804118 <logic+0x3e54>
  804100:	e0bffd17 	ldw	r2,-12(fp)
  804104:	10804183 	ldbu	r2,262(r2)
  804108:	10803fcc 	andi	r2,r2,255
  80410c:	1080201c 	xori	r2,r2,128
  804110:	10bfe004 	addi	r2,r2,-128
  804114:	10000c26 	beq	r2,zero,804148 <logic+0x3e84>
  804118:	e0bffd17 	ldw	r2,-12(fp)
  80411c:	10801fc3 	ldbu	r2,127(r2)
  804120:	10803fcc 	andi	r2,r2,255
  804124:	1080201c 	xori	r2,r2,128
  804128:	10bfe004 	addi	r2,r2,-128
  80412c:	10000826 	beq	r2,zero,804150 <logic+0x3e8c>
  804130:	e0bffd17 	ldw	r2,-12(fp)
  804134:	108041c3 	ldbu	r2,263(r2)
  804138:	10803fcc 	andi	r2,r2,255
  80413c:	1080201c 	xori	r2,r2,128
  804140:	10bfe004 	addi	r2,r2,-128
  804144:	1000021e 	bne	r2,zero,804150 <logic+0x3e8c>
  804148:	00800044 	movi	r2,1
  80414c:	00000106 	br	804154 <logic+0x3e90>
  804150:	0005883a 	mov	r2,zero
  804154:	1007883a 	mov	r3,r2
  804158:	e0bffd17 	ldw	r2,-12(fp)
  80415c:	10c02645 	stb	r3,153(r2)
  d->_cg128 = d->_PaceMaker_local__Atrig6 || d->_PaceMaker_local__Atrig7 || d->_PaceMaker_local__Atrig8;
  804160:	e0bffd17 	ldw	r2,-12(fp)
  804164:	10800c03 	ldbu	r2,48(r2)
  804168:	10803fcc 	andi	r2,r2,255
  80416c:	1080201c 	xori	r2,r2,128
  804170:	10bfe004 	addi	r2,r2,-128
  804174:	10000c1e 	bne	r2,zero,8041a8 <logic+0x3ee4>
  804178:	e0bffd17 	ldw	r2,-12(fp)
  80417c:	10800c43 	ldbu	r2,49(r2)
  804180:	10803fcc 	andi	r2,r2,255
  804184:	1080201c 	xori	r2,r2,128
  804188:	10bfe004 	addi	r2,r2,-128
  80418c:	1000061e 	bne	r2,zero,8041a8 <logic+0x3ee4>
  804190:	e0bffd17 	ldw	r2,-12(fp)
  804194:	10800c83 	ldbu	r2,50(r2)
  804198:	10803fcc 	andi	r2,r2,255
  80419c:	1080201c 	xori	r2,r2,128
  8041a0:	10bfe004 	addi	r2,r2,-128
  8041a4:	10000226 	beq	r2,zero,8041b0 <logic+0x3eec>
  8041a8:	00800044 	movi	r2,1
  8041ac:	00000106 	br	8041b4 <logic+0x3ef0>
  8041b0:	0005883a 	mov	r2,zero
  8041b4:	1007883a 	mov	r3,r2
  8041b8:	e0bffd17 	ldw	r2,-12(fp)
  8041bc:	10c04205 	stb	r3,264(r2)
  d->_g109 = (d->_g88 && !d->_cg128) || (d->_g34 && !d->_cg130);
  8041c0:	e0bffd17 	ldw	r2,-12(fp)
  8041c4:	108023c3 	ldbu	r2,143(r2)
  8041c8:	10803fcc 	andi	r2,r2,255
  8041cc:	1080201c 	xori	r2,r2,128
  8041d0:	10bfe004 	addi	r2,r2,-128
  8041d4:	10000626 	beq	r2,zero,8041f0 <logic+0x3f2c>
  8041d8:	e0bffd17 	ldw	r2,-12(fp)
  8041dc:	10804203 	ldbu	r2,264(r2)
  8041e0:	10803fcc 	andi	r2,r2,255
  8041e4:	1080201c 	xori	r2,r2,128
  8041e8:	10bfe004 	addi	r2,r2,-128
  8041ec:	10000c26 	beq	r2,zero,804220 <logic+0x3f5c>
  8041f0:	e0bffd17 	ldw	r2,-12(fp)
  8041f4:	10801ac3 	ldbu	r2,107(r2)
  8041f8:	10803fcc 	andi	r2,r2,255
  8041fc:	1080201c 	xori	r2,r2,128
  804200:	10bfe004 	addi	r2,r2,-128
  804204:	10000826 	beq	r2,zero,804228 <logic+0x3f64>
  804208:	e0bffd17 	ldw	r2,-12(fp)
  80420c:	10804243 	ldbu	r2,265(r2)
  804210:	10803fcc 	andi	r2,r2,255
  804214:	1080201c 	xori	r2,r2,128
  804218:	10bfe004 	addi	r2,r2,-128
  80421c:	1000021e 	bne	r2,zero,804228 <logic+0x3f64>
  804220:	00800044 	movi	r2,1
  804224:	00000106 	br	80422c <logic+0x3f68>
  804228:	0005883a 	mov	r2,zero
  80422c:	1007883a 	mov	r3,r2
  804230:	e0bffd17 	ldw	r2,-12(fp)
  804234:	10c027c5 	stb	r3,159(r2)
  d->_g107 = d->_g88 || (d->_g137 && !d->_cg139);
  804238:	e0bffd17 	ldw	r2,-12(fp)
  80423c:	108023c3 	ldbu	r2,143(r2)
  804240:	10803fcc 	andi	r2,r2,255
  804244:	1080201c 	xori	r2,r2,128
  804248:	10bfe004 	addi	r2,r2,-128
  80424c:	10000c1e 	bne	r2,zero,804280 <logic+0x3fbc>
  804250:	e0bffd17 	ldw	r2,-12(fp)
  804254:	10802c43 	ldbu	r2,177(r2)
  804258:	10803fcc 	andi	r2,r2,255
  80425c:	1080201c 	xori	r2,r2,128
  804260:	10bfe004 	addi	r2,r2,-128
  804264:	10000826 	beq	r2,zero,804288 <logic+0x3fc4>
  804268:	e0bffd17 	ldw	r2,-12(fp)
  80426c:	10804283 	ldbu	r2,266(r2)
  804270:	10803fcc 	andi	r2,r2,255
  804274:	1080201c 	xori	r2,r2,128
  804278:	10bfe004 	addi	r2,r2,-128
  80427c:	1000021e 	bne	r2,zero,804288 <logic+0x3fc4>
  804280:	00800044 	movi	r2,1
  804284:	00000106 	br	80428c <logic+0x3fc8>
  804288:	0005883a 	mov	r2,zero
  80428c:	1007883a 	mov	r3,r2
  804290:	e0bffd17 	ldw	r2,-12(fp)
  804294:	10c02785 	stb	r3,158(r2)
  d->_g142 = !d->_g153;
  804298:	e0bffd17 	ldw	r2,-12(fp)
  80429c:	10802e83 	ldbu	r2,186(r2)
  8042a0:	10803fcc 	andi	r2,r2,255
  8042a4:	1080201c 	xori	r2,r2,128
  8042a8:	10bfe004 	addi	r2,r2,-128
  8042ac:	1005003a 	cmpeq	r2,r2,zero
  8042b0:	1007883a 	mov	r3,r2
  8042b4:	e0bffd17 	ldw	r2,-12(fp)
  8042b8:	10c02d85 	stb	r3,182(r2)
  d->_g143 = d->_pg177;
  8042bc:	e0bffd17 	ldw	r2,-12(fp)
  8042c0:	10c05703 	ldbu	r3,348(r2)
  8042c4:	e0bffd17 	ldw	r2,-12(fp)
  8042c8:	10c02dc5 	stb	r3,183(r2)
  d->_cg172 = d->VS && !d->ignore_VEvent;
  8042cc:	e0bffd17 	ldw	r2,-12(fp)
  8042d0:	10800443 	ldbu	r2,17(r2)
  8042d4:	10803fcc 	andi	r2,r2,255
  8042d8:	1080201c 	xori	r2,r2,128
  8042dc:	10bfe004 	addi	r2,r2,-128
  8042e0:	10000826 	beq	r2,zero,804304 <logic+0x4040>
  8042e4:	e0bffd17 	ldw	r2,-12(fp)
  8042e8:	10800543 	ldbu	r2,21(r2)
  8042ec:	10803fcc 	andi	r2,r2,255
  8042f0:	1080201c 	xori	r2,r2,128
  8042f4:	10bfe004 	addi	r2,r2,-128
  8042f8:	1000021e 	bne	r2,zero,804304 <logic+0x4040>
  8042fc:	00800044 	movi	r2,1
  804300:	00000106 	br	804308 <logic+0x4044>
  804304:	0005883a 	mov	r2,zero
  804308:	1007883a 	mov	r3,r2
  80430c:	e0bffd17 	ldw	r2,-12(fp)
  804310:	10c04685 	stb	r3,282(r2)
  d->_g141 = d->_g143 && d->_cg172;
  804314:	e0bffd17 	ldw	r2,-12(fp)
  804318:	10802dc3 	ldbu	r2,183(r2)
  80431c:	10803fcc 	andi	r2,r2,255
  804320:	1080201c 	xori	r2,r2,128
  804324:	10bfe004 	addi	r2,r2,-128
  804328:	10000826 	beq	r2,zero,80434c <logic+0x4088>
  80432c:	e0bffd17 	ldw	r2,-12(fp)
  804330:	10804683 	ldbu	r2,282(r2)
  804334:	10803fcc 	andi	r2,r2,255
  804338:	1080201c 	xori	r2,r2,128
  80433c:	10bfe004 	addi	r2,r2,-128
  804340:	10000226 	beq	r2,zero,80434c <logic+0x4088>
  804344:	00800044 	movi	r2,1
  804348:	00000106 	br	804350 <logic+0x408c>
  80434c:	0005883a 	mov	r2,zero
  804350:	1007883a 	mov	r3,r2
  804354:	e0bffd17 	ldw	r2,-12(fp)
  804358:	10c02d45 	stb	r3,181(r2)
  if (d->_g141) {
  80435c:	e0bffd17 	ldw	r2,-12(fp)
  804360:	10802d43 	ldbu	r2,181(r2)
  804364:	10803fcc 	andi	r2,r2,255
  804368:	1080201c 	xori	r2,r2,128
  80436c:	10bfe004 	addi	r2,r2,-128
  804370:	10000326 	beq	r2,zero,804380 <logic+0x40bc>
    d->_PaceMaker_local__Atrig9 = 1;
  804374:	e0bffd17 	ldw	r2,-12(fp)
  804378:	00c00044 	movi	r3,1
  80437c:	10c01105 	stb	r3,68(r2)
  }
  d->_g115 = d->_pg149;
  804380:	e0bffd17 	ldw	r2,-12(fp)
  804384:	10c05743 	ldbu	r3,349(r2)
  804388:	e0bffd17 	ldw	r2,-12(fp)
  80438c:	10c02885 	stb	r3,162(r2)
  if (d->_g115) {
  804390:	e0bffd17 	ldw	r2,-12(fp)
  804394:	10802883 	ldbu	r2,162(r2)
  804398:	10803fcc 	andi	r2,r2,255
  80439c:	1080201c 	xori	r2,r2,128
  8043a0:	10bfe004 	addi	r2,r2,-128
  8043a4:	10001226 	beq	r2,zero,8043f0 <logic+0x412c>
    d->_PaceMaker_local_uri_clk += d->deltaT;
  8043a8:	e13ffd17 	ldw	r4,-12(fp)
  8043ac:	20801217 	ldw	r2,72(r4)
  8043b0:	20c01317 	ldw	r3,76(r4)
  8043b4:	e1bffd17 	ldw	r6,-12(fp)
  8043b8:	31000017 	ldw	r4,0(r6)
  8043bc:	31400117 	ldw	r5,4(r6)
  8043c0:	200d883a 	mov	r6,r4
  8043c4:	280f883a 	mov	r7,r5
  8043c8:	1009883a 	mov	r4,r2
  8043cc:	180b883a 	mov	r5,r3
  8043d0:	08065a40 	call	8065a4 <__adddf3>
  8043d4:	1009883a 	mov	r4,r2
  8043d8:	180b883a 	mov	r5,r3
  8043dc:	2005883a 	mov	r2,r4
  8043e0:	2807883a 	mov	r3,r5
  8043e4:	e13ffd17 	ldw	r4,-12(fp)
  8043e8:	20801215 	stw	r2,72(r4)
  8043ec:	20c01315 	stw	r3,76(r4)
  }
  d->_g118 = d->_g143 && !d->_cg172;
  8043f0:	e0bffd17 	ldw	r2,-12(fp)
  8043f4:	10802dc3 	ldbu	r2,183(r2)
  8043f8:	10803fcc 	andi	r2,r2,255
  8043fc:	1080201c 	xori	r2,r2,128
  804400:	10bfe004 	addi	r2,r2,-128
  804404:	10000826 	beq	r2,zero,804428 <logic+0x4164>
  804408:	e0bffd17 	ldw	r2,-12(fp)
  80440c:	10804683 	ldbu	r2,282(r2)
  804410:	10803fcc 	andi	r2,r2,255
  804414:	1080201c 	xori	r2,r2,128
  804418:	10bfe004 	addi	r2,r2,-128
  80441c:	1000021e 	bne	r2,zero,804428 <logic+0x4164>
  804420:	00800044 	movi	r2,1
  804424:	00000106 	br	80442c <logic+0x4168>
  804428:	0005883a 	mov	r2,zero
  80442c:	1007883a 	mov	r3,r2
  804430:	e0bffd17 	ldw	r2,-12(fp)
  804434:	10c02905 	stb	r3,164(r2)
  d->_cg175 = d->_PaceMaker_local_uri_clk >= URI_VALUE - 1 && !(d->VS || d->VP);
  804438:	e13ffd17 	ldw	r4,-12(fp)
  80443c:	20801217 	ldw	r2,72(r4)
  804440:	20c01317 	ldw	r3,76(r4)
  804444:	000d883a 	mov	r6,zero
  804448:	01d02334 	movhi	r7,16524
  80444c:	39c60004 	addi	r7,r7,6144
  804450:	1009883a 	mov	r4,r2
  804454:	180b883a 	mov	r5,r3
  804458:	0806e500 	call	806e50 <__gedf2>
  80445c:	10000e16 	blt	r2,zero,804498 <logic+0x41d4>
  804460:	e0bffd17 	ldw	r2,-12(fp)
  804464:	10800443 	ldbu	r2,17(r2)
  804468:	10803fcc 	andi	r2,r2,255
  80446c:	1080201c 	xori	r2,r2,128
  804470:	10bfe004 	addi	r2,r2,-128
  804474:	1000081e 	bne	r2,zero,804498 <logic+0x41d4>
  804478:	e0bffd17 	ldw	r2,-12(fp)
  80447c:	108004c3 	ldbu	r2,19(r2)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	1080201c 	xori	r2,r2,128
  804488:	10bfe004 	addi	r2,r2,-128
  80448c:	1000021e 	bne	r2,zero,804498 <logic+0x41d4>
  804490:	00800044 	movi	r2,1
  804494:	00000106 	br	80449c <logic+0x41d8>
  804498:	0005883a 	mov	r2,zero
  80449c:	1007883a 	mov	r3,r2
  8044a0:	e0bffd17 	ldw	r2,-12(fp)
  8044a4:	10c04645 	stb	r3,281(r2)
  d->_g122 = d->_g118 && d->_cg175;
  8044a8:	e0bffd17 	ldw	r2,-12(fp)
  8044ac:	10802903 	ldbu	r2,164(r2)
  8044b0:	10803fcc 	andi	r2,r2,255
  8044b4:	1080201c 	xori	r2,r2,128
  8044b8:	10bfe004 	addi	r2,r2,-128
  8044bc:	10000826 	beq	r2,zero,8044e0 <logic+0x421c>
  8044c0:	e0bffd17 	ldw	r2,-12(fp)
  8044c4:	10804643 	ldbu	r2,281(r2)
  8044c8:	10803fcc 	andi	r2,r2,255
  8044cc:	1080201c 	xori	r2,r2,128
  8044d0:	10bfe004 	addi	r2,r2,-128
  8044d4:	10000226 	beq	r2,zero,8044e0 <logic+0x421c>
  8044d8:	00800044 	movi	r2,1
  8044dc:	00000106 	br	8044e4 <logic+0x4220>
  8044e0:	0005883a 	mov	r2,zero
  8044e4:	1007883a 	mov	r3,r2
  8044e8:	e0bffd17 	ldw	r2,-12(fp)
  8044ec:	10c029c5 	stb	r3,167(r2)
  if (d->_g122) {
  8044f0:	e0bffd17 	ldw	r2,-12(fp)
  8044f4:	108029c3 	ldbu	r2,167(r2)
  8044f8:	10803fcc 	andi	r2,r2,255
  8044fc:	1080201c 	xori	r2,r2,128
  804500:	10bfe004 	addi	r2,r2,-128
  804504:	10000326 	beq	r2,zero,804514 <logic+0x4250>
    d->_PaceMaker_local__Atrig10 = 1;
  804508:	e0bffd17 	ldw	r2,-12(fp)
  80450c:	00c00044 	movi	r3,1
  804510:	10c01145 	stb	r3,69(r2)
  }
  d->_cg153 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  804514:	e0bffd17 	ldw	r2,-12(fp)
  804518:	10801103 	ldbu	r2,68(r2)
  80451c:	10803fcc 	andi	r2,r2,255
  804520:	1080201c 	xori	r2,r2,128
  804524:	10bfe004 	addi	r2,r2,-128
  804528:	1000061e 	bne	r2,zero,804544 <logic+0x4280>
  80452c:	e0bffd17 	ldw	r2,-12(fp)
  804530:	10801143 	ldbu	r2,69(r2)
  804534:	10803fcc 	andi	r2,r2,255
  804538:	1080201c 	xori	r2,r2,128
  80453c:	10bfe004 	addi	r2,r2,-128
  804540:	10000226 	beq	r2,zero,80454c <logic+0x4288>
  804544:	00800044 	movi	r2,1
  804548:	00000106 	br	804550 <logic+0x428c>
  80454c:	0005883a 	mov	r2,zero
  804550:	1007883a 	mov	r3,r2
  804554:	e0bffd17 	ldw	r2,-12(fp)
  804558:	10c04405 	stb	r3,272(r2)
  d->_g127 = d->_g153 && d->_cg153;
  80455c:	e0bffd17 	ldw	r2,-12(fp)
  804560:	10802e83 	ldbu	r2,186(r2)
  804564:	10803fcc 	andi	r2,r2,255
  804568:	1080201c 	xori	r2,r2,128
  80456c:	10bfe004 	addi	r2,r2,-128
  804570:	10000826 	beq	r2,zero,804594 <logic+0x42d0>
  804574:	e0bffd17 	ldw	r2,-12(fp)
  804578:	10804403 	ldbu	r2,272(r2)
  80457c:	10803fcc 	andi	r2,r2,255
  804580:	1080201c 	xori	r2,r2,128
  804584:	10bfe004 	addi	r2,r2,-128
  804588:	10000226 	beq	r2,zero,804594 <logic+0x42d0>
  80458c:	00800044 	movi	r2,1
  804590:	00000106 	br	804598 <logic+0x42d4>
  804594:	0005883a 	mov	r2,zero
  804598:	1007883a 	mov	r3,r2
  80459c:	e0bffd17 	ldw	r2,-12(fp)
  8045a0:	10c02ac5 	stb	r3,171(r2)
  d->_g124 = d->_pg161;
  8045a4:	e0bffd17 	ldw	r2,-12(fp)
  8045a8:	10c05783 	ldbu	r3,350(r2)
  8045ac:	e0bffd17 	ldw	r2,-12(fp)
  8045b0:	10c02a45 	stb	r3,169(r2)
  d->_g130 = d->_pg161_e2;
  8045b4:	e0bffd17 	ldw	r2,-12(fp)
  8045b8:	10c057c3 	ldbu	r3,351(r2)
  8045bc:	e0bffd17 	ldw	r2,-12(fp)
  8045c0:	10c02b05 	stb	r3,172(r2)
  d->_g116 = !(d->_g124 || d->_g130);
  8045c4:	e0bffd17 	ldw	r2,-12(fp)
  8045c8:	10802a43 	ldbu	r2,169(r2)
  8045cc:	10803fcc 	andi	r2,r2,255
  8045d0:	1080201c 	xori	r2,r2,128
  8045d4:	10bfe004 	addi	r2,r2,-128
  8045d8:	1000081e 	bne	r2,zero,8045fc <logic+0x4338>
  8045dc:	e0bffd17 	ldw	r2,-12(fp)
  8045e0:	10802b03 	ldbu	r2,172(r2)
  8045e4:	10803fcc 	andi	r2,r2,255
  8045e8:	1080201c 	xori	r2,r2,128
  8045ec:	10bfe004 	addi	r2,r2,-128
  8045f0:	1000021e 	bne	r2,zero,8045fc <logic+0x4338>
  8045f4:	00800044 	movi	r2,1
  8045f8:	00000106 	br	804600 <logic+0x433c>
  8045fc:	0005883a 	mov	r2,zero
  804600:	1007883a 	mov	r3,r2
  804604:	e0bffd17 	ldw	r2,-12(fp)
  804608:	10c028c5 	stb	r3,163(r2)
  d->_g139 = d->_g130 || d->_g124;
  80460c:	e0bffd17 	ldw	r2,-12(fp)
  804610:	10802b03 	ldbu	r2,172(r2)
  804614:	10803fcc 	andi	r2,r2,255
  804618:	1080201c 	xori	r2,r2,128
  80461c:	10bfe004 	addi	r2,r2,-128
  804620:	1000061e 	bne	r2,zero,80463c <logic+0x4378>
  804624:	e0bffd17 	ldw	r2,-12(fp)
  804628:	10802a43 	ldbu	r2,169(r2)
  80462c:	10803fcc 	andi	r2,r2,255
  804630:	1080201c 	xori	r2,r2,128
  804634:	10bfe004 	addi	r2,r2,-128
  804638:	10000226 	beq	r2,zero,804644 <logic+0x4380>
  80463c:	00800044 	movi	r2,1
  804640:	00000106 	br	804648 <logic+0x4384>
  804644:	0005883a 	mov	r2,zero
  804648:	1007883a 	mov	r3,r2
  80464c:	e0bffd17 	ldw	r2,-12(fp)
  804650:	10c02cc5 	stb	r3,179(r2)
  d->_cg159 = d->_PaceMaker_local_uri_clk < URI_VALUE - 1;
  804654:	e13ffd17 	ldw	r4,-12(fp)
  804658:	20801217 	ldw	r2,72(r4)
  80465c:	20c01317 	ldw	r3,76(r4)
  804660:	04000044 	movi	r16,1
  804664:	000d883a 	mov	r6,zero
  804668:	01d02334 	movhi	r7,16524
  80466c:	39c60004 	addi	r7,r7,6144
  804670:	1009883a 	mov	r4,r2
  804674:	180b883a 	mov	r5,r3
  804678:	0806f2c0 	call	806f2c <__ledf2>
  80467c:	10000116 	blt	r2,zero,804684 <logic+0x43c0>
  804680:	0021883a 	mov	r16,zero
  804684:	8007883a 	mov	r3,r16
  804688:	e0bffd17 	ldw	r2,-12(fp)
  80468c:	10c04505 	stb	r3,276(r2)
  d->_g164 = d->_g139 && d->_cg159;
  804690:	e0bffd17 	ldw	r2,-12(fp)
  804694:	10802cc3 	ldbu	r2,179(r2)
  804698:	10803fcc 	andi	r2,r2,255
  80469c:	1080201c 	xori	r2,r2,128
  8046a0:	10bfe004 	addi	r2,r2,-128
  8046a4:	10000826 	beq	r2,zero,8046c8 <logic+0x4404>
  8046a8:	e0bffd17 	ldw	r2,-12(fp)
  8046ac:	10804503 	ldbu	r2,276(r2)
  8046b0:	10803fcc 	andi	r2,r2,255
  8046b4:	1080201c 	xori	r2,r2,128
  8046b8:	10bfe004 	addi	r2,r2,-128
  8046bc:	10000226 	beq	r2,zero,8046c8 <logic+0x4404>
  8046c0:	00800044 	movi	r2,1
  8046c4:	00000106 	br	8046cc <logic+0x4408>
  8046c8:	0005883a 	mov	r2,zero
  8046cc:	1007883a 	mov	r3,r2
  8046d0:	e0bffd17 	ldw	r2,-12(fp)
  8046d4:	10c03085 	stb	r3,194(r2)
  if (d->_g164) {
  8046d8:	e0bffd17 	ldw	r2,-12(fp)
  8046dc:	10803083 	ldbu	r2,194(r2)
  8046e0:	10803fcc 	andi	r2,r2,255
  8046e4:	1080201c 	xori	r2,r2,128
  8046e8:	10bfe004 	addi	r2,r2,-128
  8046ec:	10002a26 	beq	r2,zero,804798 <logic+0x44d4>
    d->sleepT = (d->sleepT < (URI_VALUE - 1 - d->_PaceMaker_local_uri_clk)) ? d->sleepT : (URI_VALUE - 1 - d->_PaceMaker_local_uri_clk);
  8046f0:	e0bffd17 	ldw	r2,-12(fp)
  8046f4:	14000217 	ldw	r16,8(r2)
  8046f8:	14400317 	ldw	r17,12(r2)
  8046fc:	e13ffd17 	ldw	r4,-12(fp)
  804700:	20801217 	ldw	r2,72(r4)
  804704:	20c01317 	ldw	r3,76(r4)
  804708:	100d883a 	mov	r6,r2
  80470c:	180f883a 	mov	r7,r3
  804710:	0009883a 	mov	r4,zero
  804714:	01502334 	movhi	r5,16524
  804718:	29460004 	addi	r5,r5,6144
  80471c:	08070200 	call	807020 <__subdf3>
  804720:	1009883a 	mov	r4,r2
  804724:	180b883a 	mov	r5,r3
  804728:	2005883a 	mov	r2,r4
  80472c:	2807883a 	mov	r3,r5
  804730:	100d883a 	mov	r6,r2
  804734:	180f883a 	mov	r7,r3
  804738:	8009883a 	mov	r4,r16
  80473c:	880b883a 	mov	r5,r17
  804740:	0806f2c0 	call	806f2c <__ledf2>
  804744:	1000040e 	bge	r2,zero,804758 <logic+0x4494>
  804748:	e13ffd17 	ldw	r4,-12(fp)
  80474c:	20800217 	ldw	r2,8(r4)
  804750:	20c00317 	ldw	r3,12(r4)
  804754:	00000d06 	br	80478c <logic+0x44c8>
  804758:	e13ffd17 	ldw	r4,-12(fp)
  80475c:	20801217 	ldw	r2,72(r4)
  804760:	20c01317 	ldw	r3,76(r4)
  804764:	100d883a 	mov	r6,r2
  804768:	180f883a 	mov	r7,r3
  80476c:	0009883a 	mov	r4,zero
  804770:	01502334 	movhi	r5,16524
  804774:	29460004 	addi	r5,r5,6144
  804778:	08070200 	call	807020 <__subdf3>
  80477c:	1009883a 	mov	r4,r2
  804780:	180b883a 	mov	r5,r3
  804784:	2005883a 	mov	r2,r4
  804788:	2807883a 	mov	r3,r5
  80478c:	e13ffd17 	ldw	r4,-12(fp)
  804790:	20800215 	stw	r2,8(r4)
  804794:	20c00315 	stw	r3,12(r4)
  }
  d->_cg160 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  804798:	e0bffd17 	ldw	r2,-12(fp)
  80479c:	10801103 	ldbu	r2,68(r2)
  8047a0:	10803fcc 	andi	r2,r2,255
  8047a4:	1080201c 	xori	r2,r2,128
  8047a8:	10bfe004 	addi	r2,r2,-128
  8047ac:	1000061e 	bne	r2,zero,8047c8 <logic+0x4504>
  8047b0:	e0bffd17 	ldw	r2,-12(fp)
  8047b4:	10801143 	ldbu	r2,69(r2)
  8047b8:	10803fcc 	andi	r2,r2,255
  8047bc:	1080201c 	xori	r2,r2,128
  8047c0:	10bfe004 	addi	r2,r2,-128
  8047c4:	10000226 	beq	r2,zero,8047d0 <logic+0x450c>
  8047c8:	00800044 	movi	r2,1
  8047cc:	00000106 	br	8047d4 <logic+0x4510>
  8047d0:	0005883a 	mov	r2,zero
  8047d4:	1007883a 	mov	r3,r2
  8047d8:	e0bffd17 	ldw	r2,-12(fp)
  8047dc:	10c044c5 	stb	r3,275(r2)
  d->_g158 = d->_g139 && !d->_cg159;
  8047e0:	e0bffd17 	ldw	r2,-12(fp)
  8047e4:	10802cc3 	ldbu	r2,179(r2)
  8047e8:	10803fcc 	andi	r2,r2,255
  8047ec:	1080201c 	xori	r2,r2,128
  8047f0:	10bfe004 	addi	r2,r2,-128
  8047f4:	10000826 	beq	r2,zero,804818 <logic+0x4554>
  8047f8:	e0bffd17 	ldw	r2,-12(fp)
  8047fc:	10804503 	ldbu	r2,276(r2)
  804800:	10803fcc 	andi	r2,r2,255
  804804:	1080201c 	xori	r2,r2,128
  804808:	10bfe004 	addi	r2,r2,-128
  80480c:	1000021e 	bne	r2,zero,804818 <logic+0x4554>
  804810:	00800044 	movi	r2,1
  804814:	00000106 	br	80481c <logic+0x4558>
  804818:	0005883a 	mov	r2,zero
  80481c:	1007883a 	mov	r3,r2
  804820:	e0bffd17 	ldw	r2,-12(fp)
  804824:	10c02f45 	stb	r3,189(r2)
  d->_cg162 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  804828:	e0bffd17 	ldw	r2,-12(fp)
  80482c:	10801103 	ldbu	r2,68(r2)
  804830:	10803fcc 	andi	r2,r2,255
  804834:	1080201c 	xori	r2,r2,128
  804838:	10bfe004 	addi	r2,r2,-128
  80483c:	1000061e 	bne	r2,zero,804858 <logic+0x4594>
  804840:	e0bffd17 	ldw	r2,-12(fp)
  804844:	10801143 	ldbu	r2,69(r2)
  804848:	10803fcc 	andi	r2,r2,255
  80484c:	1080201c 	xori	r2,r2,128
  804850:	10bfe004 	addi	r2,r2,-128
  804854:	10000226 	beq	r2,zero,804860 <logic+0x459c>
  804858:	00800044 	movi	r2,1
  80485c:	00000106 	br	804864 <logic+0x45a0>
  804860:	0005883a 	mov	r2,zero
  804864:	1007883a 	mov	r3,r2
  804868:	e0bffd17 	ldw	r2,-12(fp)
  80486c:	10c04545 	stb	r3,277(r2)
  d->_g159 = (d->_g164 && d->_cg160) || (d->_g158 && d->_cg162);
  804870:	e0bffd17 	ldw	r2,-12(fp)
  804874:	10803083 	ldbu	r2,194(r2)
  804878:	10803fcc 	andi	r2,r2,255
  80487c:	1080201c 	xori	r2,r2,128
  804880:	10bfe004 	addi	r2,r2,-128
  804884:	10000626 	beq	r2,zero,8048a0 <logic+0x45dc>
  804888:	e0bffd17 	ldw	r2,-12(fp)
  80488c:	108044c3 	ldbu	r2,275(r2)
  804890:	10803fcc 	andi	r2,r2,255
  804894:	1080201c 	xori	r2,r2,128
  804898:	10bfe004 	addi	r2,r2,-128
  80489c:	10000c1e 	bne	r2,zero,8048d0 <logic+0x460c>
  8048a0:	e0bffd17 	ldw	r2,-12(fp)
  8048a4:	10802f43 	ldbu	r2,189(r2)
  8048a8:	10803fcc 	andi	r2,r2,255
  8048ac:	1080201c 	xori	r2,r2,128
  8048b0:	10bfe004 	addi	r2,r2,-128
  8048b4:	10000826 	beq	r2,zero,8048d8 <logic+0x4614>
  8048b8:	e0bffd17 	ldw	r2,-12(fp)
  8048bc:	10804543 	ldbu	r2,277(r2)
  8048c0:	10803fcc 	andi	r2,r2,255
  8048c4:	1080201c 	xori	r2,r2,128
  8048c8:	10bfe004 	addi	r2,r2,-128
  8048cc:	10000226 	beq	r2,zero,8048d8 <logic+0x4614>
  8048d0:	00800044 	movi	r2,1
  8048d4:	00000106 	br	8048dc <logic+0x4618>
  8048d8:	0005883a 	mov	r2,zero
  8048dc:	1007883a 	mov	r3,r2
  8048e0:	e0bffd17 	ldw	r2,-12(fp)
  8048e4:	10c02f85 	stb	r3,190(r2)
  d->_g169_e3 = !d->_g115;
  8048e8:	e0bffd17 	ldw	r2,-12(fp)
  8048ec:	10802883 	ldbu	r2,162(r2)
  8048f0:	10803fcc 	andi	r2,r2,255
  8048f4:	1080201c 	xori	r2,r2,128
  8048f8:	10bfe004 	addi	r2,r2,-128
  8048fc:	1005003a 	cmpeq	r2,r2,zero
  804900:	1007883a 	mov	r3,r2
  804904:	e0bffd17 	ldw	r2,-12(fp)
  804908:	10c04e85 	stb	r3,314(r2)
  d->_cg168 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  80490c:	e0bffd17 	ldw	r2,-12(fp)
  804910:	10801103 	ldbu	r2,68(r2)
  804914:	10803fcc 	andi	r2,r2,255
  804918:	1080201c 	xori	r2,r2,128
  80491c:	10bfe004 	addi	r2,r2,-128
  804920:	1000061e 	bne	r2,zero,80493c <logic+0x4678>
  804924:	e0bffd17 	ldw	r2,-12(fp)
  804928:	10801143 	ldbu	r2,69(r2)
  80492c:	10803fcc 	andi	r2,r2,255
  804930:	1080201c 	xori	r2,r2,128
  804934:	10bfe004 	addi	r2,r2,-128
  804938:	10000226 	beq	r2,zero,804944 <logic+0x4680>
  80493c:	00800044 	movi	r2,1
  804940:	00000106 	br	804948 <logic+0x4684>
  804944:	0005883a 	mov	r2,zero
  804948:	1007883a 	mov	r3,r2
  80494c:	e0bffd17 	ldw	r2,-12(fp)
  804950:	10c04605 	stb	r3,280(r2)
  d->_g169 = d->_g115 && d->_cg168;
  804954:	e0bffd17 	ldw	r2,-12(fp)
  804958:	10802883 	ldbu	r2,162(r2)
  80495c:	10803fcc 	andi	r2,r2,255
  804960:	1080201c 	xori	r2,r2,128
  804964:	10bfe004 	addi	r2,r2,-128
  804968:	10000826 	beq	r2,zero,80498c <logic+0x46c8>
  80496c:	e0bffd17 	ldw	r2,-12(fp)
  804970:	10804603 	ldbu	r2,280(r2)
  804974:	10803fcc 	andi	r2,r2,255
  804978:	1080201c 	xori	r2,r2,128
  80497c:	10bfe004 	addi	r2,r2,-128
  804980:	10000226 	beq	r2,zero,80498c <logic+0x46c8>
  804984:	00800044 	movi	r2,1
  804988:	00000106 	br	804990 <logic+0x46cc>
  80498c:	0005883a 	mov	r2,zero
  804990:	1007883a 	mov	r3,r2
  804994:	e0bffd17 	ldw	r2,-12(fp)
  804998:	10c03145 	stb	r3,197(r2)
  d->_g172 = !d->_g143;
  80499c:	e0bffd17 	ldw	r2,-12(fp)
  8049a0:	10802dc3 	ldbu	r2,183(r2)
  8049a4:	10803fcc 	andi	r2,r2,255
  8049a8:	1080201c 	xori	r2,r2,128
  8049ac:	10bfe004 	addi	r2,r2,-128
  8049b0:	1005003a 	cmpeq	r2,r2,zero
  8049b4:	1007883a 	mov	r3,r2
  8049b8:	e0bffd17 	ldw	r2,-12(fp)
  8049bc:	10c03185 	stb	r3,198(r2)
  d->_g176 = d->_g141 || d->_g122;
  8049c0:	e0bffd17 	ldw	r2,-12(fp)
  8049c4:	10802d43 	ldbu	r2,181(r2)
  8049c8:	10803fcc 	andi	r2,r2,255
  8049cc:	1080201c 	xori	r2,r2,128
  8049d0:	10bfe004 	addi	r2,r2,-128
  8049d4:	1000061e 	bne	r2,zero,8049f0 <logic+0x472c>
  8049d8:	e0bffd17 	ldw	r2,-12(fp)
  8049dc:	108029c3 	ldbu	r2,167(r2)
  8049e0:	10803fcc 	andi	r2,r2,255
  8049e4:	1080201c 	xori	r2,r2,128
  8049e8:	10bfe004 	addi	r2,r2,-128
  8049ec:	10000226 	beq	r2,zero,8049f8 <logic+0x4734>
  8049f0:	00800044 	movi	r2,1
  8049f4:	00000106 	br	8049fc <logic+0x4738>
  8049f8:	0005883a 	mov	r2,zero
  8049fc:	1007883a 	mov	r3,r2
  804a00:	e0bffd17 	ldw	r2,-12(fp)
  804a04:	10c03285 	stb	r3,202(r2)
  d->_g173 = (d->_g142 || d->_g127) && (d->_g116 || d->_g159) && (d->_g169_e3 || d->_g169) && (d->_g172 || d->_g176) && (d->_g127 || d->_g159 || d->_g169 || d->_g176);
  804a08:	e0bffd17 	ldw	r2,-12(fp)
  804a0c:	10802d83 	ldbu	r2,182(r2)
  804a10:	10803fcc 	andi	r2,r2,255
  804a14:	1080201c 	xori	r2,r2,128
  804a18:	10bfe004 	addi	r2,r2,-128
  804a1c:	1000061e 	bne	r2,zero,804a38 <logic+0x4774>
  804a20:	e0bffd17 	ldw	r2,-12(fp)
  804a24:	10802ac3 	ldbu	r2,171(r2)
  804a28:	10803fcc 	andi	r2,r2,255
  804a2c:	1080201c 	xori	r2,r2,128
  804a30:	10bfe004 	addi	r2,r2,-128
  804a34:	10003e26 	beq	r2,zero,804b30 <logic+0x486c>
  804a38:	e0bffd17 	ldw	r2,-12(fp)
  804a3c:	108028c3 	ldbu	r2,163(r2)
  804a40:	10803fcc 	andi	r2,r2,255
  804a44:	1080201c 	xori	r2,r2,128
  804a48:	10bfe004 	addi	r2,r2,-128
  804a4c:	1000061e 	bne	r2,zero,804a68 <logic+0x47a4>
  804a50:	e0bffd17 	ldw	r2,-12(fp)
  804a54:	10802f83 	ldbu	r2,190(r2)
  804a58:	10803fcc 	andi	r2,r2,255
  804a5c:	1080201c 	xori	r2,r2,128
  804a60:	10bfe004 	addi	r2,r2,-128
  804a64:	10003226 	beq	r2,zero,804b30 <logic+0x486c>
  804a68:	e0bffd17 	ldw	r2,-12(fp)
  804a6c:	10804e83 	ldbu	r2,314(r2)
  804a70:	10803fcc 	andi	r2,r2,255
  804a74:	1080201c 	xori	r2,r2,128
  804a78:	10bfe004 	addi	r2,r2,-128
  804a7c:	1000061e 	bne	r2,zero,804a98 <logic+0x47d4>
  804a80:	e0bffd17 	ldw	r2,-12(fp)
  804a84:	10803143 	ldbu	r2,197(r2)
  804a88:	10803fcc 	andi	r2,r2,255
  804a8c:	1080201c 	xori	r2,r2,128
  804a90:	10bfe004 	addi	r2,r2,-128
  804a94:	10002626 	beq	r2,zero,804b30 <logic+0x486c>
  804a98:	e0bffd17 	ldw	r2,-12(fp)
  804a9c:	10803183 	ldbu	r2,198(r2)
  804aa0:	10803fcc 	andi	r2,r2,255
  804aa4:	1080201c 	xori	r2,r2,128
  804aa8:	10bfe004 	addi	r2,r2,-128
  804aac:	1000061e 	bne	r2,zero,804ac8 <logic+0x4804>
  804ab0:	e0bffd17 	ldw	r2,-12(fp)
  804ab4:	10803283 	ldbu	r2,202(r2)
  804ab8:	10803fcc 	andi	r2,r2,255
  804abc:	1080201c 	xori	r2,r2,128
  804ac0:	10bfe004 	addi	r2,r2,-128
  804ac4:	10001a26 	beq	r2,zero,804b30 <logic+0x486c>
  804ac8:	e0bffd17 	ldw	r2,-12(fp)
  804acc:	10802ac3 	ldbu	r2,171(r2)
  804ad0:	10803fcc 	andi	r2,r2,255
  804ad4:	1080201c 	xori	r2,r2,128
  804ad8:	10bfe004 	addi	r2,r2,-128
  804adc:	1000121e 	bne	r2,zero,804b28 <logic+0x4864>
  804ae0:	e0bffd17 	ldw	r2,-12(fp)
  804ae4:	10802f83 	ldbu	r2,190(r2)
  804ae8:	10803fcc 	andi	r2,r2,255
  804aec:	1080201c 	xori	r2,r2,128
  804af0:	10bfe004 	addi	r2,r2,-128
  804af4:	10000c1e 	bne	r2,zero,804b28 <logic+0x4864>
  804af8:	e0bffd17 	ldw	r2,-12(fp)
  804afc:	10803143 	ldbu	r2,197(r2)
  804b00:	10803fcc 	andi	r2,r2,255
  804b04:	1080201c 	xori	r2,r2,128
  804b08:	10bfe004 	addi	r2,r2,-128
  804b0c:	1000061e 	bne	r2,zero,804b28 <logic+0x4864>
  804b10:	e0bffd17 	ldw	r2,-12(fp)
  804b14:	10803283 	ldbu	r2,202(r2)
  804b18:	10803fcc 	andi	r2,r2,255
  804b1c:	1080201c 	xori	r2,r2,128
  804b20:	10bfe004 	addi	r2,r2,-128
  804b24:	10000226 	beq	r2,zero,804b30 <logic+0x486c>
  804b28:	00800044 	movi	r2,1
  804b2c:	00000106 	br	804b34 <logic+0x4870>
  804b30:	0005883a 	mov	r2,zero
  804b34:	1007883a 	mov	r3,r2
  804b38:	e0bffd17 	ldw	r2,-12(fp)
  804b3c:	10c031c5 	stb	r3,199(r2)
  d->_cg177 = d->_PaceMaker_local__Atrig9;
  804b40:	e0bffd17 	ldw	r2,-12(fp)
  804b44:	10c01103 	ldbu	r3,68(r2)
  804b48:	e0bffd17 	ldw	r2,-12(fp)
  804b4c:	10c04345 	stb	r3,269(r2)
  d->_g154_e1 = d->_pg169_e3;
  804b50:	e0bffd17 	ldw	r2,-12(fp)
  804b54:	10c05803 	ldbu	r3,352(r2)
  804b58:	e0bffd17 	ldw	r2,-12(fp)
  804b5c:	10c04e05 	stb	r3,312(r2)
  d->_cg149 = (d->VS || d->VP) && !d->ignore_VEvent;
  804b60:	e0bffd17 	ldw	r2,-12(fp)
  804b64:	10800443 	ldbu	r2,17(r2)
  804b68:	10803fcc 	andi	r2,r2,255
  804b6c:	1080201c 	xori	r2,r2,128
  804b70:	10bfe004 	addi	r2,r2,-128
  804b74:	1000061e 	bne	r2,zero,804b90 <logic+0x48cc>
  804b78:	e0bffd17 	ldw	r2,-12(fp)
  804b7c:	108004c3 	ldbu	r2,19(r2)
  804b80:	10803fcc 	andi	r2,r2,255
  804b84:	1080201c 	xori	r2,r2,128
  804b88:	10bfe004 	addi	r2,r2,-128
  804b8c:	10000826 	beq	r2,zero,804bb0 <logic+0x48ec>
  804b90:	e0bffd17 	ldw	r2,-12(fp)
  804b94:	10800543 	ldbu	r2,21(r2)
  804b98:	10803fcc 	andi	r2,r2,255
  804b9c:	1080201c 	xori	r2,r2,128
  804ba0:	10bfe004 	addi	r2,r2,-128
  804ba4:	1000021e 	bne	r2,zero,804bb0 <logic+0x48ec>
  804ba8:	00800044 	movi	r2,1
  804bac:	00000106 	br	804bb4 <logic+0x48f0>
  804bb0:	0005883a 	mov	r2,zero
  804bb4:	1007883a 	mov	r3,r2
  804bb8:	e0bffd17 	ldw	r2,-12(fp)
  804bbc:	10c04385 	stb	r3,270(r2)
  d->_g169_e3 = d->_GO || (d->_g173 && !d->_cg177) || (d->_g154_e1 && !d->_cg149);
  804bc0:	e0bffd17 	ldw	r2,-12(fp)
  804bc4:	10803643 	ldbu	r2,217(r2)
  804bc8:	10803fcc 	andi	r2,r2,255
  804bcc:	1080201c 	xori	r2,r2,128
  804bd0:	10bfe004 	addi	r2,r2,-128
  804bd4:	1000181e 	bne	r2,zero,804c38 <logic+0x4974>
  804bd8:	e0bffd17 	ldw	r2,-12(fp)
  804bdc:	108031c3 	ldbu	r2,199(r2)
  804be0:	10803fcc 	andi	r2,r2,255
  804be4:	1080201c 	xori	r2,r2,128
  804be8:	10bfe004 	addi	r2,r2,-128
  804bec:	10000626 	beq	r2,zero,804c08 <logic+0x4944>
  804bf0:	e0bffd17 	ldw	r2,-12(fp)
  804bf4:	10804343 	ldbu	r2,269(r2)
  804bf8:	10803fcc 	andi	r2,r2,255
  804bfc:	1080201c 	xori	r2,r2,128
  804c00:	10bfe004 	addi	r2,r2,-128
  804c04:	10000c26 	beq	r2,zero,804c38 <logic+0x4974>
  804c08:	e0bffd17 	ldw	r2,-12(fp)
  804c0c:	10804e03 	ldbu	r2,312(r2)
  804c10:	10803fcc 	andi	r2,r2,255
  804c14:	1080201c 	xori	r2,r2,128
  804c18:	10bfe004 	addi	r2,r2,-128
  804c1c:	10000826 	beq	r2,zero,804c40 <logic+0x497c>
  804c20:	e0bffd17 	ldw	r2,-12(fp)
  804c24:	10804383 	ldbu	r2,270(r2)
  804c28:	10803fcc 	andi	r2,r2,255
  804c2c:	1080201c 	xori	r2,r2,128
  804c30:	10bfe004 	addi	r2,r2,-128
  804c34:	1000021e 	bne	r2,zero,804c40 <logic+0x497c>
  804c38:	00800044 	movi	r2,1
  804c3c:	00000106 	br	804c44 <logic+0x4980>
  804c40:	0005883a 	mov	r2,zero
  804c44:	1007883a 	mov	r3,r2
  804c48:	e0bffd17 	ldw	r2,-12(fp)
  804c4c:	10c04e85 	stb	r3,314(r2)
  d->_g154 = (d->_g154_e1 && d->_cg149) || (d->_g173 && d->_cg177);
  804c50:	e0bffd17 	ldw	r2,-12(fp)
  804c54:	10804e03 	ldbu	r2,312(r2)
  804c58:	10803fcc 	andi	r2,r2,255
  804c5c:	1080201c 	xori	r2,r2,128
  804c60:	10bfe004 	addi	r2,r2,-128
  804c64:	10000626 	beq	r2,zero,804c80 <logic+0x49bc>
  804c68:	e0bffd17 	ldw	r2,-12(fp)
  804c6c:	10804383 	ldbu	r2,270(r2)
  804c70:	10803fcc 	andi	r2,r2,255
  804c74:	1080201c 	xori	r2,r2,128
  804c78:	10bfe004 	addi	r2,r2,-128
  804c7c:	10000c1e 	bne	r2,zero,804cb0 <logic+0x49ec>
  804c80:	e0bffd17 	ldw	r2,-12(fp)
  804c84:	108031c3 	ldbu	r2,199(r2)
  804c88:	10803fcc 	andi	r2,r2,255
  804c8c:	1080201c 	xori	r2,r2,128
  804c90:	10bfe004 	addi	r2,r2,-128
  804c94:	10000826 	beq	r2,zero,804cb8 <logic+0x49f4>
  804c98:	e0bffd17 	ldw	r2,-12(fp)
  804c9c:	10804343 	ldbu	r2,269(r2)
  804ca0:	10803fcc 	andi	r2,r2,255
  804ca4:	1080201c 	xori	r2,r2,128
  804ca8:	10bfe004 	addi	r2,r2,-128
  804cac:	10000226 	beq	r2,zero,804cb8 <logic+0x49f4>
  804cb0:	00800044 	movi	r2,1
  804cb4:	00000106 	br	804cbc <logic+0x49f8>
  804cb8:	0005883a 	mov	r2,zero
  804cbc:	1007883a 	mov	r3,r2
  804cc0:	e0bffd17 	ldw	r2,-12(fp)
  804cc4:	10c02ec5 	stb	r3,187(r2)
  if (d->_g154) {
  804cc8:	e0bffd17 	ldw	r2,-12(fp)
  804ccc:	10802ec3 	ldbu	r2,187(r2)
  804cd0:	10803fcc 	andi	r2,r2,255
  804cd4:	1080201c 	xori	r2,r2,128
  804cd8:	10bfe004 	addi	r2,r2,-128
  804cdc:	10000726 	beq	r2,zero,804cfc <logic+0x4a38>
    d->_PaceMaker_local_uri_clk = 0.0;
  804ce0:	e0bffd17 	ldw	r2,-12(fp)
  804ce4:	10001215 	stw	zero,72(r2)
  804ce8:	10001315 	stw	zero,76(r2)
    d->_PaceMaker_local__Atrig9 = 0;
  804cec:	e0bffd17 	ldw	r2,-12(fp)
  804cf0:	10001105 	stb	zero,68(r2)
    d->_PaceMaker_local__Atrig10 = 0;
  804cf4:	e0bffd17 	ldw	r2,-12(fp)
  804cf8:	10001145 	stb	zero,69(r2)
  }
  d->_cg151 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  804cfc:	e0bffd17 	ldw	r2,-12(fp)
  804d00:	10801103 	ldbu	r2,68(r2)
  804d04:	10803fcc 	andi	r2,r2,255
  804d08:	1080201c 	xori	r2,r2,128
  804d0c:	10bfe004 	addi	r2,r2,-128
  804d10:	1000061e 	bne	r2,zero,804d2c <logic+0x4a68>
  804d14:	e0bffd17 	ldw	r2,-12(fp)
  804d18:	10801143 	ldbu	r2,69(r2)
  804d1c:	10803fcc 	andi	r2,r2,255
  804d20:	1080201c 	xori	r2,r2,128
  804d24:	10bfe004 	addi	r2,r2,-128
  804d28:	10000226 	beq	r2,zero,804d34 <logic+0x4a70>
  804d2c:	00800044 	movi	r2,1
  804d30:	00000106 	br	804d38 <logic+0x4a74>
  804d34:	0005883a 	mov	r2,zero
  804d38:	1007883a 	mov	r3,r2
  804d3c:	e0bffd17 	ldw	r2,-12(fp)
  804d40:	10c043c5 	stb	r3,271(r2)
  d->_g169 = (d->_g154 && !d->_cg151) || (d->_g153 && !d->_cg153);
  804d44:	e0bffd17 	ldw	r2,-12(fp)
  804d48:	10802ec3 	ldbu	r2,187(r2)
  804d4c:	10803fcc 	andi	r2,r2,255
  804d50:	1080201c 	xori	r2,r2,128
  804d54:	10bfe004 	addi	r2,r2,-128
  804d58:	10000626 	beq	r2,zero,804d74 <logic+0x4ab0>
  804d5c:	e0bffd17 	ldw	r2,-12(fp)
  804d60:	108043c3 	ldbu	r2,271(r2)
  804d64:	10803fcc 	andi	r2,r2,255
  804d68:	1080201c 	xori	r2,r2,128
  804d6c:	10bfe004 	addi	r2,r2,-128
  804d70:	10000c26 	beq	r2,zero,804da4 <logic+0x4ae0>
  804d74:	e0bffd17 	ldw	r2,-12(fp)
  804d78:	10802e83 	ldbu	r2,186(r2)
  804d7c:	10803fcc 	andi	r2,r2,255
  804d80:	1080201c 	xori	r2,r2,128
  804d84:	10bfe004 	addi	r2,r2,-128
  804d88:	10000826 	beq	r2,zero,804dac <logic+0x4ae8>
  804d8c:	e0bffd17 	ldw	r2,-12(fp)
  804d90:	10804403 	ldbu	r2,272(r2)
  804d94:	10803fcc 	andi	r2,r2,255
  804d98:	1080201c 	xori	r2,r2,128
  804d9c:	10bfe004 	addi	r2,r2,-128
  804da0:	1000021e 	bne	r2,zero,804dac <logic+0x4ae8>
  804da4:	00800044 	movi	r2,1
  804da8:	00000106 	br	804db0 <logic+0x4aec>
  804dac:	0005883a 	mov	r2,zero
  804db0:	1007883a 	mov	r3,r2
  804db4:	e0bffd17 	ldw	r2,-12(fp)
  804db8:	10c03145 	stb	r3,197(r2)
  d->_cg155 = d->_PaceMaker_local_uri_clk < URI_VALUE - 1;
  804dbc:	e13ffd17 	ldw	r4,-12(fp)
  804dc0:	20801217 	ldw	r2,72(r4)
  804dc4:	20c01317 	ldw	r3,76(r4)
  804dc8:	04000044 	movi	r16,1
  804dcc:	000d883a 	mov	r6,zero
  804dd0:	01d02334 	movhi	r7,16524
  804dd4:	39c60004 	addi	r7,r7,6144
  804dd8:	1009883a 	mov	r4,r2
  804ddc:	180b883a 	mov	r5,r3
  804de0:	0806f2c0 	call	806f2c <__ledf2>
  804de4:	10000116 	blt	r2,zero,804dec <logic+0x4b28>
  804de8:	0021883a 	mov	r16,zero
  804dec:	8007883a 	mov	r3,r16
  804df0:	e0bffd17 	ldw	r2,-12(fp)
  804df4:	10c04445 	stb	r3,273(r2)
  d->_g174_e4 = d->_g154 && d->_cg155;
  804df8:	e0bffd17 	ldw	r2,-12(fp)
  804dfc:	10802ec3 	ldbu	r2,187(r2)
  804e00:	10803fcc 	andi	r2,r2,255
  804e04:	1080201c 	xori	r2,r2,128
  804e08:	10bfe004 	addi	r2,r2,-128
  804e0c:	10000826 	beq	r2,zero,804e30 <logic+0x4b6c>
  804e10:	e0bffd17 	ldw	r2,-12(fp)
  804e14:	10804443 	ldbu	r2,273(r2)
  804e18:	10803fcc 	andi	r2,r2,255
  804e1c:	1080201c 	xori	r2,r2,128
  804e20:	10bfe004 	addi	r2,r2,-128
  804e24:	10000226 	beq	r2,zero,804e30 <logic+0x4b6c>
  804e28:	00800044 	movi	r2,1
  804e2c:	00000106 	br	804e34 <logic+0x4b70>
  804e30:	0005883a 	mov	r2,zero
  804e34:	1007883a 	mov	r3,r2
  804e38:	e0bffd17 	ldw	r2,-12(fp)
  804e3c:	10c04ec5 	stb	r3,315(r2)
  if (d->_g174_e4) {
  804e40:	e0bffd17 	ldw	r2,-12(fp)
  804e44:	10804ec3 	ldbu	r2,315(r2)
  804e48:	10803fcc 	andi	r2,r2,255
  804e4c:	1080201c 	xori	r2,r2,128
  804e50:	10bfe004 	addi	r2,r2,-128
  804e54:	10002a26 	beq	r2,zero,804f00 <logic+0x4c3c>
    d->sleepT = (d->sleepT < (URI_VALUE - 1 - d->_PaceMaker_local_uri_clk)) ? d->sleepT : (URI_VALUE - 1 - d->_PaceMaker_local_uri_clk);
  804e58:	e0bffd17 	ldw	r2,-12(fp)
  804e5c:	14000217 	ldw	r16,8(r2)
  804e60:	14400317 	ldw	r17,12(r2)
  804e64:	e13ffd17 	ldw	r4,-12(fp)
  804e68:	20801217 	ldw	r2,72(r4)
  804e6c:	20c01317 	ldw	r3,76(r4)
  804e70:	100d883a 	mov	r6,r2
  804e74:	180f883a 	mov	r7,r3
  804e78:	0009883a 	mov	r4,zero
  804e7c:	01502334 	movhi	r5,16524
  804e80:	29460004 	addi	r5,r5,6144
  804e84:	08070200 	call	807020 <__subdf3>
  804e88:	1009883a 	mov	r4,r2
  804e8c:	180b883a 	mov	r5,r3
  804e90:	2005883a 	mov	r2,r4
  804e94:	2807883a 	mov	r3,r5
  804e98:	100d883a 	mov	r6,r2
  804e9c:	180f883a 	mov	r7,r3
  804ea0:	8009883a 	mov	r4,r16
  804ea4:	880b883a 	mov	r5,r17
  804ea8:	0806f2c0 	call	806f2c <__ledf2>
  804eac:	1000040e 	bge	r2,zero,804ec0 <logic+0x4bfc>
  804eb0:	e13ffd17 	ldw	r4,-12(fp)
  804eb4:	20800217 	ldw	r2,8(r4)
  804eb8:	20c00317 	ldw	r3,12(r4)
  804ebc:	00000d06 	br	804ef4 <logic+0x4c30>
  804ec0:	e13ffd17 	ldw	r4,-12(fp)
  804ec4:	20801217 	ldw	r2,72(r4)
  804ec8:	20c01317 	ldw	r3,76(r4)
  804ecc:	100d883a 	mov	r6,r2
  804ed0:	180f883a 	mov	r7,r3
  804ed4:	0009883a 	mov	r4,zero
  804ed8:	01502334 	movhi	r5,16524
  804edc:	29460004 	addi	r5,r5,6144
  804ee0:	08070200 	call	807020 <__subdf3>
  804ee4:	1009883a 	mov	r4,r2
  804ee8:	180b883a 	mov	r5,r3
  804eec:	2005883a 	mov	r2,r4
  804ef0:	2807883a 	mov	r3,r5
  804ef4:	e13ffd17 	ldw	r4,-12(fp)
  804ef8:	20800215 	stw	r2,8(r4)
  804efc:	20c00315 	stw	r3,12(r4)
  }
  d->_cg156 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  804f00:	e0bffd17 	ldw	r2,-12(fp)
  804f04:	10801103 	ldbu	r2,68(r2)
  804f08:	10803fcc 	andi	r2,r2,255
  804f0c:	1080201c 	xori	r2,r2,128
  804f10:	10bfe004 	addi	r2,r2,-128
  804f14:	1000061e 	bne	r2,zero,804f30 <logic+0x4c6c>
  804f18:	e0bffd17 	ldw	r2,-12(fp)
  804f1c:	10801143 	ldbu	r2,69(r2)
  804f20:	10803fcc 	andi	r2,r2,255
  804f24:	1080201c 	xori	r2,r2,128
  804f28:	10bfe004 	addi	r2,r2,-128
  804f2c:	10000226 	beq	r2,zero,804f38 <logic+0x4c74>
  804f30:	00800044 	movi	r2,1
  804f34:	00000106 	br	804f3c <logic+0x4c78>
  804f38:	0005883a 	mov	r2,zero
  804f3c:	1007883a 	mov	r3,r2
  804f40:	e0bffd17 	ldw	r2,-12(fp)
  804f44:	10c04485 	stb	r3,274(r2)
  d->_g161_e2 = (d->_g174_e4 && !d->_cg156) || (d->_g164 && !d->_cg160);
  804f48:	e0bffd17 	ldw	r2,-12(fp)
  804f4c:	10804ec3 	ldbu	r2,315(r2)
  804f50:	10803fcc 	andi	r2,r2,255
  804f54:	1080201c 	xori	r2,r2,128
  804f58:	10bfe004 	addi	r2,r2,-128
  804f5c:	10000626 	beq	r2,zero,804f78 <logic+0x4cb4>
  804f60:	e0bffd17 	ldw	r2,-12(fp)
  804f64:	10804483 	ldbu	r2,274(r2)
  804f68:	10803fcc 	andi	r2,r2,255
  804f6c:	1080201c 	xori	r2,r2,128
  804f70:	10bfe004 	addi	r2,r2,-128
  804f74:	10000c26 	beq	r2,zero,804fa8 <logic+0x4ce4>
  804f78:	e0bffd17 	ldw	r2,-12(fp)
  804f7c:	10803083 	ldbu	r2,194(r2)
  804f80:	10803fcc 	andi	r2,r2,255
  804f84:	1080201c 	xori	r2,r2,128
  804f88:	10bfe004 	addi	r2,r2,-128
  804f8c:	10000826 	beq	r2,zero,804fb0 <logic+0x4cec>
  804f90:	e0bffd17 	ldw	r2,-12(fp)
  804f94:	108044c3 	ldbu	r2,275(r2)
  804f98:	10803fcc 	andi	r2,r2,255
  804f9c:	1080201c 	xori	r2,r2,128
  804fa0:	10bfe004 	addi	r2,r2,-128
  804fa4:	1000021e 	bne	r2,zero,804fb0 <logic+0x4cec>
  804fa8:	00800044 	movi	r2,1
  804fac:	00000106 	br	804fb4 <logic+0x4cf0>
  804fb0:	0005883a 	mov	r2,zero
  804fb4:	1007883a 	mov	r3,r2
  804fb8:	e0bffd17 	ldw	r2,-12(fp)
  804fbc:	10c04e45 	stb	r3,313(r2)
  d->_g174 = d->_g154 && !d->_cg155;
  804fc0:	e0bffd17 	ldw	r2,-12(fp)
  804fc4:	10802ec3 	ldbu	r2,187(r2)
  804fc8:	10803fcc 	andi	r2,r2,255
  804fcc:	1080201c 	xori	r2,r2,128
  804fd0:	10bfe004 	addi	r2,r2,-128
  804fd4:	10000826 	beq	r2,zero,804ff8 <logic+0x4d34>
  804fd8:	e0bffd17 	ldw	r2,-12(fp)
  804fdc:	10804443 	ldbu	r2,273(r2)
  804fe0:	10803fcc 	andi	r2,r2,255
  804fe4:	1080201c 	xori	r2,r2,128
  804fe8:	10bfe004 	addi	r2,r2,-128
  804fec:	1000021e 	bne	r2,zero,804ff8 <logic+0x4d34>
  804ff0:	00800044 	movi	r2,1
  804ff4:	00000106 	br	804ffc <logic+0x4d38>
  804ff8:	0005883a 	mov	r2,zero
  804ffc:	1007883a 	mov	r3,r2
  805000:	e0bffd17 	ldw	r2,-12(fp)
  805004:	10c03205 	stb	r3,200(r2)
  d->_cg165 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  805008:	e0bffd17 	ldw	r2,-12(fp)
  80500c:	10801103 	ldbu	r2,68(r2)
  805010:	10803fcc 	andi	r2,r2,255
  805014:	1080201c 	xori	r2,r2,128
  805018:	10bfe004 	addi	r2,r2,-128
  80501c:	1000061e 	bne	r2,zero,805038 <logic+0x4d74>
  805020:	e0bffd17 	ldw	r2,-12(fp)
  805024:	10801143 	ldbu	r2,69(r2)
  805028:	10803fcc 	andi	r2,r2,255
  80502c:	1080201c 	xori	r2,r2,128
  805030:	10bfe004 	addi	r2,r2,-128
  805034:	10000226 	beq	r2,zero,805040 <logic+0x4d7c>
  805038:	00800044 	movi	r2,1
  80503c:	00000106 	br	805044 <logic+0x4d80>
  805040:	0005883a 	mov	r2,zero
  805044:	1007883a 	mov	r3,r2
  805048:	e0bffd17 	ldw	r2,-12(fp)
  80504c:	10c04585 	stb	r3,278(r2)
  d->_g161 = (d->_g158 && !d->_cg162) || (d->_g174 && !d->_cg165);
  805050:	e0bffd17 	ldw	r2,-12(fp)
  805054:	10802f43 	ldbu	r2,189(r2)
  805058:	10803fcc 	andi	r2,r2,255
  80505c:	1080201c 	xori	r2,r2,128
  805060:	10bfe004 	addi	r2,r2,-128
  805064:	10000626 	beq	r2,zero,805080 <logic+0x4dbc>
  805068:	e0bffd17 	ldw	r2,-12(fp)
  80506c:	10804543 	ldbu	r2,277(r2)
  805070:	10803fcc 	andi	r2,r2,255
  805074:	1080201c 	xori	r2,r2,128
  805078:	10bfe004 	addi	r2,r2,-128
  80507c:	10000c26 	beq	r2,zero,8050b0 <logic+0x4dec>
  805080:	e0bffd17 	ldw	r2,-12(fp)
  805084:	10803203 	ldbu	r2,200(r2)
  805088:	10803fcc 	andi	r2,r2,255
  80508c:	1080201c 	xori	r2,r2,128
  805090:	10bfe004 	addi	r2,r2,-128
  805094:	10000826 	beq	r2,zero,8050b8 <logic+0x4df4>
  805098:	e0bffd17 	ldw	r2,-12(fp)
  80509c:	10804583 	ldbu	r2,278(r2)
  8050a0:	10803fcc 	andi	r2,r2,255
  8050a4:	1080201c 	xori	r2,r2,128
  8050a8:	10bfe004 	addi	r2,r2,-128
  8050ac:	1000021e 	bne	r2,zero,8050b8 <logic+0x4df4>
  8050b0:	00800044 	movi	r2,1
  8050b4:	00000106 	br	8050bc <logic+0x4df8>
  8050b8:	0005883a 	mov	r2,zero
  8050bc:	1007883a 	mov	r3,r2
  8050c0:	e0bffd17 	ldw	r2,-12(fp)
  8050c4:	10c03005 	stb	r3,192(r2)
  d->_cg166 = d->_PaceMaker_local__Atrig9 || d->_PaceMaker_local__Atrig10;
  8050c8:	e0bffd17 	ldw	r2,-12(fp)
  8050cc:	10801103 	ldbu	r2,68(r2)
  8050d0:	10803fcc 	andi	r2,r2,255
  8050d4:	1080201c 	xori	r2,r2,128
  8050d8:	10bfe004 	addi	r2,r2,-128
  8050dc:	1000061e 	bne	r2,zero,8050f8 <logic+0x4e34>
  8050e0:	e0bffd17 	ldw	r2,-12(fp)
  8050e4:	10801143 	ldbu	r2,69(r2)
  8050e8:	10803fcc 	andi	r2,r2,255
  8050ec:	1080201c 	xori	r2,r2,128
  8050f0:	10bfe004 	addi	r2,r2,-128
  8050f4:	10000226 	beq	r2,zero,805100 <logic+0x4e3c>
  8050f8:	00800044 	movi	r2,1
  8050fc:	00000106 	br	805104 <logic+0x4e40>
  805100:	0005883a 	mov	r2,zero
  805104:	1007883a 	mov	r3,r2
  805108:	e0bffd17 	ldw	r2,-12(fp)
  80510c:	10c045c5 	stb	r3,279(r2)
  d->_g149 = (d->_g154 && !d->_cg166) || (d->_g115 && !d->_cg168);
  805110:	e0bffd17 	ldw	r2,-12(fp)
  805114:	10802ec3 	ldbu	r2,187(r2)
  805118:	10803fcc 	andi	r2,r2,255
  80511c:	1080201c 	xori	r2,r2,128
  805120:	10bfe004 	addi	r2,r2,-128
  805124:	10000626 	beq	r2,zero,805140 <logic+0x4e7c>
  805128:	e0bffd17 	ldw	r2,-12(fp)
  80512c:	108045c3 	ldbu	r2,279(r2)
  805130:	10803fcc 	andi	r2,r2,255
  805134:	1080201c 	xori	r2,r2,128
  805138:	10bfe004 	addi	r2,r2,-128
  80513c:	10000c26 	beq	r2,zero,805170 <logic+0x4eac>
  805140:	e0bffd17 	ldw	r2,-12(fp)
  805144:	10802883 	ldbu	r2,162(r2)
  805148:	10803fcc 	andi	r2,r2,255
  80514c:	1080201c 	xori	r2,r2,128
  805150:	10bfe004 	addi	r2,r2,-128
  805154:	10000826 	beq	r2,zero,805178 <logic+0x4eb4>
  805158:	e0bffd17 	ldw	r2,-12(fp)
  80515c:	10804603 	ldbu	r2,280(r2)
  805160:	10803fcc 	andi	r2,r2,255
  805164:	1080201c 	xori	r2,r2,128
  805168:	10bfe004 	addi	r2,r2,-128
  80516c:	1000021e 	bne	r2,zero,805178 <logic+0x4eb4>
  805170:	00800044 	movi	r2,1
  805174:	00000106 	br	80517c <logic+0x4eb8>
  805178:	0005883a 	mov	r2,zero
  80517c:	1007883a 	mov	r3,r2
  805180:	e0bffd17 	ldw	r2,-12(fp)
  805184:	10c02e05 	stb	r3,184(r2)
  d->_g177 = d->_g154 || (d->_g118 && !d->_cg175);
  805188:	e0bffd17 	ldw	r2,-12(fp)
  80518c:	10802ec3 	ldbu	r2,187(r2)
  805190:	10803fcc 	andi	r2,r2,255
  805194:	1080201c 	xori	r2,r2,128
  805198:	10bfe004 	addi	r2,r2,-128
  80519c:	10000c1e 	bne	r2,zero,8051d0 <logic+0x4f0c>
  8051a0:	e0bffd17 	ldw	r2,-12(fp)
  8051a4:	10802903 	ldbu	r2,164(r2)
  8051a8:	10803fcc 	andi	r2,r2,255
  8051ac:	1080201c 	xori	r2,r2,128
  8051b0:	10bfe004 	addi	r2,r2,-128
  8051b4:	10000826 	beq	r2,zero,8051d8 <logic+0x4f14>
  8051b8:	e0bffd17 	ldw	r2,-12(fp)
  8051bc:	10804643 	ldbu	r2,281(r2)
  8051c0:	10803fcc 	andi	r2,r2,255
  8051c4:	1080201c 	xori	r2,r2,128
  8051c8:	10bfe004 	addi	r2,r2,-128
  8051cc:	1000021e 	bne	r2,zero,8051d8 <logic+0x4f14>
  8051d0:	00800044 	movi	r2,1
  8051d4:	00000106 	br	8051dc <logic+0x4f18>
  8051d8:	0005883a 	mov	r2,zero
  8051dc:	1007883a 	mov	r3,r2
  8051e0:	e0bffd17 	ldw	r2,-12(fp)
  8051e4:	10c032c5 	stb	r3,203(r2)
  d->_g153 = !d->_g185;
  8051e8:	e0bffd17 	ldw	r2,-12(fp)
  8051ec:	10803343 	ldbu	r2,205(r2)
  8051f0:	10803fcc 	andi	r2,r2,255
  8051f4:	1080201c 	xori	r2,r2,128
  8051f8:	10bfe004 	addi	r2,r2,-128
  8051fc:	1005003a 	cmpeq	r2,r2,zero
  805200:	1007883a 	mov	r3,r2
  805204:	e0bffd17 	ldw	r2,-12(fp)
  805208:	10c02e85 	stb	r3,186(r2)
  d->_g156 = d->_pg181;
  80520c:	e0bffd17 	ldw	r2,-12(fp)
  805210:	10c05843 	ldbu	r3,353(r2)
  805214:	e0bffd17 	ldw	r2,-12(fp)
  805218:	10c02f05 	stb	r3,188(r2)
  if (d->_g156) {
  80521c:	e0bffd17 	ldw	r2,-12(fp)
  805220:	10802f03 	ldbu	r2,188(r2)
  805224:	10803fcc 	andi	r2,r2,255
  805228:	1080201c 	xori	r2,r2,128
  80522c:	10bfe004 	addi	r2,r2,-128
  805230:	10001226 	beq	r2,zero,80527c <logic+0x4fb8>
    d->_PaceMaker_local_lri_clk += d->deltaT;
  805234:	e13ffd17 	ldw	r4,-12(fp)
  805238:	20801417 	ldw	r2,80(r4)
  80523c:	20c01517 	ldw	r3,84(r4)
  805240:	e1bffd17 	ldw	r6,-12(fp)
  805244:	31000017 	ldw	r4,0(r6)
  805248:	31400117 	ldw	r5,4(r6)
  80524c:	200d883a 	mov	r6,r4
  805250:	280f883a 	mov	r7,r5
  805254:	1009883a 	mov	r4,r2
  805258:	180b883a 	mov	r5,r3
  80525c:	08065a40 	call	8065a4 <__adddf3>
  805260:	1009883a 	mov	r4,r2
  805264:	180b883a 	mov	r5,r3
  805268:	2005883a 	mov	r2,r4
  80526c:	2807883a 	mov	r3,r5
  805270:	e13ffd17 	ldw	r4,-12(fp)
  805274:	20801415 	stw	r2,80(r4)
  805278:	20c01515 	stw	r3,84(r4)
  }
  d->_g160 = d->_pg209;
  80527c:	e0bffd17 	ldw	r2,-12(fp)
  805280:	10c05883 	ldbu	r3,354(r2)
  805284:	e0bffd17 	ldw	r2,-12(fp)
  805288:	10c02fc5 	stb	r3,191(r2)
  d->_cg204 = d->_PaceMaker_local_lri_clk >= LRI_VALUE - 1 && !(d->VS || d->VP);
  80528c:	e13ffd17 	ldw	r4,-12(fp)
  805290:	20801417 	ldw	r2,80(r4)
  805294:	20c01517 	ldw	r3,84(r4)
  805298:	000d883a 	mov	r6,zero
  80529c:	01d023b4 	movhi	r7,16526
  8052a0:	39ea0004 	addi	r7,r7,-22528
  8052a4:	1009883a 	mov	r4,r2
  8052a8:	180b883a 	mov	r5,r3
  8052ac:	0806e500 	call	806e50 <__gedf2>
  8052b0:	10000e16 	blt	r2,zero,8052ec <logic+0x5028>
  8052b4:	e0bffd17 	ldw	r2,-12(fp)
  8052b8:	10800443 	ldbu	r2,17(r2)
  8052bc:	10803fcc 	andi	r2,r2,255
  8052c0:	1080201c 	xori	r2,r2,128
  8052c4:	10bfe004 	addi	r2,r2,-128
  8052c8:	1000081e 	bne	r2,zero,8052ec <logic+0x5028>
  8052cc:	e0bffd17 	ldw	r2,-12(fp)
  8052d0:	108004c3 	ldbu	r2,19(r2)
  8052d4:	10803fcc 	andi	r2,r2,255
  8052d8:	1080201c 	xori	r2,r2,128
  8052dc:	10bfe004 	addi	r2,r2,-128
  8052e0:	1000021e 	bne	r2,zero,8052ec <logic+0x5028>
  8052e4:	00800044 	movi	r2,1
  8052e8:	00000106 	br	8052f0 <logic+0x502c>
  8052ec:	0005883a 	mov	r2,zero
  8052f0:	1007883a 	mov	r3,r2
  8052f4:	e0bffd17 	ldw	r2,-12(fp)
  8052f8:	10c04a05 	stb	r3,296(r2)
  d->_g165 = d->_g160 && d->_cg204;
  8052fc:	e0bffd17 	ldw	r2,-12(fp)
  805300:	10802fc3 	ldbu	r2,191(r2)
  805304:	10803fcc 	andi	r2,r2,255
  805308:	1080201c 	xori	r2,r2,128
  80530c:	10bfe004 	addi	r2,r2,-128
  805310:	10000826 	beq	r2,zero,805334 <logic+0x5070>
  805314:	e0bffd17 	ldw	r2,-12(fp)
  805318:	10804a03 	ldbu	r2,296(r2)
  80531c:	10803fcc 	andi	r2,r2,255
  805320:	1080201c 	xori	r2,r2,128
  805324:	10bfe004 	addi	r2,r2,-128
  805328:	10000226 	beq	r2,zero,805334 <logic+0x5070>
  80532c:	00800044 	movi	r2,1
  805330:	00000106 	br	805338 <logic+0x5074>
  805334:	0005883a 	mov	r2,zero
  805338:	1007883a 	mov	r3,r2
  80533c:	e0bffd17 	ldw	r2,-12(fp)
  805340:	10c030c5 	stb	r3,195(r2)
  if (d->_g165) {
  805344:	e0bffd17 	ldw	r2,-12(fp)
  805348:	108030c3 	ldbu	r2,195(r2)
  80534c:	10803fcc 	andi	r2,r2,255
  805350:	1080201c 	xori	r2,r2,128
  805354:	10bfe004 	addi	r2,r2,-128
  805358:	10000326 	beq	r2,zero,805368 <logic+0x50a4>
    d->_PaceMaker_local__Atrig11 = 1;
  80535c:	e0bffd17 	ldw	r2,-12(fp)
  805360:	00c00044 	movi	r3,1
  805364:	10c01185 	stb	r3,70(r2)
  }
  d->_g162 = d->_g160 && !d->_cg204;
  805368:	e0bffd17 	ldw	r2,-12(fp)
  80536c:	10802fc3 	ldbu	r2,191(r2)
  805370:	10803fcc 	andi	r2,r2,255
  805374:	1080201c 	xori	r2,r2,128
  805378:	10bfe004 	addi	r2,r2,-128
  80537c:	10000826 	beq	r2,zero,8053a0 <logic+0x50dc>
  805380:	e0bffd17 	ldw	r2,-12(fp)
  805384:	10804a03 	ldbu	r2,296(r2)
  805388:	10803fcc 	andi	r2,r2,255
  80538c:	1080201c 	xori	r2,r2,128
  805390:	10bfe004 	addi	r2,r2,-128
  805394:	1000021e 	bne	r2,zero,8053a0 <logic+0x50dc>
  805398:	00800044 	movi	r2,1
  80539c:	00000106 	br	8053a4 <logic+0x50e0>
  8053a0:	0005883a 	mov	r2,zero
  8053a4:	1007883a 	mov	r3,r2
  8053a8:	e0bffd17 	ldw	r2,-12(fp)
  8053ac:	10c03045 	stb	r3,193(r2)
  d->_cg207 = (d->VS || d->VP) && !d->ignore_VEvent;
  8053b0:	e0bffd17 	ldw	r2,-12(fp)
  8053b4:	10800443 	ldbu	r2,17(r2)
  8053b8:	10803fcc 	andi	r2,r2,255
  8053bc:	1080201c 	xori	r2,r2,128
  8053c0:	10bfe004 	addi	r2,r2,-128
  8053c4:	1000061e 	bne	r2,zero,8053e0 <logic+0x511c>
  8053c8:	e0bffd17 	ldw	r2,-12(fp)
  8053cc:	108004c3 	ldbu	r2,19(r2)
  8053d0:	10803fcc 	andi	r2,r2,255
  8053d4:	1080201c 	xori	r2,r2,128
  8053d8:	10bfe004 	addi	r2,r2,-128
  8053dc:	10000826 	beq	r2,zero,805400 <logic+0x513c>
  8053e0:	e0bffd17 	ldw	r2,-12(fp)
  8053e4:	10800543 	ldbu	r2,21(r2)
  8053e8:	10803fcc 	andi	r2,r2,255
  8053ec:	1080201c 	xori	r2,r2,128
  8053f0:	10bfe004 	addi	r2,r2,-128
  8053f4:	1000021e 	bne	r2,zero,805400 <logic+0x513c>
  8053f8:	00800044 	movi	r2,1
  8053fc:	00000106 	br	805404 <logic+0x5140>
  805400:	0005883a 	mov	r2,zero
  805404:	1007883a 	mov	r3,r2
  805408:	e0bffd17 	ldw	r2,-12(fp)
  80540c:	10c049c5 	stb	r3,295(r2)
  d->_g168 = d->_g162 && d->_cg207;
  805410:	e0bffd17 	ldw	r2,-12(fp)
  805414:	10803043 	ldbu	r2,193(r2)
  805418:	10803fcc 	andi	r2,r2,255
  80541c:	1080201c 	xori	r2,r2,128
  805420:	10bfe004 	addi	r2,r2,-128
  805424:	10000826 	beq	r2,zero,805448 <logic+0x5184>
  805428:	e0bffd17 	ldw	r2,-12(fp)
  80542c:	108049c3 	ldbu	r2,295(r2)
  805430:	10803fcc 	andi	r2,r2,255
  805434:	1080201c 	xori	r2,r2,128
  805438:	10bfe004 	addi	r2,r2,-128
  80543c:	10000226 	beq	r2,zero,805448 <logic+0x5184>
  805440:	00800044 	movi	r2,1
  805444:	00000106 	br	80544c <logic+0x5188>
  805448:	0005883a 	mov	r2,zero
  80544c:	1007883a 	mov	r3,r2
  805450:	e0bffd17 	ldw	r2,-12(fp)
  805454:	10c03105 	stb	r3,196(r2)
  if (d->_g168) {
  805458:	e0bffd17 	ldw	r2,-12(fp)
  80545c:	10803103 	ldbu	r2,196(r2)
  805460:	10803fcc 	andi	r2,r2,255
  805464:	1080201c 	xori	r2,r2,128
  805468:	10bfe004 	addi	r2,r2,-128
  80546c:	10000326 	beq	r2,zero,80547c <logic+0x51b8>
    d->_PaceMaker_local__Atrig12 = 1;
  805470:	e0bffd17 	ldw	r2,-12(fp)
  805474:	00c00044 	movi	r3,1
  805478:	10c011c5 	stb	r3,71(r2)
  }
  d->_cg185 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  80547c:	e0bffd17 	ldw	r2,-12(fp)
  805480:	10801183 	ldbu	r2,70(r2)
  805484:	10803fcc 	andi	r2,r2,255
  805488:	1080201c 	xori	r2,r2,128
  80548c:	10bfe004 	addi	r2,r2,-128
  805490:	1000061e 	bne	r2,zero,8054ac <logic+0x51e8>
  805494:	e0bffd17 	ldw	r2,-12(fp)
  805498:	108011c3 	ldbu	r2,71(r2)
  80549c:	10803fcc 	andi	r2,r2,255
  8054a0:	1080201c 	xori	r2,r2,128
  8054a4:	10bfe004 	addi	r2,r2,-128
  8054a8:	10000226 	beq	r2,zero,8054b4 <logic+0x51f0>
  8054ac:	00800044 	movi	r2,1
  8054b0:	00000106 	br	8054b8 <logic+0x51f4>
  8054b4:	0005883a 	mov	r2,zero
  8054b8:	1007883a 	mov	r3,r2
  8054bc:	e0bffd17 	ldw	r2,-12(fp)
  8054c0:	10c04785 	stb	r3,286(r2)
  d->_g175 = d->_g185 && d->_cg185;
  8054c4:	e0bffd17 	ldw	r2,-12(fp)
  8054c8:	10803343 	ldbu	r2,205(r2)
  8054cc:	10803fcc 	andi	r2,r2,255
  8054d0:	1080201c 	xori	r2,r2,128
  8054d4:	10bfe004 	addi	r2,r2,-128
  8054d8:	10000826 	beq	r2,zero,8054fc <logic+0x5238>
  8054dc:	e0bffd17 	ldw	r2,-12(fp)
  8054e0:	10804783 	ldbu	r2,286(r2)
  8054e4:	10803fcc 	andi	r2,r2,255
  8054e8:	1080201c 	xori	r2,r2,128
  8054ec:	10bfe004 	addi	r2,r2,-128
  8054f0:	10000226 	beq	r2,zero,8054fc <logic+0x5238>
  8054f4:	00800044 	movi	r2,1
  8054f8:	00000106 	br	805500 <logic+0x523c>
  8054fc:	0005883a 	mov	r2,zero
  805500:	1007883a 	mov	r3,r2
  805504:	e0bffd17 	ldw	r2,-12(fp)
  805508:	10c03245 	stb	r3,201(r2)
  d->_g150 = d->_pg186;
  80550c:	e0bffd17 	ldw	r2,-12(fp)
  805510:	10c058c3 	ldbu	r3,355(r2)
  805514:	e0bffd17 	ldw	r2,-12(fp)
  805518:	10c02e45 	stb	r3,185(r2)
  d->_g190 = d->_pg206_e4;
  80551c:	e0bffd17 	ldw	r2,-12(fp)
  805520:	10c05903 	ldbu	r3,356(r2)
  805524:	e0bffd17 	ldw	r2,-12(fp)
  805528:	10c033c5 	stb	r3,207(r2)
  d->_g193_e2 = !(d->_g150 || d->_g190);
  80552c:	e0bffd17 	ldw	r2,-12(fp)
  805530:	10802e43 	ldbu	r2,185(r2)
  805534:	10803fcc 	andi	r2,r2,255
  805538:	1080201c 	xori	r2,r2,128
  80553c:	10bfe004 	addi	r2,r2,-128
  805540:	1000081e 	bne	r2,zero,805564 <logic+0x52a0>
  805544:	e0bffd17 	ldw	r2,-12(fp)
  805548:	108033c3 	ldbu	r2,207(r2)
  80554c:	10803fcc 	andi	r2,r2,255
  805550:	1080201c 	xori	r2,r2,128
  805554:	10bfe004 	addi	r2,r2,-128
  805558:	1000021e 	bne	r2,zero,805564 <logic+0x52a0>
  80555c:	00800044 	movi	r2,1
  805560:	00000106 	br	805568 <logic+0x52a4>
  805564:	0005883a 	mov	r2,zero
  805568:	1007883a 	mov	r3,r2
  80556c:	e0bffd17 	ldw	r2,-12(fp)
  805570:	10c04f45 	stb	r3,317(r2)
  d->_g196 = d->_g190 || d->_g150;
  805574:	e0bffd17 	ldw	r2,-12(fp)
  805578:	108033c3 	ldbu	r2,207(r2)
  80557c:	10803fcc 	andi	r2,r2,255
  805580:	1080201c 	xori	r2,r2,128
  805584:	10bfe004 	addi	r2,r2,-128
  805588:	1000061e 	bne	r2,zero,8055a4 <logic+0x52e0>
  80558c:	e0bffd17 	ldw	r2,-12(fp)
  805590:	10802e43 	ldbu	r2,185(r2)
  805594:	10803fcc 	andi	r2,r2,255
  805598:	1080201c 	xori	r2,r2,128
  80559c:	10bfe004 	addi	r2,r2,-128
  8055a0:	10000226 	beq	r2,zero,8055ac <logic+0x52e8>
  8055a4:	00800044 	movi	r2,1
  8055a8:	00000106 	br	8055b0 <logic+0x52ec>
  8055ac:	0005883a 	mov	r2,zero
  8055b0:	1007883a 	mov	r3,r2
  8055b4:	e0bffd17 	ldw	r2,-12(fp)
  8055b8:	10c03485 	stb	r3,210(r2)
  d->_cg191 = d->_PaceMaker_local_lri_clk < LRI_VALUE - 1;
  8055bc:	e13ffd17 	ldw	r4,-12(fp)
  8055c0:	20801417 	ldw	r2,80(r4)
  8055c4:	20c01517 	ldw	r3,84(r4)
  8055c8:	04000044 	movi	r16,1
  8055cc:	000d883a 	mov	r6,zero
  8055d0:	01d023b4 	movhi	r7,16526
  8055d4:	39ea0004 	addi	r7,r7,-22528
  8055d8:	1009883a 	mov	r4,r2
  8055dc:	180b883a 	mov	r5,r3
  8055e0:	0806f2c0 	call	806f2c <__ledf2>
  8055e4:	10000116 	blt	r2,zero,8055ec <logic+0x5328>
  8055e8:	0021883a 	mov	r16,zero
  8055ec:	8007883a 	mov	r3,r16
  8055f0:	e0bffd17 	ldw	r2,-12(fp)
  8055f4:	10c04885 	stb	r3,290(r2)
  d->_g190 = d->_g196 && d->_cg191;
  8055f8:	e0bffd17 	ldw	r2,-12(fp)
  8055fc:	10803483 	ldbu	r2,210(r2)
  805600:	10803fcc 	andi	r2,r2,255
  805604:	1080201c 	xori	r2,r2,128
  805608:	10bfe004 	addi	r2,r2,-128
  80560c:	10000826 	beq	r2,zero,805630 <logic+0x536c>
  805610:	e0bffd17 	ldw	r2,-12(fp)
  805614:	10804883 	ldbu	r2,290(r2)
  805618:	10803fcc 	andi	r2,r2,255
  80561c:	1080201c 	xori	r2,r2,128
  805620:	10bfe004 	addi	r2,r2,-128
  805624:	10000226 	beq	r2,zero,805630 <logic+0x536c>
  805628:	00800044 	movi	r2,1
  80562c:	00000106 	br	805634 <logic+0x5370>
  805630:	0005883a 	mov	r2,zero
  805634:	1007883a 	mov	r3,r2
  805638:	e0bffd17 	ldw	r2,-12(fp)
  80563c:	10c033c5 	stb	r3,207(r2)
  if (d->_g190) {
  805640:	e0bffd17 	ldw	r2,-12(fp)
  805644:	108033c3 	ldbu	r2,207(r2)
  805648:	10803fcc 	andi	r2,r2,255
  80564c:	1080201c 	xori	r2,r2,128
  805650:	10bfe004 	addi	r2,r2,-128
  805654:	10002a26 	beq	r2,zero,805700 <logic+0x543c>
    d->sleepT = (d->sleepT < (LRI_VALUE - 1 - d->_PaceMaker_local_lri_clk)) ? d->sleepT : (LRI_VALUE - 1 - d->_PaceMaker_local_lri_clk);
  805658:	e0bffd17 	ldw	r2,-12(fp)
  80565c:	14000217 	ldw	r16,8(r2)
  805660:	14400317 	ldw	r17,12(r2)
  805664:	e13ffd17 	ldw	r4,-12(fp)
  805668:	20801417 	ldw	r2,80(r4)
  80566c:	20c01517 	ldw	r3,84(r4)
  805670:	100d883a 	mov	r6,r2
  805674:	180f883a 	mov	r7,r3
  805678:	0009883a 	mov	r4,zero
  80567c:	015023b4 	movhi	r5,16526
  805680:	296a0004 	addi	r5,r5,-22528
  805684:	08070200 	call	807020 <__subdf3>
  805688:	1009883a 	mov	r4,r2
  80568c:	180b883a 	mov	r5,r3
  805690:	2005883a 	mov	r2,r4
  805694:	2807883a 	mov	r3,r5
  805698:	100d883a 	mov	r6,r2
  80569c:	180f883a 	mov	r7,r3
  8056a0:	8009883a 	mov	r4,r16
  8056a4:	880b883a 	mov	r5,r17
  8056a8:	0806f2c0 	call	806f2c <__ledf2>
  8056ac:	1000040e 	bge	r2,zero,8056c0 <logic+0x53fc>
  8056b0:	e13ffd17 	ldw	r4,-12(fp)
  8056b4:	20800217 	ldw	r2,8(r4)
  8056b8:	20c00317 	ldw	r3,12(r4)
  8056bc:	00000d06 	br	8056f4 <logic+0x5430>
  8056c0:	e13ffd17 	ldw	r4,-12(fp)
  8056c4:	20801417 	ldw	r2,80(r4)
  8056c8:	20c01517 	ldw	r3,84(r4)
  8056cc:	100d883a 	mov	r6,r2
  8056d0:	180f883a 	mov	r7,r3
  8056d4:	0009883a 	mov	r4,zero
  8056d8:	015023b4 	movhi	r5,16526
  8056dc:	296a0004 	addi	r5,r5,-22528
  8056e0:	08070200 	call	807020 <__subdf3>
  8056e4:	1009883a 	mov	r4,r2
  8056e8:	180b883a 	mov	r5,r3
  8056ec:	2005883a 	mov	r2,r4
  8056f0:	2807883a 	mov	r3,r5
  8056f4:	e13ffd17 	ldw	r4,-12(fp)
  8056f8:	20800215 	stw	r2,8(r4)
  8056fc:	20c00315 	stw	r3,12(r4)
  }
  d->_cg192 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  805700:	e0bffd17 	ldw	r2,-12(fp)
  805704:	10801183 	ldbu	r2,70(r2)
  805708:	10803fcc 	andi	r2,r2,255
  80570c:	1080201c 	xori	r2,r2,128
  805710:	10bfe004 	addi	r2,r2,-128
  805714:	1000061e 	bne	r2,zero,805730 <logic+0x546c>
  805718:	e0bffd17 	ldw	r2,-12(fp)
  80571c:	108011c3 	ldbu	r2,71(r2)
  805720:	10803fcc 	andi	r2,r2,255
  805724:	1080201c 	xori	r2,r2,128
  805728:	10bfe004 	addi	r2,r2,-128
  80572c:	10000226 	beq	r2,zero,805738 <logic+0x5474>
  805730:	00800044 	movi	r2,1
  805734:	00000106 	br	80573c <logic+0x5478>
  805738:	0005883a 	mov	r2,zero
  80573c:	1007883a 	mov	r3,r2
  805740:	e0bffd17 	ldw	r2,-12(fp)
  805744:	10c04845 	stb	r3,289(r2)
  d->_g191 = d->_g196 && !d->_cg191;
  805748:	e0bffd17 	ldw	r2,-12(fp)
  80574c:	10803483 	ldbu	r2,210(r2)
  805750:	10803fcc 	andi	r2,r2,255
  805754:	1080201c 	xori	r2,r2,128
  805758:	10bfe004 	addi	r2,r2,-128
  80575c:	10000826 	beq	r2,zero,805780 <logic+0x54bc>
  805760:	e0bffd17 	ldw	r2,-12(fp)
  805764:	10804883 	ldbu	r2,290(r2)
  805768:	10803fcc 	andi	r2,r2,255
  80576c:	1080201c 	xori	r2,r2,128
  805770:	10bfe004 	addi	r2,r2,-128
  805774:	1000021e 	bne	r2,zero,805780 <logic+0x54bc>
  805778:	00800044 	movi	r2,1
  80577c:	00000106 	br	805784 <logic+0x54c0>
  805780:	0005883a 	mov	r2,zero
  805784:	1007883a 	mov	r3,r2
  805788:	e0bffd17 	ldw	r2,-12(fp)
  80578c:	10c03405 	stb	r3,208(r2)
  d->_cg194 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  805790:	e0bffd17 	ldw	r2,-12(fp)
  805794:	10801183 	ldbu	r2,70(r2)
  805798:	10803fcc 	andi	r2,r2,255
  80579c:	1080201c 	xori	r2,r2,128
  8057a0:	10bfe004 	addi	r2,r2,-128
  8057a4:	1000061e 	bne	r2,zero,8057c0 <logic+0x54fc>
  8057a8:	e0bffd17 	ldw	r2,-12(fp)
  8057ac:	108011c3 	ldbu	r2,71(r2)
  8057b0:	10803fcc 	andi	r2,r2,255
  8057b4:	1080201c 	xori	r2,r2,128
  8057b8:	10bfe004 	addi	r2,r2,-128
  8057bc:	10000226 	beq	r2,zero,8057c8 <logic+0x5504>
  8057c0:	00800044 	movi	r2,1
  8057c4:	00000106 	br	8057cc <logic+0x5508>
  8057c8:	0005883a 	mov	r2,zero
  8057cc:	1007883a 	mov	r3,r2
  8057d0:	e0bffd17 	ldw	r2,-12(fp)
  8057d4:	10c048c5 	stb	r3,291(r2)
  d->_g193 = (d->_g190 && d->_cg192) || (d->_g191 && d->_cg194);
  8057d8:	e0bffd17 	ldw	r2,-12(fp)
  8057dc:	108033c3 	ldbu	r2,207(r2)
  8057e0:	10803fcc 	andi	r2,r2,255
  8057e4:	1080201c 	xori	r2,r2,128
  8057e8:	10bfe004 	addi	r2,r2,-128
  8057ec:	10000626 	beq	r2,zero,805808 <logic+0x5544>
  8057f0:	e0bffd17 	ldw	r2,-12(fp)
  8057f4:	10804843 	ldbu	r2,289(r2)
  8057f8:	10803fcc 	andi	r2,r2,255
  8057fc:	1080201c 	xori	r2,r2,128
  805800:	10bfe004 	addi	r2,r2,-128
  805804:	10000c1e 	bne	r2,zero,805838 <logic+0x5574>
  805808:	e0bffd17 	ldw	r2,-12(fp)
  80580c:	10803403 	ldbu	r2,208(r2)
  805810:	10803fcc 	andi	r2,r2,255
  805814:	1080201c 	xori	r2,r2,128
  805818:	10bfe004 	addi	r2,r2,-128
  80581c:	10000826 	beq	r2,zero,805840 <logic+0x557c>
  805820:	e0bffd17 	ldw	r2,-12(fp)
  805824:	108048c3 	ldbu	r2,291(r2)
  805828:	10803fcc 	andi	r2,r2,255
  80582c:	1080201c 	xori	r2,r2,128
  805830:	10bfe004 	addi	r2,r2,-128
  805834:	10000226 	beq	r2,zero,805840 <logic+0x557c>
  805838:	00800044 	movi	r2,1
  80583c:	00000106 	br	805844 <logic+0x5580>
  805840:	0005883a 	mov	r2,zero
  805844:	1007883a 	mov	r3,r2
  805848:	e0bffd17 	ldw	r2,-12(fp)
  80584c:	10c03445 	stb	r3,209(r2)
  d->_g201_e3 = !d->_g156;
  805850:	e0bffd17 	ldw	r2,-12(fp)
  805854:	10802f03 	ldbu	r2,188(r2)
  805858:	10803fcc 	andi	r2,r2,255
  80585c:	1080201c 	xori	r2,r2,128
  805860:	10bfe004 	addi	r2,r2,-128
  805864:	1005003a 	cmpeq	r2,r2,zero
  805868:	1007883a 	mov	r3,r2
  80586c:	e0bffd17 	ldw	r2,-12(fp)
  805870:	10c04f85 	stb	r3,318(r2)
  d->_cg200 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  805874:	e0bffd17 	ldw	r2,-12(fp)
  805878:	10801183 	ldbu	r2,70(r2)
  80587c:	10803fcc 	andi	r2,r2,255
  805880:	1080201c 	xori	r2,r2,128
  805884:	10bfe004 	addi	r2,r2,-128
  805888:	1000061e 	bne	r2,zero,8058a4 <logic+0x55e0>
  80588c:	e0bffd17 	ldw	r2,-12(fp)
  805890:	108011c3 	ldbu	r2,71(r2)
  805894:	10803fcc 	andi	r2,r2,255
  805898:	1080201c 	xori	r2,r2,128
  80589c:	10bfe004 	addi	r2,r2,-128
  8058a0:	10000226 	beq	r2,zero,8058ac <logic+0x55e8>
  8058a4:	00800044 	movi	r2,1
  8058a8:	00000106 	br	8058b0 <logic+0x55ec>
  8058ac:	0005883a 	mov	r2,zero
  8058b0:	1007883a 	mov	r3,r2
  8058b4:	e0bffd17 	ldw	r2,-12(fp)
  8058b8:	10c04985 	stb	r3,294(r2)
  d->_g201 = d->_g156 && d->_cg200;
  8058bc:	e0bffd17 	ldw	r2,-12(fp)
  8058c0:	10802f03 	ldbu	r2,188(r2)
  8058c4:	10803fcc 	andi	r2,r2,255
  8058c8:	1080201c 	xori	r2,r2,128
  8058cc:	10bfe004 	addi	r2,r2,-128
  8058d0:	10000826 	beq	r2,zero,8058f4 <logic+0x5630>
  8058d4:	e0bffd17 	ldw	r2,-12(fp)
  8058d8:	10804983 	ldbu	r2,294(r2)
  8058dc:	10803fcc 	andi	r2,r2,255
  8058e0:	1080201c 	xori	r2,r2,128
  8058e4:	10bfe004 	addi	r2,r2,-128
  8058e8:	10000226 	beq	r2,zero,8058f4 <logic+0x5630>
  8058ec:	00800044 	movi	r2,1
  8058f0:	00000106 	br	8058f8 <logic+0x5634>
  8058f4:	0005883a 	mov	r2,zero
  8058f8:	1007883a 	mov	r3,r2
  8058fc:	e0bffd17 	ldw	r2,-12(fp)
  805900:	10c034c5 	stb	r3,211(r2)
  d->_g204 = !d->_g160;
  805904:	e0bffd17 	ldw	r2,-12(fp)
  805908:	10802fc3 	ldbu	r2,191(r2)
  80590c:	10803fcc 	andi	r2,r2,255
  805910:	1080201c 	xori	r2,r2,128
  805914:	10bfe004 	addi	r2,r2,-128
  805918:	1005003a 	cmpeq	r2,r2,zero
  80591c:	1007883a 	mov	r3,r2
  805920:	e0bffd17 	ldw	r2,-12(fp)
  805924:	10c03505 	stb	r3,212(r2)
  d->_g208 = d->_g165 || d->_g168;
  805928:	e0bffd17 	ldw	r2,-12(fp)
  80592c:	108030c3 	ldbu	r2,195(r2)
  805930:	10803fcc 	andi	r2,r2,255
  805934:	1080201c 	xori	r2,r2,128
  805938:	10bfe004 	addi	r2,r2,-128
  80593c:	1000061e 	bne	r2,zero,805958 <logic+0x5694>
  805940:	e0bffd17 	ldw	r2,-12(fp)
  805944:	10803103 	ldbu	r2,196(r2)
  805948:	10803fcc 	andi	r2,r2,255
  80594c:	1080201c 	xori	r2,r2,128
  805950:	10bfe004 	addi	r2,r2,-128
  805954:	10000226 	beq	r2,zero,805960 <logic+0x569c>
  805958:	00800044 	movi	r2,1
  80595c:	00000106 	br	805964 <logic+0x56a0>
  805960:	0005883a 	mov	r2,zero
  805964:	1007883a 	mov	r3,r2
  805968:	e0bffd17 	ldw	r2,-12(fp)
  80596c:	10c035c5 	stb	r3,215(r2)
  d->_g205 = (d->_g153 || d->_g175) && (d->_g193_e2 || d->_g193) && (d->_g201_e3 || d->_g201) && (d->_g204 || d->_g208) && (d->_g175 || d->_g193 || d->_g201 || d->_g208);
  805970:	e0bffd17 	ldw	r2,-12(fp)
  805974:	10802e83 	ldbu	r2,186(r2)
  805978:	10803fcc 	andi	r2,r2,255
  80597c:	1080201c 	xori	r2,r2,128
  805980:	10bfe004 	addi	r2,r2,-128
  805984:	1000061e 	bne	r2,zero,8059a0 <logic+0x56dc>
  805988:	e0bffd17 	ldw	r2,-12(fp)
  80598c:	10803243 	ldbu	r2,201(r2)
  805990:	10803fcc 	andi	r2,r2,255
  805994:	1080201c 	xori	r2,r2,128
  805998:	10bfe004 	addi	r2,r2,-128
  80599c:	10003e26 	beq	r2,zero,805a98 <logic+0x57d4>
  8059a0:	e0bffd17 	ldw	r2,-12(fp)
  8059a4:	10804f43 	ldbu	r2,317(r2)
  8059a8:	10803fcc 	andi	r2,r2,255
  8059ac:	1080201c 	xori	r2,r2,128
  8059b0:	10bfe004 	addi	r2,r2,-128
  8059b4:	1000061e 	bne	r2,zero,8059d0 <logic+0x570c>
  8059b8:	e0bffd17 	ldw	r2,-12(fp)
  8059bc:	10803443 	ldbu	r2,209(r2)
  8059c0:	10803fcc 	andi	r2,r2,255
  8059c4:	1080201c 	xori	r2,r2,128
  8059c8:	10bfe004 	addi	r2,r2,-128
  8059cc:	10003226 	beq	r2,zero,805a98 <logic+0x57d4>
  8059d0:	e0bffd17 	ldw	r2,-12(fp)
  8059d4:	10804f83 	ldbu	r2,318(r2)
  8059d8:	10803fcc 	andi	r2,r2,255
  8059dc:	1080201c 	xori	r2,r2,128
  8059e0:	10bfe004 	addi	r2,r2,-128
  8059e4:	1000061e 	bne	r2,zero,805a00 <logic+0x573c>
  8059e8:	e0bffd17 	ldw	r2,-12(fp)
  8059ec:	108034c3 	ldbu	r2,211(r2)
  8059f0:	10803fcc 	andi	r2,r2,255
  8059f4:	1080201c 	xori	r2,r2,128
  8059f8:	10bfe004 	addi	r2,r2,-128
  8059fc:	10002626 	beq	r2,zero,805a98 <logic+0x57d4>
  805a00:	e0bffd17 	ldw	r2,-12(fp)
  805a04:	10803503 	ldbu	r2,212(r2)
  805a08:	10803fcc 	andi	r2,r2,255
  805a0c:	1080201c 	xori	r2,r2,128
  805a10:	10bfe004 	addi	r2,r2,-128
  805a14:	1000061e 	bne	r2,zero,805a30 <logic+0x576c>
  805a18:	e0bffd17 	ldw	r2,-12(fp)
  805a1c:	108035c3 	ldbu	r2,215(r2)
  805a20:	10803fcc 	andi	r2,r2,255
  805a24:	1080201c 	xori	r2,r2,128
  805a28:	10bfe004 	addi	r2,r2,-128
  805a2c:	10001a26 	beq	r2,zero,805a98 <logic+0x57d4>
  805a30:	e0bffd17 	ldw	r2,-12(fp)
  805a34:	10803243 	ldbu	r2,201(r2)
  805a38:	10803fcc 	andi	r2,r2,255
  805a3c:	1080201c 	xori	r2,r2,128
  805a40:	10bfe004 	addi	r2,r2,-128
  805a44:	1000121e 	bne	r2,zero,805a90 <logic+0x57cc>
  805a48:	e0bffd17 	ldw	r2,-12(fp)
  805a4c:	10803443 	ldbu	r2,209(r2)
  805a50:	10803fcc 	andi	r2,r2,255
  805a54:	1080201c 	xori	r2,r2,128
  805a58:	10bfe004 	addi	r2,r2,-128
  805a5c:	10000c1e 	bne	r2,zero,805a90 <logic+0x57cc>
  805a60:	e0bffd17 	ldw	r2,-12(fp)
  805a64:	108034c3 	ldbu	r2,211(r2)
  805a68:	10803fcc 	andi	r2,r2,255
  805a6c:	1080201c 	xori	r2,r2,128
  805a70:	10bfe004 	addi	r2,r2,-128
  805a74:	1000061e 	bne	r2,zero,805a90 <logic+0x57cc>
  805a78:	e0bffd17 	ldw	r2,-12(fp)
  805a7c:	108035c3 	ldbu	r2,215(r2)
  805a80:	10803fcc 	andi	r2,r2,255
  805a84:	1080201c 	xori	r2,r2,128
  805a88:	10bfe004 	addi	r2,r2,-128
  805a8c:	10000226 	beq	r2,zero,805a98 <logic+0x57d4>
  805a90:	00800044 	movi	r2,1
  805a94:	00000106 	br	805a9c <logic+0x57d8>
  805a98:	0005883a 	mov	r2,zero
  805a9c:	1007883a 	mov	r3,r2
  805aa0:	e0bffd17 	ldw	r2,-12(fp)
  805aa4:	10c03545 	stb	r3,213(r2)
  d->_cg209 = d->_PaceMaker_local__Atrig11;
  805aa8:	e0bffd17 	ldw	r2,-12(fp)
  805aac:	10c01183 	ldbu	r3,70(r2)
  805ab0:	e0bffd17 	ldw	r2,-12(fp)
  805ab4:	10c046c5 	stb	r3,283(r2)
  d->_g201 = d->_pg193_e2;
  805ab8:	e0bffd17 	ldw	r2,-12(fp)
  805abc:	10c05943 	ldbu	r3,357(r2)
  805ac0:	e0bffd17 	ldw	r2,-12(fp)
  805ac4:	10c034c5 	stb	r3,211(r2)
  d->_cg181 = (d->VS || d->VP) && !d->ignore_VEvent;
  805ac8:	e0bffd17 	ldw	r2,-12(fp)
  805acc:	10800443 	ldbu	r2,17(r2)
  805ad0:	10803fcc 	andi	r2,r2,255
  805ad4:	1080201c 	xori	r2,r2,128
  805ad8:	10bfe004 	addi	r2,r2,-128
  805adc:	1000061e 	bne	r2,zero,805af8 <logic+0x5834>
  805ae0:	e0bffd17 	ldw	r2,-12(fp)
  805ae4:	108004c3 	ldbu	r2,19(r2)
  805ae8:	10803fcc 	andi	r2,r2,255
  805aec:	1080201c 	xori	r2,r2,128
  805af0:	10bfe004 	addi	r2,r2,-128
  805af4:	10000826 	beq	r2,zero,805b18 <logic+0x5854>
  805af8:	e0bffd17 	ldw	r2,-12(fp)
  805afc:	10800543 	ldbu	r2,21(r2)
  805b00:	10803fcc 	andi	r2,r2,255
  805b04:	1080201c 	xori	r2,r2,128
  805b08:	10bfe004 	addi	r2,r2,-128
  805b0c:	1000021e 	bne	r2,zero,805b18 <logic+0x5854>
  805b10:	00800044 	movi	r2,1
  805b14:	00000106 	br	805b1c <logic+0x5858>
  805b18:	0005883a 	mov	r2,zero
  805b1c:	1007883a 	mov	r3,r2
  805b20:	e0bffd17 	ldw	r2,-12(fp)
  805b24:	10c04705 	stb	r3,284(r2)
  d->_g193_e2 = d->_GO || (d->_g205 && d->_cg209) || (d->_g201 && !d->_cg181);
  805b28:	e0bffd17 	ldw	r2,-12(fp)
  805b2c:	10803643 	ldbu	r2,217(r2)
  805b30:	10803fcc 	andi	r2,r2,255
  805b34:	1080201c 	xori	r2,r2,128
  805b38:	10bfe004 	addi	r2,r2,-128
  805b3c:	1000181e 	bne	r2,zero,805ba0 <logic+0x58dc>
  805b40:	e0bffd17 	ldw	r2,-12(fp)
  805b44:	10803543 	ldbu	r2,213(r2)
  805b48:	10803fcc 	andi	r2,r2,255
  805b4c:	1080201c 	xori	r2,r2,128
  805b50:	10bfe004 	addi	r2,r2,-128
  805b54:	10000626 	beq	r2,zero,805b70 <logic+0x58ac>
  805b58:	e0bffd17 	ldw	r2,-12(fp)
  805b5c:	108046c3 	ldbu	r2,283(r2)
  805b60:	10803fcc 	andi	r2,r2,255
  805b64:	1080201c 	xori	r2,r2,128
  805b68:	10bfe004 	addi	r2,r2,-128
  805b6c:	10000c1e 	bne	r2,zero,805ba0 <logic+0x58dc>
  805b70:	e0bffd17 	ldw	r2,-12(fp)
  805b74:	108034c3 	ldbu	r2,211(r2)
  805b78:	10803fcc 	andi	r2,r2,255
  805b7c:	1080201c 	xori	r2,r2,128
  805b80:	10bfe004 	addi	r2,r2,-128
  805b84:	10000826 	beq	r2,zero,805ba8 <logic+0x58e4>
  805b88:	e0bffd17 	ldw	r2,-12(fp)
  805b8c:	10804703 	ldbu	r2,284(r2)
  805b90:	10803fcc 	andi	r2,r2,255
  805b94:	1080201c 	xori	r2,r2,128
  805b98:	10bfe004 	addi	r2,r2,-128
  805b9c:	1000021e 	bne	r2,zero,805ba8 <logic+0x58e4>
  805ba0:	00800044 	movi	r2,1
  805ba4:	00000106 	br	805bac <logic+0x58e8>
  805ba8:	0005883a 	mov	r2,zero
  805bac:	1007883a 	mov	r3,r2
  805bb0:	e0bffd17 	ldw	r2,-12(fp)
  805bb4:	10c04f45 	stb	r3,317(r2)
  d->_g193 = (d->_g201 && d->_cg181) || (d->_g205 && !d->_cg209);
  805bb8:	e0bffd17 	ldw	r2,-12(fp)
  805bbc:	108034c3 	ldbu	r2,211(r2)
  805bc0:	10803fcc 	andi	r2,r2,255
  805bc4:	1080201c 	xori	r2,r2,128
  805bc8:	10bfe004 	addi	r2,r2,-128
  805bcc:	10000626 	beq	r2,zero,805be8 <logic+0x5924>
  805bd0:	e0bffd17 	ldw	r2,-12(fp)
  805bd4:	10804703 	ldbu	r2,284(r2)
  805bd8:	10803fcc 	andi	r2,r2,255
  805bdc:	1080201c 	xori	r2,r2,128
  805be0:	10bfe004 	addi	r2,r2,-128
  805be4:	10000c1e 	bne	r2,zero,805c18 <logic+0x5954>
  805be8:	e0bffd17 	ldw	r2,-12(fp)
  805bec:	10803543 	ldbu	r2,213(r2)
  805bf0:	10803fcc 	andi	r2,r2,255
  805bf4:	1080201c 	xori	r2,r2,128
  805bf8:	10bfe004 	addi	r2,r2,-128
  805bfc:	10000826 	beq	r2,zero,805c20 <logic+0x595c>
  805c00:	e0bffd17 	ldw	r2,-12(fp)
  805c04:	108046c3 	ldbu	r2,283(r2)
  805c08:	10803fcc 	andi	r2,r2,255
  805c0c:	1080201c 	xori	r2,r2,128
  805c10:	10bfe004 	addi	r2,r2,-128
  805c14:	1000021e 	bne	r2,zero,805c20 <logic+0x595c>
  805c18:	00800044 	movi	r2,1
  805c1c:	00000106 	br	805c24 <logic+0x5960>
  805c20:	0005883a 	mov	r2,zero
  805c24:	1007883a 	mov	r3,r2
  805c28:	e0bffd17 	ldw	r2,-12(fp)
  805c2c:	10c03445 	stb	r3,209(r2)
  if (d->_g193) {
  805c30:	e0bffd17 	ldw	r2,-12(fp)
  805c34:	10803443 	ldbu	r2,209(r2)
  805c38:	10803fcc 	andi	r2,r2,255
  805c3c:	1080201c 	xori	r2,r2,128
  805c40:	10bfe004 	addi	r2,r2,-128
  805c44:	10000726 	beq	r2,zero,805c64 <logic+0x59a0>
    d->_PaceMaker_local_lri_clk = 0.0;
  805c48:	e0bffd17 	ldw	r2,-12(fp)
  805c4c:	10001415 	stw	zero,80(r2)
  805c50:	10001515 	stw	zero,84(r2)
    d->_PaceMaker_local__Atrig11 = 0;
  805c54:	e0bffd17 	ldw	r2,-12(fp)
  805c58:	10001185 	stb	zero,70(r2)
    d->_PaceMaker_local__Atrig12 = 0;
  805c5c:	e0bffd17 	ldw	r2,-12(fp)
  805c60:	100011c5 	stb	zero,71(r2)
  }
  d->_cg183 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  805c64:	e0bffd17 	ldw	r2,-12(fp)
  805c68:	10801183 	ldbu	r2,70(r2)
  805c6c:	10803fcc 	andi	r2,r2,255
  805c70:	1080201c 	xori	r2,r2,128
  805c74:	10bfe004 	addi	r2,r2,-128
  805c78:	1000061e 	bne	r2,zero,805c94 <logic+0x59d0>
  805c7c:	e0bffd17 	ldw	r2,-12(fp)
  805c80:	108011c3 	ldbu	r2,71(r2)
  805c84:	10803fcc 	andi	r2,r2,255
  805c88:	1080201c 	xori	r2,r2,128
  805c8c:	10bfe004 	addi	r2,r2,-128
  805c90:	10000226 	beq	r2,zero,805c9c <logic+0x59d8>
  805c94:	00800044 	movi	r2,1
  805c98:	00000106 	br	805ca0 <logic+0x59dc>
  805c9c:	0005883a 	mov	r2,zero
  805ca0:	1007883a 	mov	r3,r2
  805ca4:	e0bffd17 	ldw	r2,-12(fp)
  805ca8:	10c04745 	stb	r3,285(r2)
  d->_g186_e1 = (d->_g193 && !d->_cg183) || (d->_g185 && !d->_cg185);
  805cac:	e0bffd17 	ldw	r2,-12(fp)
  805cb0:	10803443 	ldbu	r2,209(r2)
  805cb4:	10803fcc 	andi	r2,r2,255
  805cb8:	1080201c 	xori	r2,r2,128
  805cbc:	10bfe004 	addi	r2,r2,-128
  805cc0:	10000626 	beq	r2,zero,805cdc <logic+0x5a18>
  805cc4:	e0bffd17 	ldw	r2,-12(fp)
  805cc8:	10804743 	ldbu	r2,285(r2)
  805ccc:	10803fcc 	andi	r2,r2,255
  805cd0:	1080201c 	xori	r2,r2,128
  805cd4:	10bfe004 	addi	r2,r2,-128
  805cd8:	10000c26 	beq	r2,zero,805d0c <logic+0x5a48>
  805cdc:	e0bffd17 	ldw	r2,-12(fp)
  805ce0:	10803343 	ldbu	r2,205(r2)
  805ce4:	10803fcc 	andi	r2,r2,255
  805ce8:	1080201c 	xori	r2,r2,128
  805cec:	10bfe004 	addi	r2,r2,-128
  805cf0:	10000826 	beq	r2,zero,805d14 <logic+0x5a50>
  805cf4:	e0bffd17 	ldw	r2,-12(fp)
  805cf8:	10804783 	ldbu	r2,286(r2)
  805cfc:	10803fcc 	andi	r2,r2,255
  805d00:	1080201c 	xori	r2,r2,128
  805d04:	10bfe004 	addi	r2,r2,-128
  805d08:	1000021e 	bne	r2,zero,805d14 <logic+0x5a50>
  805d0c:	00800044 	movi	r2,1
  805d10:	00000106 	br	805d18 <logic+0x5a54>
  805d14:	0005883a 	mov	r2,zero
  805d18:	1007883a 	mov	r3,r2
  805d1c:	e0bffd17 	ldw	r2,-12(fp)
  805d20:	10c04f05 	stb	r3,316(r2)
  d->_cg187 = d->_PaceMaker_local_lri_clk < LRI_VALUE - 1;
  805d24:	e13ffd17 	ldw	r4,-12(fp)
  805d28:	20801417 	ldw	r2,80(r4)
  805d2c:	20c01517 	ldw	r3,84(r4)
  805d30:	04000044 	movi	r16,1
  805d34:	000d883a 	mov	r6,zero
  805d38:	01d023b4 	movhi	r7,16526
  805d3c:	39ea0004 	addi	r7,r7,-22528
  805d40:	1009883a 	mov	r4,r2
  805d44:	180b883a 	mov	r5,r3
  805d48:	0806f2c0 	call	806f2c <__ledf2>
  805d4c:	10000116 	blt	r2,zero,805d54 <logic+0x5a90>
  805d50:	0021883a 	mov	r16,zero
  805d54:	8007883a 	mov	r3,r16
  805d58:	e0bffd17 	ldw	r2,-12(fp)
  805d5c:	10c047c5 	stb	r3,287(r2)
  d->_g206 = d->_g193 && d->_cg187;
  805d60:	e0bffd17 	ldw	r2,-12(fp)
  805d64:	10803443 	ldbu	r2,209(r2)
  805d68:	10803fcc 	andi	r2,r2,255
  805d6c:	1080201c 	xori	r2,r2,128
  805d70:	10bfe004 	addi	r2,r2,-128
  805d74:	10000826 	beq	r2,zero,805d98 <logic+0x5ad4>
  805d78:	e0bffd17 	ldw	r2,-12(fp)
  805d7c:	108047c3 	ldbu	r2,287(r2)
  805d80:	10803fcc 	andi	r2,r2,255
  805d84:	1080201c 	xori	r2,r2,128
  805d88:	10bfe004 	addi	r2,r2,-128
  805d8c:	10000226 	beq	r2,zero,805d98 <logic+0x5ad4>
  805d90:	00800044 	movi	r2,1
  805d94:	00000106 	br	805d9c <logic+0x5ad8>
  805d98:	0005883a 	mov	r2,zero
  805d9c:	1007883a 	mov	r3,r2
  805da0:	e0bffd17 	ldw	r2,-12(fp)
  805da4:	10c03585 	stb	r3,214(r2)
  if (d->_g206) {
  805da8:	e0bffd17 	ldw	r2,-12(fp)
  805dac:	10803583 	ldbu	r2,214(r2)
  805db0:	10803fcc 	andi	r2,r2,255
  805db4:	1080201c 	xori	r2,r2,128
  805db8:	10bfe004 	addi	r2,r2,-128
  805dbc:	10002a26 	beq	r2,zero,805e68 <logic+0x5ba4>
    d->sleepT = (d->sleepT < (LRI_VALUE - 1 - d->_PaceMaker_local_lri_clk)) ? d->sleepT : (LRI_VALUE - 1 - d->_PaceMaker_local_lri_clk);
  805dc0:	e0bffd17 	ldw	r2,-12(fp)
  805dc4:	14000217 	ldw	r16,8(r2)
  805dc8:	14400317 	ldw	r17,12(r2)
  805dcc:	e13ffd17 	ldw	r4,-12(fp)
  805dd0:	20801417 	ldw	r2,80(r4)
  805dd4:	20c01517 	ldw	r3,84(r4)
  805dd8:	100d883a 	mov	r6,r2
  805ddc:	180f883a 	mov	r7,r3
  805de0:	0009883a 	mov	r4,zero
  805de4:	015023b4 	movhi	r5,16526
  805de8:	296a0004 	addi	r5,r5,-22528
  805dec:	08070200 	call	807020 <__subdf3>
  805df0:	1009883a 	mov	r4,r2
  805df4:	180b883a 	mov	r5,r3
  805df8:	2005883a 	mov	r2,r4
  805dfc:	2807883a 	mov	r3,r5
  805e00:	100d883a 	mov	r6,r2
  805e04:	180f883a 	mov	r7,r3
  805e08:	8009883a 	mov	r4,r16
  805e0c:	880b883a 	mov	r5,r17
  805e10:	0806f2c0 	call	806f2c <__ledf2>
  805e14:	1000040e 	bge	r2,zero,805e28 <logic+0x5b64>
  805e18:	e13ffd17 	ldw	r4,-12(fp)
  805e1c:	20800217 	ldw	r2,8(r4)
  805e20:	20c00317 	ldw	r3,12(r4)
  805e24:	00000d06 	br	805e5c <logic+0x5b98>
  805e28:	e13ffd17 	ldw	r4,-12(fp)
  805e2c:	20801417 	ldw	r2,80(r4)
  805e30:	20c01517 	ldw	r3,84(r4)
  805e34:	100d883a 	mov	r6,r2
  805e38:	180f883a 	mov	r7,r3
  805e3c:	0009883a 	mov	r4,zero
  805e40:	015023b4 	movhi	r5,16526
  805e44:	296a0004 	addi	r5,r5,-22528
  805e48:	08070200 	call	807020 <__subdf3>
  805e4c:	1009883a 	mov	r4,r2
  805e50:	180b883a 	mov	r5,r3
  805e54:	2005883a 	mov	r2,r4
  805e58:	2807883a 	mov	r3,r5
  805e5c:	e13ffd17 	ldw	r4,-12(fp)
  805e60:	20800215 	stw	r2,8(r4)
  805e64:	20c00315 	stw	r3,12(r4)
  }
  d->_cg188 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  805e68:	e0bffd17 	ldw	r2,-12(fp)
  805e6c:	10801183 	ldbu	r2,70(r2)
  805e70:	10803fcc 	andi	r2,r2,255
  805e74:	1080201c 	xori	r2,r2,128
  805e78:	10bfe004 	addi	r2,r2,-128
  805e7c:	1000061e 	bne	r2,zero,805e98 <logic+0x5bd4>
  805e80:	e0bffd17 	ldw	r2,-12(fp)
  805e84:	108011c3 	ldbu	r2,71(r2)
  805e88:	10803fcc 	andi	r2,r2,255
  805e8c:	1080201c 	xori	r2,r2,128
  805e90:	10bfe004 	addi	r2,r2,-128
  805e94:	10000226 	beq	r2,zero,805ea0 <logic+0x5bdc>
  805e98:	00800044 	movi	r2,1
  805e9c:	00000106 	br	805ea4 <logic+0x5be0>
  805ea0:	0005883a 	mov	r2,zero
  805ea4:	1007883a 	mov	r3,r2
  805ea8:	e0bffd17 	ldw	r2,-12(fp)
  805eac:	10c04805 	stb	r3,288(r2)
  d->_g206_e4 = (d->_g206 && !d->_cg188) || (d->_g190 && !d->_cg192);
  805eb0:	e0bffd17 	ldw	r2,-12(fp)
  805eb4:	10803583 	ldbu	r2,214(r2)
  805eb8:	10803fcc 	andi	r2,r2,255
  805ebc:	1080201c 	xori	r2,r2,128
  805ec0:	10bfe004 	addi	r2,r2,-128
  805ec4:	10000626 	beq	r2,zero,805ee0 <logic+0x5c1c>
  805ec8:	e0bffd17 	ldw	r2,-12(fp)
  805ecc:	10804803 	ldbu	r2,288(r2)
  805ed0:	10803fcc 	andi	r2,r2,255
  805ed4:	1080201c 	xori	r2,r2,128
  805ed8:	10bfe004 	addi	r2,r2,-128
  805edc:	10000c26 	beq	r2,zero,805f10 <logic+0x5c4c>
  805ee0:	e0bffd17 	ldw	r2,-12(fp)
  805ee4:	108033c3 	ldbu	r2,207(r2)
  805ee8:	10803fcc 	andi	r2,r2,255
  805eec:	1080201c 	xori	r2,r2,128
  805ef0:	10bfe004 	addi	r2,r2,-128
  805ef4:	10000826 	beq	r2,zero,805f18 <logic+0x5c54>
  805ef8:	e0bffd17 	ldw	r2,-12(fp)
  805efc:	10804843 	ldbu	r2,289(r2)
  805f00:	10803fcc 	andi	r2,r2,255
  805f04:	1080201c 	xori	r2,r2,128
  805f08:	10bfe004 	addi	r2,r2,-128
  805f0c:	1000021e 	bne	r2,zero,805f18 <logic+0x5c54>
  805f10:	00800044 	movi	r2,1
  805f14:	00000106 	br	805f1c <logic+0x5c58>
  805f18:	0005883a 	mov	r2,zero
  805f1c:	1007883a 	mov	r3,r2
  805f20:	e0bffd17 	ldw	r2,-12(fp)
  805f24:	10c04fc5 	stb	r3,319(r2)
  d->_g201_e3 = d->_g193 && !d->_cg187;
  805f28:	e0bffd17 	ldw	r2,-12(fp)
  805f2c:	10803443 	ldbu	r2,209(r2)
  805f30:	10803fcc 	andi	r2,r2,255
  805f34:	1080201c 	xori	r2,r2,128
  805f38:	10bfe004 	addi	r2,r2,-128
  805f3c:	10000826 	beq	r2,zero,805f60 <logic+0x5c9c>
  805f40:	e0bffd17 	ldw	r2,-12(fp)
  805f44:	108047c3 	ldbu	r2,287(r2)
  805f48:	10803fcc 	andi	r2,r2,255
  805f4c:	1080201c 	xori	r2,r2,128
  805f50:	10bfe004 	addi	r2,r2,-128
  805f54:	1000021e 	bne	r2,zero,805f60 <logic+0x5c9c>
  805f58:	00800044 	movi	r2,1
  805f5c:	00000106 	br	805f64 <logic+0x5ca0>
  805f60:	0005883a 	mov	r2,zero
  805f64:	1007883a 	mov	r3,r2
  805f68:	e0bffd17 	ldw	r2,-12(fp)
  805f6c:	10c04f85 	stb	r3,318(r2)
  d->_cg197 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  805f70:	e0bffd17 	ldw	r2,-12(fp)
  805f74:	10801183 	ldbu	r2,70(r2)
  805f78:	10803fcc 	andi	r2,r2,255
  805f7c:	1080201c 	xori	r2,r2,128
  805f80:	10bfe004 	addi	r2,r2,-128
  805f84:	1000061e 	bne	r2,zero,805fa0 <logic+0x5cdc>
  805f88:	e0bffd17 	ldw	r2,-12(fp)
  805f8c:	108011c3 	ldbu	r2,71(r2)
  805f90:	10803fcc 	andi	r2,r2,255
  805f94:	1080201c 	xori	r2,r2,128
  805f98:	10bfe004 	addi	r2,r2,-128
  805f9c:	10000226 	beq	r2,zero,805fa8 <logic+0x5ce4>
  805fa0:	00800044 	movi	r2,1
  805fa4:	00000106 	br	805fac <logic+0x5ce8>
  805fa8:	0005883a 	mov	r2,zero
  805fac:	1007883a 	mov	r3,r2
  805fb0:	e0bffd17 	ldw	r2,-12(fp)
  805fb4:	10c04905 	stb	r3,292(r2)
  d->_g186 = (d->_g191 && !d->_cg194) || (d->_g201_e3 && !d->_cg197);
  805fb8:	e0bffd17 	ldw	r2,-12(fp)
  805fbc:	10803403 	ldbu	r2,208(r2)
  805fc0:	10803fcc 	andi	r2,r2,255
  805fc4:	1080201c 	xori	r2,r2,128
  805fc8:	10bfe004 	addi	r2,r2,-128
  805fcc:	10000626 	beq	r2,zero,805fe8 <logic+0x5d24>
  805fd0:	e0bffd17 	ldw	r2,-12(fp)
  805fd4:	108048c3 	ldbu	r2,291(r2)
  805fd8:	10803fcc 	andi	r2,r2,255
  805fdc:	1080201c 	xori	r2,r2,128
  805fe0:	10bfe004 	addi	r2,r2,-128
  805fe4:	10000c26 	beq	r2,zero,806018 <logic+0x5d54>
  805fe8:	e0bffd17 	ldw	r2,-12(fp)
  805fec:	10804f83 	ldbu	r2,318(r2)
  805ff0:	10803fcc 	andi	r2,r2,255
  805ff4:	1080201c 	xori	r2,r2,128
  805ff8:	10bfe004 	addi	r2,r2,-128
  805ffc:	10000826 	beq	r2,zero,806020 <logic+0x5d5c>
  806000:	e0bffd17 	ldw	r2,-12(fp)
  806004:	10804903 	ldbu	r2,292(r2)
  806008:	10803fcc 	andi	r2,r2,255
  80600c:	1080201c 	xori	r2,r2,128
  806010:	10bfe004 	addi	r2,r2,-128
  806014:	1000021e 	bne	r2,zero,806020 <logic+0x5d5c>
  806018:	00800044 	movi	r2,1
  80601c:	00000106 	br	806024 <logic+0x5d60>
  806020:	0005883a 	mov	r2,zero
  806024:	1007883a 	mov	r3,r2
  806028:	e0bffd17 	ldw	r2,-12(fp)
  80602c:	10c03385 	stb	r3,206(r2)
  d->_cg198 = d->_PaceMaker_local__Atrig11 || d->_PaceMaker_local__Atrig12;
  806030:	e0bffd17 	ldw	r2,-12(fp)
  806034:	10801183 	ldbu	r2,70(r2)
  806038:	10803fcc 	andi	r2,r2,255
  80603c:	1080201c 	xori	r2,r2,128
  806040:	10bfe004 	addi	r2,r2,-128
  806044:	1000061e 	bne	r2,zero,806060 <logic+0x5d9c>
  806048:	e0bffd17 	ldw	r2,-12(fp)
  80604c:	108011c3 	ldbu	r2,71(r2)
  806050:	10803fcc 	andi	r2,r2,255
  806054:	1080201c 	xori	r2,r2,128
  806058:	10bfe004 	addi	r2,r2,-128
  80605c:	10000226 	beq	r2,zero,806068 <logic+0x5da4>
  806060:	00800044 	movi	r2,1
  806064:	00000106 	br	80606c <logic+0x5da8>
  806068:	0005883a 	mov	r2,zero
  80606c:	1007883a 	mov	r3,r2
  806070:	e0bffd17 	ldw	r2,-12(fp)
  806074:	10c04945 	stb	r3,293(r2)
  d->_g181 = (d->_g193 && !d->_cg198) || (d->_g156 && !d->_cg200);
  806078:	e0bffd17 	ldw	r2,-12(fp)
  80607c:	10803443 	ldbu	r2,209(r2)
  806080:	10803fcc 	andi	r2,r2,255
  806084:	1080201c 	xori	r2,r2,128
  806088:	10bfe004 	addi	r2,r2,-128
  80608c:	10000626 	beq	r2,zero,8060a8 <logic+0x5de4>
  806090:	e0bffd17 	ldw	r2,-12(fp)
  806094:	10804943 	ldbu	r2,293(r2)
  806098:	10803fcc 	andi	r2,r2,255
  80609c:	1080201c 	xori	r2,r2,128
  8060a0:	10bfe004 	addi	r2,r2,-128
  8060a4:	10000c26 	beq	r2,zero,8060d8 <logic+0x5e14>
  8060a8:	e0bffd17 	ldw	r2,-12(fp)
  8060ac:	10802f03 	ldbu	r2,188(r2)
  8060b0:	10803fcc 	andi	r2,r2,255
  8060b4:	1080201c 	xori	r2,r2,128
  8060b8:	10bfe004 	addi	r2,r2,-128
  8060bc:	10000826 	beq	r2,zero,8060e0 <logic+0x5e1c>
  8060c0:	e0bffd17 	ldw	r2,-12(fp)
  8060c4:	10804983 	ldbu	r2,294(r2)
  8060c8:	10803fcc 	andi	r2,r2,255
  8060cc:	1080201c 	xori	r2,r2,128
  8060d0:	10bfe004 	addi	r2,r2,-128
  8060d4:	1000021e 	bne	r2,zero,8060e0 <logic+0x5e1c>
  8060d8:	00800044 	movi	r2,1
  8060dc:	00000106 	br	8060e4 <logic+0x5e20>
  8060e0:	0005883a 	mov	r2,zero
  8060e4:	1007883a 	mov	r3,r2
  8060e8:	e0bffd17 	ldw	r2,-12(fp)
  8060ec:	10c03305 	stb	r3,204(r2)
  d->_g209 = d->_g193 || (d->_g162 && !d->_cg207);
  8060f0:	e0bffd17 	ldw	r2,-12(fp)
  8060f4:	10803443 	ldbu	r2,209(r2)
  8060f8:	10803fcc 	andi	r2,r2,255
  8060fc:	1080201c 	xori	r2,r2,128
  806100:	10bfe004 	addi	r2,r2,-128
  806104:	10000c1e 	bne	r2,zero,806138 <logic+0x5e74>
  806108:	e0bffd17 	ldw	r2,-12(fp)
  80610c:	10803043 	ldbu	r2,193(r2)
  806110:	10803fcc 	andi	r2,r2,255
  806114:	1080201c 	xori	r2,r2,128
  806118:	10bfe004 	addi	r2,r2,-128
  80611c:	10000826 	beq	r2,zero,806140 <logic+0x5e7c>
  806120:	e0bffd17 	ldw	r2,-12(fp)
  806124:	108049c3 	ldbu	r2,295(r2)
  806128:	10803fcc 	andi	r2,r2,255
  80612c:	1080201c 	xori	r2,r2,128
  806130:	10bfe004 	addi	r2,r2,-128
  806134:	1000021e 	bne	r2,zero,806140 <logic+0x5e7c>
  806138:	00800044 	movi	r2,1
  80613c:	00000106 	br	806144 <logic+0x5e80>
  806140:	0005883a 	mov	r2,zero
  806144:	1007883a 	mov	r3,r2
  806148:	e0bffd17 	ldw	r2,-12(fp)
  80614c:	10c03605 	stb	r3,216(r2)
}
  806150:	0001883a 	nop
  806154:	e6fffe04 	addi	sp,fp,-8
  806158:	dfc00317 	ldw	ra,12(sp)
  80615c:	df000217 	ldw	fp,8(sp)
  806160:	dc400117 	ldw	r17,4(sp)
  806164:	dc000017 	ldw	r16,0(sp)
  806168:	dec00404 	addi	sp,sp,16
  80616c:	f800283a 	ret

00806170 <reset>:

void reset(TickData* d) {
  806170:	defffe04 	addi	sp,sp,-8
  806174:	df000115 	stw	fp,4(sp)
  806178:	df000104 	addi	fp,sp,4
  80617c:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  806180:	e0bfff17 	ldw	r2,-4(fp)
  806184:	00c00044 	movi	r3,1
  806188:	10c03645 	stb	r3,217(r2)
  d->_TERM = 0;
  80618c:	e0bfff17 	ldw	r2,-4(fp)
  806190:	10005005 	stb	zero,320(r2)
  d->deltaT = 0.0;
  806194:	e0bfff17 	ldw	r2,-4(fp)
  806198:	10000015 	stw	zero,0(r2)
  80619c:	10000115 	stw	zero,4(r2)
  d->sleepT = 0.0;
  8061a0:	e0bfff17 	ldw	r2,-4(fp)
  8061a4:	10000215 	stw	zero,8(r2)
  8061a8:	10000315 	stw	zero,12(r2)
  d->AP = 0;
  8061ac:	e0bfff17 	ldw	r2,-4(fp)
  8061b0:	10000485 	stb	zero,18(r2)
  d->VP = 0;
  8061b4:	e0bfff17 	ldw	r2,-4(fp)
  8061b8:	100004c5 	stb	zero,19(r2)
  d->ignore_AEvent = 0;
  8061bc:	e0bfff17 	ldw	r2,-4(fp)
  8061c0:	10000505 	stb	zero,20(r2)
  d->ignore_VEvent = 0;
  8061c4:	e0bfff17 	ldw	r2,-4(fp)
  8061c8:	10000545 	stb	zero,21(r2)
  d->uri_time = 0;
  8061cc:	e0bfff17 	ldw	r2,-4(fp)
  8061d0:	10000585 	stb	zero,22(r2)
  d->lri_time = 0;
  8061d4:	e0bfff17 	ldw	r2,-4(fp)
  8061d8:	100005c5 	stb	zero,23(r2)
  d->_pg25 = 0;
  8061dc:	e0bfff17 	ldw	r2,-4(fp)
  8061e0:	10005045 	stb	zero,321(r2)
  d->_pg28 = 0;
  8061e4:	e0bfff17 	ldw	r2,-4(fp)
  8061e8:	10005085 	stb	zero,322(r2)
  d->_pg169 = 0;
  8061ec:	e0bfff17 	ldw	r2,-4(fp)
  8061f0:	100050c5 	stb	zero,323(r2)
  d->_pg74 = 0;
  8061f4:	e0bfff17 	ldw	r2,-4(fp)
  8061f8:	10005105 	stb	zero,324(r2)
  d->_pg111 = 0;
  8061fc:	e0bfff17 	ldw	r2,-4(fp)
  806200:	10005145 	stb	zero,325(r2)
  d->_pg136_e3 = 0;
  806204:	e0bfff17 	ldw	r2,-4(fp)
  806208:	10005185 	stb	zero,326(r2)
  d->_pg77 = 0;
  80620c:	e0bfff17 	ldw	r2,-4(fp)
  806210:	100051c5 	stb	zero,327(r2)
  d->_pg72 = 0;
  806214:	e0bfff17 	ldw	r2,-4(fp)
  806218:	10005205 	stb	zero,328(r2)
  d->_pg186_e1 = 0;
  80621c:	e0bfff17 	ldw	r2,-4(fp)
  806220:	10005245 	stb	zero,329(r2)
  d->_pg68 = 0;
  806224:	e0bfff17 	ldw	r2,-4(fp)
  806228:	10005285 	stb	zero,330(r2)
  d->_pg104 = 0;
  80622c:	e0bfff17 	ldw	r2,-4(fp)
  806230:	100052c5 	stb	zero,331(r2)
  d->_pg29_e4 = 0;
  806234:	e0bfff17 	ldw	r2,-4(fp)
  806238:	10005305 	stb	zero,332(r2)
  d->_pg97 = 0;
  80623c:	e0bfff17 	ldw	r2,-4(fp)
  806240:	10005345 	stb	zero,333(r2)
  d->_pg16 = 0;
  806244:	e0bfff17 	ldw	r2,-4(fp)
  806248:	10005385 	stb	zero,334(r2)
  d->_pg19 = 0;
  80624c:	e0bfff17 	ldw	r2,-4(fp)
  806250:	100053c5 	stb	zero,335(r2)
  d->_pg54 = 0;
  806254:	e0bfff17 	ldw	r2,-4(fp)
  806258:	10005405 	stb	zero,336(r2)
  d->_pg35 = 0;
  80625c:	e0bfff17 	ldw	r2,-4(fp)
  806260:	10005445 	stb	zero,337(r2)
  d->_pg38_e1 = 0;
  806264:	e0bfff17 	ldw	r2,-4(fp)
  806268:	10005485 	stb	zero,338(r2)
  d->_pg30 = 0;
  80626c:	e0bfff17 	ldw	r2,-4(fp)
  806270:	100054c5 	stb	zero,339(r2)
  d->_pg45 = 0;
  806274:	e0bfff17 	ldw	r2,-4(fp)
  806278:	10005505 	stb	zero,340(r2)
  d->_pg48 = 0;
  80627c:	e0bfff17 	ldw	r2,-4(fp)
  806280:	10005545 	stb	zero,341(r2)
  d->_pg102 = 0;
  806284:	e0bfff17 	ldw	r2,-4(fp)
  806288:	10005585 	stb	zero,342(r2)
  d->_pg91 = 0;
  80628c:	e0bfff17 	ldw	r2,-4(fp)
  806290:	100055c5 	stb	zero,343(r2)
  d->_pg107 = 0;
  806294:	e0bfff17 	ldw	r2,-4(fp)
  806298:	10005605 	stb	zero,344(r2)
  d->_pg109 = 0;
  80629c:	e0bfff17 	ldw	r2,-4(fp)
  8062a0:	10005645 	stb	zero,345(r2)
  d->_pg123_e1 = 0;
  8062a4:	e0bfff17 	ldw	r2,-4(fp)
  8062a8:	10005685 	stb	zero,346(r2)
  d->_pg83 = 0;
  8062ac:	e0bfff17 	ldw	r2,-4(fp)
  8062b0:	100056c5 	stb	zero,347(r2)
  d->_pg177 = 0;
  8062b4:	e0bfff17 	ldw	r2,-4(fp)
  8062b8:	10005705 	stb	zero,348(r2)
  d->_pg149 = 0;
  8062bc:	e0bfff17 	ldw	r2,-4(fp)
  8062c0:	10005745 	stb	zero,349(r2)
  d->_pg161 = 0;
  8062c4:	e0bfff17 	ldw	r2,-4(fp)
  8062c8:	10005785 	stb	zero,350(r2)
  d->_pg161_e2 = 0;
  8062cc:	e0bfff17 	ldw	r2,-4(fp)
  8062d0:	100057c5 	stb	zero,351(r2)
  d->_pg169_e3 = 0;
  8062d4:	e0bfff17 	ldw	r2,-4(fp)
  8062d8:	10005805 	stb	zero,352(r2)
  d->_pg181 = 0;
  8062dc:	e0bfff17 	ldw	r2,-4(fp)
  8062e0:	10005845 	stb	zero,353(r2)
  d->_pg209 = 0;
  8062e4:	e0bfff17 	ldw	r2,-4(fp)
  8062e8:	10005885 	stb	zero,354(r2)
  d->_pg186 = 0;
  8062ec:	e0bfff17 	ldw	r2,-4(fp)
  8062f0:	100058c5 	stb	zero,355(r2)
  d->_pg206_e4 = 0;
  8062f4:	e0bfff17 	ldw	r2,-4(fp)
  8062f8:	10005905 	stb	zero,356(r2)
  d->_pg193_e2 = 0;
  8062fc:	e0bfff17 	ldw	r2,-4(fp)
  806300:	10005945 	stb	zero,357(r2)
}
  806304:	0001883a 	nop
  806308:	e037883a 	mov	sp,fp
  80630c:	df000017 	ldw	fp,0(sp)
  806310:	dec00104 	addi	sp,sp,4
  806314:	f800283a 	ret

00806318 <tick>:

void tick(TickData* d) {
  806318:	defffd04 	addi	sp,sp,-12
  80631c:	dfc00215 	stw	ra,8(sp)
  806320:	df000115 	stw	fp,4(sp)
  806324:	df000104 	addi	fp,sp,4
  806328:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  80632c:	e13fff17 	ldw	r4,-4(fp)
  806330:	08002c40 	call	8002c4 <logic>

  d->_pg25 = d->_g25;
  806334:	e0bfff17 	ldw	r2,-4(fp)
  806338:	10c019c3 	ldbu	r3,103(r2)
  80633c:	e0bfff17 	ldw	r2,-4(fp)
  806340:	10c05045 	stb	r3,321(r2)
  d->_pg28 = d->_g28;
  806344:	e0bfff17 	ldw	r2,-4(fp)
  806348:	10c01a03 	ldbu	r3,104(r2)
  80634c:	e0bfff17 	ldw	r2,-4(fp)
  806350:	10c05085 	stb	r3,322(r2)
  d->_pg169 = d->_g169;
  806354:	e0bfff17 	ldw	r2,-4(fp)
  806358:	10c03143 	ldbu	r3,197(r2)
  80635c:	e0bfff17 	ldw	r2,-4(fp)
  806360:	10c050c5 	stb	r3,323(r2)
  d->_pg74 = d->_g74;
  806364:	e0bfff17 	ldw	r2,-4(fp)
  806368:	10c02143 	ldbu	r3,133(r2)
  80636c:	e0bfff17 	ldw	r2,-4(fp)
  806370:	10c05105 	stb	r3,324(r2)
  d->_pg111 = d->_g111;
  806374:	e0bfff17 	ldw	r2,-4(fp)
  806378:	10c02843 	ldbu	r3,161(r2)
  80637c:	e0bfff17 	ldw	r2,-4(fp)
  806380:	10c05145 	stb	r3,325(r2)
  d->_pg136_e3 = d->_g136_e3;
  806384:	e0bfff17 	ldw	r2,-4(fp)
  806388:	10c04dc3 	ldbu	r3,311(r2)
  80638c:	e0bfff17 	ldw	r2,-4(fp)
  806390:	10c05185 	stb	r3,326(r2)
  d->_pg77 = d->_g77;
  806394:	e0bfff17 	ldw	r2,-4(fp)
  806398:	10c021c3 	ldbu	r3,135(r2)
  80639c:	e0bfff17 	ldw	r2,-4(fp)
  8063a0:	10c051c5 	stb	r3,327(r2)
  d->_pg72 = d->_g72;
  8063a4:	e0bfff17 	ldw	r2,-4(fp)
  8063a8:	10c020c3 	ldbu	r3,131(r2)
  8063ac:	e0bfff17 	ldw	r2,-4(fp)
  8063b0:	10c05205 	stb	r3,328(r2)
  d->_pg186_e1 = d->_g186_e1;
  8063b4:	e0bfff17 	ldw	r2,-4(fp)
  8063b8:	10c04f03 	ldbu	r3,316(r2)
  8063bc:	e0bfff17 	ldw	r2,-4(fp)
  8063c0:	10c05245 	stb	r3,329(r2)
  d->_pg68 = d->_g68;
  8063c4:	e0bfff17 	ldw	r2,-4(fp)
  8063c8:	10c02003 	ldbu	r3,128(r2)
  8063cc:	e0bfff17 	ldw	r2,-4(fp)
  8063d0:	10c05285 	stb	r3,330(r2)
  d->_pg104 = d->_g104;
  8063d4:	e0bfff17 	ldw	r2,-4(fp)
  8063d8:	10c026c3 	ldbu	r3,155(r2)
  8063dc:	e0bfff17 	ldw	r2,-4(fp)
  8063e0:	10c052c5 	stb	r3,331(r2)
  d->_pg29_e4 = d->_g29_e4;
  8063e4:	e0bfff17 	ldw	r2,-4(fp)
  8063e8:	10c04b03 	ldbu	r3,300(r2)
  8063ec:	e0bfff17 	ldw	r2,-4(fp)
  8063f0:	10c05305 	stb	r3,332(r2)
  d->_pg97 = d->_g97;
  8063f4:	e0bfff17 	ldw	r2,-4(fp)
  8063f8:	10c02503 	ldbu	r3,148(r2)
  8063fc:	e0bfff17 	ldw	r2,-4(fp)
  806400:	10c05345 	stb	r3,333(r2)
  d->_pg16 = d->_g16;
  806404:	e0bfff17 	ldw	r2,-4(fp)
  806408:	10c01803 	ldbu	r3,96(r2)
  80640c:	e0bfff17 	ldw	r2,-4(fp)
  806410:	10c05385 	stb	r3,334(r2)
  d->_pg19 = d->_g19;
  806414:	e0bfff17 	ldw	r2,-4(fp)
  806418:	10c018c3 	ldbu	r3,99(r2)
  80641c:	e0bfff17 	ldw	r2,-4(fp)
  806420:	10c053c5 	stb	r3,335(r2)
  d->_pg54 = d->_g54;
  806424:	e0bfff17 	ldw	r2,-4(fp)
  806428:	10c01e83 	ldbu	r3,122(r2)
  80642c:	e0bfff17 	ldw	r2,-4(fp)
  806430:	10c05405 	stb	r3,336(r2)
  d->_pg35 = d->_g35;
  806434:	e0bfff17 	ldw	r2,-4(fp)
  806438:	10c01b03 	ldbu	r3,108(r2)
  80643c:	e0bfff17 	ldw	r2,-4(fp)
  806440:	10c05445 	stb	r3,337(r2)
  d->_pg38_e1 = d->_g38_e1;
  806444:	e0bfff17 	ldw	r2,-4(fp)
  806448:	10c04b43 	ldbu	r3,301(r2)
  80644c:	e0bfff17 	ldw	r2,-4(fp)
  806450:	10c05485 	stb	r3,338(r2)
  d->_pg30 = d->_g30;
  806454:	e0bfff17 	ldw	r2,-4(fp)
  806458:	10c01a83 	ldbu	r3,106(r2)
  80645c:	e0bfff17 	ldw	r2,-4(fp)
  806460:	10c054c5 	stb	r3,339(r2)
  d->_pg45 = d->_g45;
  806464:	e0bfff17 	ldw	r2,-4(fp)
  806468:	10c01cc3 	ldbu	r3,115(r2)
  80646c:	e0bfff17 	ldw	r2,-4(fp)
  806470:	10c05505 	stb	r3,340(r2)
  d->_pg48 = d->_g48;
  806474:	e0bfff17 	ldw	r2,-4(fp)
  806478:	10c01d83 	ldbu	r3,118(r2)
  80647c:	e0bfff17 	ldw	r2,-4(fp)
  806480:	10c05545 	stb	r3,341(r2)
  d->_pg102 = d->_g102;
  806484:	e0bfff17 	ldw	r2,-4(fp)
  806488:	10c02643 	ldbu	r3,153(r2)
  80648c:	e0bfff17 	ldw	r2,-4(fp)
  806490:	10c05585 	stb	r3,342(r2)
  d->_pg91 = d->_g91;
  806494:	e0bfff17 	ldw	r2,-4(fp)
  806498:	10c02403 	ldbu	r3,144(r2)
  80649c:	e0bfff17 	ldw	r2,-4(fp)
  8064a0:	10c055c5 	stb	r3,343(r2)
  d->_pg107 = d->_g107;
  8064a4:	e0bfff17 	ldw	r2,-4(fp)
  8064a8:	10c02783 	ldbu	r3,158(r2)
  8064ac:	e0bfff17 	ldw	r2,-4(fp)
  8064b0:	10c05605 	stb	r3,344(r2)
  d->_pg109 = d->_g109;
  8064b4:	e0bfff17 	ldw	r2,-4(fp)
  8064b8:	10c027c3 	ldbu	r3,159(r2)
  8064bc:	e0bfff17 	ldw	r2,-4(fp)
  8064c0:	10c05645 	stb	r3,345(r2)
  d->_pg123_e1 = d->_g123_e1;
  8064c4:	e0bfff17 	ldw	r2,-4(fp)
  8064c8:	10c04d43 	ldbu	r3,309(r2)
  8064cc:	e0bfff17 	ldw	r2,-4(fp)
  8064d0:	10c05685 	stb	r3,346(r2)
  d->_pg83 = d->_g83;
  8064d4:	e0bfff17 	ldw	r2,-4(fp)
  8064d8:	10c022c3 	ldbu	r3,139(r2)
  8064dc:	e0bfff17 	ldw	r2,-4(fp)
  8064e0:	10c056c5 	stb	r3,347(r2)
  d->_pg177 = d->_g177;
  8064e4:	e0bfff17 	ldw	r2,-4(fp)
  8064e8:	10c032c3 	ldbu	r3,203(r2)
  8064ec:	e0bfff17 	ldw	r2,-4(fp)
  8064f0:	10c05705 	stb	r3,348(r2)
  d->_pg149 = d->_g149;
  8064f4:	e0bfff17 	ldw	r2,-4(fp)
  8064f8:	10c02e03 	ldbu	r3,184(r2)
  8064fc:	e0bfff17 	ldw	r2,-4(fp)
  806500:	10c05745 	stb	r3,349(r2)
  d->_pg161 = d->_g161;
  806504:	e0bfff17 	ldw	r2,-4(fp)
  806508:	10c03003 	ldbu	r3,192(r2)
  80650c:	e0bfff17 	ldw	r2,-4(fp)
  806510:	10c05785 	stb	r3,350(r2)
  d->_pg161_e2 = d->_g161_e2;
  806514:	e0bfff17 	ldw	r2,-4(fp)
  806518:	10c04e43 	ldbu	r3,313(r2)
  80651c:	e0bfff17 	ldw	r2,-4(fp)
  806520:	10c057c5 	stb	r3,351(r2)
  d->_pg169_e3 = d->_g169_e3;
  806524:	e0bfff17 	ldw	r2,-4(fp)
  806528:	10c04e83 	ldbu	r3,314(r2)
  80652c:	e0bfff17 	ldw	r2,-4(fp)
  806530:	10c05805 	stb	r3,352(r2)
  d->_pg181 = d->_g181;
  806534:	e0bfff17 	ldw	r2,-4(fp)
  806538:	10c03303 	ldbu	r3,204(r2)
  80653c:	e0bfff17 	ldw	r2,-4(fp)
  806540:	10c05845 	stb	r3,353(r2)
  d->_pg209 = d->_g209;
  806544:	e0bfff17 	ldw	r2,-4(fp)
  806548:	10c03603 	ldbu	r3,216(r2)
  80654c:	e0bfff17 	ldw	r2,-4(fp)
  806550:	10c05885 	stb	r3,354(r2)
  d->_pg186 = d->_g186;
  806554:	e0bfff17 	ldw	r2,-4(fp)
  806558:	10c03383 	ldbu	r3,206(r2)
  80655c:	e0bfff17 	ldw	r2,-4(fp)
  806560:	10c058c5 	stb	r3,355(r2)
  d->_pg206_e4 = d->_g206_e4;
  806564:	e0bfff17 	ldw	r2,-4(fp)
  806568:	10c04fc3 	ldbu	r3,319(r2)
  80656c:	e0bfff17 	ldw	r2,-4(fp)
  806570:	10c05905 	stb	r3,356(r2)
  d->_pg193_e2 = d->_g193_e2;
  806574:	e0bfff17 	ldw	r2,-4(fp)
  806578:	10c04f43 	ldbu	r3,317(r2)
  80657c:	e0bfff17 	ldw	r2,-4(fp)
  806580:	10c05945 	stb	r3,357(r2)
  d->_GO = 0;
  806584:	e0bfff17 	ldw	r2,-4(fp)
  806588:	10003645 	stb	zero,217(r2)
}
  80658c:	0001883a 	nop
  806590:	e037883a 	mov	sp,fp
  806594:	dfc00117 	ldw	ra,4(sp)
  806598:	df000017 	ldw	fp,0(sp)
  80659c:	dec00204 	addi	sp,sp,8
  8065a0:	f800283a 	ret

008065a4 <__adddf3>:
  8065a4:	02c00434 	movhi	r11,16
  8065a8:	5affffc4 	addi	r11,r11,-1
  8065ac:	2806d7fa 	srli	r3,r5,31
  8065b0:	2ad4703a 	and	r10,r5,r11
  8065b4:	3ad2703a 	and	r9,r7,r11
  8065b8:	3804d53a 	srli	r2,r7,20
  8065bc:	3018d77a 	srli	r12,r6,29
  8065c0:	280ad53a 	srli	r5,r5,20
  8065c4:	501490fa 	slli	r10,r10,3
  8065c8:	2010d77a 	srli	r8,r4,29
  8065cc:	481290fa 	slli	r9,r9,3
  8065d0:	380ed7fa 	srli	r7,r7,31
  8065d4:	defffb04 	addi	sp,sp,-20
  8065d8:	dc800215 	stw	r18,8(sp)
  8065dc:	dc400115 	stw	r17,4(sp)
  8065e0:	dc000015 	stw	r16,0(sp)
  8065e4:	dfc00415 	stw	ra,16(sp)
  8065e8:	dcc00315 	stw	r19,12(sp)
  8065ec:	1c803fcc 	andi	r18,r3,255
  8065f0:	2c01ffcc 	andi	r16,r5,2047
  8065f4:	5210b03a 	or	r8,r10,r8
  8065f8:	202290fa 	slli	r17,r4,3
  8065fc:	1081ffcc 	andi	r2,r2,2047
  806600:	4b12b03a 	or	r9,r9,r12
  806604:	300c90fa 	slli	r6,r6,3
  806608:	91c07526 	beq	r18,r7,8067e0 <__adddf3+0x23c>
  80660c:	8087c83a 	sub	r3,r16,r2
  806610:	00c0ab0e 	bge	zero,r3,8068c0 <__adddf3+0x31c>
  806614:	10002a1e 	bne	r2,zero,8066c0 <__adddf3+0x11c>
  806618:	4984b03a 	or	r2,r9,r6
  80661c:	1000961e 	bne	r2,zero,806878 <__adddf3+0x2d4>
  806620:	888001cc 	andi	r2,r17,7
  806624:	10000726 	beq	r2,zero,806644 <__adddf3+0xa0>
  806628:	888003cc 	andi	r2,r17,15
  80662c:	00c00104 	movi	r3,4
  806630:	10c00426 	beq	r2,r3,806644 <__adddf3+0xa0>
  806634:	88c7883a 	add	r3,r17,r3
  806638:	1c63803a 	cmpltu	r17,r3,r17
  80663c:	4451883a 	add	r8,r8,r17
  806640:	1823883a 	mov	r17,r3
  806644:	4080202c 	andhi	r2,r8,128
  806648:	10005926 	beq	r2,zero,8067b0 <__adddf3+0x20c>
  80664c:	84000044 	addi	r16,r16,1
  806650:	0081ffc4 	movi	r2,2047
  806654:	8080ba26 	beq	r16,r2,806940 <__adddf3+0x39c>
  806658:	00bfe034 	movhi	r2,65408
  80665c:	10bfffc4 	addi	r2,r2,-1
  806660:	4090703a 	and	r8,r8,r2
  806664:	4004977a 	slli	r2,r8,29
  806668:	4010927a 	slli	r8,r8,9
  80666c:	8822d0fa 	srli	r17,r17,3
  806670:	8401ffcc 	andi	r16,r16,2047
  806674:	4010d33a 	srli	r8,r8,12
  806678:	9007883a 	mov	r3,r18
  80667c:	1444b03a 	or	r2,r2,r17
  806680:	8401ffcc 	andi	r16,r16,2047
  806684:	8020953a 	slli	r16,r16,20
  806688:	18c03fcc 	andi	r3,r3,255
  80668c:	01000434 	movhi	r4,16
  806690:	213fffc4 	addi	r4,r4,-1
  806694:	180697fa 	slli	r3,r3,31
  806698:	4110703a 	and	r8,r8,r4
  80669c:	4410b03a 	or	r8,r8,r16
  8066a0:	40c6b03a 	or	r3,r8,r3
  8066a4:	dfc00417 	ldw	ra,16(sp)
  8066a8:	dcc00317 	ldw	r19,12(sp)
  8066ac:	dc800217 	ldw	r18,8(sp)
  8066b0:	dc400117 	ldw	r17,4(sp)
  8066b4:	dc000017 	ldw	r16,0(sp)
  8066b8:	dec00504 	addi	sp,sp,20
  8066bc:	f800283a 	ret
  8066c0:	0081ffc4 	movi	r2,2047
  8066c4:	80bfd626 	beq	r16,r2,806620 <__alt_mem_onchip_mem+0xff7fe620>
  8066c8:	4a402034 	orhi	r9,r9,128
  8066cc:	00800e04 	movi	r2,56
  8066d0:	10c09f16 	blt	r2,r3,806950 <__adddf3+0x3ac>
  8066d4:	008007c4 	movi	r2,31
  8066d8:	10c0c216 	blt	r2,r3,8069e4 <__adddf3+0x440>
  8066dc:	00800804 	movi	r2,32
  8066e0:	10c5c83a 	sub	r2,r2,r3
  8066e4:	488a983a 	sll	r5,r9,r2
  8066e8:	30c8d83a 	srl	r4,r6,r3
  8066ec:	3084983a 	sll	r2,r6,r2
  8066f0:	48c6d83a 	srl	r3,r9,r3
  8066f4:	290cb03a 	or	r6,r5,r4
  8066f8:	1004c03a 	cmpne	r2,r2,zero
  8066fc:	308cb03a 	or	r6,r6,r2
  806700:	898dc83a 	sub	r6,r17,r6
  806704:	89a3803a 	cmpltu	r17,r17,r6
  806708:	40d1c83a 	sub	r8,r8,r3
  80670c:	4451c83a 	sub	r8,r8,r17
  806710:	3023883a 	mov	r17,r6
  806714:	4080202c 	andhi	r2,r8,128
  806718:	10002326 	beq	r2,zero,8067a8 <__adddf3+0x204>
  80671c:	04c02034 	movhi	r19,128
  806720:	9cffffc4 	addi	r19,r19,-1
  806724:	44e6703a 	and	r19,r8,r19
  806728:	98007626 	beq	r19,zero,806904 <__adddf3+0x360>
  80672c:	9809883a 	mov	r4,r19
  806730:	080791c0 	call	80791c <__clzsi2>
  806734:	10fffe04 	addi	r3,r2,-8
  806738:	010007c4 	movi	r4,31
  80673c:	20c07716 	blt	r4,r3,80691c <__adddf3+0x378>
  806740:	00800804 	movi	r2,32
  806744:	10c5c83a 	sub	r2,r2,r3
  806748:	8884d83a 	srl	r2,r17,r2
  80674c:	98d0983a 	sll	r8,r19,r3
  806750:	88e2983a 	sll	r17,r17,r3
  806754:	1204b03a 	or	r2,r2,r8
  806758:	1c007416 	blt	r3,r16,80692c <__adddf3+0x388>
  80675c:	1c21c83a 	sub	r16,r3,r16
  806760:	82000044 	addi	r8,r16,1
  806764:	00c007c4 	movi	r3,31
  806768:	1a009116 	blt	r3,r8,8069b0 <__adddf3+0x40c>
  80676c:	00c00804 	movi	r3,32
  806770:	1a07c83a 	sub	r3,r3,r8
  806774:	8a08d83a 	srl	r4,r17,r8
  806778:	88e2983a 	sll	r17,r17,r3
  80677c:	10c6983a 	sll	r3,r2,r3
  806780:	1210d83a 	srl	r8,r2,r8
  806784:	8804c03a 	cmpne	r2,r17,zero
  806788:	1906b03a 	or	r3,r3,r4
  80678c:	18a2b03a 	or	r17,r3,r2
  806790:	0021883a 	mov	r16,zero
  806794:	003fa206 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806798:	1890b03a 	or	r8,r3,r2
  80679c:	40017d26 	beq	r8,zero,806d94 <__adddf3+0x7f0>
  8067a0:	1011883a 	mov	r8,r2
  8067a4:	1823883a 	mov	r17,r3
  8067a8:	888001cc 	andi	r2,r17,7
  8067ac:	103f9e1e 	bne	r2,zero,806628 <__alt_mem_onchip_mem+0xff7fe628>
  8067b0:	4004977a 	slli	r2,r8,29
  8067b4:	8822d0fa 	srli	r17,r17,3
  8067b8:	4010d0fa 	srli	r8,r8,3
  8067bc:	9007883a 	mov	r3,r18
  8067c0:	1444b03a 	or	r2,r2,r17
  8067c4:	0101ffc4 	movi	r4,2047
  8067c8:	81002426 	beq	r16,r4,80685c <__adddf3+0x2b8>
  8067cc:	8120703a 	and	r16,r16,r4
  8067d0:	01000434 	movhi	r4,16
  8067d4:	213fffc4 	addi	r4,r4,-1
  8067d8:	4110703a 	and	r8,r8,r4
  8067dc:	003fa806 	br	806680 <__alt_mem_onchip_mem+0xff7fe680>
  8067e0:	8089c83a 	sub	r4,r16,r2
  8067e4:	01005e0e 	bge	zero,r4,806960 <__adddf3+0x3bc>
  8067e8:	10002b26 	beq	r2,zero,806898 <__adddf3+0x2f4>
  8067ec:	0081ffc4 	movi	r2,2047
  8067f0:	80bf8b26 	beq	r16,r2,806620 <__alt_mem_onchip_mem+0xff7fe620>
  8067f4:	4a402034 	orhi	r9,r9,128
  8067f8:	00800e04 	movi	r2,56
  8067fc:	1100a40e 	bge	r2,r4,806a90 <__adddf3+0x4ec>
  806800:	498cb03a 	or	r6,r9,r6
  806804:	300ac03a 	cmpne	r5,r6,zero
  806808:	0013883a 	mov	r9,zero
  80680c:	2c4b883a 	add	r5,r5,r17
  806810:	2c63803a 	cmpltu	r17,r5,r17
  806814:	4a11883a 	add	r8,r9,r8
  806818:	8a11883a 	add	r8,r17,r8
  80681c:	2823883a 	mov	r17,r5
  806820:	4080202c 	andhi	r2,r8,128
  806824:	103fe026 	beq	r2,zero,8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>
  806828:	84000044 	addi	r16,r16,1
  80682c:	0081ffc4 	movi	r2,2047
  806830:	8080d226 	beq	r16,r2,806b7c <__adddf3+0x5d8>
  806834:	00bfe034 	movhi	r2,65408
  806838:	10bfffc4 	addi	r2,r2,-1
  80683c:	4090703a 	and	r8,r8,r2
  806840:	880ad07a 	srli	r5,r17,1
  806844:	400897fa 	slli	r4,r8,31
  806848:	88c0004c 	andi	r3,r17,1
  80684c:	28e2b03a 	or	r17,r5,r3
  806850:	4010d07a 	srli	r8,r8,1
  806854:	2462b03a 	or	r17,r4,r17
  806858:	003f7106 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  80685c:	4088b03a 	or	r4,r8,r2
  806860:	20014526 	beq	r4,zero,806d78 <__adddf3+0x7d4>
  806864:	01000434 	movhi	r4,16
  806868:	42000234 	orhi	r8,r8,8
  80686c:	213fffc4 	addi	r4,r4,-1
  806870:	4110703a 	and	r8,r8,r4
  806874:	003f8206 	br	806680 <__alt_mem_onchip_mem+0xff7fe680>
  806878:	18ffffc4 	addi	r3,r3,-1
  80687c:	1800491e 	bne	r3,zero,8069a4 <__adddf3+0x400>
  806880:	898bc83a 	sub	r5,r17,r6
  806884:	8963803a 	cmpltu	r17,r17,r5
  806888:	4251c83a 	sub	r8,r8,r9
  80688c:	4451c83a 	sub	r8,r8,r17
  806890:	2823883a 	mov	r17,r5
  806894:	003f9f06 	br	806714 <__alt_mem_onchip_mem+0xff7fe714>
  806898:	4984b03a 	or	r2,r9,r6
  80689c:	103f6026 	beq	r2,zero,806620 <__alt_mem_onchip_mem+0xff7fe620>
  8068a0:	213fffc4 	addi	r4,r4,-1
  8068a4:	2000931e 	bne	r4,zero,806af4 <__adddf3+0x550>
  8068a8:	898d883a 	add	r6,r17,r6
  8068ac:	3463803a 	cmpltu	r17,r6,r17
  8068b0:	4251883a 	add	r8,r8,r9
  8068b4:	8a11883a 	add	r8,r17,r8
  8068b8:	3023883a 	mov	r17,r6
  8068bc:	003fd806 	br	806820 <__alt_mem_onchip_mem+0xff7fe820>
  8068c0:	1800541e 	bne	r3,zero,806a14 <__adddf3+0x470>
  8068c4:	80800044 	addi	r2,r16,1
  8068c8:	1081ffcc 	andi	r2,r2,2047
  8068cc:	00c00044 	movi	r3,1
  8068d0:	1880a00e 	bge	r3,r2,806b54 <__adddf3+0x5b0>
  8068d4:	8989c83a 	sub	r4,r17,r6
  8068d8:	8905803a 	cmpltu	r2,r17,r4
  8068dc:	4267c83a 	sub	r19,r8,r9
  8068e0:	98a7c83a 	sub	r19,r19,r2
  8068e4:	9880202c 	andhi	r2,r19,128
  8068e8:	10006326 	beq	r2,zero,806a78 <__adddf3+0x4d4>
  8068ec:	3463c83a 	sub	r17,r6,r17
  8068f0:	4a07c83a 	sub	r3,r9,r8
  8068f4:	344d803a 	cmpltu	r6,r6,r17
  8068f8:	19a7c83a 	sub	r19,r3,r6
  8068fc:	3825883a 	mov	r18,r7
  806900:	983f8a1e 	bne	r19,zero,80672c <__alt_mem_onchip_mem+0xff7fe72c>
  806904:	8809883a 	mov	r4,r17
  806908:	080791c0 	call	80791c <__clzsi2>
  80690c:	10800804 	addi	r2,r2,32
  806910:	10fffe04 	addi	r3,r2,-8
  806914:	010007c4 	movi	r4,31
  806918:	20ff890e 	bge	r4,r3,806740 <__alt_mem_onchip_mem+0xff7fe740>
  80691c:	10bff604 	addi	r2,r2,-40
  806920:	8884983a 	sll	r2,r17,r2
  806924:	0023883a 	mov	r17,zero
  806928:	1c3f8c0e 	bge	r3,r16,80675c <__alt_mem_onchip_mem+0xff7fe75c>
  80692c:	023fe034 	movhi	r8,65408
  806930:	423fffc4 	addi	r8,r8,-1
  806934:	80e1c83a 	sub	r16,r16,r3
  806938:	1210703a 	and	r8,r2,r8
  80693c:	003f3806 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806940:	9007883a 	mov	r3,r18
  806944:	0011883a 	mov	r8,zero
  806948:	0005883a 	mov	r2,zero
  80694c:	003f4c06 	br	806680 <__alt_mem_onchip_mem+0xff7fe680>
  806950:	498cb03a 	or	r6,r9,r6
  806954:	300cc03a 	cmpne	r6,r6,zero
  806958:	0007883a 	mov	r3,zero
  80695c:	003f6806 	br	806700 <__alt_mem_onchip_mem+0xff7fe700>
  806960:	20009c1e 	bne	r4,zero,806bd4 <__adddf3+0x630>
  806964:	80800044 	addi	r2,r16,1
  806968:	1141ffcc 	andi	r5,r2,2047
  80696c:	01000044 	movi	r4,1
  806970:	2140670e 	bge	r4,r5,806b10 <__adddf3+0x56c>
  806974:	0101ffc4 	movi	r4,2047
  806978:	11007f26 	beq	r2,r4,806b78 <__adddf3+0x5d4>
  80697c:	898d883a 	add	r6,r17,r6
  806980:	4247883a 	add	r3,r8,r9
  806984:	3451803a 	cmpltu	r8,r6,r17
  806988:	40d1883a 	add	r8,r8,r3
  80698c:	402297fa 	slli	r17,r8,31
  806990:	300cd07a 	srli	r6,r6,1
  806994:	4010d07a 	srli	r8,r8,1
  806998:	1021883a 	mov	r16,r2
  80699c:	89a2b03a 	or	r17,r17,r6
  8069a0:	003f1f06 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  8069a4:	0081ffc4 	movi	r2,2047
  8069a8:	80bf481e 	bne	r16,r2,8066cc <__alt_mem_onchip_mem+0xff7fe6cc>
  8069ac:	003f1c06 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  8069b0:	843ff844 	addi	r16,r16,-31
  8069b4:	01000804 	movi	r4,32
  8069b8:	1406d83a 	srl	r3,r2,r16
  8069bc:	41005026 	beq	r8,r4,806b00 <__adddf3+0x55c>
  8069c0:	01001004 	movi	r4,64
  8069c4:	2211c83a 	sub	r8,r4,r8
  8069c8:	1204983a 	sll	r2,r2,r8
  8069cc:	88a2b03a 	or	r17,r17,r2
  8069d0:	8822c03a 	cmpne	r17,r17,zero
  8069d4:	1c62b03a 	or	r17,r3,r17
  8069d8:	0011883a 	mov	r8,zero
  8069dc:	0021883a 	mov	r16,zero
  8069e0:	003f7106 	br	8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>
  8069e4:	193ff804 	addi	r4,r3,-32
  8069e8:	00800804 	movi	r2,32
  8069ec:	4908d83a 	srl	r4,r9,r4
  8069f0:	18804526 	beq	r3,r2,806b08 <__adddf3+0x564>
  8069f4:	00801004 	movi	r2,64
  8069f8:	10c5c83a 	sub	r2,r2,r3
  8069fc:	4886983a 	sll	r3,r9,r2
  806a00:	198cb03a 	or	r6,r3,r6
  806a04:	300cc03a 	cmpne	r6,r6,zero
  806a08:	218cb03a 	or	r6,r4,r6
  806a0c:	0007883a 	mov	r3,zero
  806a10:	003f3b06 	br	806700 <__alt_mem_onchip_mem+0xff7fe700>
  806a14:	80002a26 	beq	r16,zero,806ac0 <__adddf3+0x51c>
  806a18:	0101ffc4 	movi	r4,2047
  806a1c:	11006826 	beq	r2,r4,806bc0 <__adddf3+0x61c>
  806a20:	00c7c83a 	sub	r3,zero,r3
  806a24:	42002034 	orhi	r8,r8,128
  806a28:	01000e04 	movi	r4,56
  806a2c:	20c07c16 	blt	r4,r3,806c20 <__adddf3+0x67c>
  806a30:	010007c4 	movi	r4,31
  806a34:	20c0da16 	blt	r4,r3,806da0 <__adddf3+0x7fc>
  806a38:	01000804 	movi	r4,32
  806a3c:	20c9c83a 	sub	r4,r4,r3
  806a40:	4114983a 	sll	r10,r8,r4
  806a44:	88cad83a 	srl	r5,r17,r3
  806a48:	8908983a 	sll	r4,r17,r4
  806a4c:	40c6d83a 	srl	r3,r8,r3
  806a50:	5162b03a 	or	r17,r10,r5
  806a54:	2008c03a 	cmpne	r4,r4,zero
  806a58:	8922b03a 	or	r17,r17,r4
  806a5c:	3463c83a 	sub	r17,r6,r17
  806a60:	48c7c83a 	sub	r3,r9,r3
  806a64:	344d803a 	cmpltu	r6,r6,r17
  806a68:	1991c83a 	sub	r8,r3,r6
  806a6c:	1021883a 	mov	r16,r2
  806a70:	3825883a 	mov	r18,r7
  806a74:	003f2706 	br	806714 <__alt_mem_onchip_mem+0xff7fe714>
  806a78:	24d0b03a 	or	r8,r4,r19
  806a7c:	40001b1e 	bne	r8,zero,806aec <__adddf3+0x548>
  806a80:	0005883a 	mov	r2,zero
  806a84:	0007883a 	mov	r3,zero
  806a88:	0021883a 	mov	r16,zero
  806a8c:	003f4d06 	br	8067c4 <__alt_mem_onchip_mem+0xff7fe7c4>
  806a90:	008007c4 	movi	r2,31
  806a94:	11003c16 	blt	r2,r4,806b88 <__adddf3+0x5e4>
  806a98:	00800804 	movi	r2,32
  806a9c:	1105c83a 	sub	r2,r2,r4
  806aa0:	488e983a 	sll	r7,r9,r2
  806aa4:	310ad83a 	srl	r5,r6,r4
  806aa8:	3084983a 	sll	r2,r6,r2
  806aac:	4912d83a 	srl	r9,r9,r4
  806ab0:	394ab03a 	or	r5,r7,r5
  806ab4:	1004c03a 	cmpne	r2,r2,zero
  806ab8:	288ab03a 	or	r5,r5,r2
  806abc:	003f5306 	br	80680c <__alt_mem_onchip_mem+0xff7fe80c>
  806ac0:	4448b03a 	or	r4,r8,r17
  806ac4:	20003e26 	beq	r4,zero,806bc0 <__adddf3+0x61c>
  806ac8:	00c6303a 	nor	r3,zero,r3
  806acc:	18003a1e 	bne	r3,zero,806bb8 <__adddf3+0x614>
  806ad0:	3463c83a 	sub	r17,r6,r17
  806ad4:	4a07c83a 	sub	r3,r9,r8
  806ad8:	344d803a 	cmpltu	r6,r6,r17
  806adc:	1991c83a 	sub	r8,r3,r6
  806ae0:	1021883a 	mov	r16,r2
  806ae4:	3825883a 	mov	r18,r7
  806ae8:	003f0a06 	br	806714 <__alt_mem_onchip_mem+0xff7fe714>
  806aec:	2023883a 	mov	r17,r4
  806af0:	003f0d06 	br	806728 <__alt_mem_onchip_mem+0xff7fe728>
  806af4:	0081ffc4 	movi	r2,2047
  806af8:	80bf3f1e 	bne	r16,r2,8067f8 <__alt_mem_onchip_mem+0xff7fe7f8>
  806afc:	003ec806 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806b00:	0005883a 	mov	r2,zero
  806b04:	003fb106 	br	8069cc <__alt_mem_onchip_mem+0xff7fe9cc>
  806b08:	0007883a 	mov	r3,zero
  806b0c:	003fbc06 	br	806a00 <__alt_mem_onchip_mem+0xff7fea00>
  806b10:	4444b03a 	or	r2,r8,r17
  806b14:	8000871e 	bne	r16,zero,806d34 <__adddf3+0x790>
  806b18:	1000ba26 	beq	r2,zero,806e04 <__adddf3+0x860>
  806b1c:	4984b03a 	or	r2,r9,r6
  806b20:	103ebf26 	beq	r2,zero,806620 <__alt_mem_onchip_mem+0xff7fe620>
  806b24:	8985883a 	add	r2,r17,r6
  806b28:	4247883a 	add	r3,r8,r9
  806b2c:	1451803a 	cmpltu	r8,r2,r17
  806b30:	40d1883a 	add	r8,r8,r3
  806b34:	40c0202c 	andhi	r3,r8,128
  806b38:	1023883a 	mov	r17,r2
  806b3c:	183f1a26 	beq	r3,zero,8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>
  806b40:	00bfe034 	movhi	r2,65408
  806b44:	10bfffc4 	addi	r2,r2,-1
  806b48:	2021883a 	mov	r16,r4
  806b4c:	4090703a 	and	r8,r8,r2
  806b50:	003eb306 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806b54:	4444b03a 	or	r2,r8,r17
  806b58:	8000291e 	bne	r16,zero,806c00 <__adddf3+0x65c>
  806b5c:	10004b1e 	bne	r2,zero,806c8c <__adddf3+0x6e8>
  806b60:	4990b03a 	or	r8,r9,r6
  806b64:	40008b26 	beq	r8,zero,806d94 <__adddf3+0x7f0>
  806b68:	4811883a 	mov	r8,r9
  806b6c:	3023883a 	mov	r17,r6
  806b70:	3825883a 	mov	r18,r7
  806b74:	003eaa06 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806b78:	1021883a 	mov	r16,r2
  806b7c:	0011883a 	mov	r8,zero
  806b80:	0005883a 	mov	r2,zero
  806b84:	003f0f06 	br	8067c4 <__alt_mem_onchip_mem+0xff7fe7c4>
  806b88:	217ff804 	addi	r5,r4,-32
  806b8c:	00800804 	movi	r2,32
  806b90:	494ad83a 	srl	r5,r9,r5
  806b94:	20807d26 	beq	r4,r2,806d8c <__adddf3+0x7e8>
  806b98:	00801004 	movi	r2,64
  806b9c:	1109c83a 	sub	r4,r2,r4
  806ba0:	4912983a 	sll	r9,r9,r4
  806ba4:	498cb03a 	or	r6,r9,r6
  806ba8:	300cc03a 	cmpne	r6,r6,zero
  806bac:	298ab03a 	or	r5,r5,r6
  806bb0:	0013883a 	mov	r9,zero
  806bb4:	003f1506 	br	80680c <__alt_mem_onchip_mem+0xff7fe80c>
  806bb8:	0101ffc4 	movi	r4,2047
  806bbc:	113f9a1e 	bne	r2,r4,806a28 <__alt_mem_onchip_mem+0xff7fea28>
  806bc0:	4811883a 	mov	r8,r9
  806bc4:	3023883a 	mov	r17,r6
  806bc8:	1021883a 	mov	r16,r2
  806bcc:	3825883a 	mov	r18,r7
  806bd0:	003e9306 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806bd4:	8000161e 	bne	r16,zero,806c30 <__adddf3+0x68c>
  806bd8:	444ab03a 	or	r5,r8,r17
  806bdc:	28005126 	beq	r5,zero,806d24 <__adddf3+0x780>
  806be0:	0108303a 	nor	r4,zero,r4
  806be4:	20004d1e 	bne	r4,zero,806d1c <__adddf3+0x778>
  806be8:	89a3883a 	add	r17,r17,r6
  806bec:	4253883a 	add	r9,r8,r9
  806bf0:	898d803a 	cmpltu	r6,r17,r6
  806bf4:	3251883a 	add	r8,r6,r9
  806bf8:	1021883a 	mov	r16,r2
  806bfc:	003f0806 	br	806820 <__alt_mem_onchip_mem+0xff7fe820>
  806c00:	1000301e 	bne	r2,zero,806cc4 <__adddf3+0x720>
  806c04:	4984b03a 	or	r2,r9,r6
  806c08:	10007126 	beq	r2,zero,806dd0 <__adddf3+0x82c>
  806c0c:	4811883a 	mov	r8,r9
  806c10:	3023883a 	mov	r17,r6
  806c14:	3825883a 	mov	r18,r7
  806c18:	0401ffc4 	movi	r16,2047
  806c1c:	003e8006 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806c20:	4462b03a 	or	r17,r8,r17
  806c24:	8822c03a 	cmpne	r17,r17,zero
  806c28:	0007883a 	mov	r3,zero
  806c2c:	003f8b06 	br	806a5c <__alt_mem_onchip_mem+0xff7fea5c>
  806c30:	0141ffc4 	movi	r5,2047
  806c34:	11403b26 	beq	r2,r5,806d24 <__adddf3+0x780>
  806c38:	0109c83a 	sub	r4,zero,r4
  806c3c:	42002034 	orhi	r8,r8,128
  806c40:	01400e04 	movi	r5,56
  806c44:	29006716 	blt	r5,r4,806de4 <__adddf3+0x840>
  806c48:	014007c4 	movi	r5,31
  806c4c:	29007016 	blt	r5,r4,806e10 <__adddf3+0x86c>
  806c50:	01400804 	movi	r5,32
  806c54:	290bc83a 	sub	r5,r5,r4
  806c58:	4154983a 	sll	r10,r8,r5
  806c5c:	890ed83a 	srl	r7,r17,r4
  806c60:	894a983a 	sll	r5,r17,r5
  806c64:	4108d83a 	srl	r4,r8,r4
  806c68:	51e2b03a 	or	r17,r10,r7
  806c6c:	280ac03a 	cmpne	r5,r5,zero
  806c70:	8962b03a 	or	r17,r17,r5
  806c74:	89a3883a 	add	r17,r17,r6
  806c78:	2253883a 	add	r9,r4,r9
  806c7c:	898d803a 	cmpltu	r6,r17,r6
  806c80:	3251883a 	add	r8,r6,r9
  806c84:	1021883a 	mov	r16,r2
  806c88:	003ee506 	br	806820 <__alt_mem_onchip_mem+0xff7fe820>
  806c8c:	4984b03a 	or	r2,r9,r6
  806c90:	103e6326 	beq	r2,zero,806620 <__alt_mem_onchip_mem+0xff7fe620>
  806c94:	8987c83a 	sub	r3,r17,r6
  806c98:	88c9803a 	cmpltu	r4,r17,r3
  806c9c:	4245c83a 	sub	r2,r8,r9
  806ca0:	1105c83a 	sub	r2,r2,r4
  806ca4:	1100202c 	andhi	r4,r2,128
  806ca8:	203ebb26 	beq	r4,zero,806798 <__alt_mem_onchip_mem+0xff7fe798>
  806cac:	3463c83a 	sub	r17,r6,r17
  806cb0:	4a07c83a 	sub	r3,r9,r8
  806cb4:	344d803a 	cmpltu	r6,r6,r17
  806cb8:	1991c83a 	sub	r8,r3,r6
  806cbc:	3825883a 	mov	r18,r7
  806cc0:	003e5706 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806cc4:	4984b03a 	or	r2,r9,r6
  806cc8:	10002e26 	beq	r2,zero,806d84 <__adddf3+0x7e0>
  806ccc:	4004d0fa 	srli	r2,r8,3
  806cd0:	8822d0fa 	srli	r17,r17,3
  806cd4:	4010977a 	slli	r8,r8,29
  806cd8:	10c0022c 	andhi	r3,r2,8
  806cdc:	4462b03a 	or	r17,r8,r17
  806ce0:	18000826 	beq	r3,zero,806d04 <__adddf3+0x760>
  806ce4:	4808d0fa 	srli	r4,r9,3
  806ce8:	20c0022c 	andhi	r3,r4,8
  806cec:	1800051e 	bne	r3,zero,806d04 <__adddf3+0x760>
  806cf0:	300cd0fa 	srli	r6,r6,3
  806cf4:	4806977a 	slli	r3,r9,29
  806cf8:	2005883a 	mov	r2,r4
  806cfc:	3825883a 	mov	r18,r7
  806d00:	19a2b03a 	or	r17,r3,r6
  806d04:	8810d77a 	srli	r8,r17,29
  806d08:	100490fa 	slli	r2,r2,3
  806d0c:	882290fa 	slli	r17,r17,3
  806d10:	0401ffc4 	movi	r16,2047
  806d14:	4090b03a 	or	r8,r8,r2
  806d18:	003e4106 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806d1c:	0141ffc4 	movi	r5,2047
  806d20:	117fc71e 	bne	r2,r5,806c40 <__alt_mem_onchip_mem+0xff7fec40>
  806d24:	4811883a 	mov	r8,r9
  806d28:	3023883a 	mov	r17,r6
  806d2c:	1021883a 	mov	r16,r2
  806d30:	003e3b06 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806d34:	10002f26 	beq	r2,zero,806df4 <__adddf3+0x850>
  806d38:	4984b03a 	or	r2,r9,r6
  806d3c:	10001126 	beq	r2,zero,806d84 <__adddf3+0x7e0>
  806d40:	4004d0fa 	srli	r2,r8,3
  806d44:	8822d0fa 	srli	r17,r17,3
  806d48:	4010977a 	slli	r8,r8,29
  806d4c:	10c0022c 	andhi	r3,r2,8
  806d50:	4462b03a 	or	r17,r8,r17
  806d54:	183feb26 	beq	r3,zero,806d04 <__alt_mem_onchip_mem+0xff7fed04>
  806d58:	4808d0fa 	srli	r4,r9,3
  806d5c:	20c0022c 	andhi	r3,r4,8
  806d60:	183fe81e 	bne	r3,zero,806d04 <__alt_mem_onchip_mem+0xff7fed04>
  806d64:	300cd0fa 	srli	r6,r6,3
  806d68:	4806977a 	slli	r3,r9,29
  806d6c:	2005883a 	mov	r2,r4
  806d70:	19a2b03a 	or	r17,r3,r6
  806d74:	003fe306 	br	806d04 <__alt_mem_onchip_mem+0xff7fed04>
  806d78:	0011883a 	mov	r8,zero
  806d7c:	0005883a 	mov	r2,zero
  806d80:	003e3f06 	br	806680 <__alt_mem_onchip_mem+0xff7fe680>
  806d84:	0401ffc4 	movi	r16,2047
  806d88:	003e2506 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806d8c:	0013883a 	mov	r9,zero
  806d90:	003f8406 	br	806ba4 <__alt_mem_onchip_mem+0xff7feba4>
  806d94:	0005883a 	mov	r2,zero
  806d98:	0007883a 	mov	r3,zero
  806d9c:	003e8906 	br	8067c4 <__alt_mem_onchip_mem+0xff7fe7c4>
  806da0:	197ff804 	addi	r5,r3,-32
  806da4:	01000804 	movi	r4,32
  806da8:	414ad83a 	srl	r5,r8,r5
  806dac:	19002426 	beq	r3,r4,806e40 <__adddf3+0x89c>
  806db0:	01001004 	movi	r4,64
  806db4:	20c7c83a 	sub	r3,r4,r3
  806db8:	40c6983a 	sll	r3,r8,r3
  806dbc:	1c46b03a 	or	r3,r3,r17
  806dc0:	1806c03a 	cmpne	r3,r3,zero
  806dc4:	28e2b03a 	or	r17,r5,r3
  806dc8:	0007883a 	mov	r3,zero
  806dcc:	003f2306 	br	806a5c <__alt_mem_onchip_mem+0xff7fea5c>
  806dd0:	0007883a 	mov	r3,zero
  806dd4:	5811883a 	mov	r8,r11
  806dd8:	00bfffc4 	movi	r2,-1
  806ddc:	0401ffc4 	movi	r16,2047
  806de0:	003e7806 	br	8067c4 <__alt_mem_onchip_mem+0xff7fe7c4>
  806de4:	4462b03a 	or	r17,r8,r17
  806de8:	8822c03a 	cmpne	r17,r17,zero
  806dec:	0009883a 	mov	r4,zero
  806df0:	003fa006 	br	806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806df4:	4811883a 	mov	r8,r9
  806df8:	3023883a 	mov	r17,r6
  806dfc:	0401ffc4 	movi	r16,2047
  806e00:	003e0706 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806e04:	4811883a 	mov	r8,r9
  806e08:	3023883a 	mov	r17,r6
  806e0c:	003e0406 	br	806620 <__alt_mem_onchip_mem+0xff7fe620>
  806e10:	21fff804 	addi	r7,r4,-32
  806e14:	01400804 	movi	r5,32
  806e18:	41ced83a 	srl	r7,r8,r7
  806e1c:	21400a26 	beq	r4,r5,806e48 <__adddf3+0x8a4>
  806e20:	01401004 	movi	r5,64
  806e24:	2909c83a 	sub	r4,r5,r4
  806e28:	4108983a 	sll	r4,r8,r4
  806e2c:	2448b03a 	or	r4,r4,r17
  806e30:	2008c03a 	cmpne	r4,r4,zero
  806e34:	3922b03a 	or	r17,r7,r4
  806e38:	0009883a 	mov	r4,zero
  806e3c:	003f8d06 	br	806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806e40:	0007883a 	mov	r3,zero
  806e44:	003fdd06 	br	806dbc <__alt_mem_onchip_mem+0xff7fedbc>
  806e48:	0009883a 	mov	r4,zero
  806e4c:	003ff706 	br	806e2c <__alt_mem_onchip_mem+0xff7fee2c>

00806e50 <__gedf2>:
  806e50:	2804d53a 	srli	r2,r5,20
  806e54:	3806d53a 	srli	r3,r7,20
  806e58:	02000434 	movhi	r8,16
  806e5c:	423fffc4 	addi	r8,r8,-1
  806e60:	1081ffcc 	andi	r2,r2,2047
  806e64:	0241ffc4 	movi	r9,2047
  806e68:	2a14703a 	and	r10,r5,r8
  806e6c:	18c1ffcc 	andi	r3,r3,2047
  806e70:	3a10703a 	and	r8,r7,r8
  806e74:	280ad7fa 	srli	r5,r5,31
  806e78:	380ed7fa 	srli	r7,r7,31
  806e7c:	12401d26 	beq	r2,r9,806ef4 <__gedf2+0xa4>
  806e80:	0241ffc4 	movi	r9,2047
  806e84:	1a401226 	beq	r3,r9,806ed0 <__gedf2+0x80>
  806e88:	1000081e 	bne	r2,zero,806eac <__gedf2+0x5c>
  806e8c:	2296b03a 	or	r11,r4,r10
  806e90:	5813003a 	cmpeq	r9,r11,zero
  806e94:	1800091e 	bne	r3,zero,806ebc <__gedf2+0x6c>
  806e98:	3218b03a 	or	r12,r6,r8
  806e9c:	6000071e 	bne	r12,zero,806ebc <__gedf2+0x6c>
  806ea0:	0005883a 	mov	r2,zero
  806ea4:	5800101e 	bne	r11,zero,806ee8 <__gedf2+0x98>
  806ea8:	f800283a 	ret
  806eac:	18000c1e 	bne	r3,zero,806ee0 <__gedf2+0x90>
  806eb0:	3212b03a 	or	r9,r6,r8
  806eb4:	48000c26 	beq	r9,zero,806ee8 <__gedf2+0x98>
  806eb8:	0013883a 	mov	r9,zero
  806ebc:	39c03fcc 	andi	r7,r7,255
  806ec0:	48000826 	beq	r9,zero,806ee4 <__gedf2+0x94>
  806ec4:	38000926 	beq	r7,zero,806eec <__gedf2+0x9c>
  806ec8:	00800044 	movi	r2,1
  806ecc:	f800283a 	ret
  806ed0:	3212b03a 	or	r9,r6,r8
  806ed4:	483fec26 	beq	r9,zero,806e88 <__alt_mem_onchip_mem+0xff7fee88>
  806ed8:	00bfff84 	movi	r2,-2
  806edc:	f800283a 	ret
  806ee0:	39c03fcc 	andi	r7,r7,255
  806ee4:	29c00626 	beq	r5,r7,806f00 <__gedf2+0xb0>
  806ee8:	283ff726 	beq	r5,zero,806ec8 <__alt_mem_onchip_mem+0xff7feec8>
  806eec:	00bfffc4 	movi	r2,-1
  806ef0:	f800283a 	ret
  806ef4:	2292b03a 	or	r9,r4,r10
  806ef8:	483fe126 	beq	r9,zero,806e80 <__alt_mem_onchip_mem+0xff7fee80>
  806efc:	003ff606 	br	806ed8 <__alt_mem_onchip_mem+0xff7feed8>
  806f00:	18bff916 	blt	r3,r2,806ee8 <__alt_mem_onchip_mem+0xff7feee8>
  806f04:	10c00316 	blt	r2,r3,806f14 <__gedf2+0xc4>
  806f08:	42bff736 	bltu	r8,r10,806ee8 <__alt_mem_onchip_mem+0xff7feee8>
  806f0c:	52000326 	beq	r10,r8,806f1c <__gedf2+0xcc>
  806f10:	5200042e 	bgeu	r10,r8,806f24 <__gedf2+0xd4>
  806f14:	283fec1e 	bne	r5,zero,806ec8 <__alt_mem_onchip_mem+0xff7feec8>
  806f18:	003ff406 	br	806eec <__alt_mem_onchip_mem+0xff7feeec>
  806f1c:	313ff236 	bltu	r6,r4,806ee8 <__alt_mem_onchip_mem+0xff7feee8>
  806f20:	21bffc36 	bltu	r4,r6,806f14 <__alt_mem_onchip_mem+0xff7fef14>
  806f24:	0005883a 	mov	r2,zero
  806f28:	f800283a 	ret

00806f2c <__ledf2>:
  806f2c:	2804d53a 	srli	r2,r5,20
  806f30:	3810d53a 	srli	r8,r7,20
  806f34:	00c00434 	movhi	r3,16
  806f38:	18ffffc4 	addi	r3,r3,-1
  806f3c:	1081ffcc 	andi	r2,r2,2047
  806f40:	0241ffc4 	movi	r9,2047
  806f44:	28d4703a 	and	r10,r5,r3
  806f48:	4201ffcc 	andi	r8,r8,2047
  806f4c:	38c6703a 	and	r3,r7,r3
  806f50:	280ad7fa 	srli	r5,r5,31
  806f54:	380ed7fa 	srli	r7,r7,31
  806f58:	12401f26 	beq	r2,r9,806fd8 <__ledf2+0xac>
  806f5c:	0241ffc4 	movi	r9,2047
  806f60:	42401426 	beq	r8,r9,806fb4 <__ledf2+0x88>
  806f64:	1000091e 	bne	r2,zero,806f8c <__ledf2+0x60>
  806f68:	2296b03a 	or	r11,r4,r10
  806f6c:	5813003a 	cmpeq	r9,r11,zero
  806f70:	29403fcc 	andi	r5,r5,255
  806f74:	40000a1e 	bne	r8,zero,806fa0 <__ledf2+0x74>
  806f78:	30d8b03a 	or	r12,r6,r3
  806f7c:	6000081e 	bne	r12,zero,806fa0 <__ledf2+0x74>
  806f80:	0005883a 	mov	r2,zero
  806f84:	5800111e 	bne	r11,zero,806fcc <__ledf2+0xa0>
  806f88:	f800283a 	ret
  806f8c:	29403fcc 	andi	r5,r5,255
  806f90:	40000c1e 	bne	r8,zero,806fc4 <__ledf2+0x98>
  806f94:	30d2b03a 	or	r9,r6,r3
  806f98:	48000c26 	beq	r9,zero,806fcc <__ledf2+0xa0>
  806f9c:	0013883a 	mov	r9,zero
  806fa0:	39c03fcc 	andi	r7,r7,255
  806fa4:	48000826 	beq	r9,zero,806fc8 <__ledf2+0x9c>
  806fa8:	38001126 	beq	r7,zero,806ff0 <__ledf2+0xc4>
  806fac:	00800044 	movi	r2,1
  806fb0:	f800283a 	ret
  806fb4:	30d2b03a 	or	r9,r6,r3
  806fb8:	483fea26 	beq	r9,zero,806f64 <__alt_mem_onchip_mem+0xff7fef64>
  806fbc:	00800084 	movi	r2,2
  806fc0:	f800283a 	ret
  806fc4:	39c03fcc 	andi	r7,r7,255
  806fc8:	39400726 	beq	r7,r5,806fe8 <__ledf2+0xbc>
  806fcc:	2800081e 	bne	r5,zero,806ff0 <__ledf2+0xc4>
  806fd0:	00800044 	movi	r2,1
  806fd4:	f800283a 	ret
  806fd8:	2292b03a 	or	r9,r4,r10
  806fdc:	483fdf26 	beq	r9,zero,806f5c <__alt_mem_onchip_mem+0xff7fef5c>
  806fe0:	00800084 	movi	r2,2
  806fe4:	f800283a 	ret
  806fe8:	4080030e 	bge	r8,r2,806ff8 <__ledf2+0xcc>
  806fec:	383fef26 	beq	r7,zero,806fac <__alt_mem_onchip_mem+0xff7fefac>
  806ff0:	00bfffc4 	movi	r2,-1
  806ff4:	f800283a 	ret
  806ff8:	123feb16 	blt	r2,r8,806fa8 <__alt_mem_onchip_mem+0xff7fefa8>
  806ffc:	1abff336 	bltu	r3,r10,806fcc <__alt_mem_onchip_mem+0xff7fefcc>
  807000:	50c00326 	beq	r10,r3,807010 <__ledf2+0xe4>
  807004:	50c0042e 	bgeu	r10,r3,807018 <__ledf2+0xec>
  807008:	283fe81e 	bne	r5,zero,806fac <__alt_mem_onchip_mem+0xff7fefac>
  80700c:	003ff806 	br	806ff0 <__alt_mem_onchip_mem+0xff7feff0>
  807010:	313fee36 	bltu	r6,r4,806fcc <__alt_mem_onchip_mem+0xff7fefcc>
  807014:	21bffc36 	bltu	r4,r6,807008 <__alt_mem_onchip_mem+0xff7ff008>
  807018:	0005883a 	mov	r2,zero
  80701c:	f800283a 	ret

00807020 <__subdf3>:
  807020:	02000434 	movhi	r8,16
  807024:	423fffc4 	addi	r8,r8,-1
  807028:	defffb04 	addi	sp,sp,-20
  80702c:	2a14703a 	and	r10,r5,r8
  807030:	3812d53a 	srli	r9,r7,20
  807034:	3a10703a 	and	r8,r7,r8
  807038:	2006d77a 	srli	r3,r4,29
  80703c:	3004d77a 	srli	r2,r6,29
  807040:	dc000015 	stw	r16,0(sp)
  807044:	501490fa 	slli	r10,r10,3
  807048:	2820d53a 	srli	r16,r5,20
  80704c:	401090fa 	slli	r8,r8,3
  807050:	dc800215 	stw	r18,8(sp)
  807054:	dc400115 	stw	r17,4(sp)
  807058:	dfc00415 	stw	ra,16(sp)
  80705c:	202290fa 	slli	r17,r4,3
  807060:	dcc00315 	stw	r19,12(sp)
  807064:	4a41ffcc 	andi	r9,r9,2047
  807068:	0101ffc4 	movi	r4,2047
  80706c:	2824d7fa 	srli	r18,r5,31
  807070:	8401ffcc 	andi	r16,r16,2047
  807074:	50c6b03a 	or	r3,r10,r3
  807078:	380ed7fa 	srli	r7,r7,31
  80707c:	408ab03a 	or	r5,r8,r2
  807080:	300c90fa 	slli	r6,r6,3
  807084:	49009626 	beq	r9,r4,8072e0 <__subdf3+0x2c0>
  807088:	39c0005c 	xori	r7,r7,1
  80708c:	8245c83a 	sub	r2,r16,r9
  807090:	3c807426 	beq	r7,r18,807264 <__subdf3+0x244>
  807094:	0080af0e 	bge	zero,r2,807354 <__subdf3+0x334>
  807098:	48002a1e 	bne	r9,zero,807144 <__subdf3+0x124>
  80709c:	2988b03a 	or	r4,r5,r6
  8070a0:	20009a1e 	bne	r4,zero,80730c <__subdf3+0x2ec>
  8070a4:	888001cc 	andi	r2,r17,7
  8070a8:	10000726 	beq	r2,zero,8070c8 <__subdf3+0xa8>
  8070ac:	888003cc 	andi	r2,r17,15
  8070b0:	01000104 	movi	r4,4
  8070b4:	11000426 	beq	r2,r4,8070c8 <__subdf3+0xa8>
  8070b8:	890b883a 	add	r5,r17,r4
  8070bc:	2c63803a 	cmpltu	r17,r5,r17
  8070c0:	1c47883a 	add	r3,r3,r17
  8070c4:	2823883a 	mov	r17,r5
  8070c8:	1880202c 	andhi	r2,r3,128
  8070cc:	10005926 	beq	r2,zero,807234 <__subdf3+0x214>
  8070d0:	84000044 	addi	r16,r16,1
  8070d4:	0081ffc4 	movi	r2,2047
  8070d8:	8080be26 	beq	r16,r2,8073d4 <__subdf3+0x3b4>
  8070dc:	017fe034 	movhi	r5,65408
  8070e0:	297fffc4 	addi	r5,r5,-1
  8070e4:	1946703a 	and	r3,r3,r5
  8070e8:	1804977a 	slli	r2,r3,29
  8070ec:	1806927a 	slli	r3,r3,9
  8070f0:	8822d0fa 	srli	r17,r17,3
  8070f4:	8401ffcc 	andi	r16,r16,2047
  8070f8:	180ad33a 	srli	r5,r3,12
  8070fc:	9100004c 	andi	r4,r18,1
  807100:	1444b03a 	or	r2,r2,r17
  807104:	80c1ffcc 	andi	r3,r16,2047
  807108:	1820953a 	slli	r16,r3,20
  80710c:	20c03fcc 	andi	r3,r4,255
  807110:	180897fa 	slli	r4,r3,31
  807114:	00c00434 	movhi	r3,16
  807118:	18ffffc4 	addi	r3,r3,-1
  80711c:	28c6703a 	and	r3,r5,r3
  807120:	1c06b03a 	or	r3,r3,r16
  807124:	1906b03a 	or	r3,r3,r4
  807128:	dfc00417 	ldw	ra,16(sp)
  80712c:	dcc00317 	ldw	r19,12(sp)
  807130:	dc800217 	ldw	r18,8(sp)
  807134:	dc400117 	ldw	r17,4(sp)
  807138:	dc000017 	ldw	r16,0(sp)
  80713c:	dec00504 	addi	sp,sp,20
  807140:	f800283a 	ret
  807144:	0101ffc4 	movi	r4,2047
  807148:	813fd626 	beq	r16,r4,8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  80714c:	29402034 	orhi	r5,r5,128
  807150:	01000e04 	movi	r4,56
  807154:	2080a316 	blt	r4,r2,8073e4 <__subdf3+0x3c4>
  807158:	010007c4 	movi	r4,31
  80715c:	2080c616 	blt	r4,r2,807478 <__subdf3+0x458>
  807160:	01000804 	movi	r4,32
  807164:	2089c83a 	sub	r4,r4,r2
  807168:	2910983a 	sll	r8,r5,r4
  80716c:	308ed83a 	srl	r7,r6,r2
  807170:	3108983a 	sll	r4,r6,r4
  807174:	2884d83a 	srl	r2,r5,r2
  807178:	41ccb03a 	or	r6,r8,r7
  80717c:	2008c03a 	cmpne	r4,r4,zero
  807180:	310cb03a 	or	r6,r6,r4
  807184:	898dc83a 	sub	r6,r17,r6
  807188:	89a3803a 	cmpltu	r17,r17,r6
  80718c:	1887c83a 	sub	r3,r3,r2
  807190:	1c47c83a 	sub	r3,r3,r17
  807194:	3023883a 	mov	r17,r6
  807198:	1880202c 	andhi	r2,r3,128
  80719c:	10002326 	beq	r2,zero,80722c <__subdf3+0x20c>
  8071a0:	04c02034 	movhi	r19,128
  8071a4:	9cffffc4 	addi	r19,r19,-1
  8071a8:	1ce6703a 	and	r19,r3,r19
  8071ac:	98007a26 	beq	r19,zero,807398 <__subdf3+0x378>
  8071b0:	9809883a 	mov	r4,r19
  8071b4:	080791c0 	call	80791c <__clzsi2>
  8071b8:	113ffe04 	addi	r4,r2,-8
  8071bc:	00c007c4 	movi	r3,31
  8071c0:	19007b16 	blt	r3,r4,8073b0 <__subdf3+0x390>
  8071c4:	00800804 	movi	r2,32
  8071c8:	1105c83a 	sub	r2,r2,r4
  8071cc:	8884d83a 	srl	r2,r17,r2
  8071d0:	9906983a 	sll	r3,r19,r4
  8071d4:	8922983a 	sll	r17,r17,r4
  8071d8:	10c4b03a 	or	r2,r2,r3
  8071dc:	24007816 	blt	r4,r16,8073c0 <__subdf3+0x3a0>
  8071e0:	2421c83a 	sub	r16,r4,r16
  8071e4:	80c00044 	addi	r3,r16,1
  8071e8:	010007c4 	movi	r4,31
  8071ec:	20c09516 	blt	r4,r3,807444 <__subdf3+0x424>
  8071f0:	01400804 	movi	r5,32
  8071f4:	28cbc83a 	sub	r5,r5,r3
  8071f8:	88c8d83a 	srl	r4,r17,r3
  8071fc:	8962983a 	sll	r17,r17,r5
  807200:	114a983a 	sll	r5,r2,r5
  807204:	10c6d83a 	srl	r3,r2,r3
  807208:	8804c03a 	cmpne	r2,r17,zero
  80720c:	290ab03a 	or	r5,r5,r4
  807210:	28a2b03a 	or	r17,r5,r2
  807214:	0021883a 	mov	r16,zero
  807218:	003fa206 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  80721c:	2090b03a 	or	r8,r4,r2
  807220:	40018e26 	beq	r8,zero,80785c <__subdf3+0x83c>
  807224:	1007883a 	mov	r3,r2
  807228:	2023883a 	mov	r17,r4
  80722c:	888001cc 	andi	r2,r17,7
  807230:	103f9e1e 	bne	r2,zero,8070ac <__alt_mem_onchip_mem+0xff7ff0ac>
  807234:	1804977a 	slli	r2,r3,29
  807238:	8822d0fa 	srli	r17,r17,3
  80723c:	1810d0fa 	srli	r8,r3,3
  807240:	9100004c 	andi	r4,r18,1
  807244:	1444b03a 	or	r2,r2,r17
  807248:	00c1ffc4 	movi	r3,2047
  80724c:	80c02826 	beq	r16,r3,8072f0 <__subdf3+0x2d0>
  807250:	01400434 	movhi	r5,16
  807254:	297fffc4 	addi	r5,r5,-1
  807258:	80e0703a 	and	r16,r16,r3
  80725c:	414a703a 	and	r5,r8,r5
  807260:	003fa806 	br	807104 <__alt_mem_onchip_mem+0xff7ff104>
  807264:	0080630e 	bge	zero,r2,8073f4 <__subdf3+0x3d4>
  807268:	48003026 	beq	r9,zero,80732c <__subdf3+0x30c>
  80726c:	0101ffc4 	movi	r4,2047
  807270:	813f8c26 	beq	r16,r4,8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807274:	29402034 	orhi	r5,r5,128
  807278:	01000e04 	movi	r4,56
  80727c:	2080a90e 	bge	r4,r2,807524 <__subdf3+0x504>
  807280:	298cb03a 	or	r6,r5,r6
  807284:	3012c03a 	cmpne	r9,r6,zero
  807288:	0005883a 	mov	r2,zero
  80728c:	4c53883a 	add	r9,r9,r17
  807290:	4c63803a 	cmpltu	r17,r9,r17
  807294:	10c7883a 	add	r3,r2,r3
  807298:	88c7883a 	add	r3,r17,r3
  80729c:	4823883a 	mov	r17,r9
  8072a0:	1880202c 	andhi	r2,r3,128
  8072a4:	1000d026 	beq	r2,zero,8075e8 <__subdf3+0x5c8>
  8072a8:	84000044 	addi	r16,r16,1
  8072ac:	0081ffc4 	movi	r2,2047
  8072b0:	8080fe26 	beq	r16,r2,8076ac <__subdf3+0x68c>
  8072b4:	00bfe034 	movhi	r2,65408
  8072b8:	10bfffc4 	addi	r2,r2,-1
  8072bc:	1886703a 	and	r3,r3,r2
  8072c0:	880ad07a 	srli	r5,r17,1
  8072c4:	180497fa 	slli	r2,r3,31
  8072c8:	8900004c 	andi	r4,r17,1
  8072cc:	2922b03a 	or	r17,r5,r4
  8072d0:	1806d07a 	srli	r3,r3,1
  8072d4:	1462b03a 	or	r17,r2,r17
  8072d8:	3825883a 	mov	r18,r7
  8072dc:	003f7106 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8072e0:	2984b03a 	or	r2,r5,r6
  8072e4:	103f6826 	beq	r2,zero,807088 <__alt_mem_onchip_mem+0xff7ff088>
  8072e8:	39c03fcc 	andi	r7,r7,255
  8072ec:	003f6706 	br	80708c <__alt_mem_onchip_mem+0xff7ff08c>
  8072f0:	4086b03a 	or	r3,r8,r2
  8072f4:	18015226 	beq	r3,zero,807840 <__subdf3+0x820>
  8072f8:	00c00434 	movhi	r3,16
  8072fc:	41400234 	orhi	r5,r8,8
  807300:	18ffffc4 	addi	r3,r3,-1
  807304:	28ca703a 	and	r5,r5,r3
  807308:	003f7e06 	br	807104 <__alt_mem_onchip_mem+0xff7ff104>
  80730c:	10bfffc4 	addi	r2,r2,-1
  807310:	1000491e 	bne	r2,zero,807438 <__subdf3+0x418>
  807314:	898fc83a 	sub	r7,r17,r6
  807318:	89e3803a 	cmpltu	r17,r17,r7
  80731c:	1947c83a 	sub	r3,r3,r5
  807320:	1c47c83a 	sub	r3,r3,r17
  807324:	3823883a 	mov	r17,r7
  807328:	003f9b06 	br	807198 <__alt_mem_onchip_mem+0xff7ff198>
  80732c:	2988b03a 	or	r4,r5,r6
  807330:	203f5c26 	beq	r4,zero,8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807334:	10bfffc4 	addi	r2,r2,-1
  807338:	1000931e 	bne	r2,zero,807588 <__subdf3+0x568>
  80733c:	898d883a 	add	r6,r17,r6
  807340:	3463803a 	cmpltu	r17,r6,r17
  807344:	1947883a 	add	r3,r3,r5
  807348:	88c7883a 	add	r3,r17,r3
  80734c:	3023883a 	mov	r17,r6
  807350:	003fd306 	br	8072a0 <__alt_mem_onchip_mem+0xff7ff2a0>
  807354:	1000541e 	bne	r2,zero,8074a8 <__subdf3+0x488>
  807358:	80800044 	addi	r2,r16,1
  80735c:	1081ffcc 	andi	r2,r2,2047
  807360:	01000044 	movi	r4,1
  807364:	2080a20e 	bge	r4,r2,8075f0 <__subdf3+0x5d0>
  807368:	8989c83a 	sub	r4,r17,r6
  80736c:	8905803a 	cmpltu	r2,r17,r4
  807370:	1967c83a 	sub	r19,r3,r5
  807374:	98a7c83a 	sub	r19,r19,r2
  807378:	9880202c 	andhi	r2,r19,128
  80737c:	10006326 	beq	r2,zero,80750c <__subdf3+0x4ec>
  807380:	3463c83a 	sub	r17,r6,r17
  807384:	28c7c83a 	sub	r3,r5,r3
  807388:	344d803a 	cmpltu	r6,r6,r17
  80738c:	19a7c83a 	sub	r19,r3,r6
  807390:	3825883a 	mov	r18,r7
  807394:	983f861e 	bne	r19,zero,8071b0 <__alt_mem_onchip_mem+0xff7ff1b0>
  807398:	8809883a 	mov	r4,r17
  80739c:	080791c0 	call	80791c <__clzsi2>
  8073a0:	10800804 	addi	r2,r2,32
  8073a4:	113ffe04 	addi	r4,r2,-8
  8073a8:	00c007c4 	movi	r3,31
  8073ac:	193f850e 	bge	r3,r4,8071c4 <__alt_mem_onchip_mem+0xff7ff1c4>
  8073b0:	10bff604 	addi	r2,r2,-40
  8073b4:	8884983a 	sll	r2,r17,r2
  8073b8:	0023883a 	mov	r17,zero
  8073bc:	243f880e 	bge	r4,r16,8071e0 <__alt_mem_onchip_mem+0xff7ff1e0>
  8073c0:	00ffe034 	movhi	r3,65408
  8073c4:	18ffffc4 	addi	r3,r3,-1
  8073c8:	8121c83a 	sub	r16,r16,r4
  8073cc:	10c6703a 	and	r3,r2,r3
  8073d0:	003f3406 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8073d4:	9100004c 	andi	r4,r18,1
  8073d8:	000b883a 	mov	r5,zero
  8073dc:	0005883a 	mov	r2,zero
  8073e0:	003f4806 	br	807104 <__alt_mem_onchip_mem+0xff7ff104>
  8073e4:	298cb03a 	or	r6,r5,r6
  8073e8:	300cc03a 	cmpne	r6,r6,zero
  8073ec:	0005883a 	mov	r2,zero
  8073f0:	003f6406 	br	807184 <__alt_mem_onchip_mem+0xff7ff184>
  8073f4:	10009a1e 	bne	r2,zero,807660 <__subdf3+0x640>
  8073f8:	82400044 	addi	r9,r16,1
  8073fc:	4881ffcc 	andi	r2,r9,2047
  807400:	02800044 	movi	r10,1
  807404:	5080670e 	bge	r10,r2,8075a4 <__subdf3+0x584>
  807408:	0081ffc4 	movi	r2,2047
  80740c:	4880af26 	beq	r9,r2,8076cc <__subdf3+0x6ac>
  807410:	898d883a 	add	r6,r17,r6
  807414:	1945883a 	add	r2,r3,r5
  807418:	3447803a 	cmpltu	r3,r6,r17
  80741c:	1887883a 	add	r3,r3,r2
  807420:	182297fa 	slli	r17,r3,31
  807424:	300cd07a 	srli	r6,r6,1
  807428:	1806d07a 	srli	r3,r3,1
  80742c:	4821883a 	mov	r16,r9
  807430:	89a2b03a 	or	r17,r17,r6
  807434:	003f1b06 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807438:	0101ffc4 	movi	r4,2047
  80743c:	813f441e 	bne	r16,r4,807150 <__alt_mem_onchip_mem+0xff7ff150>
  807440:	003f1806 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807444:	843ff844 	addi	r16,r16,-31
  807448:	01400804 	movi	r5,32
  80744c:	1408d83a 	srl	r4,r2,r16
  807450:	19405026 	beq	r3,r5,807594 <__subdf3+0x574>
  807454:	01401004 	movi	r5,64
  807458:	28c7c83a 	sub	r3,r5,r3
  80745c:	10c4983a 	sll	r2,r2,r3
  807460:	88a2b03a 	or	r17,r17,r2
  807464:	8822c03a 	cmpne	r17,r17,zero
  807468:	2462b03a 	or	r17,r4,r17
  80746c:	0007883a 	mov	r3,zero
  807470:	0021883a 	mov	r16,zero
  807474:	003f6d06 	br	80722c <__alt_mem_onchip_mem+0xff7ff22c>
  807478:	11fff804 	addi	r7,r2,-32
  80747c:	01000804 	movi	r4,32
  807480:	29ced83a 	srl	r7,r5,r7
  807484:	11004526 	beq	r2,r4,80759c <__subdf3+0x57c>
  807488:	01001004 	movi	r4,64
  80748c:	2089c83a 	sub	r4,r4,r2
  807490:	2904983a 	sll	r2,r5,r4
  807494:	118cb03a 	or	r6,r2,r6
  807498:	300cc03a 	cmpne	r6,r6,zero
  80749c:	398cb03a 	or	r6,r7,r6
  8074a0:	0005883a 	mov	r2,zero
  8074a4:	003f3706 	br	807184 <__alt_mem_onchip_mem+0xff7ff184>
  8074a8:	80002a26 	beq	r16,zero,807554 <__subdf3+0x534>
  8074ac:	0101ffc4 	movi	r4,2047
  8074b0:	49006626 	beq	r9,r4,80764c <__subdf3+0x62c>
  8074b4:	0085c83a 	sub	r2,zero,r2
  8074b8:	18c02034 	orhi	r3,r3,128
  8074bc:	01000e04 	movi	r4,56
  8074c0:	20807e16 	blt	r4,r2,8076bc <__subdf3+0x69c>
  8074c4:	010007c4 	movi	r4,31
  8074c8:	2080e716 	blt	r4,r2,807868 <__subdf3+0x848>
  8074cc:	01000804 	movi	r4,32
  8074d0:	2089c83a 	sub	r4,r4,r2
  8074d4:	1914983a 	sll	r10,r3,r4
  8074d8:	8890d83a 	srl	r8,r17,r2
  8074dc:	8908983a 	sll	r4,r17,r4
  8074e0:	1884d83a 	srl	r2,r3,r2
  8074e4:	5222b03a 	or	r17,r10,r8
  8074e8:	2006c03a 	cmpne	r3,r4,zero
  8074ec:	88e2b03a 	or	r17,r17,r3
  8074f0:	3463c83a 	sub	r17,r6,r17
  8074f4:	2885c83a 	sub	r2,r5,r2
  8074f8:	344d803a 	cmpltu	r6,r6,r17
  8074fc:	1187c83a 	sub	r3,r2,r6
  807500:	4821883a 	mov	r16,r9
  807504:	3825883a 	mov	r18,r7
  807508:	003f2306 	br	807198 <__alt_mem_onchip_mem+0xff7ff198>
  80750c:	24d0b03a 	or	r8,r4,r19
  807510:	40001b1e 	bne	r8,zero,807580 <__subdf3+0x560>
  807514:	0005883a 	mov	r2,zero
  807518:	0009883a 	mov	r4,zero
  80751c:	0021883a 	mov	r16,zero
  807520:	003f4906 	br	807248 <__alt_mem_onchip_mem+0xff7ff248>
  807524:	010007c4 	movi	r4,31
  807528:	20803a16 	blt	r4,r2,807614 <__subdf3+0x5f4>
  80752c:	01000804 	movi	r4,32
  807530:	2089c83a 	sub	r4,r4,r2
  807534:	2912983a 	sll	r9,r5,r4
  807538:	3090d83a 	srl	r8,r6,r2
  80753c:	3108983a 	sll	r4,r6,r4
  807540:	2884d83a 	srl	r2,r5,r2
  807544:	4a12b03a 	or	r9,r9,r8
  807548:	2008c03a 	cmpne	r4,r4,zero
  80754c:	4912b03a 	or	r9,r9,r4
  807550:	003f4e06 	br	80728c <__alt_mem_onchip_mem+0xff7ff28c>
  807554:	1c48b03a 	or	r4,r3,r17
  807558:	20003c26 	beq	r4,zero,80764c <__subdf3+0x62c>
  80755c:	0084303a 	nor	r2,zero,r2
  807560:	1000381e 	bne	r2,zero,807644 <__subdf3+0x624>
  807564:	3463c83a 	sub	r17,r6,r17
  807568:	28c5c83a 	sub	r2,r5,r3
  80756c:	344d803a 	cmpltu	r6,r6,r17
  807570:	1187c83a 	sub	r3,r2,r6
  807574:	4821883a 	mov	r16,r9
  807578:	3825883a 	mov	r18,r7
  80757c:	003f0606 	br	807198 <__alt_mem_onchip_mem+0xff7ff198>
  807580:	2023883a 	mov	r17,r4
  807584:	003f0906 	br	8071ac <__alt_mem_onchip_mem+0xff7ff1ac>
  807588:	0101ffc4 	movi	r4,2047
  80758c:	813f3a1e 	bne	r16,r4,807278 <__alt_mem_onchip_mem+0xff7ff278>
  807590:	003ec406 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807594:	0005883a 	mov	r2,zero
  807598:	003fb106 	br	807460 <__alt_mem_onchip_mem+0xff7ff460>
  80759c:	0005883a 	mov	r2,zero
  8075a0:	003fbc06 	br	807494 <__alt_mem_onchip_mem+0xff7ff494>
  8075a4:	1c44b03a 	or	r2,r3,r17
  8075a8:	80008e1e 	bne	r16,zero,8077e4 <__subdf3+0x7c4>
  8075ac:	1000c826 	beq	r2,zero,8078d0 <__subdf3+0x8b0>
  8075b0:	2984b03a 	or	r2,r5,r6
  8075b4:	103ebb26 	beq	r2,zero,8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8075b8:	8989883a 	add	r4,r17,r6
  8075bc:	1945883a 	add	r2,r3,r5
  8075c0:	2447803a 	cmpltu	r3,r4,r17
  8075c4:	1887883a 	add	r3,r3,r2
  8075c8:	1880202c 	andhi	r2,r3,128
  8075cc:	2023883a 	mov	r17,r4
  8075d0:	103f1626 	beq	r2,zero,80722c <__alt_mem_onchip_mem+0xff7ff22c>
  8075d4:	00bfe034 	movhi	r2,65408
  8075d8:	10bfffc4 	addi	r2,r2,-1
  8075dc:	5021883a 	mov	r16,r10
  8075e0:	1886703a 	and	r3,r3,r2
  8075e4:	003eaf06 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8075e8:	3825883a 	mov	r18,r7
  8075ec:	003f0f06 	br	80722c <__alt_mem_onchip_mem+0xff7ff22c>
  8075f0:	1c44b03a 	or	r2,r3,r17
  8075f4:	8000251e 	bne	r16,zero,80768c <__subdf3+0x66c>
  8075f8:	1000661e 	bne	r2,zero,807794 <__subdf3+0x774>
  8075fc:	2990b03a 	or	r8,r5,r6
  807600:	40009626 	beq	r8,zero,80785c <__subdf3+0x83c>
  807604:	2807883a 	mov	r3,r5
  807608:	3023883a 	mov	r17,r6
  80760c:	3825883a 	mov	r18,r7
  807610:	003ea406 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807614:	127ff804 	addi	r9,r2,-32
  807618:	01000804 	movi	r4,32
  80761c:	2a52d83a 	srl	r9,r5,r9
  807620:	11008c26 	beq	r2,r4,807854 <__subdf3+0x834>
  807624:	01001004 	movi	r4,64
  807628:	2085c83a 	sub	r2,r4,r2
  80762c:	2884983a 	sll	r2,r5,r2
  807630:	118cb03a 	or	r6,r2,r6
  807634:	300cc03a 	cmpne	r6,r6,zero
  807638:	4992b03a 	or	r9,r9,r6
  80763c:	0005883a 	mov	r2,zero
  807640:	003f1206 	br	80728c <__alt_mem_onchip_mem+0xff7ff28c>
  807644:	0101ffc4 	movi	r4,2047
  807648:	493f9c1e 	bne	r9,r4,8074bc <__alt_mem_onchip_mem+0xff7ff4bc>
  80764c:	2807883a 	mov	r3,r5
  807650:	3023883a 	mov	r17,r6
  807654:	4821883a 	mov	r16,r9
  807658:	3825883a 	mov	r18,r7
  80765c:	003e9106 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807660:	80001f1e 	bne	r16,zero,8076e0 <__subdf3+0x6c0>
  807664:	1c48b03a 	or	r4,r3,r17
  807668:	20005a26 	beq	r4,zero,8077d4 <__subdf3+0x7b4>
  80766c:	0084303a 	nor	r2,zero,r2
  807670:	1000561e 	bne	r2,zero,8077cc <__subdf3+0x7ac>
  807674:	89a3883a 	add	r17,r17,r6
  807678:	1945883a 	add	r2,r3,r5
  80767c:	898d803a 	cmpltu	r6,r17,r6
  807680:	3087883a 	add	r3,r6,r2
  807684:	4821883a 	mov	r16,r9
  807688:	003f0506 	br	8072a0 <__alt_mem_onchip_mem+0xff7ff2a0>
  80768c:	10002b1e 	bne	r2,zero,80773c <__subdf3+0x71c>
  807690:	2984b03a 	or	r2,r5,r6
  807694:	10008026 	beq	r2,zero,807898 <__subdf3+0x878>
  807698:	2807883a 	mov	r3,r5
  80769c:	3023883a 	mov	r17,r6
  8076a0:	3825883a 	mov	r18,r7
  8076a4:	0401ffc4 	movi	r16,2047
  8076a8:	003e7e06 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8076ac:	3809883a 	mov	r4,r7
  8076b0:	0011883a 	mov	r8,zero
  8076b4:	0005883a 	mov	r2,zero
  8076b8:	003ee306 	br	807248 <__alt_mem_onchip_mem+0xff7ff248>
  8076bc:	1c62b03a 	or	r17,r3,r17
  8076c0:	8822c03a 	cmpne	r17,r17,zero
  8076c4:	0005883a 	mov	r2,zero
  8076c8:	003f8906 	br	8074f0 <__alt_mem_onchip_mem+0xff7ff4f0>
  8076cc:	3809883a 	mov	r4,r7
  8076d0:	4821883a 	mov	r16,r9
  8076d4:	0011883a 	mov	r8,zero
  8076d8:	0005883a 	mov	r2,zero
  8076dc:	003eda06 	br	807248 <__alt_mem_onchip_mem+0xff7ff248>
  8076e0:	0101ffc4 	movi	r4,2047
  8076e4:	49003b26 	beq	r9,r4,8077d4 <__subdf3+0x7b4>
  8076e8:	0085c83a 	sub	r2,zero,r2
  8076ec:	18c02034 	orhi	r3,r3,128
  8076f0:	01000e04 	movi	r4,56
  8076f4:	20806e16 	blt	r4,r2,8078b0 <__subdf3+0x890>
  8076f8:	010007c4 	movi	r4,31
  8076fc:	20807716 	blt	r4,r2,8078dc <__subdf3+0x8bc>
  807700:	01000804 	movi	r4,32
  807704:	2089c83a 	sub	r4,r4,r2
  807708:	1914983a 	sll	r10,r3,r4
  80770c:	8890d83a 	srl	r8,r17,r2
  807710:	8908983a 	sll	r4,r17,r4
  807714:	1884d83a 	srl	r2,r3,r2
  807718:	5222b03a 	or	r17,r10,r8
  80771c:	2006c03a 	cmpne	r3,r4,zero
  807720:	88e2b03a 	or	r17,r17,r3
  807724:	89a3883a 	add	r17,r17,r6
  807728:	1145883a 	add	r2,r2,r5
  80772c:	898d803a 	cmpltu	r6,r17,r6
  807730:	3087883a 	add	r3,r6,r2
  807734:	4821883a 	mov	r16,r9
  807738:	003ed906 	br	8072a0 <__alt_mem_onchip_mem+0xff7ff2a0>
  80773c:	2984b03a 	or	r2,r5,r6
  807740:	10004226 	beq	r2,zero,80784c <__subdf3+0x82c>
  807744:	1808d0fa 	srli	r4,r3,3
  807748:	8822d0fa 	srli	r17,r17,3
  80774c:	1806977a 	slli	r3,r3,29
  807750:	2080022c 	andhi	r2,r4,8
  807754:	1c62b03a 	or	r17,r3,r17
  807758:	10000826 	beq	r2,zero,80777c <__subdf3+0x75c>
  80775c:	2812d0fa 	srli	r9,r5,3
  807760:	4880022c 	andhi	r2,r9,8
  807764:	1000051e 	bne	r2,zero,80777c <__subdf3+0x75c>
  807768:	300cd0fa 	srli	r6,r6,3
  80776c:	2804977a 	slli	r2,r5,29
  807770:	4809883a 	mov	r4,r9
  807774:	3825883a 	mov	r18,r7
  807778:	11a2b03a 	or	r17,r2,r6
  80777c:	8806d77a 	srli	r3,r17,29
  807780:	200890fa 	slli	r4,r4,3
  807784:	882290fa 	slli	r17,r17,3
  807788:	0401ffc4 	movi	r16,2047
  80778c:	1906b03a 	or	r3,r3,r4
  807790:	003e4406 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807794:	2984b03a 	or	r2,r5,r6
  807798:	103e4226 	beq	r2,zero,8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  80779c:	8989c83a 	sub	r4,r17,r6
  8077a0:	8911803a 	cmpltu	r8,r17,r4
  8077a4:	1945c83a 	sub	r2,r3,r5
  8077a8:	1205c83a 	sub	r2,r2,r8
  8077ac:	1200202c 	andhi	r8,r2,128
  8077b0:	403e9a26 	beq	r8,zero,80721c <__alt_mem_onchip_mem+0xff7ff21c>
  8077b4:	3463c83a 	sub	r17,r6,r17
  8077b8:	28c5c83a 	sub	r2,r5,r3
  8077bc:	344d803a 	cmpltu	r6,r6,r17
  8077c0:	1187c83a 	sub	r3,r2,r6
  8077c4:	3825883a 	mov	r18,r7
  8077c8:	003e3606 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8077cc:	0101ffc4 	movi	r4,2047
  8077d0:	493fc71e 	bne	r9,r4,8076f0 <__alt_mem_onchip_mem+0xff7ff6f0>
  8077d4:	2807883a 	mov	r3,r5
  8077d8:	3023883a 	mov	r17,r6
  8077dc:	4821883a 	mov	r16,r9
  8077e0:	003e3006 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8077e4:	10003626 	beq	r2,zero,8078c0 <__subdf3+0x8a0>
  8077e8:	2984b03a 	or	r2,r5,r6
  8077ec:	10001726 	beq	r2,zero,80784c <__subdf3+0x82c>
  8077f0:	1808d0fa 	srli	r4,r3,3
  8077f4:	8822d0fa 	srli	r17,r17,3
  8077f8:	1806977a 	slli	r3,r3,29
  8077fc:	2080022c 	andhi	r2,r4,8
  807800:	1c62b03a 	or	r17,r3,r17
  807804:	10000726 	beq	r2,zero,807824 <__subdf3+0x804>
  807808:	2812d0fa 	srli	r9,r5,3
  80780c:	4880022c 	andhi	r2,r9,8
  807810:	1000041e 	bne	r2,zero,807824 <__subdf3+0x804>
  807814:	300cd0fa 	srli	r6,r6,3
  807818:	2804977a 	slli	r2,r5,29
  80781c:	4809883a 	mov	r4,r9
  807820:	11a2b03a 	or	r17,r2,r6
  807824:	8806d77a 	srli	r3,r17,29
  807828:	200890fa 	slli	r4,r4,3
  80782c:	882290fa 	slli	r17,r17,3
  807830:	3825883a 	mov	r18,r7
  807834:	1906b03a 	or	r3,r3,r4
  807838:	0401ffc4 	movi	r16,2047
  80783c:	003e1906 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807840:	000b883a 	mov	r5,zero
  807844:	0005883a 	mov	r2,zero
  807848:	003e2e06 	br	807104 <__alt_mem_onchip_mem+0xff7ff104>
  80784c:	0401ffc4 	movi	r16,2047
  807850:	003e1406 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  807854:	0005883a 	mov	r2,zero
  807858:	003f7506 	br	807630 <__alt_mem_onchip_mem+0xff7ff630>
  80785c:	0005883a 	mov	r2,zero
  807860:	0009883a 	mov	r4,zero
  807864:	003e7806 	br	807248 <__alt_mem_onchip_mem+0xff7ff248>
  807868:	123ff804 	addi	r8,r2,-32
  80786c:	01000804 	movi	r4,32
  807870:	1a10d83a 	srl	r8,r3,r8
  807874:	11002526 	beq	r2,r4,80790c <__subdf3+0x8ec>
  807878:	01001004 	movi	r4,64
  80787c:	2085c83a 	sub	r2,r4,r2
  807880:	1884983a 	sll	r2,r3,r2
  807884:	1444b03a 	or	r2,r2,r17
  807888:	1004c03a 	cmpne	r2,r2,zero
  80788c:	40a2b03a 	or	r17,r8,r2
  807890:	0005883a 	mov	r2,zero
  807894:	003f1606 	br	8074f0 <__alt_mem_onchip_mem+0xff7ff4f0>
  807898:	02000434 	movhi	r8,16
  80789c:	0009883a 	mov	r4,zero
  8078a0:	423fffc4 	addi	r8,r8,-1
  8078a4:	00bfffc4 	movi	r2,-1
  8078a8:	0401ffc4 	movi	r16,2047
  8078ac:	003e6606 	br	807248 <__alt_mem_onchip_mem+0xff7ff248>
  8078b0:	1c62b03a 	or	r17,r3,r17
  8078b4:	8822c03a 	cmpne	r17,r17,zero
  8078b8:	0005883a 	mov	r2,zero
  8078bc:	003f9906 	br	807724 <__alt_mem_onchip_mem+0xff7ff724>
  8078c0:	2807883a 	mov	r3,r5
  8078c4:	3023883a 	mov	r17,r6
  8078c8:	0401ffc4 	movi	r16,2047
  8078cc:	003df506 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8078d0:	2807883a 	mov	r3,r5
  8078d4:	3023883a 	mov	r17,r6
  8078d8:	003df206 	br	8070a4 <__alt_mem_onchip_mem+0xff7ff0a4>
  8078dc:	123ff804 	addi	r8,r2,-32
  8078e0:	01000804 	movi	r4,32
  8078e4:	1a10d83a 	srl	r8,r3,r8
  8078e8:	11000a26 	beq	r2,r4,807914 <__subdf3+0x8f4>
  8078ec:	01001004 	movi	r4,64
  8078f0:	2085c83a 	sub	r2,r4,r2
  8078f4:	1884983a 	sll	r2,r3,r2
  8078f8:	1444b03a 	or	r2,r2,r17
  8078fc:	1004c03a 	cmpne	r2,r2,zero
  807900:	40a2b03a 	or	r17,r8,r2
  807904:	0005883a 	mov	r2,zero
  807908:	003f8606 	br	807724 <__alt_mem_onchip_mem+0xff7ff724>
  80790c:	0005883a 	mov	r2,zero
  807910:	003fdc06 	br	807884 <__alt_mem_onchip_mem+0xff7ff884>
  807914:	0005883a 	mov	r2,zero
  807918:	003ff706 	br	8078f8 <__alt_mem_onchip_mem+0xff7ff8f8>

0080791c <__clzsi2>:
  80791c:	00bfffd4 	movui	r2,65535
  807920:	11000536 	bltu	r2,r4,807938 <__clzsi2+0x1c>
  807924:	00803fc4 	movi	r2,255
  807928:	11000f36 	bltu	r2,r4,807968 <__clzsi2+0x4c>
  80792c:	00800804 	movi	r2,32
  807930:	0007883a 	mov	r3,zero
  807934:	00000506 	br	80794c <__clzsi2+0x30>
  807938:	00804034 	movhi	r2,256
  80793c:	10bfffc4 	addi	r2,r2,-1
  807940:	11000c2e 	bgeu	r2,r4,807974 <__clzsi2+0x58>
  807944:	00800204 	movi	r2,8
  807948:	00c00604 	movi	r3,24
  80794c:	20c8d83a 	srl	r4,r4,r3
  807950:	00c02074 	movhi	r3,129
  807954:	18fa1f04 	addi	r3,r3,-6020
  807958:	1909883a 	add	r4,r3,r4
  80795c:	20c00003 	ldbu	r3,0(r4)
  807960:	10c5c83a 	sub	r2,r2,r3
  807964:	f800283a 	ret
  807968:	00800604 	movi	r2,24
  80796c:	00c00204 	movi	r3,8
  807970:	003ff606 	br	80794c <__alt_mem_onchip_mem+0xff7ff94c>
  807974:	00800404 	movi	r2,16
  807978:	1007883a 	mov	r3,r2
  80797c:	003ff306 	br	80794c <__alt_mem_onchip_mem+0xff7ff94c>

00807980 <_puts_r>:
  807980:	defff604 	addi	sp,sp,-40
  807984:	dc000715 	stw	r16,28(sp)
  807988:	2021883a 	mov	r16,r4
  80798c:	2809883a 	mov	r4,r5
  807990:	dc400815 	stw	r17,32(sp)
  807994:	dfc00915 	stw	ra,36(sp)
  807998:	2823883a 	mov	r17,r5
  80799c:	0807a540 	call	807a54 <strlen>
  8079a0:	10c00044 	addi	r3,r2,1
  8079a4:	d8800115 	stw	r2,4(sp)
  8079a8:	00802074 	movhi	r2,129
  8079ac:	10ba5f04 	addi	r2,r2,-5764
  8079b0:	d8800215 	stw	r2,8(sp)
  8079b4:	00800044 	movi	r2,1
  8079b8:	d8800315 	stw	r2,12(sp)
  8079bc:	00800084 	movi	r2,2
  8079c0:	dc400015 	stw	r17,0(sp)
  8079c4:	d8c00615 	stw	r3,24(sp)
  8079c8:	dec00415 	stw	sp,16(sp)
  8079cc:	d8800515 	stw	r2,20(sp)
  8079d0:	80000226 	beq	r16,zero,8079dc <_puts_r+0x5c>
  8079d4:	80800e17 	ldw	r2,56(r16)
  8079d8:	10001426 	beq	r2,zero,807a2c <_puts_r+0xac>
  8079dc:	81400217 	ldw	r5,8(r16)
  8079e0:	2880030b 	ldhu	r2,12(r5)
  8079e4:	10c8000c 	andi	r3,r2,8192
  8079e8:	1800061e 	bne	r3,zero,807a04 <_puts_r+0x84>
  8079ec:	29001917 	ldw	r4,100(r5)
  8079f0:	00f7ffc4 	movi	r3,-8193
  8079f4:	10880014 	ori	r2,r2,8192
  8079f8:	20c6703a 	and	r3,r4,r3
  8079fc:	2880030d 	sth	r2,12(r5)
  807a00:	28c01915 	stw	r3,100(r5)
  807a04:	d9800404 	addi	r6,sp,16
  807a08:	8009883a 	mov	r4,r16
  807a0c:	0807e8c0 	call	807e8c <__sfvwrite_r>
  807a10:	1000091e 	bne	r2,zero,807a38 <_puts_r+0xb8>
  807a14:	00800284 	movi	r2,10
  807a18:	dfc00917 	ldw	ra,36(sp)
  807a1c:	dc400817 	ldw	r17,32(sp)
  807a20:	dc000717 	ldw	r16,28(sp)
  807a24:	dec00a04 	addi	sp,sp,40
  807a28:	f800283a 	ret
  807a2c:	8009883a 	mov	r4,r16
  807a30:	0807e3c0 	call	807e3c <__sinit>
  807a34:	003fe906 	br	8079dc <__alt_mem_onchip_mem+0xff7ff9dc>
  807a38:	00bfffc4 	movi	r2,-1
  807a3c:	003ff606 	br	807a18 <__alt_mem_onchip_mem+0xff7ffa18>

00807a40 <puts>:
  807a40:	00802074 	movhi	r2,129
  807a44:	10821904 	addi	r2,r2,2148
  807a48:	200b883a 	mov	r5,r4
  807a4c:	11000017 	ldw	r4,0(r2)
  807a50:	08079801 	jmpi	807980 <_puts_r>

00807a54 <strlen>:
  807a54:	208000cc 	andi	r2,r4,3
  807a58:	10002026 	beq	r2,zero,807adc <strlen+0x88>
  807a5c:	20800007 	ldb	r2,0(r4)
  807a60:	10002026 	beq	r2,zero,807ae4 <strlen+0x90>
  807a64:	2005883a 	mov	r2,r4
  807a68:	00000206 	br	807a74 <strlen+0x20>
  807a6c:	10c00007 	ldb	r3,0(r2)
  807a70:	18001826 	beq	r3,zero,807ad4 <strlen+0x80>
  807a74:	10800044 	addi	r2,r2,1
  807a78:	10c000cc 	andi	r3,r2,3
  807a7c:	183ffb1e 	bne	r3,zero,807a6c <__alt_mem_onchip_mem+0xff7ffa6c>
  807a80:	10c00017 	ldw	r3,0(r2)
  807a84:	01ffbff4 	movhi	r7,65279
  807a88:	39ffbfc4 	addi	r7,r7,-257
  807a8c:	00ca303a 	nor	r5,zero,r3
  807a90:	01a02074 	movhi	r6,32897
  807a94:	19c7883a 	add	r3,r3,r7
  807a98:	31a02004 	addi	r6,r6,-32640
  807a9c:	1946703a 	and	r3,r3,r5
  807aa0:	1986703a 	and	r3,r3,r6
  807aa4:	1800091e 	bne	r3,zero,807acc <strlen+0x78>
  807aa8:	10800104 	addi	r2,r2,4
  807aac:	10c00017 	ldw	r3,0(r2)
  807ab0:	19cb883a 	add	r5,r3,r7
  807ab4:	00c6303a 	nor	r3,zero,r3
  807ab8:	28c6703a 	and	r3,r5,r3
  807abc:	1986703a 	and	r3,r3,r6
  807ac0:	183ff926 	beq	r3,zero,807aa8 <__alt_mem_onchip_mem+0xff7ffaa8>
  807ac4:	00000106 	br	807acc <strlen+0x78>
  807ac8:	10800044 	addi	r2,r2,1
  807acc:	10c00007 	ldb	r3,0(r2)
  807ad0:	183ffd1e 	bne	r3,zero,807ac8 <__alt_mem_onchip_mem+0xff7ffac8>
  807ad4:	1105c83a 	sub	r2,r2,r4
  807ad8:	f800283a 	ret
  807adc:	2005883a 	mov	r2,r4
  807ae0:	003fe706 	br	807a80 <__alt_mem_onchip_mem+0xff7ffa80>
  807ae4:	0005883a 	mov	r2,zero
  807ae8:	f800283a 	ret

00807aec <__fp_unlock>:
  807aec:	0005883a 	mov	r2,zero
  807af0:	f800283a 	ret

00807af4 <_cleanup_r>:
  807af4:	01402074 	movhi	r5,129
  807af8:	2966a204 	addi	r5,r5,-25976
  807afc:	080840c1 	jmpi	80840c <_fwalk_reent>

00807b00 <__sinit.part.1>:
  807b00:	defff704 	addi	sp,sp,-36
  807b04:	00c02034 	movhi	r3,128
  807b08:	dfc00815 	stw	ra,32(sp)
  807b0c:	ddc00715 	stw	r23,28(sp)
  807b10:	dd800615 	stw	r22,24(sp)
  807b14:	dd400515 	stw	r21,20(sp)
  807b18:	dd000415 	stw	r20,16(sp)
  807b1c:	dcc00315 	stw	r19,12(sp)
  807b20:	dc800215 	stw	r18,8(sp)
  807b24:	dc400115 	stw	r17,4(sp)
  807b28:	dc000015 	stw	r16,0(sp)
  807b2c:	18debd04 	addi	r3,r3,31476
  807b30:	24000117 	ldw	r16,4(r4)
  807b34:	20c00f15 	stw	r3,60(r4)
  807b38:	2080bb04 	addi	r2,r4,748
  807b3c:	00c000c4 	movi	r3,3
  807b40:	20c0b915 	stw	r3,740(r4)
  807b44:	2080ba15 	stw	r2,744(r4)
  807b48:	2000b815 	stw	zero,736(r4)
  807b4c:	05c00204 	movi	r23,8
  807b50:	00800104 	movi	r2,4
  807b54:	2025883a 	mov	r18,r4
  807b58:	b80d883a 	mov	r6,r23
  807b5c:	81001704 	addi	r4,r16,92
  807b60:	000b883a 	mov	r5,zero
  807b64:	80000015 	stw	zero,0(r16)
  807b68:	80000115 	stw	zero,4(r16)
  807b6c:	80000215 	stw	zero,8(r16)
  807b70:	8080030d 	sth	r2,12(r16)
  807b74:	80001915 	stw	zero,100(r16)
  807b78:	8000038d 	sth	zero,14(r16)
  807b7c:	80000415 	stw	zero,16(r16)
  807b80:	80000515 	stw	zero,20(r16)
  807b84:	80000615 	stw	zero,24(r16)
  807b88:	08090640 	call	809064 <memset>
  807b8c:	05802074 	movhi	r22,129
  807b90:	94400217 	ldw	r17,8(r18)
  807b94:	05402074 	movhi	r21,129
  807b98:	05002074 	movhi	r20,129
  807b9c:	04c02074 	movhi	r19,129
  807ba0:	b5a5d104 	addi	r22,r22,-26812
  807ba4:	ad65e804 	addi	r21,r21,-26720
  807ba8:	a5260704 	addi	r20,r20,-26596
  807bac:	9ce61e04 	addi	r19,r19,-26504
  807bb0:	85800815 	stw	r22,32(r16)
  807bb4:	85400915 	stw	r21,36(r16)
  807bb8:	85000a15 	stw	r20,40(r16)
  807bbc:	84c00b15 	stw	r19,44(r16)
  807bc0:	84000715 	stw	r16,28(r16)
  807bc4:	00800284 	movi	r2,10
  807bc8:	8880030d 	sth	r2,12(r17)
  807bcc:	00800044 	movi	r2,1
  807bd0:	b80d883a 	mov	r6,r23
  807bd4:	89001704 	addi	r4,r17,92
  807bd8:	000b883a 	mov	r5,zero
  807bdc:	88000015 	stw	zero,0(r17)
  807be0:	88000115 	stw	zero,4(r17)
  807be4:	88000215 	stw	zero,8(r17)
  807be8:	88001915 	stw	zero,100(r17)
  807bec:	8880038d 	sth	r2,14(r17)
  807bf0:	88000415 	stw	zero,16(r17)
  807bf4:	88000515 	stw	zero,20(r17)
  807bf8:	88000615 	stw	zero,24(r17)
  807bfc:	08090640 	call	809064 <memset>
  807c00:	94000317 	ldw	r16,12(r18)
  807c04:	00800484 	movi	r2,18
  807c08:	8c400715 	stw	r17,28(r17)
  807c0c:	8d800815 	stw	r22,32(r17)
  807c10:	8d400915 	stw	r21,36(r17)
  807c14:	8d000a15 	stw	r20,40(r17)
  807c18:	8cc00b15 	stw	r19,44(r17)
  807c1c:	8080030d 	sth	r2,12(r16)
  807c20:	00800084 	movi	r2,2
  807c24:	80000015 	stw	zero,0(r16)
  807c28:	80000115 	stw	zero,4(r16)
  807c2c:	80000215 	stw	zero,8(r16)
  807c30:	80001915 	stw	zero,100(r16)
  807c34:	8080038d 	sth	r2,14(r16)
  807c38:	80000415 	stw	zero,16(r16)
  807c3c:	80000515 	stw	zero,20(r16)
  807c40:	80000615 	stw	zero,24(r16)
  807c44:	b80d883a 	mov	r6,r23
  807c48:	000b883a 	mov	r5,zero
  807c4c:	81001704 	addi	r4,r16,92
  807c50:	08090640 	call	809064 <memset>
  807c54:	00800044 	movi	r2,1
  807c58:	84000715 	stw	r16,28(r16)
  807c5c:	85800815 	stw	r22,32(r16)
  807c60:	85400915 	stw	r21,36(r16)
  807c64:	85000a15 	stw	r20,40(r16)
  807c68:	84c00b15 	stw	r19,44(r16)
  807c6c:	90800e15 	stw	r2,56(r18)
  807c70:	dfc00817 	ldw	ra,32(sp)
  807c74:	ddc00717 	ldw	r23,28(sp)
  807c78:	dd800617 	ldw	r22,24(sp)
  807c7c:	dd400517 	ldw	r21,20(sp)
  807c80:	dd000417 	ldw	r20,16(sp)
  807c84:	dcc00317 	ldw	r19,12(sp)
  807c88:	dc800217 	ldw	r18,8(sp)
  807c8c:	dc400117 	ldw	r17,4(sp)
  807c90:	dc000017 	ldw	r16,0(sp)
  807c94:	dec00904 	addi	sp,sp,36
  807c98:	f800283a 	ret

00807c9c <__fp_lock>:
  807c9c:	0005883a 	mov	r2,zero
  807ca0:	f800283a 	ret

00807ca4 <__sfmoreglue>:
  807ca4:	defffc04 	addi	sp,sp,-16
  807ca8:	dc400115 	stw	r17,4(sp)
  807cac:	2c7fffc4 	addi	r17,r5,-1
  807cb0:	8c401a24 	muli	r17,r17,104
  807cb4:	dc800215 	stw	r18,8(sp)
  807cb8:	2825883a 	mov	r18,r5
  807cbc:	89401d04 	addi	r5,r17,116
  807cc0:	dc000015 	stw	r16,0(sp)
  807cc4:	dfc00315 	stw	ra,12(sp)
  807cc8:	08084d00 	call	8084d0 <_malloc_r>
  807ccc:	1021883a 	mov	r16,r2
  807cd0:	10000726 	beq	r2,zero,807cf0 <__sfmoreglue+0x4c>
  807cd4:	11000304 	addi	r4,r2,12
  807cd8:	10000015 	stw	zero,0(r2)
  807cdc:	14800115 	stw	r18,4(r2)
  807ce0:	11000215 	stw	r4,8(r2)
  807ce4:	89801a04 	addi	r6,r17,104
  807ce8:	000b883a 	mov	r5,zero
  807cec:	08090640 	call	809064 <memset>
  807cf0:	8005883a 	mov	r2,r16
  807cf4:	dfc00317 	ldw	ra,12(sp)
  807cf8:	dc800217 	ldw	r18,8(sp)
  807cfc:	dc400117 	ldw	r17,4(sp)
  807d00:	dc000017 	ldw	r16,0(sp)
  807d04:	dec00404 	addi	sp,sp,16
  807d08:	f800283a 	ret

00807d0c <__sfp>:
  807d0c:	defffb04 	addi	sp,sp,-20
  807d10:	dc000015 	stw	r16,0(sp)
  807d14:	04002074 	movhi	r16,129
  807d18:	84021804 	addi	r16,r16,2144
  807d1c:	dcc00315 	stw	r19,12(sp)
  807d20:	2027883a 	mov	r19,r4
  807d24:	81000017 	ldw	r4,0(r16)
  807d28:	dfc00415 	stw	ra,16(sp)
  807d2c:	dc800215 	stw	r18,8(sp)
  807d30:	20800e17 	ldw	r2,56(r4)
  807d34:	dc400115 	stw	r17,4(sp)
  807d38:	1000021e 	bne	r2,zero,807d44 <__sfp+0x38>
  807d3c:	0807b000 	call	807b00 <__sinit.part.1>
  807d40:	81000017 	ldw	r4,0(r16)
  807d44:	2480b804 	addi	r18,r4,736
  807d48:	047fffc4 	movi	r17,-1
  807d4c:	91000117 	ldw	r4,4(r18)
  807d50:	94000217 	ldw	r16,8(r18)
  807d54:	213fffc4 	addi	r4,r4,-1
  807d58:	20000a16 	blt	r4,zero,807d84 <__sfp+0x78>
  807d5c:	8080030f 	ldh	r2,12(r16)
  807d60:	10000c26 	beq	r2,zero,807d94 <__sfp+0x88>
  807d64:	80c01d04 	addi	r3,r16,116
  807d68:	00000206 	br	807d74 <__sfp+0x68>
  807d6c:	18bfe60f 	ldh	r2,-104(r3)
  807d70:	10000826 	beq	r2,zero,807d94 <__sfp+0x88>
  807d74:	213fffc4 	addi	r4,r4,-1
  807d78:	1c3ffd04 	addi	r16,r3,-12
  807d7c:	18c01a04 	addi	r3,r3,104
  807d80:	247ffa1e 	bne	r4,r17,807d6c <__alt_mem_onchip_mem+0xff7ffd6c>
  807d84:	90800017 	ldw	r2,0(r18)
  807d88:	10001d26 	beq	r2,zero,807e00 <__sfp+0xf4>
  807d8c:	1025883a 	mov	r18,r2
  807d90:	003fee06 	br	807d4c <__alt_mem_onchip_mem+0xff7ffd4c>
  807d94:	00bfffc4 	movi	r2,-1
  807d98:	8080038d 	sth	r2,14(r16)
  807d9c:	00800044 	movi	r2,1
  807da0:	8080030d 	sth	r2,12(r16)
  807da4:	80001915 	stw	zero,100(r16)
  807da8:	80000015 	stw	zero,0(r16)
  807dac:	80000215 	stw	zero,8(r16)
  807db0:	80000115 	stw	zero,4(r16)
  807db4:	80000415 	stw	zero,16(r16)
  807db8:	80000515 	stw	zero,20(r16)
  807dbc:	80000615 	stw	zero,24(r16)
  807dc0:	01800204 	movi	r6,8
  807dc4:	000b883a 	mov	r5,zero
  807dc8:	81001704 	addi	r4,r16,92
  807dcc:	08090640 	call	809064 <memset>
  807dd0:	8005883a 	mov	r2,r16
  807dd4:	80000c15 	stw	zero,48(r16)
  807dd8:	80000d15 	stw	zero,52(r16)
  807ddc:	80001115 	stw	zero,68(r16)
  807de0:	80001215 	stw	zero,72(r16)
  807de4:	dfc00417 	ldw	ra,16(sp)
  807de8:	dcc00317 	ldw	r19,12(sp)
  807dec:	dc800217 	ldw	r18,8(sp)
  807df0:	dc400117 	ldw	r17,4(sp)
  807df4:	dc000017 	ldw	r16,0(sp)
  807df8:	dec00504 	addi	sp,sp,20
  807dfc:	f800283a 	ret
  807e00:	01400104 	movi	r5,4
  807e04:	9809883a 	mov	r4,r19
  807e08:	0807ca40 	call	807ca4 <__sfmoreglue>
  807e0c:	90800015 	stw	r2,0(r18)
  807e10:	103fde1e 	bne	r2,zero,807d8c <__alt_mem_onchip_mem+0xff7ffd8c>
  807e14:	00800304 	movi	r2,12
  807e18:	98800015 	stw	r2,0(r19)
  807e1c:	0005883a 	mov	r2,zero
  807e20:	003ff006 	br	807de4 <__alt_mem_onchip_mem+0xff7ffde4>

00807e24 <_cleanup>:
  807e24:	00802074 	movhi	r2,129
  807e28:	10821804 	addi	r2,r2,2144
  807e2c:	11000017 	ldw	r4,0(r2)
  807e30:	01402074 	movhi	r5,129
  807e34:	2966a204 	addi	r5,r5,-25976
  807e38:	080840c1 	jmpi	80840c <_fwalk_reent>

00807e3c <__sinit>:
  807e3c:	20800e17 	ldw	r2,56(r4)
  807e40:	10000126 	beq	r2,zero,807e48 <__sinit+0xc>
  807e44:	f800283a 	ret
  807e48:	0807b001 	jmpi	807b00 <__sinit.part.1>

00807e4c <__sfp_lock_acquire>:
  807e4c:	f800283a 	ret

00807e50 <__sfp_lock_release>:
  807e50:	f800283a 	ret

00807e54 <__sinit_lock_acquire>:
  807e54:	f800283a 	ret

00807e58 <__sinit_lock_release>:
  807e58:	f800283a 	ret

00807e5c <__fp_lock_all>:
  807e5c:	00802074 	movhi	r2,129
  807e60:	10821904 	addi	r2,r2,2148
  807e64:	11000017 	ldw	r4,0(r2)
  807e68:	01402034 	movhi	r5,128
  807e6c:	295f2704 	addi	r5,r5,31900
  807e70:	08083481 	jmpi	808348 <_fwalk>

00807e74 <__fp_unlock_all>:
  807e74:	00802074 	movhi	r2,129
  807e78:	10821904 	addi	r2,r2,2148
  807e7c:	11000017 	ldw	r4,0(r2)
  807e80:	01402034 	movhi	r5,128
  807e84:	295ebb04 	addi	r5,r5,31468
  807e88:	08083481 	jmpi	808348 <_fwalk>

00807e8c <__sfvwrite_r>:
  807e8c:	30800217 	ldw	r2,8(r6)
  807e90:	10006726 	beq	r2,zero,808030 <__sfvwrite_r+0x1a4>
  807e94:	28c0030b 	ldhu	r3,12(r5)
  807e98:	defff404 	addi	sp,sp,-48
  807e9c:	dd400715 	stw	r21,28(sp)
  807ea0:	dd000615 	stw	r20,24(sp)
  807ea4:	dc000215 	stw	r16,8(sp)
  807ea8:	dfc00b15 	stw	ra,44(sp)
  807eac:	df000a15 	stw	fp,40(sp)
  807eb0:	ddc00915 	stw	r23,36(sp)
  807eb4:	dd800815 	stw	r22,32(sp)
  807eb8:	dcc00515 	stw	r19,20(sp)
  807ebc:	dc800415 	stw	r18,16(sp)
  807ec0:	dc400315 	stw	r17,12(sp)
  807ec4:	1880020c 	andi	r2,r3,8
  807ec8:	2821883a 	mov	r16,r5
  807ecc:	202b883a 	mov	r21,r4
  807ed0:	3029883a 	mov	r20,r6
  807ed4:	10002726 	beq	r2,zero,807f74 <__sfvwrite_r+0xe8>
  807ed8:	28800417 	ldw	r2,16(r5)
  807edc:	10002526 	beq	r2,zero,807f74 <__sfvwrite_r+0xe8>
  807ee0:	1880008c 	andi	r2,r3,2
  807ee4:	a4400017 	ldw	r17,0(r20)
  807ee8:	10002a26 	beq	r2,zero,807f94 <__sfvwrite_r+0x108>
  807eec:	05a00034 	movhi	r22,32768
  807ef0:	0027883a 	mov	r19,zero
  807ef4:	0025883a 	mov	r18,zero
  807ef8:	b5bf0004 	addi	r22,r22,-1024
  807efc:	980d883a 	mov	r6,r19
  807f00:	a809883a 	mov	r4,r21
  807f04:	90004626 	beq	r18,zero,808020 <__sfvwrite_r+0x194>
  807f08:	900f883a 	mov	r7,r18
  807f0c:	b480022e 	bgeu	r22,r18,807f18 <__sfvwrite_r+0x8c>
  807f10:	01e00034 	movhi	r7,32768
  807f14:	39ff0004 	addi	r7,r7,-1024
  807f18:	80800917 	ldw	r2,36(r16)
  807f1c:	81400717 	ldw	r5,28(r16)
  807f20:	103ee83a 	callr	r2
  807f24:	0080570e 	bge	zero,r2,808084 <__sfvwrite_r+0x1f8>
  807f28:	a0c00217 	ldw	r3,8(r20)
  807f2c:	98a7883a 	add	r19,r19,r2
  807f30:	90a5c83a 	sub	r18,r18,r2
  807f34:	1885c83a 	sub	r2,r3,r2
  807f38:	a0800215 	stw	r2,8(r20)
  807f3c:	103fef1e 	bne	r2,zero,807efc <__alt_mem_onchip_mem+0xff7ffefc>
  807f40:	0005883a 	mov	r2,zero
  807f44:	dfc00b17 	ldw	ra,44(sp)
  807f48:	df000a17 	ldw	fp,40(sp)
  807f4c:	ddc00917 	ldw	r23,36(sp)
  807f50:	dd800817 	ldw	r22,32(sp)
  807f54:	dd400717 	ldw	r21,28(sp)
  807f58:	dd000617 	ldw	r20,24(sp)
  807f5c:	dcc00517 	ldw	r19,20(sp)
  807f60:	dc800417 	ldw	r18,16(sp)
  807f64:	dc400317 	ldw	r17,12(sp)
  807f68:	dc000217 	ldw	r16,8(sp)
  807f6c:	dec00c04 	addi	sp,sp,48
  807f70:	f800283a 	ret
  807f74:	800b883a 	mov	r5,r16
  807f78:	a809883a 	mov	r4,r21
  807f7c:	08098e00 	call	8098e0 <__swsetup_r>
  807f80:	1000eb1e 	bne	r2,zero,808330 <__sfvwrite_r+0x4a4>
  807f84:	80c0030b 	ldhu	r3,12(r16)
  807f88:	a4400017 	ldw	r17,0(r20)
  807f8c:	1880008c 	andi	r2,r3,2
  807f90:	103fd61e 	bne	r2,zero,807eec <__alt_mem_onchip_mem+0xff7ffeec>
  807f94:	1880004c 	andi	r2,r3,1
  807f98:	10003f1e 	bne	r2,zero,808098 <__sfvwrite_r+0x20c>
  807f9c:	0039883a 	mov	fp,zero
  807fa0:	0025883a 	mov	r18,zero
  807fa4:	90001a26 	beq	r18,zero,808010 <__sfvwrite_r+0x184>
  807fa8:	1880800c 	andi	r2,r3,512
  807fac:	84c00217 	ldw	r19,8(r16)
  807fb0:	10002126 	beq	r2,zero,808038 <__sfvwrite_r+0x1ac>
  807fb4:	982f883a 	mov	r23,r19
  807fb8:	94c09336 	bltu	r18,r19,808208 <__sfvwrite_r+0x37c>
  807fbc:	1881200c 	andi	r2,r3,1152
  807fc0:	10009e1e 	bne	r2,zero,80823c <__sfvwrite_r+0x3b0>
  807fc4:	81000017 	ldw	r4,0(r16)
  807fc8:	b80d883a 	mov	r6,r23
  807fcc:	e00b883a 	mov	r5,fp
  807fd0:	0808f080 	call	808f08 <memmove>
  807fd4:	80c00217 	ldw	r3,8(r16)
  807fd8:	81000017 	ldw	r4,0(r16)
  807fdc:	9005883a 	mov	r2,r18
  807fe0:	1ce7c83a 	sub	r19,r3,r19
  807fe4:	25cf883a 	add	r7,r4,r23
  807fe8:	84c00215 	stw	r19,8(r16)
  807fec:	81c00015 	stw	r7,0(r16)
  807ff0:	a0c00217 	ldw	r3,8(r20)
  807ff4:	e0b9883a 	add	fp,fp,r2
  807ff8:	90a5c83a 	sub	r18,r18,r2
  807ffc:	18a7c83a 	sub	r19,r3,r2
  808000:	a4c00215 	stw	r19,8(r20)
  808004:	983fce26 	beq	r19,zero,807f40 <__alt_mem_onchip_mem+0xff7fff40>
  808008:	80c0030b 	ldhu	r3,12(r16)
  80800c:	903fe61e 	bne	r18,zero,807fa8 <__alt_mem_onchip_mem+0xff7fffa8>
  808010:	8f000017 	ldw	fp,0(r17)
  808014:	8c800117 	ldw	r18,4(r17)
  808018:	8c400204 	addi	r17,r17,8
  80801c:	003fe106 	br	807fa4 <__alt_mem_onchip_mem+0xff7fffa4>
  808020:	8cc00017 	ldw	r19,0(r17)
  808024:	8c800117 	ldw	r18,4(r17)
  808028:	8c400204 	addi	r17,r17,8
  80802c:	003fb306 	br	807efc <__alt_mem_onchip_mem+0xff7ffefc>
  808030:	0005883a 	mov	r2,zero
  808034:	f800283a 	ret
  808038:	81000017 	ldw	r4,0(r16)
  80803c:	80800417 	ldw	r2,16(r16)
  808040:	11005736 	bltu	r2,r4,8081a0 <__sfvwrite_r+0x314>
  808044:	85c00517 	ldw	r23,20(r16)
  808048:	95c05536 	bltu	r18,r23,8081a0 <__sfvwrite_r+0x314>
  80804c:	00a00034 	movhi	r2,32768
  808050:	10bfffc4 	addi	r2,r2,-1
  808054:	9009883a 	mov	r4,r18
  808058:	1480012e 	bgeu	r2,r18,808060 <__sfvwrite_r+0x1d4>
  80805c:	1009883a 	mov	r4,r2
  808060:	b80b883a 	mov	r5,r23
  808064:	080a5940 	call	80a594 <__divsi3>
  808068:	15cf383a 	mul	r7,r2,r23
  80806c:	81400717 	ldw	r5,28(r16)
  808070:	80800917 	ldw	r2,36(r16)
  808074:	e00d883a 	mov	r6,fp
  808078:	a809883a 	mov	r4,r21
  80807c:	103ee83a 	callr	r2
  808080:	00bfdb16 	blt	zero,r2,807ff0 <__alt_mem_onchip_mem+0xff7ffff0>
  808084:	8080030b 	ldhu	r2,12(r16)
  808088:	10801014 	ori	r2,r2,64
  80808c:	8080030d 	sth	r2,12(r16)
  808090:	00bfffc4 	movi	r2,-1
  808094:	003fab06 	br	807f44 <__alt_mem_onchip_mem+0xff7fff44>
  808098:	0027883a 	mov	r19,zero
  80809c:	0011883a 	mov	r8,zero
  8080a0:	0039883a 	mov	fp,zero
  8080a4:	0025883a 	mov	r18,zero
  8080a8:	90001f26 	beq	r18,zero,808128 <__sfvwrite_r+0x29c>
  8080ac:	40005a26 	beq	r8,zero,808218 <__sfvwrite_r+0x38c>
  8080b0:	982d883a 	mov	r22,r19
  8080b4:	94c0012e 	bgeu	r18,r19,8080bc <__sfvwrite_r+0x230>
  8080b8:	902d883a 	mov	r22,r18
  8080bc:	81000017 	ldw	r4,0(r16)
  8080c0:	80800417 	ldw	r2,16(r16)
  8080c4:	b02f883a 	mov	r23,r22
  8080c8:	81c00517 	ldw	r7,20(r16)
  8080cc:	1100032e 	bgeu	r2,r4,8080dc <__sfvwrite_r+0x250>
  8080d0:	80c00217 	ldw	r3,8(r16)
  8080d4:	38c7883a 	add	r3,r7,r3
  8080d8:	1d801816 	blt	r3,r22,80813c <__sfvwrite_r+0x2b0>
  8080dc:	b1c03e16 	blt	r22,r7,8081d8 <__sfvwrite_r+0x34c>
  8080e0:	80800917 	ldw	r2,36(r16)
  8080e4:	81400717 	ldw	r5,28(r16)
  8080e8:	e00d883a 	mov	r6,fp
  8080ec:	da000115 	stw	r8,4(sp)
  8080f0:	a809883a 	mov	r4,r21
  8080f4:	103ee83a 	callr	r2
  8080f8:	102f883a 	mov	r23,r2
  8080fc:	da000117 	ldw	r8,4(sp)
  808100:	00bfe00e 	bge	zero,r2,808084 <__alt_mem_onchip_mem+0xff800084>
  808104:	9de7c83a 	sub	r19,r19,r23
  808108:	98001f26 	beq	r19,zero,808188 <__sfvwrite_r+0x2fc>
  80810c:	a0800217 	ldw	r2,8(r20)
  808110:	e5f9883a 	add	fp,fp,r23
  808114:	95e5c83a 	sub	r18,r18,r23
  808118:	15efc83a 	sub	r23,r2,r23
  80811c:	a5c00215 	stw	r23,8(r20)
  808120:	b83f8726 	beq	r23,zero,807f40 <__alt_mem_onchip_mem+0xff7fff40>
  808124:	903fe11e 	bne	r18,zero,8080ac <__alt_mem_onchip_mem+0xff8000ac>
  808128:	8f000017 	ldw	fp,0(r17)
  80812c:	8c800117 	ldw	r18,4(r17)
  808130:	0011883a 	mov	r8,zero
  808134:	8c400204 	addi	r17,r17,8
  808138:	003fdb06 	br	8080a8 <__alt_mem_onchip_mem+0xff8000a8>
  80813c:	180d883a 	mov	r6,r3
  808140:	e00b883a 	mov	r5,fp
  808144:	da000115 	stw	r8,4(sp)
  808148:	d8c00015 	stw	r3,0(sp)
  80814c:	0808f080 	call	808f08 <memmove>
  808150:	d8c00017 	ldw	r3,0(sp)
  808154:	80800017 	ldw	r2,0(r16)
  808158:	800b883a 	mov	r5,r16
  80815c:	a809883a 	mov	r4,r21
  808160:	10c5883a 	add	r2,r2,r3
  808164:	80800015 	stw	r2,0(r16)
  808168:	d8c00015 	stw	r3,0(sp)
  80816c:	0809da80 	call	809da8 <_fflush_r>
  808170:	d8c00017 	ldw	r3,0(sp)
  808174:	da000117 	ldw	r8,4(sp)
  808178:	103fc21e 	bne	r2,zero,808084 <__alt_mem_onchip_mem+0xff800084>
  80817c:	182f883a 	mov	r23,r3
  808180:	9de7c83a 	sub	r19,r19,r23
  808184:	983fe11e 	bne	r19,zero,80810c <__alt_mem_onchip_mem+0xff80010c>
  808188:	800b883a 	mov	r5,r16
  80818c:	a809883a 	mov	r4,r21
  808190:	0809da80 	call	809da8 <_fflush_r>
  808194:	103fbb1e 	bne	r2,zero,808084 <__alt_mem_onchip_mem+0xff800084>
  808198:	0011883a 	mov	r8,zero
  80819c:	003fdb06 	br	80810c <__alt_mem_onchip_mem+0xff80010c>
  8081a0:	94c0012e 	bgeu	r18,r19,8081a8 <__sfvwrite_r+0x31c>
  8081a4:	9027883a 	mov	r19,r18
  8081a8:	980d883a 	mov	r6,r19
  8081ac:	e00b883a 	mov	r5,fp
  8081b0:	0808f080 	call	808f08 <memmove>
  8081b4:	80800217 	ldw	r2,8(r16)
  8081b8:	80c00017 	ldw	r3,0(r16)
  8081bc:	14c5c83a 	sub	r2,r2,r19
  8081c0:	1cc7883a 	add	r3,r3,r19
  8081c4:	80800215 	stw	r2,8(r16)
  8081c8:	80c00015 	stw	r3,0(r16)
  8081cc:	10004326 	beq	r2,zero,8082dc <__sfvwrite_r+0x450>
  8081d0:	9805883a 	mov	r2,r19
  8081d4:	003f8606 	br	807ff0 <__alt_mem_onchip_mem+0xff7ffff0>
  8081d8:	b00d883a 	mov	r6,r22
  8081dc:	e00b883a 	mov	r5,fp
  8081e0:	da000115 	stw	r8,4(sp)
  8081e4:	0808f080 	call	808f08 <memmove>
  8081e8:	80800217 	ldw	r2,8(r16)
  8081ec:	80c00017 	ldw	r3,0(r16)
  8081f0:	da000117 	ldw	r8,4(sp)
  8081f4:	1585c83a 	sub	r2,r2,r22
  8081f8:	1dad883a 	add	r22,r3,r22
  8081fc:	80800215 	stw	r2,8(r16)
  808200:	85800015 	stw	r22,0(r16)
  808204:	003fbf06 	br	808104 <__alt_mem_onchip_mem+0xff800104>
  808208:	81000017 	ldw	r4,0(r16)
  80820c:	9027883a 	mov	r19,r18
  808210:	902f883a 	mov	r23,r18
  808214:	003f6c06 	br	807fc8 <__alt_mem_onchip_mem+0xff7fffc8>
  808218:	900d883a 	mov	r6,r18
  80821c:	01400284 	movi	r5,10
  808220:	e009883a 	mov	r4,fp
  808224:	0808cdc0 	call	808cdc <memchr>
  808228:	10003e26 	beq	r2,zero,808324 <__sfvwrite_r+0x498>
  80822c:	10800044 	addi	r2,r2,1
  808230:	1727c83a 	sub	r19,r2,fp
  808234:	02000044 	movi	r8,1
  808238:	003f9d06 	br	8080b0 <__alt_mem_onchip_mem+0xff8000b0>
  80823c:	80800517 	ldw	r2,20(r16)
  808240:	81400417 	ldw	r5,16(r16)
  808244:	81c00017 	ldw	r7,0(r16)
  808248:	10a7883a 	add	r19,r2,r2
  80824c:	9885883a 	add	r2,r19,r2
  808250:	1026d7fa 	srli	r19,r2,31
  808254:	396dc83a 	sub	r22,r7,r5
  808258:	b1000044 	addi	r4,r22,1
  80825c:	9885883a 	add	r2,r19,r2
  808260:	1027d07a 	srai	r19,r2,1
  808264:	2485883a 	add	r2,r4,r18
  808268:	980d883a 	mov	r6,r19
  80826c:	9880022e 	bgeu	r19,r2,808278 <__sfvwrite_r+0x3ec>
  808270:	1027883a 	mov	r19,r2
  808274:	100d883a 	mov	r6,r2
  808278:	18c1000c 	andi	r3,r3,1024
  80827c:	18001c26 	beq	r3,zero,8082f0 <__sfvwrite_r+0x464>
  808280:	300b883a 	mov	r5,r6
  808284:	a809883a 	mov	r4,r21
  808288:	08084d00 	call	8084d0 <_malloc_r>
  80828c:	102f883a 	mov	r23,r2
  808290:	10002926 	beq	r2,zero,808338 <__sfvwrite_r+0x4ac>
  808294:	81400417 	ldw	r5,16(r16)
  808298:	b00d883a 	mov	r6,r22
  80829c:	1009883a 	mov	r4,r2
  8082a0:	0808dc00 	call	808dc0 <memcpy>
  8082a4:	8080030b 	ldhu	r2,12(r16)
  8082a8:	00fedfc4 	movi	r3,-1153
  8082ac:	10c4703a 	and	r2,r2,r3
  8082b0:	10802014 	ori	r2,r2,128
  8082b4:	8080030d 	sth	r2,12(r16)
  8082b8:	bd89883a 	add	r4,r23,r22
  8082bc:	9d8fc83a 	sub	r7,r19,r22
  8082c0:	85c00415 	stw	r23,16(r16)
  8082c4:	84c00515 	stw	r19,20(r16)
  8082c8:	81000015 	stw	r4,0(r16)
  8082cc:	9027883a 	mov	r19,r18
  8082d0:	81c00215 	stw	r7,8(r16)
  8082d4:	902f883a 	mov	r23,r18
  8082d8:	003f3b06 	br	807fc8 <__alt_mem_onchip_mem+0xff7fffc8>
  8082dc:	800b883a 	mov	r5,r16
  8082e0:	a809883a 	mov	r4,r21
  8082e4:	0809da80 	call	809da8 <_fflush_r>
  8082e8:	103fb926 	beq	r2,zero,8081d0 <__alt_mem_onchip_mem+0xff8001d0>
  8082ec:	003f6506 	br	808084 <__alt_mem_onchip_mem+0xff800084>
  8082f0:	a809883a 	mov	r4,r21
  8082f4:	080918c0 	call	80918c <_realloc_r>
  8082f8:	102f883a 	mov	r23,r2
  8082fc:	103fee1e 	bne	r2,zero,8082b8 <__alt_mem_onchip_mem+0xff8002b8>
  808300:	81400417 	ldw	r5,16(r16)
  808304:	a809883a 	mov	r4,r21
  808308:	0809f580 	call	809f58 <_free_r>
  80830c:	8080030b 	ldhu	r2,12(r16)
  808310:	00ffdfc4 	movi	r3,-129
  808314:	1884703a 	and	r2,r3,r2
  808318:	00c00304 	movi	r3,12
  80831c:	a8c00015 	stw	r3,0(r21)
  808320:	003f5906 	br	808088 <__alt_mem_onchip_mem+0xff800088>
  808324:	94c00044 	addi	r19,r18,1
  808328:	02000044 	movi	r8,1
  80832c:	003f6006 	br	8080b0 <__alt_mem_onchip_mem+0xff8000b0>
  808330:	00bfffc4 	movi	r2,-1
  808334:	003f0306 	br	807f44 <__alt_mem_onchip_mem+0xff7fff44>
  808338:	00800304 	movi	r2,12
  80833c:	a8800015 	stw	r2,0(r21)
  808340:	8080030b 	ldhu	r2,12(r16)
  808344:	003f5006 	br	808088 <__alt_mem_onchip_mem+0xff800088>

00808348 <_fwalk>:
  808348:	defff704 	addi	sp,sp,-36
  80834c:	dd000415 	stw	r20,16(sp)
  808350:	dfc00815 	stw	ra,32(sp)
  808354:	ddc00715 	stw	r23,28(sp)
  808358:	dd800615 	stw	r22,24(sp)
  80835c:	dd400515 	stw	r21,20(sp)
  808360:	dcc00315 	stw	r19,12(sp)
  808364:	dc800215 	stw	r18,8(sp)
  808368:	dc400115 	stw	r17,4(sp)
  80836c:	dc000015 	stw	r16,0(sp)
  808370:	2500b804 	addi	r20,r4,736
  808374:	a0002326 	beq	r20,zero,808404 <_fwalk+0xbc>
  808378:	282b883a 	mov	r21,r5
  80837c:	002f883a 	mov	r23,zero
  808380:	05800044 	movi	r22,1
  808384:	04ffffc4 	movi	r19,-1
  808388:	a4400117 	ldw	r17,4(r20)
  80838c:	a4800217 	ldw	r18,8(r20)
  808390:	8c7fffc4 	addi	r17,r17,-1
  808394:	88000d16 	blt	r17,zero,8083cc <_fwalk+0x84>
  808398:	94000304 	addi	r16,r18,12
  80839c:	94800384 	addi	r18,r18,14
  8083a0:	8080000b 	ldhu	r2,0(r16)
  8083a4:	8c7fffc4 	addi	r17,r17,-1
  8083a8:	813ffd04 	addi	r4,r16,-12
  8083ac:	b080042e 	bgeu	r22,r2,8083c0 <_fwalk+0x78>
  8083b0:	9080000f 	ldh	r2,0(r18)
  8083b4:	14c00226 	beq	r2,r19,8083c0 <_fwalk+0x78>
  8083b8:	a83ee83a 	callr	r21
  8083bc:	b8aeb03a 	or	r23,r23,r2
  8083c0:	84001a04 	addi	r16,r16,104
  8083c4:	94801a04 	addi	r18,r18,104
  8083c8:	8cfff51e 	bne	r17,r19,8083a0 <__alt_mem_onchip_mem+0xff8003a0>
  8083cc:	a5000017 	ldw	r20,0(r20)
  8083d0:	a03fed1e 	bne	r20,zero,808388 <__alt_mem_onchip_mem+0xff800388>
  8083d4:	b805883a 	mov	r2,r23
  8083d8:	dfc00817 	ldw	ra,32(sp)
  8083dc:	ddc00717 	ldw	r23,28(sp)
  8083e0:	dd800617 	ldw	r22,24(sp)
  8083e4:	dd400517 	ldw	r21,20(sp)
  8083e8:	dd000417 	ldw	r20,16(sp)
  8083ec:	dcc00317 	ldw	r19,12(sp)
  8083f0:	dc800217 	ldw	r18,8(sp)
  8083f4:	dc400117 	ldw	r17,4(sp)
  8083f8:	dc000017 	ldw	r16,0(sp)
  8083fc:	dec00904 	addi	sp,sp,36
  808400:	f800283a 	ret
  808404:	002f883a 	mov	r23,zero
  808408:	003ff206 	br	8083d4 <__alt_mem_onchip_mem+0xff8003d4>

0080840c <_fwalk_reent>:
  80840c:	defff704 	addi	sp,sp,-36
  808410:	dd000415 	stw	r20,16(sp)
  808414:	dfc00815 	stw	ra,32(sp)
  808418:	ddc00715 	stw	r23,28(sp)
  80841c:	dd800615 	stw	r22,24(sp)
  808420:	dd400515 	stw	r21,20(sp)
  808424:	dcc00315 	stw	r19,12(sp)
  808428:	dc800215 	stw	r18,8(sp)
  80842c:	dc400115 	stw	r17,4(sp)
  808430:	dc000015 	stw	r16,0(sp)
  808434:	2500b804 	addi	r20,r4,736
  808438:	a0002326 	beq	r20,zero,8084c8 <_fwalk_reent+0xbc>
  80843c:	282b883a 	mov	r21,r5
  808440:	2027883a 	mov	r19,r4
  808444:	002f883a 	mov	r23,zero
  808448:	05800044 	movi	r22,1
  80844c:	04bfffc4 	movi	r18,-1
  808450:	a4400117 	ldw	r17,4(r20)
  808454:	a4000217 	ldw	r16,8(r20)
  808458:	8c7fffc4 	addi	r17,r17,-1
  80845c:	88000c16 	blt	r17,zero,808490 <_fwalk_reent+0x84>
  808460:	84000304 	addi	r16,r16,12
  808464:	8080000b 	ldhu	r2,0(r16)
  808468:	8c7fffc4 	addi	r17,r17,-1
  80846c:	817ffd04 	addi	r5,r16,-12
  808470:	b080052e 	bgeu	r22,r2,808488 <_fwalk_reent+0x7c>
  808474:	8080008f 	ldh	r2,2(r16)
  808478:	9809883a 	mov	r4,r19
  80847c:	14800226 	beq	r2,r18,808488 <_fwalk_reent+0x7c>
  808480:	a83ee83a 	callr	r21
  808484:	b8aeb03a 	or	r23,r23,r2
  808488:	84001a04 	addi	r16,r16,104
  80848c:	8cbff51e 	bne	r17,r18,808464 <__alt_mem_onchip_mem+0xff800464>
  808490:	a5000017 	ldw	r20,0(r20)
  808494:	a03fee1e 	bne	r20,zero,808450 <__alt_mem_onchip_mem+0xff800450>
  808498:	b805883a 	mov	r2,r23
  80849c:	dfc00817 	ldw	ra,32(sp)
  8084a0:	ddc00717 	ldw	r23,28(sp)
  8084a4:	dd800617 	ldw	r22,24(sp)
  8084a8:	dd400517 	ldw	r21,20(sp)
  8084ac:	dd000417 	ldw	r20,16(sp)
  8084b0:	dcc00317 	ldw	r19,12(sp)
  8084b4:	dc800217 	ldw	r18,8(sp)
  8084b8:	dc400117 	ldw	r17,4(sp)
  8084bc:	dc000017 	ldw	r16,0(sp)
  8084c0:	dec00904 	addi	sp,sp,36
  8084c4:	f800283a 	ret
  8084c8:	002f883a 	mov	r23,zero
  8084cc:	003ff206 	br	808498 <__alt_mem_onchip_mem+0xff800498>

008084d0 <_malloc_r>:
  8084d0:	defff504 	addi	sp,sp,-44
  8084d4:	dc800315 	stw	r18,12(sp)
  8084d8:	dfc00a15 	stw	ra,40(sp)
  8084dc:	df000915 	stw	fp,36(sp)
  8084e0:	ddc00815 	stw	r23,32(sp)
  8084e4:	dd800715 	stw	r22,28(sp)
  8084e8:	dd400615 	stw	r21,24(sp)
  8084ec:	dd000515 	stw	r20,20(sp)
  8084f0:	dcc00415 	stw	r19,16(sp)
  8084f4:	dc400215 	stw	r17,8(sp)
  8084f8:	dc000115 	stw	r16,4(sp)
  8084fc:	288002c4 	addi	r2,r5,11
  808500:	00c00584 	movi	r3,22
  808504:	2025883a 	mov	r18,r4
  808508:	18807f2e 	bgeu	r3,r2,808708 <_malloc_r+0x238>
  80850c:	047ffe04 	movi	r17,-8
  808510:	1462703a 	and	r17,r2,r17
  808514:	8800a316 	blt	r17,zero,8087a4 <_malloc_r+0x2d4>
  808518:	8940a236 	bltu	r17,r5,8087a4 <_malloc_r+0x2d4>
  80851c:	080acc40 	call	80acc4 <__malloc_lock>
  808520:	00807dc4 	movi	r2,503
  808524:	1441e92e 	bgeu	r2,r17,808ccc <_malloc_r+0x7fc>
  808528:	8804d27a 	srli	r2,r17,9
  80852c:	1000a126 	beq	r2,zero,8087b4 <_malloc_r+0x2e4>
  808530:	00c00104 	movi	r3,4
  808534:	18811e36 	bltu	r3,r2,8089b0 <_malloc_r+0x4e0>
  808538:	8804d1ba 	srli	r2,r17,6
  80853c:	12000e44 	addi	r8,r2,57
  808540:	11c00e04 	addi	r7,r2,56
  808544:	4209883a 	add	r4,r8,r8
  808548:	04c02074 	movhi	r19,129
  80854c:	2109883a 	add	r4,r4,r4
  808550:	9cfc1b04 	addi	r19,r19,-3988
  808554:	2109883a 	add	r4,r4,r4
  808558:	9909883a 	add	r4,r19,r4
  80855c:	24000117 	ldw	r16,4(r4)
  808560:	213ffe04 	addi	r4,r4,-8
  808564:	24009726 	beq	r4,r16,8087c4 <_malloc_r+0x2f4>
  808568:	80800117 	ldw	r2,4(r16)
  80856c:	01bfff04 	movi	r6,-4
  808570:	014003c4 	movi	r5,15
  808574:	1184703a 	and	r2,r2,r6
  808578:	1447c83a 	sub	r3,r2,r17
  80857c:	28c00716 	blt	r5,r3,80859c <_malloc_r+0xcc>
  808580:	1800920e 	bge	r3,zero,8087cc <_malloc_r+0x2fc>
  808584:	84000317 	ldw	r16,12(r16)
  808588:	24008e26 	beq	r4,r16,8087c4 <_malloc_r+0x2f4>
  80858c:	80800117 	ldw	r2,4(r16)
  808590:	1184703a 	and	r2,r2,r6
  808594:	1447c83a 	sub	r3,r2,r17
  808598:	28fff90e 	bge	r5,r3,808580 <__alt_mem_onchip_mem+0xff800580>
  80859c:	3809883a 	mov	r4,r7
  8085a0:	01802074 	movhi	r6,129
  8085a4:	9c000417 	ldw	r16,16(r19)
  8085a8:	31bc1b04 	addi	r6,r6,-3988
  8085ac:	32000204 	addi	r8,r6,8
  8085b0:	82013426 	beq	r16,r8,808a84 <_malloc_r+0x5b4>
  8085b4:	80c00117 	ldw	r3,4(r16)
  8085b8:	00bfff04 	movi	r2,-4
  8085bc:	188e703a 	and	r7,r3,r2
  8085c0:	3c45c83a 	sub	r2,r7,r17
  8085c4:	00c003c4 	movi	r3,15
  8085c8:	18811f16 	blt	r3,r2,808a48 <_malloc_r+0x578>
  8085cc:	32000515 	stw	r8,20(r6)
  8085d0:	32000415 	stw	r8,16(r6)
  8085d4:	10007f0e 	bge	r2,zero,8087d4 <_malloc_r+0x304>
  8085d8:	00807fc4 	movi	r2,511
  8085dc:	11c0fd36 	bltu	r2,r7,8089d4 <_malloc_r+0x504>
  8085e0:	3806d0fa 	srli	r3,r7,3
  8085e4:	01c00044 	movi	r7,1
  8085e8:	30800117 	ldw	r2,4(r6)
  8085ec:	19400044 	addi	r5,r3,1
  8085f0:	294b883a 	add	r5,r5,r5
  8085f4:	1807d0ba 	srai	r3,r3,2
  8085f8:	294b883a 	add	r5,r5,r5
  8085fc:	294b883a 	add	r5,r5,r5
  808600:	298b883a 	add	r5,r5,r6
  808604:	38c6983a 	sll	r3,r7,r3
  808608:	29c00017 	ldw	r7,0(r5)
  80860c:	2a7ffe04 	addi	r9,r5,-8
  808610:	1886b03a 	or	r3,r3,r2
  808614:	82400315 	stw	r9,12(r16)
  808618:	81c00215 	stw	r7,8(r16)
  80861c:	30c00115 	stw	r3,4(r6)
  808620:	2c000015 	stw	r16,0(r5)
  808624:	3c000315 	stw	r16,12(r7)
  808628:	2005d0ba 	srai	r2,r4,2
  80862c:	01400044 	movi	r5,1
  808630:	288a983a 	sll	r5,r5,r2
  808634:	19406f36 	bltu	r3,r5,8087f4 <_malloc_r+0x324>
  808638:	28c4703a 	and	r2,r5,r3
  80863c:	10000a1e 	bne	r2,zero,808668 <_malloc_r+0x198>
  808640:	00bfff04 	movi	r2,-4
  808644:	294b883a 	add	r5,r5,r5
  808648:	2088703a 	and	r4,r4,r2
  80864c:	28c4703a 	and	r2,r5,r3
  808650:	21000104 	addi	r4,r4,4
  808654:	1000041e 	bne	r2,zero,808668 <_malloc_r+0x198>
  808658:	294b883a 	add	r5,r5,r5
  80865c:	28c4703a 	and	r2,r5,r3
  808660:	21000104 	addi	r4,r4,4
  808664:	103ffc26 	beq	r2,zero,808658 <__alt_mem_onchip_mem+0xff800658>
  808668:	02bfff04 	movi	r10,-4
  80866c:	024003c4 	movi	r9,15
  808670:	21800044 	addi	r6,r4,1
  808674:	318d883a 	add	r6,r6,r6
  808678:	318d883a 	add	r6,r6,r6
  80867c:	318d883a 	add	r6,r6,r6
  808680:	998d883a 	add	r6,r19,r6
  808684:	333ffe04 	addi	r12,r6,-8
  808688:	2017883a 	mov	r11,r4
  80868c:	31800104 	addi	r6,r6,4
  808690:	34000017 	ldw	r16,0(r6)
  808694:	31fffd04 	addi	r7,r6,-12
  808698:	81c0041e 	bne	r16,r7,8086ac <_malloc_r+0x1dc>
  80869c:	0000fb06 	br	808a8c <_malloc_r+0x5bc>
  8086a0:	1801030e 	bge	r3,zero,808ab0 <_malloc_r+0x5e0>
  8086a4:	84000317 	ldw	r16,12(r16)
  8086a8:	81c0f826 	beq	r16,r7,808a8c <_malloc_r+0x5bc>
  8086ac:	80800117 	ldw	r2,4(r16)
  8086b0:	1284703a 	and	r2,r2,r10
  8086b4:	1447c83a 	sub	r3,r2,r17
  8086b8:	48fff90e 	bge	r9,r3,8086a0 <__alt_mem_onchip_mem+0xff8006a0>
  8086bc:	80800317 	ldw	r2,12(r16)
  8086c0:	81000217 	ldw	r4,8(r16)
  8086c4:	89400054 	ori	r5,r17,1
  8086c8:	81400115 	stw	r5,4(r16)
  8086cc:	20800315 	stw	r2,12(r4)
  8086d0:	11000215 	stw	r4,8(r2)
  8086d4:	8463883a 	add	r17,r16,r17
  8086d8:	9c400515 	stw	r17,20(r19)
  8086dc:	9c400415 	stw	r17,16(r19)
  8086e0:	18800054 	ori	r2,r3,1
  8086e4:	88800115 	stw	r2,4(r17)
  8086e8:	8a000315 	stw	r8,12(r17)
  8086ec:	8a000215 	stw	r8,8(r17)
  8086f0:	88e3883a 	add	r17,r17,r3
  8086f4:	88c00015 	stw	r3,0(r17)
  8086f8:	9009883a 	mov	r4,r18
  8086fc:	080ace80 	call	80ace8 <__malloc_unlock>
  808700:	80800204 	addi	r2,r16,8
  808704:	00001b06 	br	808774 <_malloc_r+0x2a4>
  808708:	04400404 	movi	r17,16
  80870c:	89402536 	bltu	r17,r5,8087a4 <_malloc_r+0x2d4>
  808710:	080acc40 	call	80acc4 <__malloc_lock>
  808714:	00800184 	movi	r2,6
  808718:	01000084 	movi	r4,2
  80871c:	04c02074 	movhi	r19,129
  808720:	1085883a 	add	r2,r2,r2
  808724:	9cfc1b04 	addi	r19,r19,-3988
  808728:	1085883a 	add	r2,r2,r2
  80872c:	9885883a 	add	r2,r19,r2
  808730:	14000117 	ldw	r16,4(r2)
  808734:	10fffe04 	addi	r3,r2,-8
  808738:	80c0d926 	beq	r16,r3,808aa0 <_malloc_r+0x5d0>
  80873c:	80c00117 	ldw	r3,4(r16)
  808740:	81000317 	ldw	r4,12(r16)
  808744:	00bfff04 	movi	r2,-4
  808748:	1884703a 	and	r2,r3,r2
  80874c:	81400217 	ldw	r5,8(r16)
  808750:	8085883a 	add	r2,r16,r2
  808754:	10c00117 	ldw	r3,4(r2)
  808758:	29000315 	stw	r4,12(r5)
  80875c:	21400215 	stw	r5,8(r4)
  808760:	18c00054 	ori	r3,r3,1
  808764:	10c00115 	stw	r3,4(r2)
  808768:	9009883a 	mov	r4,r18
  80876c:	080ace80 	call	80ace8 <__malloc_unlock>
  808770:	80800204 	addi	r2,r16,8
  808774:	dfc00a17 	ldw	ra,40(sp)
  808778:	df000917 	ldw	fp,36(sp)
  80877c:	ddc00817 	ldw	r23,32(sp)
  808780:	dd800717 	ldw	r22,28(sp)
  808784:	dd400617 	ldw	r21,24(sp)
  808788:	dd000517 	ldw	r20,20(sp)
  80878c:	dcc00417 	ldw	r19,16(sp)
  808790:	dc800317 	ldw	r18,12(sp)
  808794:	dc400217 	ldw	r17,8(sp)
  808798:	dc000117 	ldw	r16,4(sp)
  80879c:	dec00b04 	addi	sp,sp,44
  8087a0:	f800283a 	ret
  8087a4:	00800304 	movi	r2,12
  8087a8:	90800015 	stw	r2,0(r18)
  8087ac:	0005883a 	mov	r2,zero
  8087b0:	003ff006 	br	808774 <__alt_mem_onchip_mem+0xff800774>
  8087b4:	01002004 	movi	r4,128
  8087b8:	02001004 	movi	r8,64
  8087bc:	01c00fc4 	movi	r7,63
  8087c0:	003f6106 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  8087c4:	4009883a 	mov	r4,r8
  8087c8:	003f7506 	br	8085a0 <__alt_mem_onchip_mem+0xff8005a0>
  8087cc:	81000317 	ldw	r4,12(r16)
  8087d0:	003fde06 	br	80874c <__alt_mem_onchip_mem+0xff80074c>
  8087d4:	81c5883a 	add	r2,r16,r7
  8087d8:	11400117 	ldw	r5,4(r2)
  8087dc:	9009883a 	mov	r4,r18
  8087e0:	29400054 	ori	r5,r5,1
  8087e4:	11400115 	stw	r5,4(r2)
  8087e8:	080ace80 	call	80ace8 <__malloc_unlock>
  8087ec:	80800204 	addi	r2,r16,8
  8087f0:	003fe006 	br	808774 <__alt_mem_onchip_mem+0xff800774>
  8087f4:	9c000217 	ldw	r16,8(r19)
  8087f8:	00bfff04 	movi	r2,-4
  8087fc:	85800117 	ldw	r22,4(r16)
  808800:	b0ac703a 	and	r22,r22,r2
  808804:	b4400336 	bltu	r22,r17,808814 <_malloc_r+0x344>
  808808:	b445c83a 	sub	r2,r22,r17
  80880c:	00c003c4 	movi	r3,15
  808810:	18805d16 	blt	r3,r2,808988 <_malloc_r+0x4b8>
  808814:	05c02074 	movhi	r23,129
  808818:	00802074 	movhi	r2,129
  80881c:	10894004 	addi	r2,r2,9472
  808820:	bdc21a04 	addi	r23,r23,2152
  808824:	15400017 	ldw	r21,0(r2)
  808828:	b8c00017 	ldw	r3,0(r23)
  80882c:	00bfffc4 	movi	r2,-1
  808830:	858d883a 	add	r6,r16,r22
  808834:	8d6b883a 	add	r21,r17,r21
  808838:	1880ea26 	beq	r3,r2,808be4 <_malloc_r+0x714>
  80883c:	ad4403c4 	addi	r21,r21,4111
  808840:	00bc0004 	movi	r2,-4096
  808844:	a8aa703a 	and	r21,r21,r2
  808848:	a80b883a 	mov	r5,r21
  80884c:	9009883a 	mov	r4,r18
  808850:	d9800015 	stw	r6,0(sp)
  808854:	08096f00 	call	8096f0 <_sbrk_r>
  808858:	1029883a 	mov	r20,r2
  80885c:	00bfffc4 	movi	r2,-1
  808860:	d9800017 	ldw	r6,0(sp)
  808864:	a080e826 	beq	r20,r2,808c08 <_malloc_r+0x738>
  808868:	a180a636 	bltu	r20,r6,808b04 <_malloc_r+0x634>
  80886c:	07002074 	movhi	fp,129
  808870:	e7094904 	addi	fp,fp,9508
  808874:	e0800017 	ldw	r2,0(fp)
  808878:	a887883a 	add	r3,r21,r2
  80887c:	e0c00015 	stw	r3,0(fp)
  808880:	3500e626 	beq	r6,r20,808c1c <_malloc_r+0x74c>
  808884:	b9000017 	ldw	r4,0(r23)
  808888:	00bfffc4 	movi	r2,-1
  80888c:	2080ee26 	beq	r4,r2,808c48 <_malloc_r+0x778>
  808890:	a185c83a 	sub	r2,r20,r6
  808894:	10c5883a 	add	r2,r2,r3
  808898:	e0800015 	stw	r2,0(fp)
  80889c:	a0c001cc 	andi	r3,r20,7
  8088a0:	1800bc26 	beq	r3,zero,808b94 <_malloc_r+0x6c4>
  8088a4:	a0e9c83a 	sub	r20,r20,r3
  8088a8:	00840204 	movi	r2,4104
  8088ac:	a5000204 	addi	r20,r20,8
  8088b0:	10c7c83a 	sub	r3,r2,r3
  8088b4:	a545883a 	add	r2,r20,r21
  8088b8:	1083ffcc 	andi	r2,r2,4095
  8088bc:	18abc83a 	sub	r21,r3,r2
  8088c0:	a80b883a 	mov	r5,r21
  8088c4:	9009883a 	mov	r4,r18
  8088c8:	08096f00 	call	8096f0 <_sbrk_r>
  8088cc:	00ffffc4 	movi	r3,-1
  8088d0:	10c0e126 	beq	r2,r3,808c58 <_malloc_r+0x788>
  8088d4:	1505c83a 	sub	r2,r2,r20
  8088d8:	1545883a 	add	r2,r2,r21
  8088dc:	10800054 	ori	r2,r2,1
  8088e0:	e0c00017 	ldw	r3,0(fp)
  8088e4:	9d000215 	stw	r20,8(r19)
  8088e8:	a0800115 	stw	r2,4(r20)
  8088ec:	a8c7883a 	add	r3,r21,r3
  8088f0:	e0c00015 	stw	r3,0(fp)
  8088f4:	84c00e26 	beq	r16,r19,808930 <_malloc_r+0x460>
  8088f8:	018003c4 	movi	r6,15
  8088fc:	3580a72e 	bgeu	r6,r22,808b9c <_malloc_r+0x6cc>
  808900:	81400117 	ldw	r5,4(r16)
  808904:	013ffe04 	movi	r4,-8
  808908:	b0bffd04 	addi	r2,r22,-12
  80890c:	1104703a 	and	r2,r2,r4
  808910:	2900004c 	andi	r4,r5,1
  808914:	2088b03a 	or	r4,r4,r2
  808918:	81000115 	stw	r4,4(r16)
  80891c:	01400144 	movi	r5,5
  808920:	8089883a 	add	r4,r16,r2
  808924:	21400115 	stw	r5,4(r4)
  808928:	21400215 	stw	r5,8(r4)
  80892c:	3080cd36 	bltu	r6,r2,808c64 <_malloc_r+0x794>
  808930:	00802074 	movhi	r2,129
  808934:	10893f04 	addi	r2,r2,9468
  808938:	11000017 	ldw	r4,0(r2)
  80893c:	20c0012e 	bgeu	r4,r3,808944 <_malloc_r+0x474>
  808940:	10c00015 	stw	r3,0(r2)
  808944:	00802074 	movhi	r2,129
  808948:	10893e04 	addi	r2,r2,9464
  80894c:	11000017 	ldw	r4,0(r2)
  808950:	9c000217 	ldw	r16,8(r19)
  808954:	20c0012e 	bgeu	r4,r3,80895c <_malloc_r+0x48c>
  808958:	10c00015 	stw	r3,0(r2)
  80895c:	80c00117 	ldw	r3,4(r16)
  808960:	00bfff04 	movi	r2,-4
  808964:	1886703a 	and	r3,r3,r2
  808968:	1c45c83a 	sub	r2,r3,r17
  80896c:	1c400236 	bltu	r3,r17,808978 <_malloc_r+0x4a8>
  808970:	00c003c4 	movi	r3,15
  808974:	18800416 	blt	r3,r2,808988 <_malloc_r+0x4b8>
  808978:	9009883a 	mov	r4,r18
  80897c:	080ace80 	call	80ace8 <__malloc_unlock>
  808980:	0005883a 	mov	r2,zero
  808984:	003f7b06 	br	808774 <__alt_mem_onchip_mem+0xff800774>
  808988:	88c00054 	ori	r3,r17,1
  80898c:	80c00115 	stw	r3,4(r16)
  808990:	8463883a 	add	r17,r16,r17
  808994:	10800054 	ori	r2,r2,1
  808998:	9c400215 	stw	r17,8(r19)
  80899c:	88800115 	stw	r2,4(r17)
  8089a0:	9009883a 	mov	r4,r18
  8089a4:	080ace80 	call	80ace8 <__malloc_unlock>
  8089a8:	80800204 	addi	r2,r16,8
  8089ac:	003f7106 	br	808774 <__alt_mem_onchip_mem+0xff800774>
  8089b0:	00c00504 	movi	r3,20
  8089b4:	18804a2e 	bgeu	r3,r2,808ae0 <_malloc_r+0x610>
  8089b8:	00c01504 	movi	r3,84
  8089bc:	18806e36 	bltu	r3,r2,808b78 <_malloc_r+0x6a8>
  8089c0:	8804d33a 	srli	r2,r17,12
  8089c4:	12001bc4 	addi	r8,r2,111
  8089c8:	11c01b84 	addi	r7,r2,110
  8089cc:	4209883a 	add	r4,r8,r8
  8089d0:	003edd06 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  8089d4:	3804d27a 	srli	r2,r7,9
  8089d8:	00c00104 	movi	r3,4
  8089dc:	1880442e 	bgeu	r3,r2,808af0 <_malloc_r+0x620>
  8089e0:	00c00504 	movi	r3,20
  8089e4:	18808136 	bltu	r3,r2,808bec <_malloc_r+0x71c>
  8089e8:	11401704 	addi	r5,r2,92
  8089ec:	10c016c4 	addi	r3,r2,91
  8089f0:	294b883a 	add	r5,r5,r5
  8089f4:	294b883a 	add	r5,r5,r5
  8089f8:	294b883a 	add	r5,r5,r5
  8089fc:	994b883a 	add	r5,r19,r5
  808a00:	28800017 	ldw	r2,0(r5)
  808a04:	01802074 	movhi	r6,129
  808a08:	297ffe04 	addi	r5,r5,-8
  808a0c:	31bc1b04 	addi	r6,r6,-3988
  808a10:	28806526 	beq	r5,r2,808ba8 <_malloc_r+0x6d8>
  808a14:	01bfff04 	movi	r6,-4
  808a18:	10c00117 	ldw	r3,4(r2)
  808a1c:	1986703a 	and	r3,r3,r6
  808a20:	38c0022e 	bgeu	r7,r3,808a2c <_malloc_r+0x55c>
  808a24:	10800217 	ldw	r2,8(r2)
  808a28:	28bffb1e 	bne	r5,r2,808a18 <__alt_mem_onchip_mem+0xff800a18>
  808a2c:	11400317 	ldw	r5,12(r2)
  808a30:	98c00117 	ldw	r3,4(r19)
  808a34:	81400315 	stw	r5,12(r16)
  808a38:	80800215 	stw	r2,8(r16)
  808a3c:	2c000215 	stw	r16,8(r5)
  808a40:	14000315 	stw	r16,12(r2)
  808a44:	003ef806 	br	808628 <__alt_mem_onchip_mem+0xff800628>
  808a48:	88c00054 	ori	r3,r17,1
  808a4c:	80c00115 	stw	r3,4(r16)
  808a50:	8463883a 	add	r17,r16,r17
  808a54:	34400515 	stw	r17,20(r6)
  808a58:	34400415 	stw	r17,16(r6)
  808a5c:	10c00054 	ori	r3,r2,1
  808a60:	8a000315 	stw	r8,12(r17)
  808a64:	8a000215 	stw	r8,8(r17)
  808a68:	88c00115 	stw	r3,4(r17)
  808a6c:	88a3883a 	add	r17,r17,r2
  808a70:	88800015 	stw	r2,0(r17)
  808a74:	9009883a 	mov	r4,r18
  808a78:	080ace80 	call	80ace8 <__malloc_unlock>
  808a7c:	80800204 	addi	r2,r16,8
  808a80:	003f3c06 	br	808774 <__alt_mem_onchip_mem+0xff800774>
  808a84:	30c00117 	ldw	r3,4(r6)
  808a88:	003ee706 	br	808628 <__alt_mem_onchip_mem+0xff800628>
  808a8c:	5ac00044 	addi	r11,r11,1
  808a90:	588000cc 	andi	r2,r11,3
  808a94:	31800204 	addi	r6,r6,8
  808a98:	103efd1e 	bne	r2,zero,808690 <__alt_mem_onchip_mem+0xff800690>
  808a9c:	00002406 	br	808b30 <_malloc_r+0x660>
  808aa0:	14000317 	ldw	r16,12(r2)
  808aa4:	143f251e 	bne	r2,r16,80873c <__alt_mem_onchip_mem+0xff80073c>
  808aa8:	21000084 	addi	r4,r4,2
  808aac:	003ebc06 	br	8085a0 <__alt_mem_onchip_mem+0xff8005a0>
  808ab0:	8085883a 	add	r2,r16,r2
  808ab4:	10c00117 	ldw	r3,4(r2)
  808ab8:	81000317 	ldw	r4,12(r16)
  808abc:	81400217 	ldw	r5,8(r16)
  808ac0:	18c00054 	ori	r3,r3,1
  808ac4:	10c00115 	stw	r3,4(r2)
  808ac8:	29000315 	stw	r4,12(r5)
  808acc:	21400215 	stw	r5,8(r4)
  808ad0:	9009883a 	mov	r4,r18
  808ad4:	080ace80 	call	80ace8 <__malloc_unlock>
  808ad8:	80800204 	addi	r2,r16,8
  808adc:	003f2506 	br	808774 <__alt_mem_onchip_mem+0xff800774>
  808ae0:	12001704 	addi	r8,r2,92
  808ae4:	11c016c4 	addi	r7,r2,91
  808ae8:	4209883a 	add	r4,r8,r8
  808aec:	003e9606 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  808af0:	3804d1ba 	srli	r2,r7,6
  808af4:	11400e44 	addi	r5,r2,57
  808af8:	10c00e04 	addi	r3,r2,56
  808afc:	294b883a 	add	r5,r5,r5
  808b00:	003fbc06 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808b04:	84ff5926 	beq	r16,r19,80886c <__alt_mem_onchip_mem+0xff80086c>
  808b08:	00802074 	movhi	r2,129
  808b0c:	10bc1b04 	addi	r2,r2,-3988
  808b10:	14000217 	ldw	r16,8(r2)
  808b14:	00bfff04 	movi	r2,-4
  808b18:	80c00117 	ldw	r3,4(r16)
  808b1c:	1886703a 	and	r3,r3,r2
  808b20:	003f9106 	br	808968 <__alt_mem_onchip_mem+0xff800968>
  808b24:	60800217 	ldw	r2,8(r12)
  808b28:	213fffc4 	addi	r4,r4,-1
  808b2c:	1300651e 	bne	r2,r12,808cc4 <_malloc_r+0x7f4>
  808b30:	208000cc 	andi	r2,r4,3
  808b34:	633ffe04 	addi	r12,r12,-8
  808b38:	103ffa1e 	bne	r2,zero,808b24 <__alt_mem_onchip_mem+0xff800b24>
  808b3c:	98800117 	ldw	r2,4(r19)
  808b40:	0146303a 	nor	r3,zero,r5
  808b44:	1884703a 	and	r2,r3,r2
  808b48:	98800115 	stw	r2,4(r19)
  808b4c:	294b883a 	add	r5,r5,r5
  808b50:	117f2836 	bltu	r2,r5,8087f4 <__alt_mem_onchip_mem+0xff8007f4>
  808b54:	283f2726 	beq	r5,zero,8087f4 <__alt_mem_onchip_mem+0xff8007f4>
  808b58:	2886703a 	and	r3,r5,r2
  808b5c:	5809883a 	mov	r4,r11
  808b60:	183ec31e 	bne	r3,zero,808670 <__alt_mem_onchip_mem+0xff800670>
  808b64:	294b883a 	add	r5,r5,r5
  808b68:	2886703a 	and	r3,r5,r2
  808b6c:	21000104 	addi	r4,r4,4
  808b70:	183ffc26 	beq	r3,zero,808b64 <__alt_mem_onchip_mem+0xff800b64>
  808b74:	003ebe06 	br	808670 <__alt_mem_onchip_mem+0xff800670>
  808b78:	00c05504 	movi	r3,340
  808b7c:	18801236 	bltu	r3,r2,808bc8 <_malloc_r+0x6f8>
  808b80:	8804d3fa 	srli	r2,r17,15
  808b84:	12001e04 	addi	r8,r2,120
  808b88:	11c01dc4 	addi	r7,r2,119
  808b8c:	4209883a 	add	r4,r8,r8
  808b90:	003e6d06 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  808b94:	00c40004 	movi	r3,4096
  808b98:	003f4606 	br	8088b4 <__alt_mem_onchip_mem+0xff8008b4>
  808b9c:	00800044 	movi	r2,1
  808ba0:	a0800115 	stw	r2,4(r20)
  808ba4:	003f7406 	br	808978 <__alt_mem_onchip_mem+0xff800978>
  808ba8:	1805d0ba 	srai	r2,r3,2
  808bac:	01c00044 	movi	r7,1
  808bb0:	30c00117 	ldw	r3,4(r6)
  808bb4:	388e983a 	sll	r7,r7,r2
  808bb8:	2805883a 	mov	r2,r5
  808bbc:	38c6b03a 	or	r3,r7,r3
  808bc0:	30c00115 	stw	r3,4(r6)
  808bc4:	003f9b06 	br	808a34 <__alt_mem_onchip_mem+0xff800a34>
  808bc8:	00c15504 	movi	r3,1364
  808bcc:	18801a36 	bltu	r3,r2,808c38 <_malloc_r+0x768>
  808bd0:	8804d4ba 	srli	r2,r17,18
  808bd4:	12001f44 	addi	r8,r2,125
  808bd8:	11c01f04 	addi	r7,r2,124
  808bdc:	4209883a 	add	r4,r8,r8
  808be0:	003e5906 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  808be4:	ad400404 	addi	r21,r21,16
  808be8:	003f1706 	br	808848 <__alt_mem_onchip_mem+0xff800848>
  808bec:	00c01504 	movi	r3,84
  808bf0:	18802336 	bltu	r3,r2,808c80 <_malloc_r+0x7b0>
  808bf4:	3804d33a 	srli	r2,r7,12
  808bf8:	11401bc4 	addi	r5,r2,111
  808bfc:	10c01b84 	addi	r3,r2,110
  808c00:	294b883a 	add	r5,r5,r5
  808c04:	003f7b06 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808c08:	9c000217 	ldw	r16,8(r19)
  808c0c:	00bfff04 	movi	r2,-4
  808c10:	80c00117 	ldw	r3,4(r16)
  808c14:	1886703a 	and	r3,r3,r2
  808c18:	003f5306 	br	808968 <__alt_mem_onchip_mem+0xff800968>
  808c1c:	3083ffcc 	andi	r2,r6,4095
  808c20:	103f181e 	bne	r2,zero,808884 <__alt_mem_onchip_mem+0xff800884>
  808c24:	99000217 	ldw	r4,8(r19)
  808c28:	b545883a 	add	r2,r22,r21
  808c2c:	10800054 	ori	r2,r2,1
  808c30:	20800115 	stw	r2,4(r4)
  808c34:	003f3e06 	br	808930 <__alt_mem_onchip_mem+0xff800930>
  808c38:	01003f84 	movi	r4,254
  808c3c:	02001fc4 	movi	r8,127
  808c40:	01c01f84 	movi	r7,126
  808c44:	003e4006 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  808c48:	00802074 	movhi	r2,129
  808c4c:	10821a04 	addi	r2,r2,2152
  808c50:	15000015 	stw	r20,0(r2)
  808c54:	003f1106 	br	80889c <__alt_mem_onchip_mem+0xff80089c>
  808c58:	00800044 	movi	r2,1
  808c5c:	002b883a 	mov	r21,zero
  808c60:	003f1f06 	br	8088e0 <__alt_mem_onchip_mem+0xff8008e0>
  808c64:	81400204 	addi	r5,r16,8
  808c68:	9009883a 	mov	r4,r18
  808c6c:	0809f580 	call	809f58 <_free_r>
  808c70:	00802074 	movhi	r2,129
  808c74:	10894904 	addi	r2,r2,9508
  808c78:	10c00017 	ldw	r3,0(r2)
  808c7c:	003f2c06 	br	808930 <__alt_mem_onchip_mem+0xff800930>
  808c80:	00c05504 	movi	r3,340
  808c84:	18800536 	bltu	r3,r2,808c9c <_malloc_r+0x7cc>
  808c88:	3804d3fa 	srli	r2,r7,15
  808c8c:	11401e04 	addi	r5,r2,120
  808c90:	10c01dc4 	addi	r3,r2,119
  808c94:	294b883a 	add	r5,r5,r5
  808c98:	003f5606 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808c9c:	00c15504 	movi	r3,1364
  808ca0:	18800536 	bltu	r3,r2,808cb8 <_malloc_r+0x7e8>
  808ca4:	3804d4ba 	srli	r2,r7,18
  808ca8:	11401f44 	addi	r5,r2,125
  808cac:	10c01f04 	addi	r3,r2,124
  808cb0:	294b883a 	add	r5,r5,r5
  808cb4:	003f4f06 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808cb8:	01403f84 	movi	r5,254
  808cbc:	00c01f84 	movi	r3,126
  808cc0:	003f4c06 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808cc4:	98800117 	ldw	r2,4(r19)
  808cc8:	003fa006 	br	808b4c <__alt_mem_onchip_mem+0xff800b4c>
  808ccc:	8808d0fa 	srli	r4,r17,3
  808cd0:	20800044 	addi	r2,r4,1
  808cd4:	1085883a 	add	r2,r2,r2
  808cd8:	003e9006 	br	80871c <__alt_mem_onchip_mem+0xff80071c>

00808cdc <memchr>:
  808cdc:	208000cc 	andi	r2,r4,3
  808ce0:	280f883a 	mov	r7,r5
  808ce4:	10003426 	beq	r2,zero,808db8 <memchr+0xdc>
  808ce8:	30bfffc4 	addi	r2,r6,-1
  808cec:	30001a26 	beq	r6,zero,808d58 <memchr+0x7c>
  808cf0:	20c00003 	ldbu	r3,0(r4)
  808cf4:	29803fcc 	andi	r6,r5,255
  808cf8:	30c0051e 	bne	r6,r3,808d10 <memchr+0x34>
  808cfc:	00001806 	br	808d60 <memchr+0x84>
  808d00:	10001526 	beq	r2,zero,808d58 <memchr+0x7c>
  808d04:	20c00003 	ldbu	r3,0(r4)
  808d08:	10bfffc4 	addi	r2,r2,-1
  808d0c:	30c01426 	beq	r6,r3,808d60 <memchr+0x84>
  808d10:	21000044 	addi	r4,r4,1
  808d14:	20c000cc 	andi	r3,r4,3
  808d18:	183ff91e 	bne	r3,zero,808d00 <__alt_mem_onchip_mem+0xff800d00>
  808d1c:	020000c4 	movi	r8,3
  808d20:	40801136 	bltu	r8,r2,808d68 <memchr+0x8c>
  808d24:	10000c26 	beq	r2,zero,808d58 <memchr+0x7c>
  808d28:	20c00003 	ldbu	r3,0(r4)
  808d2c:	29403fcc 	andi	r5,r5,255
  808d30:	28c00b26 	beq	r5,r3,808d60 <memchr+0x84>
  808d34:	20c00044 	addi	r3,r4,1
  808d38:	39803fcc 	andi	r6,r7,255
  808d3c:	2089883a 	add	r4,r4,r2
  808d40:	00000306 	br	808d50 <memchr+0x74>
  808d44:	18c00044 	addi	r3,r3,1
  808d48:	197fffc3 	ldbu	r5,-1(r3)
  808d4c:	31400526 	beq	r6,r5,808d64 <memchr+0x88>
  808d50:	1805883a 	mov	r2,r3
  808d54:	20fffb1e 	bne	r4,r3,808d44 <__alt_mem_onchip_mem+0xff800d44>
  808d58:	0005883a 	mov	r2,zero
  808d5c:	f800283a 	ret
  808d60:	2005883a 	mov	r2,r4
  808d64:	f800283a 	ret
  808d68:	28c03fcc 	andi	r3,r5,255
  808d6c:	1812923a 	slli	r9,r3,8
  808d70:	02ffbff4 	movhi	r11,65279
  808d74:	02a02074 	movhi	r10,32897
  808d78:	48d2b03a 	or	r9,r9,r3
  808d7c:	4806943a 	slli	r3,r9,16
  808d80:	5affbfc4 	addi	r11,r11,-257
  808d84:	52a02004 	addi	r10,r10,-32640
  808d88:	48d2b03a 	or	r9,r9,r3
  808d8c:	20c00017 	ldw	r3,0(r4)
  808d90:	48c6f03a 	xor	r3,r9,r3
  808d94:	1acd883a 	add	r6,r3,r11
  808d98:	00c6303a 	nor	r3,zero,r3
  808d9c:	30c6703a 	and	r3,r6,r3
  808da0:	1a86703a 	and	r3,r3,r10
  808da4:	183fe01e 	bne	r3,zero,808d28 <__alt_mem_onchip_mem+0xff800d28>
  808da8:	10bfff04 	addi	r2,r2,-4
  808dac:	21000104 	addi	r4,r4,4
  808db0:	40bff636 	bltu	r8,r2,808d8c <__alt_mem_onchip_mem+0xff800d8c>
  808db4:	003fdb06 	br	808d24 <__alt_mem_onchip_mem+0xff800d24>
  808db8:	3005883a 	mov	r2,r6
  808dbc:	003fd706 	br	808d1c <__alt_mem_onchip_mem+0xff800d1c>

00808dc0 <memcpy>:
  808dc0:	defffd04 	addi	sp,sp,-12
  808dc4:	dfc00215 	stw	ra,8(sp)
  808dc8:	dc400115 	stw	r17,4(sp)
  808dcc:	dc000015 	stw	r16,0(sp)
  808dd0:	00c003c4 	movi	r3,15
  808dd4:	2005883a 	mov	r2,r4
  808dd8:	1980452e 	bgeu	r3,r6,808ef0 <memcpy+0x130>
  808ddc:	2906b03a 	or	r3,r5,r4
  808de0:	18c000cc 	andi	r3,r3,3
  808de4:	1800441e 	bne	r3,zero,808ef8 <memcpy+0x138>
  808de8:	347ffc04 	addi	r17,r6,-16
  808dec:	8822d13a 	srli	r17,r17,4
  808df0:	28c00104 	addi	r3,r5,4
  808df4:	23400104 	addi	r13,r4,4
  808df8:	8820913a 	slli	r16,r17,4
  808dfc:	2b000204 	addi	r12,r5,8
  808e00:	22c00204 	addi	r11,r4,8
  808e04:	84000504 	addi	r16,r16,20
  808e08:	2a800304 	addi	r10,r5,12
  808e0c:	22400304 	addi	r9,r4,12
  808e10:	2c21883a 	add	r16,r5,r16
  808e14:	2811883a 	mov	r8,r5
  808e18:	200f883a 	mov	r7,r4
  808e1c:	41000017 	ldw	r4,0(r8)
  808e20:	1fc00017 	ldw	ra,0(r3)
  808e24:	63c00017 	ldw	r15,0(r12)
  808e28:	39000015 	stw	r4,0(r7)
  808e2c:	53800017 	ldw	r14,0(r10)
  808e30:	6fc00015 	stw	ra,0(r13)
  808e34:	5bc00015 	stw	r15,0(r11)
  808e38:	4b800015 	stw	r14,0(r9)
  808e3c:	18c00404 	addi	r3,r3,16
  808e40:	39c00404 	addi	r7,r7,16
  808e44:	42000404 	addi	r8,r8,16
  808e48:	6b400404 	addi	r13,r13,16
  808e4c:	63000404 	addi	r12,r12,16
  808e50:	5ac00404 	addi	r11,r11,16
  808e54:	52800404 	addi	r10,r10,16
  808e58:	4a400404 	addi	r9,r9,16
  808e5c:	1c3fef1e 	bne	r3,r16,808e1c <__alt_mem_onchip_mem+0xff800e1c>
  808e60:	89c00044 	addi	r7,r17,1
  808e64:	380e913a 	slli	r7,r7,4
  808e68:	310003cc 	andi	r4,r6,15
  808e6c:	02c000c4 	movi	r11,3
  808e70:	11c7883a 	add	r3,r2,r7
  808e74:	29cb883a 	add	r5,r5,r7
  808e78:	5900212e 	bgeu	r11,r4,808f00 <memcpy+0x140>
  808e7c:	1813883a 	mov	r9,r3
  808e80:	2811883a 	mov	r8,r5
  808e84:	200f883a 	mov	r7,r4
  808e88:	42800017 	ldw	r10,0(r8)
  808e8c:	4a400104 	addi	r9,r9,4
  808e90:	39ffff04 	addi	r7,r7,-4
  808e94:	4abfff15 	stw	r10,-4(r9)
  808e98:	42000104 	addi	r8,r8,4
  808e9c:	59fffa36 	bltu	r11,r7,808e88 <__alt_mem_onchip_mem+0xff800e88>
  808ea0:	213fff04 	addi	r4,r4,-4
  808ea4:	2008d0ba 	srli	r4,r4,2
  808ea8:	318000cc 	andi	r6,r6,3
  808eac:	21000044 	addi	r4,r4,1
  808eb0:	2109883a 	add	r4,r4,r4
  808eb4:	2109883a 	add	r4,r4,r4
  808eb8:	1907883a 	add	r3,r3,r4
  808ebc:	290b883a 	add	r5,r5,r4
  808ec0:	30000626 	beq	r6,zero,808edc <memcpy+0x11c>
  808ec4:	198d883a 	add	r6,r3,r6
  808ec8:	29c00003 	ldbu	r7,0(r5)
  808ecc:	18c00044 	addi	r3,r3,1
  808ed0:	29400044 	addi	r5,r5,1
  808ed4:	19ffffc5 	stb	r7,-1(r3)
  808ed8:	19bffb1e 	bne	r3,r6,808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  808edc:	dfc00217 	ldw	ra,8(sp)
  808ee0:	dc400117 	ldw	r17,4(sp)
  808ee4:	dc000017 	ldw	r16,0(sp)
  808ee8:	dec00304 	addi	sp,sp,12
  808eec:	f800283a 	ret
  808ef0:	2007883a 	mov	r3,r4
  808ef4:	003ff206 	br	808ec0 <__alt_mem_onchip_mem+0xff800ec0>
  808ef8:	2007883a 	mov	r3,r4
  808efc:	003ff106 	br	808ec4 <__alt_mem_onchip_mem+0xff800ec4>
  808f00:	200d883a 	mov	r6,r4
  808f04:	003fee06 	br	808ec0 <__alt_mem_onchip_mem+0xff800ec0>

00808f08 <memmove>:
  808f08:	2005883a 	mov	r2,r4
  808f0c:	29000b2e 	bgeu	r5,r4,808f3c <memmove+0x34>
  808f10:	298f883a 	add	r7,r5,r6
  808f14:	21c0092e 	bgeu	r4,r7,808f3c <memmove+0x34>
  808f18:	2187883a 	add	r3,r4,r6
  808f1c:	198bc83a 	sub	r5,r3,r6
  808f20:	30004826 	beq	r6,zero,809044 <memmove+0x13c>
  808f24:	39ffffc4 	addi	r7,r7,-1
  808f28:	39000003 	ldbu	r4,0(r7)
  808f2c:	18ffffc4 	addi	r3,r3,-1
  808f30:	19000005 	stb	r4,0(r3)
  808f34:	28fffb1e 	bne	r5,r3,808f24 <__alt_mem_onchip_mem+0xff800f24>
  808f38:	f800283a 	ret
  808f3c:	00c003c4 	movi	r3,15
  808f40:	1980412e 	bgeu	r3,r6,809048 <memmove+0x140>
  808f44:	2886b03a 	or	r3,r5,r2
  808f48:	18c000cc 	andi	r3,r3,3
  808f4c:	1800401e 	bne	r3,zero,809050 <memmove+0x148>
  808f50:	33fffc04 	addi	r15,r6,-16
  808f54:	781ed13a 	srli	r15,r15,4
  808f58:	28c00104 	addi	r3,r5,4
  808f5c:	13400104 	addi	r13,r2,4
  808f60:	781c913a 	slli	r14,r15,4
  808f64:	2b000204 	addi	r12,r5,8
  808f68:	12c00204 	addi	r11,r2,8
  808f6c:	73800504 	addi	r14,r14,20
  808f70:	2a800304 	addi	r10,r5,12
  808f74:	12400304 	addi	r9,r2,12
  808f78:	2b9d883a 	add	r14,r5,r14
  808f7c:	2811883a 	mov	r8,r5
  808f80:	100f883a 	mov	r7,r2
  808f84:	41000017 	ldw	r4,0(r8)
  808f88:	39c00404 	addi	r7,r7,16
  808f8c:	18c00404 	addi	r3,r3,16
  808f90:	393ffc15 	stw	r4,-16(r7)
  808f94:	193ffc17 	ldw	r4,-16(r3)
  808f98:	6b400404 	addi	r13,r13,16
  808f9c:	5ac00404 	addi	r11,r11,16
  808fa0:	693ffc15 	stw	r4,-16(r13)
  808fa4:	61000017 	ldw	r4,0(r12)
  808fa8:	4a400404 	addi	r9,r9,16
  808fac:	42000404 	addi	r8,r8,16
  808fb0:	593ffc15 	stw	r4,-16(r11)
  808fb4:	51000017 	ldw	r4,0(r10)
  808fb8:	63000404 	addi	r12,r12,16
  808fbc:	52800404 	addi	r10,r10,16
  808fc0:	493ffc15 	stw	r4,-16(r9)
  808fc4:	1bbfef1e 	bne	r3,r14,808f84 <__alt_mem_onchip_mem+0xff800f84>
  808fc8:	79000044 	addi	r4,r15,1
  808fcc:	2008913a 	slli	r4,r4,4
  808fd0:	328003cc 	andi	r10,r6,15
  808fd4:	02c000c4 	movi	r11,3
  808fd8:	1107883a 	add	r3,r2,r4
  808fdc:	290b883a 	add	r5,r5,r4
  808fe0:	5a801e2e 	bgeu	r11,r10,80905c <memmove+0x154>
  808fe4:	1813883a 	mov	r9,r3
  808fe8:	2811883a 	mov	r8,r5
  808fec:	500f883a 	mov	r7,r10
  808ff0:	41000017 	ldw	r4,0(r8)
  808ff4:	4a400104 	addi	r9,r9,4
  808ff8:	39ffff04 	addi	r7,r7,-4
  808ffc:	493fff15 	stw	r4,-4(r9)
  809000:	42000104 	addi	r8,r8,4
  809004:	59fffa36 	bltu	r11,r7,808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809008:	513fff04 	addi	r4,r10,-4
  80900c:	2008d0ba 	srli	r4,r4,2
  809010:	318000cc 	andi	r6,r6,3
  809014:	21000044 	addi	r4,r4,1
  809018:	2109883a 	add	r4,r4,r4
  80901c:	2109883a 	add	r4,r4,r4
  809020:	1907883a 	add	r3,r3,r4
  809024:	290b883a 	add	r5,r5,r4
  809028:	30000b26 	beq	r6,zero,809058 <memmove+0x150>
  80902c:	198d883a 	add	r6,r3,r6
  809030:	29c00003 	ldbu	r7,0(r5)
  809034:	18c00044 	addi	r3,r3,1
  809038:	29400044 	addi	r5,r5,1
  80903c:	19ffffc5 	stb	r7,-1(r3)
  809040:	19bffb1e 	bne	r3,r6,809030 <__alt_mem_onchip_mem+0xff801030>
  809044:	f800283a 	ret
  809048:	1007883a 	mov	r3,r2
  80904c:	003ff606 	br	809028 <__alt_mem_onchip_mem+0xff801028>
  809050:	1007883a 	mov	r3,r2
  809054:	003ff506 	br	80902c <__alt_mem_onchip_mem+0xff80102c>
  809058:	f800283a 	ret
  80905c:	500d883a 	mov	r6,r10
  809060:	003ff106 	br	809028 <__alt_mem_onchip_mem+0xff801028>

00809064 <memset>:
  809064:	20c000cc 	andi	r3,r4,3
  809068:	2005883a 	mov	r2,r4
  80906c:	18004426 	beq	r3,zero,809180 <memset+0x11c>
  809070:	31ffffc4 	addi	r7,r6,-1
  809074:	30004026 	beq	r6,zero,809178 <memset+0x114>
  809078:	2813883a 	mov	r9,r5
  80907c:	200d883a 	mov	r6,r4
  809080:	2007883a 	mov	r3,r4
  809084:	00000406 	br	809098 <memset+0x34>
  809088:	3a3fffc4 	addi	r8,r7,-1
  80908c:	31800044 	addi	r6,r6,1
  809090:	38003926 	beq	r7,zero,809178 <memset+0x114>
  809094:	400f883a 	mov	r7,r8
  809098:	18c00044 	addi	r3,r3,1
  80909c:	32400005 	stb	r9,0(r6)
  8090a0:	1a0000cc 	andi	r8,r3,3
  8090a4:	403ff81e 	bne	r8,zero,809088 <__alt_mem_onchip_mem+0xff801088>
  8090a8:	010000c4 	movi	r4,3
  8090ac:	21c02d2e 	bgeu	r4,r7,809164 <memset+0x100>
  8090b0:	29003fcc 	andi	r4,r5,255
  8090b4:	200c923a 	slli	r6,r4,8
  8090b8:	3108b03a 	or	r4,r6,r4
  8090bc:	200c943a 	slli	r6,r4,16
  8090c0:	218cb03a 	or	r6,r4,r6
  8090c4:	010003c4 	movi	r4,15
  8090c8:	21c0182e 	bgeu	r4,r7,80912c <memset+0xc8>
  8090cc:	3b3ffc04 	addi	r12,r7,-16
  8090d0:	6018d13a 	srli	r12,r12,4
  8090d4:	1a000104 	addi	r8,r3,4
  8090d8:	1ac00204 	addi	r11,r3,8
  8090dc:	6008913a 	slli	r4,r12,4
  8090e0:	1a800304 	addi	r10,r3,12
  8090e4:	1813883a 	mov	r9,r3
  8090e8:	21000504 	addi	r4,r4,20
  8090ec:	1909883a 	add	r4,r3,r4
  8090f0:	49800015 	stw	r6,0(r9)
  8090f4:	41800015 	stw	r6,0(r8)
  8090f8:	59800015 	stw	r6,0(r11)
  8090fc:	51800015 	stw	r6,0(r10)
  809100:	42000404 	addi	r8,r8,16
  809104:	4a400404 	addi	r9,r9,16
  809108:	5ac00404 	addi	r11,r11,16
  80910c:	52800404 	addi	r10,r10,16
  809110:	413ff71e 	bne	r8,r4,8090f0 <__alt_mem_onchip_mem+0xff8010f0>
  809114:	63000044 	addi	r12,r12,1
  809118:	6018913a 	slli	r12,r12,4
  80911c:	39c003cc 	andi	r7,r7,15
  809120:	010000c4 	movi	r4,3
  809124:	1b07883a 	add	r3,r3,r12
  809128:	21c00e2e 	bgeu	r4,r7,809164 <memset+0x100>
  80912c:	1813883a 	mov	r9,r3
  809130:	3811883a 	mov	r8,r7
  809134:	010000c4 	movi	r4,3
  809138:	49800015 	stw	r6,0(r9)
  80913c:	423fff04 	addi	r8,r8,-4
  809140:	4a400104 	addi	r9,r9,4
  809144:	223ffc36 	bltu	r4,r8,809138 <__alt_mem_onchip_mem+0xff801138>
  809148:	393fff04 	addi	r4,r7,-4
  80914c:	2008d0ba 	srli	r4,r4,2
  809150:	39c000cc 	andi	r7,r7,3
  809154:	21000044 	addi	r4,r4,1
  809158:	2109883a 	add	r4,r4,r4
  80915c:	2109883a 	add	r4,r4,r4
  809160:	1907883a 	add	r3,r3,r4
  809164:	38000526 	beq	r7,zero,80917c <memset+0x118>
  809168:	19cf883a 	add	r7,r3,r7
  80916c:	19400005 	stb	r5,0(r3)
  809170:	18c00044 	addi	r3,r3,1
  809174:	38fffd1e 	bne	r7,r3,80916c <__alt_mem_onchip_mem+0xff80116c>
  809178:	f800283a 	ret
  80917c:	f800283a 	ret
  809180:	2007883a 	mov	r3,r4
  809184:	300f883a 	mov	r7,r6
  809188:	003fc706 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>

0080918c <_realloc_r>:
  80918c:	defff604 	addi	sp,sp,-40
  809190:	dc800215 	stw	r18,8(sp)
  809194:	dfc00915 	stw	ra,36(sp)
  809198:	df000815 	stw	fp,32(sp)
  80919c:	ddc00715 	stw	r23,28(sp)
  8091a0:	dd800615 	stw	r22,24(sp)
  8091a4:	dd400515 	stw	r21,20(sp)
  8091a8:	dd000415 	stw	r20,16(sp)
  8091ac:	dcc00315 	stw	r19,12(sp)
  8091b0:	dc400115 	stw	r17,4(sp)
  8091b4:	dc000015 	stw	r16,0(sp)
  8091b8:	3025883a 	mov	r18,r6
  8091bc:	2800b726 	beq	r5,zero,80949c <_realloc_r+0x310>
  8091c0:	282b883a 	mov	r21,r5
  8091c4:	2029883a 	mov	r20,r4
  8091c8:	080acc40 	call	80acc4 <__malloc_lock>
  8091cc:	a8bfff17 	ldw	r2,-4(r21)
  8091d0:	043fff04 	movi	r16,-4
  8091d4:	90c002c4 	addi	r3,r18,11
  8091d8:	01000584 	movi	r4,22
  8091dc:	acfffe04 	addi	r19,r21,-8
  8091e0:	1420703a 	and	r16,r2,r16
  8091e4:	20c0332e 	bgeu	r4,r3,8092b4 <_realloc_r+0x128>
  8091e8:	047ffe04 	movi	r17,-8
  8091ec:	1c62703a 	and	r17,r3,r17
  8091f0:	8807883a 	mov	r3,r17
  8091f4:	88005816 	blt	r17,zero,809358 <_realloc_r+0x1cc>
  8091f8:	8c805736 	bltu	r17,r18,809358 <_realloc_r+0x1cc>
  8091fc:	80c0300e 	bge	r16,r3,8092c0 <_realloc_r+0x134>
  809200:	07002074 	movhi	fp,129
  809204:	e73c1b04 	addi	fp,fp,-3988
  809208:	e1c00217 	ldw	r7,8(fp)
  80920c:	9c09883a 	add	r4,r19,r16
  809210:	22000117 	ldw	r8,4(r4)
  809214:	21c06326 	beq	r4,r7,8093a4 <_realloc_r+0x218>
  809218:	017fff84 	movi	r5,-2
  80921c:	414a703a 	and	r5,r8,r5
  809220:	214b883a 	add	r5,r4,r5
  809224:	29800117 	ldw	r6,4(r5)
  809228:	3180004c 	andi	r6,r6,1
  80922c:	30003f26 	beq	r6,zero,80932c <_realloc_r+0x1a0>
  809230:	1080004c 	andi	r2,r2,1
  809234:	10008326 	beq	r2,zero,809444 <_realloc_r+0x2b8>
  809238:	900b883a 	mov	r5,r18
  80923c:	a009883a 	mov	r4,r20
  809240:	08084d00 	call	8084d0 <_malloc_r>
  809244:	1025883a 	mov	r18,r2
  809248:	10011e26 	beq	r2,zero,8096c4 <_realloc_r+0x538>
  80924c:	a93fff17 	ldw	r4,-4(r21)
  809250:	10fffe04 	addi	r3,r2,-8
  809254:	00bfff84 	movi	r2,-2
  809258:	2084703a 	and	r2,r4,r2
  80925c:	9885883a 	add	r2,r19,r2
  809260:	1880ee26 	beq	r3,r2,80961c <_realloc_r+0x490>
  809264:	81bfff04 	addi	r6,r16,-4
  809268:	00800904 	movi	r2,36
  80926c:	1180b836 	bltu	r2,r6,809550 <_realloc_r+0x3c4>
  809270:	00c004c4 	movi	r3,19
  809274:	19809636 	bltu	r3,r6,8094d0 <_realloc_r+0x344>
  809278:	9005883a 	mov	r2,r18
  80927c:	a807883a 	mov	r3,r21
  809280:	19000017 	ldw	r4,0(r3)
  809284:	11000015 	stw	r4,0(r2)
  809288:	19000117 	ldw	r4,4(r3)
  80928c:	11000115 	stw	r4,4(r2)
  809290:	18c00217 	ldw	r3,8(r3)
  809294:	10c00215 	stw	r3,8(r2)
  809298:	a80b883a 	mov	r5,r21
  80929c:	a009883a 	mov	r4,r20
  8092a0:	0809f580 	call	809f58 <_free_r>
  8092a4:	a009883a 	mov	r4,r20
  8092a8:	080ace80 	call	80ace8 <__malloc_unlock>
  8092ac:	9005883a 	mov	r2,r18
  8092b0:	00001206 	br	8092fc <_realloc_r+0x170>
  8092b4:	00c00404 	movi	r3,16
  8092b8:	1823883a 	mov	r17,r3
  8092bc:	003fce06 	br	8091f8 <__alt_mem_onchip_mem+0xff8011f8>
  8092c0:	a825883a 	mov	r18,r21
  8092c4:	8445c83a 	sub	r2,r16,r17
  8092c8:	00c003c4 	movi	r3,15
  8092cc:	18802636 	bltu	r3,r2,809368 <_realloc_r+0x1dc>
  8092d0:	99800117 	ldw	r6,4(r19)
  8092d4:	9c07883a 	add	r3,r19,r16
  8092d8:	3180004c 	andi	r6,r6,1
  8092dc:	3420b03a 	or	r16,r6,r16
  8092e0:	9c000115 	stw	r16,4(r19)
  8092e4:	18800117 	ldw	r2,4(r3)
  8092e8:	10800054 	ori	r2,r2,1
  8092ec:	18800115 	stw	r2,4(r3)
  8092f0:	a009883a 	mov	r4,r20
  8092f4:	080ace80 	call	80ace8 <__malloc_unlock>
  8092f8:	9005883a 	mov	r2,r18
  8092fc:	dfc00917 	ldw	ra,36(sp)
  809300:	df000817 	ldw	fp,32(sp)
  809304:	ddc00717 	ldw	r23,28(sp)
  809308:	dd800617 	ldw	r22,24(sp)
  80930c:	dd400517 	ldw	r21,20(sp)
  809310:	dd000417 	ldw	r20,16(sp)
  809314:	dcc00317 	ldw	r19,12(sp)
  809318:	dc800217 	ldw	r18,8(sp)
  80931c:	dc400117 	ldw	r17,4(sp)
  809320:	dc000017 	ldw	r16,0(sp)
  809324:	dec00a04 	addi	sp,sp,40
  809328:	f800283a 	ret
  80932c:	017fff04 	movi	r5,-4
  809330:	414a703a 	and	r5,r8,r5
  809334:	814d883a 	add	r6,r16,r5
  809338:	30c01f16 	blt	r6,r3,8093b8 <_realloc_r+0x22c>
  80933c:	20800317 	ldw	r2,12(r4)
  809340:	20c00217 	ldw	r3,8(r4)
  809344:	a825883a 	mov	r18,r21
  809348:	3021883a 	mov	r16,r6
  80934c:	18800315 	stw	r2,12(r3)
  809350:	10c00215 	stw	r3,8(r2)
  809354:	003fdb06 	br	8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  809358:	00800304 	movi	r2,12
  80935c:	a0800015 	stw	r2,0(r20)
  809360:	0005883a 	mov	r2,zero
  809364:	003fe506 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  809368:	98c00117 	ldw	r3,4(r19)
  80936c:	9c4b883a 	add	r5,r19,r17
  809370:	11000054 	ori	r4,r2,1
  809374:	18c0004c 	andi	r3,r3,1
  809378:	1c62b03a 	or	r17,r3,r17
  80937c:	9c400115 	stw	r17,4(r19)
  809380:	29000115 	stw	r4,4(r5)
  809384:	2885883a 	add	r2,r5,r2
  809388:	10c00117 	ldw	r3,4(r2)
  80938c:	29400204 	addi	r5,r5,8
  809390:	a009883a 	mov	r4,r20
  809394:	18c00054 	ori	r3,r3,1
  809398:	10c00115 	stw	r3,4(r2)
  80939c:	0809f580 	call	809f58 <_free_r>
  8093a0:	003fd306 	br	8092f0 <__alt_mem_onchip_mem+0xff8012f0>
  8093a4:	017fff04 	movi	r5,-4
  8093a8:	414a703a 	and	r5,r8,r5
  8093ac:	89800404 	addi	r6,r17,16
  8093b0:	8151883a 	add	r8,r16,r5
  8093b4:	4180590e 	bge	r8,r6,80951c <_realloc_r+0x390>
  8093b8:	1080004c 	andi	r2,r2,1
  8093bc:	103f9e1e 	bne	r2,zero,809238 <__alt_mem_onchip_mem+0xff801238>
  8093c0:	adbffe17 	ldw	r22,-8(r21)
  8093c4:	00bfff04 	movi	r2,-4
  8093c8:	9dadc83a 	sub	r22,r19,r22
  8093cc:	b1800117 	ldw	r6,4(r22)
  8093d0:	3084703a 	and	r2,r6,r2
  8093d4:	20002026 	beq	r4,zero,809458 <_realloc_r+0x2cc>
  8093d8:	80af883a 	add	r23,r16,r2
  8093dc:	b96f883a 	add	r23,r23,r5
  8093e0:	21c05f26 	beq	r4,r7,809560 <_realloc_r+0x3d4>
  8093e4:	b8c01c16 	blt	r23,r3,809458 <_realloc_r+0x2cc>
  8093e8:	20800317 	ldw	r2,12(r4)
  8093ec:	20c00217 	ldw	r3,8(r4)
  8093f0:	81bfff04 	addi	r6,r16,-4
  8093f4:	01000904 	movi	r4,36
  8093f8:	18800315 	stw	r2,12(r3)
  8093fc:	10c00215 	stw	r3,8(r2)
  809400:	b0c00217 	ldw	r3,8(r22)
  809404:	b0800317 	ldw	r2,12(r22)
  809408:	b4800204 	addi	r18,r22,8
  80940c:	18800315 	stw	r2,12(r3)
  809410:	10c00215 	stw	r3,8(r2)
  809414:	21801b36 	bltu	r4,r6,809484 <_realloc_r+0x2f8>
  809418:	008004c4 	movi	r2,19
  80941c:	1180352e 	bgeu	r2,r6,8094f4 <_realloc_r+0x368>
  809420:	a8800017 	ldw	r2,0(r21)
  809424:	b0800215 	stw	r2,8(r22)
  809428:	a8800117 	ldw	r2,4(r21)
  80942c:	b0800315 	stw	r2,12(r22)
  809430:	008006c4 	movi	r2,27
  809434:	11807f36 	bltu	r2,r6,809634 <_realloc_r+0x4a8>
  809438:	b0800404 	addi	r2,r22,16
  80943c:	ad400204 	addi	r21,r21,8
  809440:	00002d06 	br	8094f8 <_realloc_r+0x36c>
  809444:	adbffe17 	ldw	r22,-8(r21)
  809448:	00bfff04 	movi	r2,-4
  80944c:	9dadc83a 	sub	r22,r19,r22
  809450:	b1000117 	ldw	r4,4(r22)
  809454:	2084703a 	and	r2,r4,r2
  809458:	b03f7726 	beq	r22,zero,809238 <__alt_mem_onchip_mem+0xff801238>
  80945c:	80af883a 	add	r23,r16,r2
  809460:	b8ff7516 	blt	r23,r3,809238 <__alt_mem_onchip_mem+0xff801238>
  809464:	b0800317 	ldw	r2,12(r22)
  809468:	b0c00217 	ldw	r3,8(r22)
  80946c:	81bfff04 	addi	r6,r16,-4
  809470:	01000904 	movi	r4,36
  809474:	18800315 	stw	r2,12(r3)
  809478:	10c00215 	stw	r3,8(r2)
  80947c:	b4800204 	addi	r18,r22,8
  809480:	21bfe52e 	bgeu	r4,r6,809418 <__alt_mem_onchip_mem+0xff801418>
  809484:	a80b883a 	mov	r5,r21
  809488:	9009883a 	mov	r4,r18
  80948c:	0808f080 	call	808f08 <memmove>
  809490:	b821883a 	mov	r16,r23
  809494:	b027883a 	mov	r19,r22
  809498:	003f8a06 	br	8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  80949c:	300b883a 	mov	r5,r6
  8094a0:	dfc00917 	ldw	ra,36(sp)
  8094a4:	df000817 	ldw	fp,32(sp)
  8094a8:	ddc00717 	ldw	r23,28(sp)
  8094ac:	dd800617 	ldw	r22,24(sp)
  8094b0:	dd400517 	ldw	r21,20(sp)
  8094b4:	dd000417 	ldw	r20,16(sp)
  8094b8:	dcc00317 	ldw	r19,12(sp)
  8094bc:	dc800217 	ldw	r18,8(sp)
  8094c0:	dc400117 	ldw	r17,4(sp)
  8094c4:	dc000017 	ldw	r16,0(sp)
  8094c8:	dec00a04 	addi	sp,sp,40
  8094cc:	08084d01 	jmpi	8084d0 <_malloc_r>
  8094d0:	a8c00017 	ldw	r3,0(r21)
  8094d4:	90c00015 	stw	r3,0(r18)
  8094d8:	a8c00117 	ldw	r3,4(r21)
  8094dc:	90c00115 	stw	r3,4(r18)
  8094e0:	00c006c4 	movi	r3,27
  8094e4:	19804536 	bltu	r3,r6,8095fc <_realloc_r+0x470>
  8094e8:	90800204 	addi	r2,r18,8
  8094ec:	a8c00204 	addi	r3,r21,8
  8094f0:	003f6306 	br	809280 <__alt_mem_onchip_mem+0xff801280>
  8094f4:	9005883a 	mov	r2,r18
  8094f8:	a8c00017 	ldw	r3,0(r21)
  8094fc:	b821883a 	mov	r16,r23
  809500:	b027883a 	mov	r19,r22
  809504:	10c00015 	stw	r3,0(r2)
  809508:	a8c00117 	ldw	r3,4(r21)
  80950c:	10c00115 	stw	r3,4(r2)
  809510:	a8c00217 	ldw	r3,8(r21)
  809514:	10c00215 	stw	r3,8(r2)
  809518:	003f6a06 	br	8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  80951c:	9c67883a 	add	r19,r19,r17
  809520:	4445c83a 	sub	r2,r8,r17
  809524:	e4c00215 	stw	r19,8(fp)
  809528:	10800054 	ori	r2,r2,1
  80952c:	98800115 	stw	r2,4(r19)
  809530:	a8bfff17 	ldw	r2,-4(r21)
  809534:	a009883a 	mov	r4,r20
  809538:	1080004c 	andi	r2,r2,1
  80953c:	1462b03a 	or	r17,r2,r17
  809540:	ac7fff15 	stw	r17,-4(r21)
  809544:	080ace80 	call	80ace8 <__malloc_unlock>
  809548:	a805883a 	mov	r2,r21
  80954c:	003f6b06 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  809550:	a80b883a 	mov	r5,r21
  809554:	9009883a 	mov	r4,r18
  809558:	0808f080 	call	808f08 <memmove>
  80955c:	003f4e06 	br	809298 <__alt_mem_onchip_mem+0xff801298>
  809560:	89000404 	addi	r4,r17,16
  809564:	b93fbc16 	blt	r23,r4,809458 <__alt_mem_onchip_mem+0xff801458>
  809568:	b0800317 	ldw	r2,12(r22)
  80956c:	b0c00217 	ldw	r3,8(r22)
  809570:	81bfff04 	addi	r6,r16,-4
  809574:	01000904 	movi	r4,36
  809578:	18800315 	stw	r2,12(r3)
  80957c:	10c00215 	stw	r3,8(r2)
  809580:	b4800204 	addi	r18,r22,8
  809584:	21804336 	bltu	r4,r6,809694 <_realloc_r+0x508>
  809588:	008004c4 	movi	r2,19
  80958c:	11803f2e 	bgeu	r2,r6,80968c <_realloc_r+0x500>
  809590:	a8800017 	ldw	r2,0(r21)
  809594:	b0800215 	stw	r2,8(r22)
  809598:	a8800117 	ldw	r2,4(r21)
  80959c:	b0800315 	stw	r2,12(r22)
  8095a0:	008006c4 	movi	r2,27
  8095a4:	11803f36 	bltu	r2,r6,8096a4 <_realloc_r+0x518>
  8095a8:	b0800404 	addi	r2,r22,16
  8095ac:	ad400204 	addi	r21,r21,8
  8095b0:	a8c00017 	ldw	r3,0(r21)
  8095b4:	10c00015 	stw	r3,0(r2)
  8095b8:	a8c00117 	ldw	r3,4(r21)
  8095bc:	10c00115 	stw	r3,4(r2)
  8095c0:	a8c00217 	ldw	r3,8(r21)
  8095c4:	10c00215 	stw	r3,8(r2)
  8095c8:	b447883a 	add	r3,r22,r17
  8095cc:	bc45c83a 	sub	r2,r23,r17
  8095d0:	e0c00215 	stw	r3,8(fp)
  8095d4:	10800054 	ori	r2,r2,1
  8095d8:	18800115 	stw	r2,4(r3)
  8095dc:	b0800117 	ldw	r2,4(r22)
  8095e0:	a009883a 	mov	r4,r20
  8095e4:	1080004c 	andi	r2,r2,1
  8095e8:	1462b03a 	or	r17,r2,r17
  8095ec:	b4400115 	stw	r17,4(r22)
  8095f0:	080ace80 	call	80ace8 <__malloc_unlock>
  8095f4:	9005883a 	mov	r2,r18
  8095f8:	003f4006 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  8095fc:	a8c00217 	ldw	r3,8(r21)
  809600:	90c00215 	stw	r3,8(r18)
  809604:	a8c00317 	ldw	r3,12(r21)
  809608:	90c00315 	stw	r3,12(r18)
  80960c:	30801126 	beq	r6,r2,809654 <_realloc_r+0x4c8>
  809610:	90800404 	addi	r2,r18,16
  809614:	a8c00404 	addi	r3,r21,16
  809618:	003f1906 	br	809280 <__alt_mem_onchip_mem+0xff801280>
  80961c:	90ffff17 	ldw	r3,-4(r18)
  809620:	00bfff04 	movi	r2,-4
  809624:	a825883a 	mov	r18,r21
  809628:	1884703a 	and	r2,r3,r2
  80962c:	80a1883a 	add	r16,r16,r2
  809630:	003f2406 	br	8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  809634:	a8800217 	ldw	r2,8(r21)
  809638:	b0800415 	stw	r2,16(r22)
  80963c:	a8800317 	ldw	r2,12(r21)
  809640:	b0800515 	stw	r2,20(r22)
  809644:	31000a26 	beq	r6,r4,809670 <_realloc_r+0x4e4>
  809648:	b0800604 	addi	r2,r22,24
  80964c:	ad400404 	addi	r21,r21,16
  809650:	003fa906 	br	8094f8 <__alt_mem_onchip_mem+0xff8014f8>
  809654:	a9000417 	ldw	r4,16(r21)
  809658:	90800604 	addi	r2,r18,24
  80965c:	a8c00604 	addi	r3,r21,24
  809660:	91000415 	stw	r4,16(r18)
  809664:	a9000517 	ldw	r4,20(r21)
  809668:	91000515 	stw	r4,20(r18)
  80966c:	003f0406 	br	809280 <__alt_mem_onchip_mem+0xff801280>
  809670:	a8c00417 	ldw	r3,16(r21)
  809674:	ad400604 	addi	r21,r21,24
  809678:	b0800804 	addi	r2,r22,32
  80967c:	b0c00615 	stw	r3,24(r22)
  809680:	a8ffff17 	ldw	r3,-4(r21)
  809684:	b0c00715 	stw	r3,28(r22)
  809688:	003f9b06 	br	8094f8 <__alt_mem_onchip_mem+0xff8014f8>
  80968c:	9005883a 	mov	r2,r18
  809690:	003fc706 	br	8095b0 <__alt_mem_onchip_mem+0xff8015b0>
  809694:	a80b883a 	mov	r5,r21
  809698:	9009883a 	mov	r4,r18
  80969c:	0808f080 	call	808f08 <memmove>
  8096a0:	003fc906 	br	8095c8 <__alt_mem_onchip_mem+0xff8015c8>
  8096a4:	a8800217 	ldw	r2,8(r21)
  8096a8:	b0800415 	stw	r2,16(r22)
  8096ac:	a8800317 	ldw	r2,12(r21)
  8096b0:	b0800515 	stw	r2,20(r22)
  8096b4:	31000726 	beq	r6,r4,8096d4 <_realloc_r+0x548>
  8096b8:	b0800604 	addi	r2,r22,24
  8096bc:	ad400404 	addi	r21,r21,16
  8096c0:	003fbb06 	br	8095b0 <__alt_mem_onchip_mem+0xff8015b0>
  8096c4:	a009883a 	mov	r4,r20
  8096c8:	080ace80 	call	80ace8 <__malloc_unlock>
  8096cc:	0005883a 	mov	r2,zero
  8096d0:	003f0a06 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  8096d4:	a8c00417 	ldw	r3,16(r21)
  8096d8:	ad400604 	addi	r21,r21,24
  8096dc:	b0800804 	addi	r2,r22,32
  8096e0:	b0c00615 	stw	r3,24(r22)
  8096e4:	a8ffff17 	ldw	r3,-4(r21)
  8096e8:	b0c00715 	stw	r3,28(r22)
  8096ec:	003fb006 	br	8095b0 <__alt_mem_onchip_mem+0xff8015b0>

008096f0 <_sbrk_r>:
  8096f0:	defffd04 	addi	sp,sp,-12
  8096f4:	dc000015 	stw	r16,0(sp)
  8096f8:	04002074 	movhi	r16,129
  8096fc:	dc400115 	stw	r17,4(sp)
  809700:	84094104 	addi	r16,r16,9476
  809704:	2023883a 	mov	r17,r4
  809708:	2809883a 	mov	r4,r5
  80970c:	dfc00215 	stw	ra,8(sp)
  809710:	80000015 	stw	zero,0(r16)
  809714:	080aea80 	call	80aea8 <sbrk>
  809718:	00ffffc4 	movi	r3,-1
  80971c:	10c00526 	beq	r2,r3,809734 <_sbrk_r+0x44>
  809720:	dfc00217 	ldw	ra,8(sp)
  809724:	dc400117 	ldw	r17,4(sp)
  809728:	dc000017 	ldw	r16,0(sp)
  80972c:	dec00304 	addi	sp,sp,12
  809730:	f800283a 	ret
  809734:	80c00017 	ldw	r3,0(r16)
  809738:	183ff926 	beq	r3,zero,809720 <__alt_mem_onchip_mem+0xff801720>
  80973c:	88c00015 	stw	r3,0(r17)
  809740:	003ff706 	br	809720 <__alt_mem_onchip_mem+0xff801720>

00809744 <__sread>:
  809744:	defffe04 	addi	sp,sp,-8
  809748:	dc000015 	stw	r16,0(sp)
  80974c:	2821883a 	mov	r16,r5
  809750:	2940038f 	ldh	r5,14(r5)
  809754:	dfc00115 	stw	ra,4(sp)
  809758:	080a4840 	call	80a484 <_read_r>
  80975c:	10000716 	blt	r2,zero,80977c <__sread+0x38>
  809760:	80c01417 	ldw	r3,80(r16)
  809764:	1887883a 	add	r3,r3,r2
  809768:	80c01415 	stw	r3,80(r16)
  80976c:	dfc00117 	ldw	ra,4(sp)
  809770:	dc000017 	ldw	r16,0(sp)
  809774:	dec00204 	addi	sp,sp,8
  809778:	f800283a 	ret
  80977c:	80c0030b 	ldhu	r3,12(r16)
  809780:	18fbffcc 	andi	r3,r3,61439
  809784:	80c0030d 	sth	r3,12(r16)
  809788:	dfc00117 	ldw	ra,4(sp)
  80978c:	dc000017 	ldw	r16,0(sp)
  809790:	dec00204 	addi	sp,sp,8
  809794:	f800283a 	ret

00809798 <__seofread>:
  809798:	0005883a 	mov	r2,zero
  80979c:	f800283a 	ret

008097a0 <__swrite>:
  8097a0:	2880030b 	ldhu	r2,12(r5)
  8097a4:	defffb04 	addi	sp,sp,-20
  8097a8:	dcc00315 	stw	r19,12(sp)
  8097ac:	dc800215 	stw	r18,8(sp)
  8097b0:	dc400115 	stw	r17,4(sp)
  8097b4:	dc000015 	stw	r16,0(sp)
  8097b8:	dfc00415 	stw	ra,16(sp)
  8097bc:	10c0400c 	andi	r3,r2,256
  8097c0:	2821883a 	mov	r16,r5
  8097c4:	2023883a 	mov	r17,r4
  8097c8:	3025883a 	mov	r18,r6
  8097cc:	3827883a 	mov	r19,r7
  8097d0:	18000526 	beq	r3,zero,8097e8 <__swrite+0x48>
  8097d4:	2940038f 	ldh	r5,14(r5)
  8097d8:	01c00084 	movi	r7,2
  8097dc:	000d883a 	mov	r6,zero
  8097e0:	080a2680 	call	80a268 <_lseek_r>
  8097e4:	8080030b 	ldhu	r2,12(r16)
  8097e8:	8140038f 	ldh	r5,14(r16)
  8097ec:	10bbffcc 	andi	r2,r2,61439
  8097f0:	980f883a 	mov	r7,r19
  8097f4:	900d883a 	mov	r6,r18
  8097f8:	8809883a 	mov	r4,r17
  8097fc:	8080030d 	sth	r2,12(r16)
  809800:	dfc00417 	ldw	ra,16(sp)
  809804:	dcc00317 	ldw	r19,12(sp)
  809808:	dc800217 	ldw	r18,8(sp)
  80980c:	dc400117 	ldw	r17,4(sp)
  809810:	dc000017 	ldw	r16,0(sp)
  809814:	dec00504 	addi	sp,sp,20
  809818:	08098801 	jmpi	809880 <_write_r>

0080981c <__sseek>:
  80981c:	defffe04 	addi	sp,sp,-8
  809820:	dc000015 	stw	r16,0(sp)
  809824:	2821883a 	mov	r16,r5
  809828:	2940038f 	ldh	r5,14(r5)
  80982c:	dfc00115 	stw	ra,4(sp)
  809830:	080a2680 	call	80a268 <_lseek_r>
  809834:	00ffffc4 	movi	r3,-1
  809838:	10c00826 	beq	r2,r3,80985c <__sseek+0x40>
  80983c:	80c0030b 	ldhu	r3,12(r16)
  809840:	80801415 	stw	r2,80(r16)
  809844:	18c40014 	ori	r3,r3,4096
  809848:	80c0030d 	sth	r3,12(r16)
  80984c:	dfc00117 	ldw	ra,4(sp)
  809850:	dc000017 	ldw	r16,0(sp)
  809854:	dec00204 	addi	sp,sp,8
  809858:	f800283a 	ret
  80985c:	80c0030b 	ldhu	r3,12(r16)
  809860:	18fbffcc 	andi	r3,r3,61439
  809864:	80c0030d 	sth	r3,12(r16)
  809868:	dfc00117 	ldw	ra,4(sp)
  80986c:	dc000017 	ldw	r16,0(sp)
  809870:	dec00204 	addi	sp,sp,8
  809874:	f800283a 	ret

00809878 <__sclose>:
  809878:	2940038f 	ldh	r5,14(r5)
  80987c:	0809a341 	jmpi	809a34 <_close_r>

00809880 <_write_r>:
  809880:	defffd04 	addi	sp,sp,-12
  809884:	2805883a 	mov	r2,r5
  809888:	dc000015 	stw	r16,0(sp)
  80988c:	04002074 	movhi	r16,129
  809890:	dc400115 	stw	r17,4(sp)
  809894:	300b883a 	mov	r5,r6
  809898:	84094104 	addi	r16,r16,9476
  80989c:	2023883a 	mov	r17,r4
  8098a0:	380d883a 	mov	r6,r7
  8098a4:	1009883a 	mov	r4,r2
  8098a8:	dfc00215 	stw	ra,8(sp)
  8098ac:	80000015 	stw	zero,0(r16)
  8098b0:	080af940 	call	80af94 <write>
  8098b4:	00ffffc4 	movi	r3,-1
  8098b8:	10c00526 	beq	r2,r3,8098d0 <_write_r+0x50>
  8098bc:	dfc00217 	ldw	ra,8(sp)
  8098c0:	dc400117 	ldw	r17,4(sp)
  8098c4:	dc000017 	ldw	r16,0(sp)
  8098c8:	dec00304 	addi	sp,sp,12
  8098cc:	f800283a 	ret
  8098d0:	80c00017 	ldw	r3,0(r16)
  8098d4:	183ff926 	beq	r3,zero,8098bc <__alt_mem_onchip_mem+0xff8018bc>
  8098d8:	88c00015 	stw	r3,0(r17)
  8098dc:	003ff706 	br	8098bc <__alt_mem_onchip_mem+0xff8018bc>

008098e0 <__swsetup_r>:
  8098e0:	00802074 	movhi	r2,129
  8098e4:	defffd04 	addi	sp,sp,-12
  8098e8:	10821904 	addi	r2,r2,2148
  8098ec:	dc400115 	stw	r17,4(sp)
  8098f0:	2023883a 	mov	r17,r4
  8098f4:	11000017 	ldw	r4,0(r2)
  8098f8:	dc000015 	stw	r16,0(sp)
  8098fc:	dfc00215 	stw	ra,8(sp)
  809900:	2821883a 	mov	r16,r5
  809904:	20000226 	beq	r4,zero,809910 <__swsetup_r+0x30>
  809908:	20800e17 	ldw	r2,56(r4)
  80990c:	10003126 	beq	r2,zero,8099d4 <__swsetup_r+0xf4>
  809910:	8080030b 	ldhu	r2,12(r16)
  809914:	10c0020c 	andi	r3,r2,8
  809918:	1009883a 	mov	r4,r2
  80991c:	18000f26 	beq	r3,zero,80995c <__swsetup_r+0x7c>
  809920:	80c00417 	ldw	r3,16(r16)
  809924:	18001526 	beq	r3,zero,80997c <__swsetup_r+0x9c>
  809928:	1100004c 	andi	r4,r2,1
  80992c:	20001c1e 	bne	r4,zero,8099a0 <__swsetup_r+0xc0>
  809930:	1080008c 	andi	r2,r2,2
  809934:	1000291e 	bne	r2,zero,8099dc <__swsetup_r+0xfc>
  809938:	80800517 	ldw	r2,20(r16)
  80993c:	80800215 	stw	r2,8(r16)
  809940:	18001c26 	beq	r3,zero,8099b4 <__swsetup_r+0xd4>
  809944:	0005883a 	mov	r2,zero
  809948:	dfc00217 	ldw	ra,8(sp)
  80994c:	dc400117 	ldw	r17,4(sp)
  809950:	dc000017 	ldw	r16,0(sp)
  809954:	dec00304 	addi	sp,sp,12
  809958:	f800283a 	ret
  80995c:	2080040c 	andi	r2,r4,16
  809960:	10002e26 	beq	r2,zero,809a1c <__swsetup_r+0x13c>
  809964:	2080010c 	andi	r2,r4,4
  809968:	10001e1e 	bne	r2,zero,8099e4 <__swsetup_r+0x104>
  80996c:	80c00417 	ldw	r3,16(r16)
  809970:	20800214 	ori	r2,r4,8
  809974:	8080030d 	sth	r2,12(r16)
  809978:	183feb1e 	bne	r3,zero,809928 <__alt_mem_onchip_mem+0xff801928>
  80997c:	1100a00c 	andi	r4,r2,640
  809980:	01408004 	movi	r5,512
  809984:	217fe826 	beq	r4,r5,809928 <__alt_mem_onchip_mem+0xff801928>
  809988:	800b883a 	mov	r5,r16
  80998c:	8809883a 	mov	r4,r17
  809990:	080a2c80 	call	80a2c8 <__smakebuf_r>
  809994:	8080030b 	ldhu	r2,12(r16)
  809998:	80c00417 	ldw	r3,16(r16)
  80999c:	003fe206 	br	809928 <__alt_mem_onchip_mem+0xff801928>
  8099a0:	80800517 	ldw	r2,20(r16)
  8099a4:	80000215 	stw	zero,8(r16)
  8099a8:	0085c83a 	sub	r2,zero,r2
  8099ac:	80800615 	stw	r2,24(r16)
  8099b0:	183fe41e 	bne	r3,zero,809944 <__alt_mem_onchip_mem+0xff801944>
  8099b4:	80c0030b 	ldhu	r3,12(r16)
  8099b8:	0005883a 	mov	r2,zero
  8099bc:	1900200c 	andi	r4,r3,128
  8099c0:	203fe126 	beq	r4,zero,809948 <__alt_mem_onchip_mem+0xff801948>
  8099c4:	18c01014 	ori	r3,r3,64
  8099c8:	80c0030d 	sth	r3,12(r16)
  8099cc:	00bfffc4 	movi	r2,-1
  8099d0:	003fdd06 	br	809948 <__alt_mem_onchip_mem+0xff801948>
  8099d4:	0807e3c0 	call	807e3c <__sinit>
  8099d8:	003fcd06 	br	809910 <__alt_mem_onchip_mem+0xff801910>
  8099dc:	0005883a 	mov	r2,zero
  8099e0:	003fd606 	br	80993c <__alt_mem_onchip_mem+0xff80193c>
  8099e4:	81400c17 	ldw	r5,48(r16)
  8099e8:	28000626 	beq	r5,zero,809a04 <__swsetup_r+0x124>
  8099ec:	80801004 	addi	r2,r16,64
  8099f0:	28800326 	beq	r5,r2,809a00 <__swsetup_r+0x120>
  8099f4:	8809883a 	mov	r4,r17
  8099f8:	0809f580 	call	809f58 <_free_r>
  8099fc:	8100030b 	ldhu	r4,12(r16)
  809a00:	80000c15 	stw	zero,48(r16)
  809a04:	80c00417 	ldw	r3,16(r16)
  809a08:	00bff6c4 	movi	r2,-37
  809a0c:	1108703a 	and	r4,r2,r4
  809a10:	80000115 	stw	zero,4(r16)
  809a14:	80c00015 	stw	r3,0(r16)
  809a18:	003fd506 	br	809970 <__alt_mem_onchip_mem+0xff801970>
  809a1c:	00800244 	movi	r2,9
  809a20:	88800015 	stw	r2,0(r17)
  809a24:	20801014 	ori	r2,r4,64
  809a28:	8080030d 	sth	r2,12(r16)
  809a2c:	00bfffc4 	movi	r2,-1
  809a30:	003fc506 	br	809948 <__alt_mem_onchip_mem+0xff801948>

00809a34 <_close_r>:
  809a34:	defffd04 	addi	sp,sp,-12
  809a38:	dc000015 	stw	r16,0(sp)
  809a3c:	04002074 	movhi	r16,129
  809a40:	dc400115 	stw	r17,4(sp)
  809a44:	84094104 	addi	r16,r16,9476
  809a48:	2023883a 	mov	r17,r4
  809a4c:	2809883a 	mov	r4,r5
  809a50:	dfc00215 	stw	ra,8(sp)
  809a54:	80000015 	stw	zero,0(r16)
  809a58:	080a7840 	call	80a784 <close>
  809a5c:	00ffffc4 	movi	r3,-1
  809a60:	10c00526 	beq	r2,r3,809a78 <_close_r+0x44>
  809a64:	dfc00217 	ldw	ra,8(sp)
  809a68:	dc400117 	ldw	r17,4(sp)
  809a6c:	dc000017 	ldw	r16,0(sp)
  809a70:	dec00304 	addi	sp,sp,12
  809a74:	f800283a 	ret
  809a78:	80c00017 	ldw	r3,0(r16)
  809a7c:	183ff926 	beq	r3,zero,809a64 <__alt_mem_onchip_mem+0xff801a64>
  809a80:	88c00015 	stw	r3,0(r17)
  809a84:	003ff706 	br	809a64 <__alt_mem_onchip_mem+0xff801a64>

00809a88 <_fclose_r>:
  809a88:	28003926 	beq	r5,zero,809b70 <_fclose_r+0xe8>
  809a8c:	defffc04 	addi	sp,sp,-16
  809a90:	dc400115 	stw	r17,4(sp)
  809a94:	dc000015 	stw	r16,0(sp)
  809a98:	dfc00315 	stw	ra,12(sp)
  809a9c:	dc800215 	stw	r18,8(sp)
  809aa0:	2023883a 	mov	r17,r4
  809aa4:	2821883a 	mov	r16,r5
  809aa8:	20000226 	beq	r4,zero,809ab4 <_fclose_r+0x2c>
  809aac:	20800e17 	ldw	r2,56(r4)
  809ab0:	10002726 	beq	r2,zero,809b50 <_fclose_r+0xc8>
  809ab4:	8080030f 	ldh	r2,12(r16)
  809ab8:	1000071e 	bne	r2,zero,809ad8 <_fclose_r+0x50>
  809abc:	0005883a 	mov	r2,zero
  809ac0:	dfc00317 	ldw	ra,12(sp)
  809ac4:	dc800217 	ldw	r18,8(sp)
  809ac8:	dc400117 	ldw	r17,4(sp)
  809acc:	dc000017 	ldw	r16,0(sp)
  809ad0:	dec00404 	addi	sp,sp,16
  809ad4:	f800283a 	ret
  809ad8:	800b883a 	mov	r5,r16
  809adc:	8809883a 	mov	r4,r17
  809ae0:	0809b8c0 	call	809b8c <__sflush_r>
  809ae4:	1025883a 	mov	r18,r2
  809ae8:	80800b17 	ldw	r2,44(r16)
  809aec:	10000426 	beq	r2,zero,809b00 <_fclose_r+0x78>
  809af0:	81400717 	ldw	r5,28(r16)
  809af4:	8809883a 	mov	r4,r17
  809af8:	103ee83a 	callr	r2
  809afc:	10001616 	blt	r2,zero,809b58 <_fclose_r+0xd0>
  809b00:	8080030b 	ldhu	r2,12(r16)
  809b04:	1080200c 	andi	r2,r2,128
  809b08:	1000151e 	bne	r2,zero,809b60 <_fclose_r+0xd8>
  809b0c:	81400c17 	ldw	r5,48(r16)
  809b10:	28000526 	beq	r5,zero,809b28 <_fclose_r+0xa0>
  809b14:	80801004 	addi	r2,r16,64
  809b18:	28800226 	beq	r5,r2,809b24 <_fclose_r+0x9c>
  809b1c:	8809883a 	mov	r4,r17
  809b20:	0809f580 	call	809f58 <_free_r>
  809b24:	80000c15 	stw	zero,48(r16)
  809b28:	81401117 	ldw	r5,68(r16)
  809b2c:	28000326 	beq	r5,zero,809b3c <_fclose_r+0xb4>
  809b30:	8809883a 	mov	r4,r17
  809b34:	0809f580 	call	809f58 <_free_r>
  809b38:	80001115 	stw	zero,68(r16)
  809b3c:	0807e4c0 	call	807e4c <__sfp_lock_acquire>
  809b40:	8000030d 	sth	zero,12(r16)
  809b44:	0807e500 	call	807e50 <__sfp_lock_release>
  809b48:	9005883a 	mov	r2,r18
  809b4c:	003fdc06 	br	809ac0 <__alt_mem_onchip_mem+0xff801ac0>
  809b50:	0807e3c0 	call	807e3c <__sinit>
  809b54:	003fd706 	br	809ab4 <__alt_mem_onchip_mem+0xff801ab4>
  809b58:	04bfffc4 	movi	r18,-1
  809b5c:	003fe806 	br	809b00 <__alt_mem_onchip_mem+0xff801b00>
  809b60:	81400417 	ldw	r5,16(r16)
  809b64:	8809883a 	mov	r4,r17
  809b68:	0809f580 	call	809f58 <_free_r>
  809b6c:	003fe706 	br	809b0c <__alt_mem_onchip_mem+0xff801b0c>
  809b70:	0005883a 	mov	r2,zero
  809b74:	f800283a 	ret

00809b78 <fclose>:
  809b78:	00802074 	movhi	r2,129
  809b7c:	10821904 	addi	r2,r2,2148
  809b80:	200b883a 	mov	r5,r4
  809b84:	11000017 	ldw	r4,0(r2)
  809b88:	0809a881 	jmpi	809a88 <_fclose_r>

00809b8c <__sflush_r>:
  809b8c:	2880030b 	ldhu	r2,12(r5)
  809b90:	defffb04 	addi	sp,sp,-20
  809b94:	dcc00315 	stw	r19,12(sp)
  809b98:	dc400115 	stw	r17,4(sp)
  809b9c:	dfc00415 	stw	ra,16(sp)
  809ba0:	dc800215 	stw	r18,8(sp)
  809ba4:	dc000015 	stw	r16,0(sp)
  809ba8:	10c0020c 	andi	r3,r2,8
  809bac:	2823883a 	mov	r17,r5
  809bb0:	2027883a 	mov	r19,r4
  809bb4:	1800311e 	bne	r3,zero,809c7c <__sflush_r+0xf0>
  809bb8:	28c00117 	ldw	r3,4(r5)
  809bbc:	10820014 	ori	r2,r2,2048
  809bc0:	2880030d 	sth	r2,12(r5)
  809bc4:	00c04b0e 	bge	zero,r3,809cf4 <__sflush_r+0x168>
  809bc8:	8a000a17 	ldw	r8,40(r17)
  809bcc:	40002326 	beq	r8,zero,809c5c <__sflush_r+0xd0>
  809bd0:	9c000017 	ldw	r16,0(r19)
  809bd4:	10c4000c 	andi	r3,r2,4096
  809bd8:	98000015 	stw	zero,0(r19)
  809bdc:	18004826 	beq	r3,zero,809d00 <__sflush_r+0x174>
  809be0:	89801417 	ldw	r6,80(r17)
  809be4:	10c0010c 	andi	r3,r2,4
  809be8:	18000626 	beq	r3,zero,809c04 <__sflush_r+0x78>
  809bec:	88c00117 	ldw	r3,4(r17)
  809bf0:	88800c17 	ldw	r2,48(r17)
  809bf4:	30cdc83a 	sub	r6,r6,r3
  809bf8:	10000226 	beq	r2,zero,809c04 <__sflush_r+0x78>
  809bfc:	88800f17 	ldw	r2,60(r17)
  809c00:	308dc83a 	sub	r6,r6,r2
  809c04:	89400717 	ldw	r5,28(r17)
  809c08:	000f883a 	mov	r7,zero
  809c0c:	9809883a 	mov	r4,r19
  809c10:	403ee83a 	callr	r8
  809c14:	00ffffc4 	movi	r3,-1
  809c18:	10c04426 	beq	r2,r3,809d2c <__sflush_r+0x1a0>
  809c1c:	88c0030b 	ldhu	r3,12(r17)
  809c20:	89000417 	ldw	r4,16(r17)
  809c24:	88000115 	stw	zero,4(r17)
  809c28:	197dffcc 	andi	r5,r3,63487
  809c2c:	8940030d 	sth	r5,12(r17)
  809c30:	89000015 	stw	r4,0(r17)
  809c34:	18c4000c 	andi	r3,r3,4096
  809c38:	18002c1e 	bne	r3,zero,809cec <__sflush_r+0x160>
  809c3c:	89400c17 	ldw	r5,48(r17)
  809c40:	9c000015 	stw	r16,0(r19)
  809c44:	28000526 	beq	r5,zero,809c5c <__sflush_r+0xd0>
  809c48:	88801004 	addi	r2,r17,64
  809c4c:	28800226 	beq	r5,r2,809c58 <__sflush_r+0xcc>
  809c50:	9809883a 	mov	r4,r19
  809c54:	0809f580 	call	809f58 <_free_r>
  809c58:	88000c15 	stw	zero,48(r17)
  809c5c:	0005883a 	mov	r2,zero
  809c60:	dfc00417 	ldw	ra,16(sp)
  809c64:	dcc00317 	ldw	r19,12(sp)
  809c68:	dc800217 	ldw	r18,8(sp)
  809c6c:	dc400117 	ldw	r17,4(sp)
  809c70:	dc000017 	ldw	r16,0(sp)
  809c74:	dec00504 	addi	sp,sp,20
  809c78:	f800283a 	ret
  809c7c:	2c800417 	ldw	r18,16(r5)
  809c80:	903ff626 	beq	r18,zero,809c5c <__alt_mem_onchip_mem+0xff801c5c>
  809c84:	2c000017 	ldw	r16,0(r5)
  809c88:	108000cc 	andi	r2,r2,3
  809c8c:	2c800015 	stw	r18,0(r5)
  809c90:	84a1c83a 	sub	r16,r16,r18
  809c94:	1000131e 	bne	r2,zero,809ce4 <__sflush_r+0x158>
  809c98:	28800517 	ldw	r2,20(r5)
  809c9c:	88800215 	stw	r2,8(r17)
  809ca0:	04000316 	blt	zero,r16,809cb0 <__sflush_r+0x124>
  809ca4:	003fed06 	br	809c5c <__alt_mem_onchip_mem+0xff801c5c>
  809ca8:	90a5883a 	add	r18,r18,r2
  809cac:	043feb0e 	bge	zero,r16,809c5c <__alt_mem_onchip_mem+0xff801c5c>
  809cb0:	88800917 	ldw	r2,36(r17)
  809cb4:	89400717 	ldw	r5,28(r17)
  809cb8:	800f883a 	mov	r7,r16
  809cbc:	900d883a 	mov	r6,r18
  809cc0:	9809883a 	mov	r4,r19
  809cc4:	103ee83a 	callr	r2
  809cc8:	80a1c83a 	sub	r16,r16,r2
  809ccc:	00bff616 	blt	zero,r2,809ca8 <__alt_mem_onchip_mem+0xff801ca8>
  809cd0:	88c0030b 	ldhu	r3,12(r17)
  809cd4:	00bfffc4 	movi	r2,-1
  809cd8:	18c01014 	ori	r3,r3,64
  809cdc:	88c0030d 	sth	r3,12(r17)
  809ce0:	003fdf06 	br	809c60 <__alt_mem_onchip_mem+0xff801c60>
  809ce4:	0005883a 	mov	r2,zero
  809ce8:	003fec06 	br	809c9c <__alt_mem_onchip_mem+0xff801c9c>
  809cec:	88801415 	stw	r2,80(r17)
  809cf0:	003fd206 	br	809c3c <__alt_mem_onchip_mem+0xff801c3c>
  809cf4:	28c00f17 	ldw	r3,60(r5)
  809cf8:	00ffb316 	blt	zero,r3,809bc8 <__alt_mem_onchip_mem+0xff801bc8>
  809cfc:	003fd706 	br	809c5c <__alt_mem_onchip_mem+0xff801c5c>
  809d00:	89400717 	ldw	r5,28(r17)
  809d04:	000d883a 	mov	r6,zero
  809d08:	01c00044 	movi	r7,1
  809d0c:	9809883a 	mov	r4,r19
  809d10:	403ee83a 	callr	r8
  809d14:	100d883a 	mov	r6,r2
  809d18:	00bfffc4 	movi	r2,-1
  809d1c:	30801426 	beq	r6,r2,809d70 <__sflush_r+0x1e4>
  809d20:	8880030b 	ldhu	r2,12(r17)
  809d24:	8a000a17 	ldw	r8,40(r17)
  809d28:	003fae06 	br	809be4 <__alt_mem_onchip_mem+0xff801be4>
  809d2c:	98c00017 	ldw	r3,0(r19)
  809d30:	183fba26 	beq	r3,zero,809c1c <__alt_mem_onchip_mem+0xff801c1c>
  809d34:	01000744 	movi	r4,29
  809d38:	19000626 	beq	r3,r4,809d54 <__sflush_r+0x1c8>
  809d3c:	01000584 	movi	r4,22
  809d40:	19000426 	beq	r3,r4,809d54 <__sflush_r+0x1c8>
  809d44:	88c0030b 	ldhu	r3,12(r17)
  809d48:	18c01014 	ori	r3,r3,64
  809d4c:	88c0030d 	sth	r3,12(r17)
  809d50:	003fc306 	br	809c60 <__alt_mem_onchip_mem+0xff801c60>
  809d54:	8880030b 	ldhu	r2,12(r17)
  809d58:	88c00417 	ldw	r3,16(r17)
  809d5c:	88000115 	stw	zero,4(r17)
  809d60:	10bdffcc 	andi	r2,r2,63487
  809d64:	8880030d 	sth	r2,12(r17)
  809d68:	88c00015 	stw	r3,0(r17)
  809d6c:	003fb306 	br	809c3c <__alt_mem_onchip_mem+0xff801c3c>
  809d70:	98800017 	ldw	r2,0(r19)
  809d74:	103fea26 	beq	r2,zero,809d20 <__alt_mem_onchip_mem+0xff801d20>
  809d78:	00c00744 	movi	r3,29
  809d7c:	10c00226 	beq	r2,r3,809d88 <__sflush_r+0x1fc>
  809d80:	00c00584 	movi	r3,22
  809d84:	10c0031e 	bne	r2,r3,809d94 <__sflush_r+0x208>
  809d88:	9c000015 	stw	r16,0(r19)
  809d8c:	0005883a 	mov	r2,zero
  809d90:	003fb306 	br	809c60 <__alt_mem_onchip_mem+0xff801c60>
  809d94:	88c0030b 	ldhu	r3,12(r17)
  809d98:	3005883a 	mov	r2,r6
  809d9c:	18c01014 	ori	r3,r3,64
  809da0:	88c0030d 	sth	r3,12(r17)
  809da4:	003fae06 	br	809c60 <__alt_mem_onchip_mem+0xff801c60>

00809da8 <_fflush_r>:
  809da8:	defffd04 	addi	sp,sp,-12
  809dac:	dc000115 	stw	r16,4(sp)
  809db0:	dfc00215 	stw	ra,8(sp)
  809db4:	2021883a 	mov	r16,r4
  809db8:	20000226 	beq	r4,zero,809dc4 <_fflush_r+0x1c>
  809dbc:	20800e17 	ldw	r2,56(r4)
  809dc0:	10000c26 	beq	r2,zero,809df4 <_fflush_r+0x4c>
  809dc4:	2880030f 	ldh	r2,12(r5)
  809dc8:	1000051e 	bne	r2,zero,809de0 <_fflush_r+0x38>
  809dcc:	0005883a 	mov	r2,zero
  809dd0:	dfc00217 	ldw	ra,8(sp)
  809dd4:	dc000117 	ldw	r16,4(sp)
  809dd8:	dec00304 	addi	sp,sp,12
  809ddc:	f800283a 	ret
  809de0:	8009883a 	mov	r4,r16
  809de4:	dfc00217 	ldw	ra,8(sp)
  809de8:	dc000117 	ldw	r16,4(sp)
  809dec:	dec00304 	addi	sp,sp,12
  809df0:	0809b8c1 	jmpi	809b8c <__sflush_r>
  809df4:	d9400015 	stw	r5,0(sp)
  809df8:	0807e3c0 	call	807e3c <__sinit>
  809dfc:	d9400017 	ldw	r5,0(sp)
  809e00:	003ff006 	br	809dc4 <__alt_mem_onchip_mem+0xff801dc4>

00809e04 <fflush>:
  809e04:	20000526 	beq	r4,zero,809e1c <fflush+0x18>
  809e08:	00802074 	movhi	r2,129
  809e0c:	10821904 	addi	r2,r2,2148
  809e10:	200b883a 	mov	r5,r4
  809e14:	11000017 	ldw	r4,0(r2)
  809e18:	0809da81 	jmpi	809da8 <_fflush_r>
  809e1c:	00802074 	movhi	r2,129
  809e20:	10821804 	addi	r2,r2,2144
  809e24:	11000017 	ldw	r4,0(r2)
  809e28:	01402074 	movhi	r5,129
  809e2c:	29676a04 	addi	r5,r5,-25176
  809e30:	080840c1 	jmpi	80840c <_fwalk_reent>

00809e34 <_malloc_trim_r>:
  809e34:	defffb04 	addi	sp,sp,-20
  809e38:	dcc00315 	stw	r19,12(sp)
  809e3c:	04c02074 	movhi	r19,129
  809e40:	dc800215 	stw	r18,8(sp)
  809e44:	dc400115 	stw	r17,4(sp)
  809e48:	dc000015 	stw	r16,0(sp)
  809e4c:	dfc00415 	stw	ra,16(sp)
  809e50:	2821883a 	mov	r16,r5
  809e54:	9cfc1b04 	addi	r19,r19,-3988
  809e58:	2025883a 	mov	r18,r4
  809e5c:	080acc40 	call	80acc4 <__malloc_lock>
  809e60:	98800217 	ldw	r2,8(r19)
  809e64:	14400117 	ldw	r17,4(r2)
  809e68:	00bfff04 	movi	r2,-4
  809e6c:	88a2703a 	and	r17,r17,r2
  809e70:	8c21c83a 	sub	r16,r17,r16
  809e74:	8403fbc4 	addi	r16,r16,4079
  809e78:	8020d33a 	srli	r16,r16,12
  809e7c:	0083ffc4 	movi	r2,4095
  809e80:	843fffc4 	addi	r16,r16,-1
  809e84:	8020933a 	slli	r16,r16,12
  809e88:	1400060e 	bge	r2,r16,809ea4 <_malloc_trim_r+0x70>
  809e8c:	000b883a 	mov	r5,zero
  809e90:	9009883a 	mov	r4,r18
  809e94:	08096f00 	call	8096f0 <_sbrk_r>
  809e98:	98c00217 	ldw	r3,8(r19)
  809e9c:	1c47883a 	add	r3,r3,r17
  809ea0:	10c00a26 	beq	r2,r3,809ecc <_malloc_trim_r+0x98>
  809ea4:	9009883a 	mov	r4,r18
  809ea8:	080ace80 	call	80ace8 <__malloc_unlock>
  809eac:	0005883a 	mov	r2,zero
  809eb0:	dfc00417 	ldw	ra,16(sp)
  809eb4:	dcc00317 	ldw	r19,12(sp)
  809eb8:	dc800217 	ldw	r18,8(sp)
  809ebc:	dc400117 	ldw	r17,4(sp)
  809ec0:	dc000017 	ldw	r16,0(sp)
  809ec4:	dec00504 	addi	sp,sp,20
  809ec8:	f800283a 	ret
  809ecc:	040bc83a 	sub	r5,zero,r16
  809ed0:	9009883a 	mov	r4,r18
  809ed4:	08096f00 	call	8096f0 <_sbrk_r>
  809ed8:	00ffffc4 	movi	r3,-1
  809edc:	10c00d26 	beq	r2,r3,809f14 <_malloc_trim_r+0xe0>
  809ee0:	00c02074 	movhi	r3,129
  809ee4:	18c94904 	addi	r3,r3,9508
  809ee8:	18800017 	ldw	r2,0(r3)
  809eec:	99000217 	ldw	r4,8(r19)
  809ef0:	8c23c83a 	sub	r17,r17,r16
  809ef4:	8c400054 	ori	r17,r17,1
  809ef8:	1421c83a 	sub	r16,r2,r16
  809efc:	24400115 	stw	r17,4(r4)
  809f00:	9009883a 	mov	r4,r18
  809f04:	1c000015 	stw	r16,0(r3)
  809f08:	080ace80 	call	80ace8 <__malloc_unlock>
  809f0c:	00800044 	movi	r2,1
  809f10:	003fe706 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  809f14:	000b883a 	mov	r5,zero
  809f18:	9009883a 	mov	r4,r18
  809f1c:	08096f00 	call	8096f0 <_sbrk_r>
  809f20:	99000217 	ldw	r4,8(r19)
  809f24:	014003c4 	movi	r5,15
  809f28:	1107c83a 	sub	r3,r2,r4
  809f2c:	28ffdd0e 	bge	r5,r3,809ea4 <__alt_mem_onchip_mem+0xff801ea4>
  809f30:	01402074 	movhi	r5,129
  809f34:	29421a04 	addi	r5,r5,2152
  809f38:	29400017 	ldw	r5,0(r5)
  809f3c:	18c00054 	ori	r3,r3,1
  809f40:	20c00115 	stw	r3,4(r4)
  809f44:	00c02074 	movhi	r3,129
  809f48:	1145c83a 	sub	r2,r2,r5
  809f4c:	18c94904 	addi	r3,r3,9508
  809f50:	18800015 	stw	r2,0(r3)
  809f54:	003fd306 	br	809ea4 <__alt_mem_onchip_mem+0xff801ea4>

00809f58 <_free_r>:
  809f58:	28004126 	beq	r5,zero,80a060 <_free_r+0x108>
  809f5c:	defffd04 	addi	sp,sp,-12
  809f60:	dc400115 	stw	r17,4(sp)
  809f64:	dc000015 	stw	r16,0(sp)
  809f68:	2023883a 	mov	r17,r4
  809f6c:	2821883a 	mov	r16,r5
  809f70:	dfc00215 	stw	ra,8(sp)
  809f74:	080acc40 	call	80acc4 <__malloc_lock>
  809f78:	81ffff17 	ldw	r7,-4(r16)
  809f7c:	00bfff84 	movi	r2,-2
  809f80:	01002074 	movhi	r4,129
  809f84:	81bffe04 	addi	r6,r16,-8
  809f88:	3884703a 	and	r2,r7,r2
  809f8c:	213c1b04 	addi	r4,r4,-3988
  809f90:	308b883a 	add	r5,r6,r2
  809f94:	2a400117 	ldw	r9,4(r5)
  809f98:	22000217 	ldw	r8,8(r4)
  809f9c:	00ffff04 	movi	r3,-4
  809fa0:	48c6703a 	and	r3,r9,r3
  809fa4:	2a005726 	beq	r5,r8,80a104 <_free_r+0x1ac>
  809fa8:	28c00115 	stw	r3,4(r5)
  809fac:	39c0004c 	andi	r7,r7,1
  809fb0:	3800091e 	bne	r7,zero,809fd8 <_free_r+0x80>
  809fb4:	823ffe17 	ldw	r8,-8(r16)
  809fb8:	22400204 	addi	r9,r4,8
  809fbc:	320dc83a 	sub	r6,r6,r8
  809fc0:	31c00217 	ldw	r7,8(r6)
  809fc4:	1205883a 	add	r2,r2,r8
  809fc8:	3a406526 	beq	r7,r9,80a160 <_free_r+0x208>
  809fcc:	32000317 	ldw	r8,12(r6)
  809fd0:	3a000315 	stw	r8,12(r7)
  809fd4:	41c00215 	stw	r7,8(r8)
  809fd8:	28cf883a 	add	r7,r5,r3
  809fdc:	39c00117 	ldw	r7,4(r7)
  809fe0:	39c0004c 	andi	r7,r7,1
  809fe4:	38003a26 	beq	r7,zero,80a0d0 <_free_r+0x178>
  809fe8:	10c00054 	ori	r3,r2,1
  809fec:	30c00115 	stw	r3,4(r6)
  809ff0:	3087883a 	add	r3,r6,r2
  809ff4:	18800015 	stw	r2,0(r3)
  809ff8:	00c07fc4 	movi	r3,511
  809ffc:	18801936 	bltu	r3,r2,80a064 <_free_r+0x10c>
  80a000:	1004d0fa 	srli	r2,r2,3
  80a004:	01c00044 	movi	r7,1
  80a008:	21400117 	ldw	r5,4(r4)
  80a00c:	10c00044 	addi	r3,r2,1
  80a010:	18c7883a 	add	r3,r3,r3
  80a014:	1005d0ba 	srai	r2,r2,2
  80a018:	18c7883a 	add	r3,r3,r3
  80a01c:	18c7883a 	add	r3,r3,r3
  80a020:	1907883a 	add	r3,r3,r4
  80a024:	3884983a 	sll	r2,r7,r2
  80a028:	19c00017 	ldw	r7,0(r3)
  80a02c:	1a3ffe04 	addi	r8,r3,-8
  80a030:	1144b03a 	or	r2,r2,r5
  80a034:	32000315 	stw	r8,12(r6)
  80a038:	31c00215 	stw	r7,8(r6)
  80a03c:	20800115 	stw	r2,4(r4)
  80a040:	19800015 	stw	r6,0(r3)
  80a044:	39800315 	stw	r6,12(r7)
  80a048:	8809883a 	mov	r4,r17
  80a04c:	dfc00217 	ldw	ra,8(sp)
  80a050:	dc400117 	ldw	r17,4(sp)
  80a054:	dc000017 	ldw	r16,0(sp)
  80a058:	dec00304 	addi	sp,sp,12
  80a05c:	080ace81 	jmpi	80ace8 <__malloc_unlock>
  80a060:	f800283a 	ret
  80a064:	100ad27a 	srli	r5,r2,9
  80a068:	00c00104 	movi	r3,4
  80a06c:	19404a36 	bltu	r3,r5,80a198 <_free_r+0x240>
  80a070:	100ad1ba 	srli	r5,r2,6
  80a074:	28c00e44 	addi	r3,r5,57
  80a078:	18c7883a 	add	r3,r3,r3
  80a07c:	29400e04 	addi	r5,r5,56
  80a080:	18c7883a 	add	r3,r3,r3
  80a084:	18c7883a 	add	r3,r3,r3
  80a088:	1909883a 	add	r4,r3,r4
  80a08c:	20c00017 	ldw	r3,0(r4)
  80a090:	01c02074 	movhi	r7,129
  80a094:	213ffe04 	addi	r4,r4,-8
  80a098:	39fc1b04 	addi	r7,r7,-3988
  80a09c:	20c04426 	beq	r4,r3,80a1b0 <_free_r+0x258>
  80a0a0:	01ffff04 	movi	r7,-4
  80a0a4:	19400117 	ldw	r5,4(r3)
  80a0a8:	29ca703a 	and	r5,r5,r7
  80a0ac:	1140022e 	bgeu	r2,r5,80a0b8 <_free_r+0x160>
  80a0b0:	18c00217 	ldw	r3,8(r3)
  80a0b4:	20fffb1e 	bne	r4,r3,80a0a4 <__alt_mem_onchip_mem+0xff8020a4>
  80a0b8:	19000317 	ldw	r4,12(r3)
  80a0bc:	31000315 	stw	r4,12(r6)
  80a0c0:	30c00215 	stw	r3,8(r6)
  80a0c4:	21800215 	stw	r6,8(r4)
  80a0c8:	19800315 	stw	r6,12(r3)
  80a0cc:	003fde06 	br	80a048 <__alt_mem_onchip_mem+0xff802048>
  80a0d0:	29c00217 	ldw	r7,8(r5)
  80a0d4:	10c5883a 	add	r2,r2,r3
  80a0d8:	00c02074 	movhi	r3,129
  80a0dc:	18fc1d04 	addi	r3,r3,-3980
  80a0e0:	38c03b26 	beq	r7,r3,80a1d0 <_free_r+0x278>
  80a0e4:	2a000317 	ldw	r8,12(r5)
  80a0e8:	11400054 	ori	r5,r2,1
  80a0ec:	3087883a 	add	r3,r6,r2
  80a0f0:	3a000315 	stw	r8,12(r7)
  80a0f4:	41c00215 	stw	r7,8(r8)
  80a0f8:	31400115 	stw	r5,4(r6)
  80a0fc:	18800015 	stw	r2,0(r3)
  80a100:	003fbd06 	br	809ff8 <__alt_mem_onchip_mem+0xff801ff8>
  80a104:	39c0004c 	andi	r7,r7,1
  80a108:	10c5883a 	add	r2,r2,r3
  80a10c:	3800071e 	bne	r7,zero,80a12c <_free_r+0x1d4>
  80a110:	81fffe17 	ldw	r7,-8(r16)
  80a114:	31cdc83a 	sub	r6,r6,r7
  80a118:	30c00317 	ldw	r3,12(r6)
  80a11c:	31400217 	ldw	r5,8(r6)
  80a120:	11c5883a 	add	r2,r2,r7
  80a124:	28c00315 	stw	r3,12(r5)
  80a128:	19400215 	stw	r5,8(r3)
  80a12c:	10c00054 	ori	r3,r2,1
  80a130:	30c00115 	stw	r3,4(r6)
  80a134:	00c02074 	movhi	r3,129
  80a138:	18c21b04 	addi	r3,r3,2156
  80a13c:	18c00017 	ldw	r3,0(r3)
  80a140:	21800215 	stw	r6,8(r4)
  80a144:	10ffc036 	bltu	r2,r3,80a048 <__alt_mem_onchip_mem+0xff802048>
  80a148:	00802074 	movhi	r2,129
  80a14c:	10894004 	addi	r2,r2,9472
  80a150:	11400017 	ldw	r5,0(r2)
  80a154:	8809883a 	mov	r4,r17
  80a158:	0809e340 	call	809e34 <_malloc_trim_r>
  80a15c:	003fba06 	br	80a048 <__alt_mem_onchip_mem+0xff802048>
  80a160:	28c9883a 	add	r4,r5,r3
  80a164:	21000117 	ldw	r4,4(r4)
  80a168:	2100004c 	andi	r4,r4,1
  80a16c:	2000391e 	bne	r4,zero,80a254 <_free_r+0x2fc>
  80a170:	29c00217 	ldw	r7,8(r5)
  80a174:	29000317 	ldw	r4,12(r5)
  80a178:	1885883a 	add	r2,r3,r2
  80a17c:	10c00054 	ori	r3,r2,1
  80a180:	39000315 	stw	r4,12(r7)
  80a184:	21c00215 	stw	r7,8(r4)
  80a188:	30c00115 	stw	r3,4(r6)
  80a18c:	308d883a 	add	r6,r6,r2
  80a190:	30800015 	stw	r2,0(r6)
  80a194:	003fac06 	br	80a048 <__alt_mem_onchip_mem+0xff802048>
  80a198:	00c00504 	movi	r3,20
  80a19c:	19401536 	bltu	r3,r5,80a1f4 <_free_r+0x29c>
  80a1a0:	28c01704 	addi	r3,r5,92
  80a1a4:	18c7883a 	add	r3,r3,r3
  80a1a8:	294016c4 	addi	r5,r5,91
  80a1ac:	003fb406 	br	80a080 <__alt_mem_onchip_mem+0xff802080>
  80a1b0:	280bd0ba 	srai	r5,r5,2
  80a1b4:	00c00044 	movi	r3,1
  80a1b8:	38800117 	ldw	r2,4(r7)
  80a1bc:	194a983a 	sll	r5,r3,r5
  80a1c0:	2007883a 	mov	r3,r4
  80a1c4:	2884b03a 	or	r2,r5,r2
  80a1c8:	38800115 	stw	r2,4(r7)
  80a1cc:	003fbb06 	br	80a0bc <__alt_mem_onchip_mem+0xff8020bc>
  80a1d0:	21800515 	stw	r6,20(r4)
  80a1d4:	21800415 	stw	r6,16(r4)
  80a1d8:	10c00054 	ori	r3,r2,1
  80a1dc:	31c00315 	stw	r7,12(r6)
  80a1e0:	31c00215 	stw	r7,8(r6)
  80a1e4:	30c00115 	stw	r3,4(r6)
  80a1e8:	308d883a 	add	r6,r6,r2
  80a1ec:	30800015 	stw	r2,0(r6)
  80a1f0:	003f9506 	br	80a048 <__alt_mem_onchip_mem+0xff802048>
  80a1f4:	00c01504 	movi	r3,84
  80a1f8:	19400536 	bltu	r3,r5,80a210 <_free_r+0x2b8>
  80a1fc:	100ad33a 	srli	r5,r2,12
  80a200:	28c01bc4 	addi	r3,r5,111
  80a204:	18c7883a 	add	r3,r3,r3
  80a208:	29401b84 	addi	r5,r5,110
  80a20c:	003f9c06 	br	80a080 <__alt_mem_onchip_mem+0xff802080>
  80a210:	00c05504 	movi	r3,340
  80a214:	19400536 	bltu	r3,r5,80a22c <_free_r+0x2d4>
  80a218:	100ad3fa 	srli	r5,r2,15
  80a21c:	28c01e04 	addi	r3,r5,120
  80a220:	18c7883a 	add	r3,r3,r3
  80a224:	29401dc4 	addi	r5,r5,119
  80a228:	003f9506 	br	80a080 <__alt_mem_onchip_mem+0xff802080>
  80a22c:	00c15504 	movi	r3,1364
  80a230:	19400536 	bltu	r3,r5,80a248 <_free_r+0x2f0>
  80a234:	100ad4ba 	srli	r5,r2,18
  80a238:	28c01f44 	addi	r3,r5,125
  80a23c:	18c7883a 	add	r3,r3,r3
  80a240:	29401f04 	addi	r5,r5,124
  80a244:	003f8e06 	br	80a080 <__alt_mem_onchip_mem+0xff802080>
  80a248:	00c03f84 	movi	r3,254
  80a24c:	01401f84 	movi	r5,126
  80a250:	003f8b06 	br	80a080 <__alt_mem_onchip_mem+0xff802080>
  80a254:	10c00054 	ori	r3,r2,1
  80a258:	30c00115 	stw	r3,4(r6)
  80a25c:	308d883a 	add	r6,r6,r2
  80a260:	30800015 	stw	r2,0(r6)
  80a264:	003f7806 	br	80a048 <__alt_mem_onchip_mem+0xff802048>

0080a268 <_lseek_r>:
  80a268:	defffd04 	addi	sp,sp,-12
  80a26c:	2805883a 	mov	r2,r5
  80a270:	dc000015 	stw	r16,0(sp)
  80a274:	04002074 	movhi	r16,129
  80a278:	dc400115 	stw	r17,4(sp)
  80a27c:	300b883a 	mov	r5,r6
  80a280:	84094104 	addi	r16,r16,9476
  80a284:	2023883a 	mov	r17,r4
  80a288:	380d883a 	mov	r6,r7
  80a28c:	1009883a 	mov	r4,r2
  80a290:	dfc00215 	stw	ra,8(sp)
  80a294:	80000015 	stw	zero,0(r16)
  80a298:	080ab740 	call	80ab74 <lseek>
  80a29c:	00ffffc4 	movi	r3,-1
  80a2a0:	10c00526 	beq	r2,r3,80a2b8 <_lseek_r+0x50>
  80a2a4:	dfc00217 	ldw	ra,8(sp)
  80a2a8:	dc400117 	ldw	r17,4(sp)
  80a2ac:	dc000017 	ldw	r16,0(sp)
  80a2b0:	dec00304 	addi	sp,sp,12
  80a2b4:	f800283a 	ret
  80a2b8:	80c00017 	ldw	r3,0(r16)
  80a2bc:	183ff926 	beq	r3,zero,80a2a4 <__alt_mem_onchip_mem+0xff8022a4>
  80a2c0:	88c00015 	stw	r3,0(r17)
  80a2c4:	003ff706 	br	80a2a4 <__alt_mem_onchip_mem+0xff8022a4>

0080a2c8 <__smakebuf_r>:
  80a2c8:	2880030b 	ldhu	r2,12(r5)
  80a2cc:	10c0008c 	andi	r3,r2,2
  80a2d0:	1800411e 	bne	r3,zero,80a3d8 <__smakebuf_r+0x110>
  80a2d4:	deffec04 	addi	sp,sp,-80
  80a2d8:	dc000f15 	stw	r16,60(sp)
  80a2dc:	2821883a 	mov	r16,r5
  80a2e0:	2940038f 	ldh	r5,14(r5)
  80a2e4:	dc401015 	stw	r17,64(sp)
  80a2e8:	dfc01315 	stw	ra,76(sp)
  80a2ec:	dcc01215 	stw	r19,72(sp)
  80a2f0:	dc801115 	stw	r18,68(sp)
  80a2f4:	2023883a 	mov	r17,r4
  80a2f8:	28001c16 	blt	r5,zero,80a36c <__smakebuf_r+0xa4>
  80a2fc:	d80d883a 	mov	r6,sp
  80a300:	080a4e40 	call	80a4e4 <_fstat_r>
  80a304:	10001816 	blt	r2,zero,80a368 <__smakebuf_r+0xa0>
  80a308:	d8800117 	ldw	r2,4(sp)
  80a30c:	00e00014 	movui	r3,32768
  80a310:	10bc000c 	andi	r2,r2,61440
  80a314:	14c80020 	cmpeqi	r19,r2,8192
  80a318:	10c03726 	beq	r2,r3,80a3f8 <__smakebuf_r+0x130>
  80a31c:	80c0030b 	ldhu	r3,12(r16)
  80a320:	18c20014 	ori	r3,r3,2048
  80a324:	80c0030d 	sth	r3,12(r16)
  80a328:	00c80004 	movi	r3,8192
  80a32c:	10c0521e 	bne	r2,r3,80a478 <__smakebuf_r+0x1b0>
  80a330:	8140038f 	ldh	r5,14(r16)
  80a334:	8809883a 	mov	r4,r17
  80a338:	080a5400 	call	80a540 <_isatty_r>
  80a33c:	10004c26 	beq	r2,zero,80a470 <__smakebuf_r+0x1a8>
  80a340:	8080030b 	ldhu	r2,12(r16)
  80a344:	80c010c4 	addi	r3,r16,67
  80a348:	80c00015 	stw	r3,0(r16)
  80a34c:	10800054 	ori	r2,r2,1
  80a350:	8080030d 	sth	r2,12(r16)
  80a354:	00800044 	movi	r2,1
  80a358:	80c00415 	stw	r3,16(r16)
  80a35c:	80800515 	stw	r2,20(r16)
  80a360:	04810004 	movi	r18,1024
  80a364:	00000706 	br	80a384 <__smakebuf_r+0xbc>
  80a368:	8080030b 	ldhu	r2,12(r16)
  80a36c:	10c0200c 	andi	r3,r2,128
  80a370:	18001f1e 	bne	r3,zero,80a3f0 <__smakebuf_r+0x128>
  80a374:	04810004 	movi	r18,1024
  80a378:	10820014 	ori	r2,r2,2048
  80a37c:	8080030d 	sth	r2,12(r16)
  80a380:	0027883a 	mov	r19,zero
  80a384:	900b883a 	mov	r5,r18
  80a388:	8809883a 	mov	r4,r17
  80a38c:	08084d00 	call	8084d0 <_malloc_r>
  80a390:	10002c26 	beq	r2,zero,80a444 <__smakebuf_r+0x17c>
  80a394:	80c0030b 	ldhu	r3,12(r16)
  80a398:	01002034 	movhi	r4,128
  80a39c:	211ebd04 	addi	r4,r4,31476
  80a3a0:	89000f15 	stw	r4,60(r17)
  80a3a4:	18c02014 	ori	r3,r3,128
  80a3a8:	80c0030d 	sth	r3,12(r16)
  80a3ac:	80800015 	stw	r2,0(r16)
  80a3b0:	80800415 	stw	r2,16(r16)
  80a3b4:	84800515 	stw	r18,20(r16)
  80a3b8:	98001a1e 	bne	r19,zero,80a424 <__smakebuf_r+0x15c>
  80a3bc:	dfc01317 	ldw	ra,76(sp)
  80a3c0:	dcc01217 	ldw	r19,72(sp)
  80a3c4:	dc801117 	ldw	r18,68(sp)
  80a3c8:	dc401017 	ldw	r17,64(sp)
  80a3cc:	dc000f17 	ldw	r16,60(sp)
  80a3d0:	dec01404 	addi	sp,sp,80
  80a3d4:	f800283a 	ret
  80a3d8:	288010c4 	addi	r2,r5,67
  80a3dc:	28800015 	stw	r2,0(r5)
  80a3e0:	28800415 	stw	r2,16(r5)
  80a3e4:	00800044 	movi	r2,1
  80a3e8:	28800515 	stw	r2,20(r5)
  80a3ec:	f800283a 	ret
  80a3f0:	04801004 	movi	r18,64
  80a3f4:	003fe006 	br	80a378 <__alt_mem_onchip_mem+0xff802378>
  80a3f8:	81000a17 	ldw	r4,40(r16)
  80a3fc:	00c02074 	movhi	r3,129
  80a400:	18e60704 	addi	r3,r3,-26596
  80a404:	20ffc51e 	bne	r4,r3,80a31c <__alt_mem_onchip_mem+0xff80231c>
  80a408:	8080030b 	ldhu	r2,12(r16)
  80a40c:	04810004 	movi	r18,1024
  80a410:	84801315 	stw	r18,76(r16)
  80a414:	1484b03a 	or	r2,r2,r18
  80a418:	8080030d 	sth	r2,12(r16)
  80a41c:	0027883a 	mov	r19,zero
  80a420:	003fd806 	br	80a384 <__alt_mem_onchip_mem+0xff802384>
  80a424:	8140038f 	ldh	r5,14(r16)
  80a428:	8809883a 	mov	r4,r17
  80a42c:	080a5400 	call	80a540 <_isatty_r>
  80a430:	103fe226 	beq	r2,zero,80a3bc <__alt_mem_onchip_mem+0xff8023bc>
  80a434:	8080030b 	ldhu	r2,12(r16)
  80a438:	10800054 	ori	r2,r2,1
  80a43c:	8080030d 	sth	r2,12(r16)
  80a440:	003fde06 	br	80a3bc <__alt_mem_onchip_mem+0xff8023bc>
  80a444:	8080030b 	ldhu	r2,12(r16)
  80a448:	10c0800c 	andi	r3,r2,512
  80a44c:	183fdb1e 	bne	r3,zero,80a3bc <__alt_mem_onchip_mem+0xff8023bc>
  80a450:	10800094 	ori	r2,r2,2
  80a454:	80c010c4 	addi	r3,r16,67
  80a458:	8080030d 	sth	r2,12(r16)
  80a45c:	00800044 	movi	r2,1
  80a460:	80c00015 	stw	r3,0(r16)
  80a464:	80c00415 	stw	r3,16(r16)
  80a468:	80800515 	stw	r2,20(r16)
  80a46c:	003fd306 	br	80a3bc <__alt_mem_onchip_mem+0xff8023bc>
  80a470:	04810004 	movi	r18,1024
  80a474:	003fc306 	br	80a384 <__alt_mem_onchip_mem+0xff802384>
  80a478:	0027883a 	mov	r19,zero
  80a47c:	04810004 	movi	r18,1024
  80a480:	003fc006 	br	80a384 <__alt_mem_onchip_mem+0xff802384>

0080a484 <_read_r>:
  80a484:	defffd04 	addi	sp,sp,-12
  80a488:	2805883a 	mov	r2,r5
  80a48c:	dc000015 	stw	r16,0(sp)
  80a490:	04002074 	movhi	r16,129
  80a494:	dc400115 	stw	r17,4(sp)
  80a498:	300b883a 	mov	r5,r6
  80a49c:	84094104 	addi	r16,r16,9476
  80a4a0:	2023883a 	mov	r17,r4
  80a4a4:	380d883a 	mov	r6,r7
  80a4a8:	1009883a 	mov	r4,r2
  80a4ac:	dfc00215 	stw	ra,8(sp)
  80a4b0:	80000015 	stw	zero,0(r16)
  80a4b4:	080ad480 	call	80ad48 <read>
  80a4b8:	00ffffc4 	movi	r3,-1
  80a4bc:	10c00526 	beq	r2,r3,80a4d4 <_read_r+0x50>
  80a4c0:	dfc00217 	ldw	ra,8(sp)
  80a4c4:	dc400117 	ldw	r17,4(sp)
  80a4c8:	dc000017 	ldw	r16,0(sp)
  80a4cc:	dec00304 	addi	sp,sp,12
  80a4d0:	f800283a 	ret
  80a4d4:	80c00017 	ldw	r3,0(r16)
  80a4d8:	183ff926 	beq	r3,zero,80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80a4dc:	88c00015 	stw	r3,0(r17)
  80a4e0:	003ff706 	br	80a4c0 <__alt_mem_onchip_mem+0xff8024c0>

0080a4e4 <_fstat_r>:
  80a4e4:	defffd04 	addi	sp,sp,-12
  80a4e8:	2805883a 	mov	r2,r5
  80a4ec:	dc000015 	stw	r16,0(sp)
  80a4f0:	04002074 	movhi	r16,129
  80a4f4:	dc400115 	stw	r17,4(sp)
  80a4f8:	84094104 	addi	r16,r16,9476
  80a4fc:	2023883a 	mov	r17,r4
  80a500:	300b883a 	mov	r5,r6
  80a504:	1009883a 	mov	r4,r2
  80a508:	dfc00215 	stw	ra,8(sp)
  80a50c:	80000015 	stw	zero,0(r16)
  80a510:	080a8bc0 	call	80a8bc <fstat>
  80a514:	00ffffc4 	movi	r3,-1
  80a518:	10c00526 	beq	r2,r3,80a530 <_fstat_r+0x4c>
  80a51c:	dfc00217 	ldw	ra,8(sp)
  80a520:	dc400117 	ldw	r17,4(sp)
  80a524:	dc000017 	ldw	r16,0(sp)
  80a528:	dec00304 	addi	sp,sp,12
  80a52c:	f800283a 	ret
  80a530:	80c00017 	ldw	r3,0(r16)
  80a534:	183ff926 	beq	r3,zero,80a51c <__alt_mem_onchip_mem+0xff80251c>
  80a538:	88c00015 	stw	r3,0(r17)
  80a53c:	003ff706 	br	80a51c <__alt_mem_onchip_mem+0xff80251c>

0080a540 <_isatty_r>:
  80a540:	defffd04 	addi	sp,sp,-12
  80a544:	dc000015 	stw	r16,0(sp)
  80a548:	04002074 	movhi	r16,129
  80a54c:	dc400115 	stw	r17,4(sp)
  80a550:	84094104 	addi	r16,r16,9476
  80a554:	2023883a 	mov	r17,r4
  80a558:	2809883a 	mov	r4,r5
  80a55c:	dfc00215 	stw	ra,8(sp)
  80a560:	80000015 	stw	zero,0(r16)
  80a564:	080a9a80 	call	80a9a8 <isatty>
  80a568:	00ffffc4 	movi	r3,-1
  80a56c:	10c00526 	beq	r2,r3,80a584 <_isatty_r+0x44>
  80a570:	dfc00217 	ldw	ra,8(sp)
  80a574:	dc400117 	ldw	r17,4(sp)
  80a578:	dc000017 	ldw	r16,0(sp)
  80a57c:	dec00304 	addi	sp,sp,12
  80a580:	f800283a 	ret
  80a584:	80c00017 	ldw	r3,0(r16)
  80a588:	183ff926 	beq	r3,zero,80a570 <__alt_mem_onchip_mem+0xff802570>
  80a58c:	88c00015 	stw	r3,0(r17)
  80a590:	003ff706 	br	80a570 <__alt_mem_onchip_mem+0xff802570>

0080a594 <__divsi3>:
  80a594:	20001b16 	blt	r4,zero,80a604 <__divsi3+0x70>
  80a598:	000f883a 	mov	r7,zero
  80a59c:	28001616 	blt	r5,zero,80a5f8 <__divsi3+0x64>
  80a5a0:	200d883a 	mov	r6,r4
  80a5a4:	29001a2e 	bgeu	r5,r4,80a610 <__divsi3+0x7c>
  80a5a8:	00800804 	movi	r2,32
  80a5ac:	00c00044 	movi	r3,1
  80a5b0:	00000106 	br	80a5b8 <__divsi3+0x24>
  80a5b4:	10000d26 	beq	r2,zero,80a5ec <__divsi3+0x58>
  80a5b8:	294b883a 	add	r5,r5,r5
  80a5bc:	10bfffc4 	addi	r2,r2,-1
  80a5c0:	18c7883a 	add	r3,r3,r3
  80a5c4:	293ffb36 	bltu	r5,r4,80a5b4 <__alt_mem_onchip_mem+0xff8025b4>
  80a5c8:	0005883a 	mov	r2,zero
  80a5cc:	18000726 	beq	r3,zero,80a5ec <__divsi3+0x58>
  80a5d0:	0005883a 	mov	r2,zero
  80a5d4:	31400236 	bltu	r6,r5,80a5e0 <__divsi3+0x4c>
  80a5d8:	314dc83a 	sub	r6,r6,r5
  80a5dc:	10c4b03a 	or	r2,r2,r3
  80a5e0:	1806d07a 	srli	r3,r3,1
  80a5e4:	280ad07a 	srli	r5,r5,1
  80a5e8:	183ffa1e 	bne	r3,zero,80a5d4 <__alt_mem_onchip_mem+0xff8025d4>
  80a5ec:	38000126 	beq	r7,zero,80a5f4 <__divsi3+0x60>
  80a5f0:	0085c83a 	sub	r2,zero,r2
  80a5f4:	f800283a 	ret
  80a5f8:	014bc83a 	sub	r5,zero,r5
  80a5fc:	39c0005c 	xori	r7,r7,1
  80a600:	003fe706 	br	80a5a0 <__alt_mem_onchip_mem+0xff8025a0>
  80a604:	0109c83a 	sub	r4,zero,r4
  80a608:	01c00044 	movi	r7,1
  80a60c:	003fe306 	br	80a59c <__alt_mem_onchip_mem+0xff80259c>
  80a610:	00c00044 	movi	r3,1
  80a614:	003fee06 	br	80a5d0 <__alt_mem_onchip_mem+0xff8025d0>

0080a618 <__modsi3>:
  80a618:	20001716 	blt	r4,zero,80a678 <__modsi3+0x60>
  80a61c:	000f883a 	mov	r7,zero
  80a620:	2005883a 	mov	r2,r4
  80a624:	28001216 	blt	r5,zero,80a670 <__modsi3+0x58>
  80a628:	2900162e 	bgeu	r5,r4,80a684 <__modsi3+0x6c>
  80a62c:	01800804 	movi	r6,32
  80a630:	00c00044 	movi	r3,1
  80a634:	00000106 	br	80a63c <__modsi3+0x24>
  80a638:	30000a26 	beq	r6,zero,80a664 <__modsi3+0x4c>
  80a63c:	294b883a 	add	r5,r5,r5
  80a640:	31bfffc4 	addi	r6,r6,-1
  80a644:	18c7883a 	add	r3,r3,r3
  80a648:	293ffb36 	bltu	r5,r4,80a638 <__alt_mem_onchip_mem+0xff802638>
  80a64c:	18000526 	beq	r3,zero,80a664 <__modsi3+0x4c>
  80a650:	1806d07a 	srli	r3,r3,1
  80a654:	11400136 	bltu	r2,r5,80a65c <__modsi3+0x44>
  80a658:	1145c83a 	sub	r2,r2,r5
  80a65c:	280ad07a 	srli	r5,r5,1
  80a660:	183ffb1e 	bne	r3,zero,80a650 <__alt_mem_onchip_mem+0xff802650>
  80a664:	38000126 	beq	r7,zero,80a66c <__modsi3+0x54>
  80a668:	0085c83a 	sub	r2,zero,r2
  80a66c:	f800283a 	ret
  80a670:	014bc83a 	sub	r5,zero,r5
  80a674:	003fec06 	br	80a628 <__alt_mem_onchip_mem+0xff802628>
  80a678:	0109c83a 	sub	r4,zero,r4
  80a67c:	01c00044 	movi	r7,1
  80a680:	003fe706 	br	80a620 <__alt_mem_onchip_mem+0xff802620>
  80a684:	00c00044 	movi	r3,1
  80a688:	003ff106 	br	80a650 <__alt_mem_onchip_mem+0xff802650>

0080a68c <__udivsi3>:
  80a68c:	200d883a 	mov	r6,r4
  80a690:	2900152e 	bgeu	r5,r4,80a6e8 <__udivsi3+0x5c>
  80a694:	28001416 	blt	r5,zero,80a6e8 <__udivsi3+0x5c>
  80a698:	00800804 	movi	r2,32
  80a69c:	00c00044 	movi	r3,1
  80a6a0:	00000206 	br	80a6ac <__udivsi3+0x20>
  80a6a4:	10000e26 	beq	r2,zero,80a6e0 <__udivsi3+0x54>
  80a6a8:	28000516 	blt	r5,zero,80a6c0 <__udivsi3+0x34>
  80a6ac:	294b883a 	add	r5,r5,r5
  80a6b0:	10bfffc4 	addi	r2,r2,-1
  80a6b4:	18c7883a 	add	r3,r3,r3
  80a6b8:	293ffa36 	bltu	r5,r4,80a6a4 <__alt_mem_onchip_mem+0xff8026a4>
  80a6bc:	18000826 	beq	r3,zero,80a6e0 <__udivsi3+0x54>
  80a6c0:	0005883a 	mov	r2,zero
  80a6c4:	31400236 	bltu	r6,r5,80a6d0 <__udivsi3+0x44>
  80a6c8:	314dc83a 	sub	r6,r6,r5
  80a6cc:	10c4b03a 	or	r2,r2,r3
  80a6d0:	1806d07a 	srli	r3,r3,1
  80a6d4:	280ad07a 	srli	r5,r5,1
  80a6d8:	183ffa1e 	bne	r3,zero,80a6c4 <__alt_mem_onchip_mem+0xff8026c4>
  80a6dc:	f800283a 	ret
  80a6e0:	0005883a 	mov	r2,zero
  80a6e4:	f800283a 	ret
  80a6e8:	00c00044 	movi	r3,1
  80a6ec:	003ff406 	br	80a6c0 <__alt_mem_onchip_mem+0xff8026c0>

0080a6f0 <__umodsi3>:
  80a6f0:	2005883a 	mov	r2,r4
  80a6f4:	2900122e 	bgeu	r5,r4,80a740 <__umodsi3+0x50>
  80a6f8:	28001116 	blt	r5,zero,80a740 <__umodsi3+0x50>
  80a6fc:	01800804 	movi	r6,32
  80a700:	00c00044 	movi	r3,1
  80a704:	00000206 	br	80a710 <__umodsi3+0x20>
  80a708:	30000c26 	beq	r6,zero,80a73c <__umodsi3+0x4c>
  80a70c:	28000516 	blt	r5,zero,80a724 <__umodsi3+0x34>
  80a710:	294b883a 	add	r5,r5,r5
  80a714:	31bfffc4 	addi	r6,r6,-1
  80a718:	18c7883a 	add	r3,r3,r3
  80a71c:	293ffa36 	bltu	r5,r4,80a708 <__alt_mem_onchip_mem+0xff802708>
  80a720:	18000626 	beq	r3,zero,80a73c <__umodsi3+0x4c>
  80a724:	1806d07a 	srli	r3,r3,1
  80a728:	11400136 	bltu	r2,r5,80a730 <__umodsi3+0x40>
  80a72c:	1145c83a 	sub	r2,r2,r5
  80a730:	280ad07a 	srli	r5,r5,1
  80a734:	183ffb1e 	bne	r3,zero,80a724 <__alt_mem_onchip_mem+0xff802724>
  80a738:	f800283a 	ret
  80a73c:	f800283a 	ret
  80a740:	00c00044 	movi	r3,1
  80a744:	003ff706 	br	80a724 <__alt_mem_onchip_mem+0xff802724>

0080a748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a748:	defffe04 	addi	sp,sp,-8
  80a74c:	dfc00115 	stw	ra,4(sp)
  80a750:	df000015 	stw	fp,0(sp)
  80a754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a758:	d0a00917 	ldw	r2,-32732(gp)
  80a75c:	10000326 	beq	r2,zero,80a76c <alt_get_errno+0x24>
  80a760:	d0a00917 	ldw	r2,-32732(gp)
  80a764:	103ee83a 	callr	r2
  80a768:	00000106 	br	80a770 <alt_get_errno+0x28>
  80a76c:	d0a72904 	addi	r2,gp,-25436
}
  80a770:	e037883a 	mov	sp,fp
  80a774:	dfc00117 	ldw	ra,4(sp)
  80a778:	df000017 	ldw	fp,0(sp)
  80a77c:	dec00204 	addi	sp,sp,8
  80a780:	f800283a 	ret

0080a784 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a784:	defffb04 	addi	sp,sp,-20
  80a788:	dfc00415 	stw	ra,16(sp)
  80a78c:	df000315 	stw	fp,12(sp)
  80a790:	df000304 	addi	fp,sp,12
  80a794:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a798:	e0bfff17 	ldw	r2,-4(fp)
  80a79c:	10000616 	blt	r2,zero,80a7b8 <close+0x34>
  80a7a0:	e0bfff17 	ldw	r2,-4(fp)
  80a7a4:	10c00324 	muli	r3,r2,12
  80a7a8:	00802074 	movhi	r2,129
  80a7ac:	10bd2704 	addi	r2,r2,-2916
  80a7b0:	1885883a 	add	r2,r3,r2
  80a7b4:	00000106 	br	80a7bc <close+0x38>
  80a7b8:	0005883a 	mov	r2,zero
  80a7bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80a7c0:	e0bffd17 	ldw	r2,-12(fp)
  80a7c4:	10001926 	beq	r2,zero,80a82c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a7c8:	e0bffd17 	ldw	r2,-12(fp)
  80a7cc:	10800017 	ldw	r2,0(r2)
  80a7d0:	10800417 	ldw	r2,16(r2)
  80a7d4:	10000626 	beq	r2,zero,80a7f0 <close+0x6c>
  80a7d8:	e0bffd17 	ldw	r2,-12(fp)
  80a7dc:	10800017 	ldw	r2,0(r2)
  80a7e0:	10800417 	ldw	r2,16(r2)
  80a7e4:	e13ffd17 	ldw	r4,-12(fp)
  80a7e8:	103ee83a 	callr	r2
  80a7ec:	00000106 	br	80a7f4 <close+0x70>
  80a7f0:	0005883a 	mov	r2,zero
  80a7f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a7f8:	e13fff17 	ldw	r4,-4(fp)
  80a7fc:	080ae440 	call	80ae44 <alt_release_fd>
    if (rval < 0)
  80a800:	e0bffe17 	ldw	r2,-8(fp)
  80a804:	1000070e 	bge	r2,zero,80a824 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80a808:	080a7480 	call	80a748 <alt_get_errno>
  80a80c:	1007883a 	mov	r3,r2
  80a810:	e0bffe17 	ldw	r2,-8(fp)
  80a814:	0085c83a 	sub	r2,zero,r2
  80a818:	18800015 	stw	r2,0(r3)
      return -1;
  80a81c:	00bfffc4 	movi	r2,-1
  80a820:	00000706 	br	80a840 <close+0xbc>
    }
    return 0;
  80a824:	0005883a 	mov	r2,zero
  80a828:	00000506 	br	80a840 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a82c:	080a7480 	call	80a748 <alt_get_errno>
  80a830:	1007883a 	mov	r3,r2
  80a834:	00801444 	movi	r2,81
  80a838:	18800015 	stw	r2,0(r3)
    return -1;
  80a83c:	00bfffc4 	movi	r2,-1
  }
}
  80a840:	e037883a 	mov	sp,fp
  80a844:	dfc00117 	ldw	ra,4(sp)
  80a848:	df000017 	ldw	fp,0(sp)
  80a84c:	dec00204 	addi	sp,sp,8
  80a850:	f800283a 	ret

0080a854 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a854:	defffc04 	addi	sp,sp,-16
  80a858:	df000315 	stw	fp,12(sp)
  80a85c:	df000304 	addi	fp,sp,12
  80a860:	e13ffd15 	stw	r4,-12(fp)
  80a864:	e17ffe15 	stw	r5,-8(fp)
  80a868:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a86c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a870:	e037883a 	mov	sp,fp
  80a874:	df000017 	ldw	fp,0(sp)
  80a878:	dec00104 	addi	sp,sp,4
  80a87c:	f800283a 	ret

0080a880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a880:	defffe04 	addi	sp,sp,-8
  80a884:	dfc00115 	stw	ra,4(sp)
  80a888:	df000015 	stw	fp,0(sp)
  80a88c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a890:	d0a00917 	ldw	r2,-32732(gp)
  80a894:	10000326 	beq	r2,zero,80a8a4 <alt_get_errno+0x24>
  80a898:	d0a00917 	ldw	r2,-32732(gp)
  80a89c:	103ee83a 	callr	r2
  80a8a0:	00000106 	br	80a8a8 <alt_get_errno+0x28>
  80a8a4:	d0a72904 	addi	r2,gp,-25436
}
  80a8a8:	e037883a 	mov	sp,fp
  80a8ac:	dfc00117 	ldw	ra,4(sp)
  80a8b0:	df000017 	ldw	fp,0(sp)
  80a8b4:	dec00204 	addi	sp,sp,8
  80a8b8:	f800283a 	ret

0080a8bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a8bc:	defffb04 	addi	sp,sp,-20
  80a8c0:	dfc00415 	stw	ra,16(sp)
  80a8c4:	df000315 	stw	fp,12(sp)
  80a8c8:	df000304 	addi	fp,sp,12
  80a8cc:	e13ffe15 	stw	r4,-8(fp)
  80a8d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a8d4:	e0bffe17 	ldw	r2,-8(fp)
  80a8d8:	10000616 	blt	r2,zero,80a8f4 <fstat+0x38>
  80a8dc:	e0bffe17 	ldw	r2,-8(fp)
  80a8e0:	10c00324 	muli	r3,r2,12
  80a8e4:	00802074 	movhi	r2,129
  80a8e8:	10bd2704 	addi	r2,r2,-2916
  80a8ec:	1885883a 	add	r2,r3,r2
  80a8f0:	00000106 	br	80a8f8 <fstat+0x3c>
  80a8f4:	0005883a 	mov	r2,zero
  80a8f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80a8fc:	e0bffd17 	ldw	r2,-12(fp)
  80a900:	10001026 	beq	r2,zero,80a944 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a904:	e0bffd17 	ldw	r2,-12(fp)
  80a908:	10800017 	ldw	r2,0(r2)
  80a90c:	10800817 	ldw	r2,32(r2)
  80a910:	10000726 	beq	r2,zero,80a930 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80a914:	e0bffd17 	ldw	r2,-12(fp)
  80a918:	10800017 	ldw	r2,0(r2)
  80a91c:	10800817 	ldw	r2,32(r2)
  80a920:	e17fff17 	ldw	r5,-4(fp)
  80a924:	e13ffd17 	ldw	r4,-12(fp)
  80a928:	103ee83a 	callr	r2
  80a92c:	00000a06 	br	80a958 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a930:	e0bfff17 	ldw	r2,-4(fp)
  80a934:	00c80004 	movi	r3,8192
  80a938:	10c00115 	stw	r3,4(r2)
      return 0;
  80a93c:	0005883a 	mov	r2,zero
  80a940:	00000506 	br	80a958 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a944:	080a8800 	call	80a880 <alt_get_errno>
  80a948:	1007883a 	mov	r3,r2
  80a94c:	00801444 	movi	r2,81
  80a950:	18800015 	stw	r2,0(r3)
    return -1;
  80a954:	00bfffc4 	movi	r2,-1
  }
}
  80a958:	e037883a 	mov	sp,fp
  80a95c:	dfc00117 	ldw	ra,4(sp)
  80a960:	df000017 	ldw	fp,0(sp)
  80a964:	dec00204 	addi	sp,sp,8
  80a968:	f800283a 	ret

0080a96c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a96c:	defffe04 	addi	sp,sp,-8
  80a970:	dfc00115 	stw	ra,4(sp)
  80a974:	df000015 	stw	fp,0(sp)
  80a978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a97c:	d0a00917 	ldw	r2,-32732(gp)
  80a980:	10000326 	beq	r2,zero,80a990 <alt_get_errno+0x24>
  80a984:	d0a00917 	ldw	r2,-32732(gp)
  80a988:	103ee83a 	callr	r2
  80a98c:	00000106 	br	80a994 <alt_get_errno+0x28>
  80a990:	d0a72904 	addi	r2,gp,-25436
}
  80a994:	e037883a 	mov	sp,fp
  80a998:	dfc00117 	ldw	ra,4(sp)
  80a99c:	df000017 	ldw	fp,0(sp)
  80a9a0:	dec00204 	addi	sp,sp,8
  80a9a4:	f800283a 	ret

0080a9a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a9a8:	deffed04 	addi	sp,sp,-76
  80a9ac:	dfc01215 	stw	ra,72(sp)
  80a9b0:	df001115 	stw	fp,68(sp)
  80a9b4:	df001104 	addi	fp,sp,68
  80a9b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a9bc:	e0bfff17 	ldw	r2,-4(fp)
  80a9c0:	10000616 	blt	r2,zero,80a9dc <isatty+0x34>
  80a9c4:	e0bfff17 	ldw	r2,-4(fp)
  80a9c8:	10c00324 	muli	r3,r2,12
  80a9cc:	00802074 	movhi	r2,129
  80a9d0:	10bd2704 	addi	r2,r2,-2916
  80a9d4:	1885883a 	add	r2,r3,r2
  80a9d8:	00000106 	br	80a9e0 <isatty+0x38>
  80a9dc:	0005883a 	mov	r2,zero
  80a9e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80a9e4:	e0bfef17 	ldw	r2,-68(fp)
  80a9e8:	10000e26 	beq	r2,zero,80aa24 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a9ec:	e0bfef17 	ldw	r2,-68(fp)
  80a9f0:	10800017 	ldw	r2,0(r2)
  80a9f4:	10800817 	ldw	r2,32(r2)
  80a9f8:	1000021e 	bne	r2,zero,80aa04 <isatty+0x5c>
    {
      return 1;
  80a9fc:	00800044 	movi	r2,1
  80aa00:	00000d06 	br	80aa38 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80aa04:	e0bff004 	addi	r2,fp,-64
  80aa08:	100b883a 	mov	r5,r2
  80aa0c:	e13fff17 	ldw	r4,-4(fp)
  80aa10:	080a8bc0 	call	80a8bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80aa14:	e0bff117 	ldw	r2,-60(fp)
  80aa18:	10880020 	cmpeqi	r2,r2,8192
  80aa1c:	10803fcc 	andi	r2,r2,255
  80aa20:	00000506 	br	80aa38 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80aa24:	080a96c0 	call	80a96c <alt_get_errno>
  80aa28:	1007883a 	mov	r3,r2
  80aa2c:	00801444 	movi	r2,81
  80aa30:	18800015 	stw	r2,0(r3)
    return 0;
  80aa34:	0005883a 	mov	r2,zero
  }
}
  80aa38:	e037883a 	mov	sp,fp
  80aa3c:	dfc00117 	ldw	ra,4(sp)
  80aa40:	df000017 	ldw	fp,0(sp)
  80aa44:	dec00204 	addi	sp,sp,8
  80aa48:	f800283a 	ret

0080aa4c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80aa4c:	defffc04 	addi	sp,sp,-16
  80aa50:	df000315 	stw	fp,12(sp)
  80aa54:	df000304 	addi	fp,sp,12
  80aa58:	e13ffd15 	stw	r4,-12(fp)
  80aa5c:	e17ffe15 	stw	r5,-8(fp)
  80aa60:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80aa64:	e0fffe17 	ldw	r3,-8(fp)
  80aa68:	e0bffd17 	ldw	r2,-12(fp)
  80aa6c:	18800c26 	beq	r3,r2,80aaa0 <alt_load_section+0x54>
  {
    while( to != end )
  80aa70:	00000806 	br	80aa94 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80aa74:	e0bffe17 	ldw	r2,-8(fp)
  80aa78:	10c00104 	addi	r3,r2,4
  80aa7c:	e0fffe15 	stw	r3,-8(fp)
  80aa80:	e0fffd17 	ldw	r3,-12(fp)
  80aa84:	19000104 	addi	r4,r3,4
  80aa88:	e13ffd15 	stw	r4,-12(fp)
  80aa8c:	18c00017 	ldw	r3,0(r3)
  80aa90:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80aa94:	e0fffe17 	ldw	r3,-8(fp)
  80aa98:	e0bfff17 	ldw	r2,-4(fp)
  80aa9c:	18bff51e 	bne	r3,r2,80aa74 <__alt_mem_onchip_mem+0xff802a74>
    {
      *to++ = *from++;
    }
  }
}
  80aaa0:	0001883a 	nop
  80aaa4:	e037883a 	mov	sp,fp
  80aaa8:	df000017 	ldw	fp,0(sp)
  80aaac:	dec00104 	addi	sp,sp,4
  80aab0:	f800283a 	ret

0080aab4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80aab4:	defffe04 	addi	sp,sp,-8
  80aab8:	dfc00115 	stw	ra,4(sp)
  80aabc:	df000015 	stw	fp,0(sp)
  80aac0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80aac4:	01802074 	movhi	r6,129
  80aac8:	31822804 	addi	r6,r6,2208
  80aacc:	01402074 	movhi	r5,129
  80aad0:	297b1204 	addi	r5,r5,-5048
  80aad4:	01002074 	movhi	r4,129
  80aad8:	21022804 	addi	r4,r4,2208
  80aadc:	080aa4c0 	call	80aa4c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80aae0:	01802034 	movhi	r6,128
  80aae4:	31809104 	addi	r6,r6,580
  80aae8:	01402034 	movhi	r5,128
  80aaec:	29400804 	addi	r5,r5,32
  80aaf0:	01002034 	movhi	r4,128
  80aaf4:	21000804 	addi	r4,r4,32
  80aaf8:	080aa4c0 	call	80aa4c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80aafc:	01802074 	movhi	r6,129
  80ab00:	31bb1204 	addi	r6,r6,-5048
  80ab04:	01402074 	movhi	r5,129
  80ab08:	297a1a04 	addi	r5,r5,-6040
  80ab0c:	01002074 	movhi	r4,129
  80ab10:	213a1a04 	addi	r4,r4,-6040
  80ab14:	080aa4c0 	call	80aa4c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ab18:	080d5cc0 	call	80d5cc <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ab1c:	080d7b40 	call	80d7b4 <alt_icache_flush_all>
}
  80ab20:	0001883a 	nop
  80ab24:	e037883a 	mov	sp,fp
  80ab28:	dfc00117 	ldw	ra,4(sp)
  80ab2c:	df000017 	ldw	fp,0(sp)
  80ab30:	dec00204 	addi	sp,sp,8
  80ab34:	f800283a 	ret

0080ab38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ab38:	defffe04 	addi	sp,sp,-8
  80ab3c:	dfc00115 	stw	ra,4(sp)
  80ab40:	df000015 	stw	fp,0(sp)
  80ab44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ab48:	d0a00917 	ldw	r2,-32732(gp)
  80ab4c:	10000326 	beq	r2,zero,80ab5c <alt_get_errno+0x24>
  80ab50:	d0a00917 	ldw	r2,-32732(gp)
  80ab54:	103ee83a 	callr	r2
  80ab58:	00000106 	br	80ab60 <alt_get_errno+0x28>
  80ab5c:	d0a72904 	addi	r2,gp,-25436
}
  80ab60:	e037883a 	mov	sp,fp
  80ab64:	dfc00117 	ldw	ra,4(sp)
  80ab68:	df000017 	ldw	fp,0(sp)
  80ab6c:	dec00204 	addi	sp,sp,8
  80ab70:	f800283a 	ret

0080ab74 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80ab74:	defff904 	addi	sp,sp,-28
  80ab78:	dfc00615 	stw	ra,24(sp)
  80ab7c:	df000515 	stw	fp,20(sp)
  80ab80:	df000504 	addi	fp,sp,20
  80ab84:	e13ffd15 	stw	r4,-12(fp)
  80ab88:	e17ffe15 	stw	r5,-8(fp)
  80ab8c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80ab90:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ab94:	e0bffd17 	ldw	r2,-12(fp)
  80ab98:	10000616 	blt	r2,zero,80abb4 <lseek+0x40>
  80ab9c:	e0bffd17 	ldw	r2,-12(fp)
  80aba0:	10c00324 	muli	r3,r2,12
  80aba4:	00802074 	movhi	r2,129
  80aba8:	10bd2704 	addi	r2,r2,-2916
  80abac:	1885883a 	add	r2,r3,r2
  80abb0:	00000106 	br	80abb8 <lseek+0x44>
  80abb4:	0005883a 	mov	r2,zero
  80abb8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80abbc:	e0bffc17 	ldw	r2,-16(fp)
  80abc0:	10001026 	beq	r2,zero,80ac04 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80abc4:	e0bffc17 	ldw	r2,-16(fp)
  80abc8:	10800017 	ldw	r2,0(r2)
  80abcc:	10800717 	ldw	r2,28(r2)
  80abd0:	10000926 	beq	r2,zero,80abf8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80abd4:	e0bffc17 	ldw	r2,-16(fp)
  80abd8:	10800017 	ldw	r2,0(r2)
  80abdc:	10800717 	ldw	r2,28(r2)
  80abe0:	e1bfff17 	ldw	r6,-4(fp)
  80abe4:	e17ffe17 	ldw	r5,-8(fp)
  80abe8:	e13ffc17 	ldw	r4,-16(fp)
  80abec:	103ee83a 	callr	r2
  80abf0:	e0bffb15 	stw	r2,-20(fp)
  80abf4:	00000506 	br	80ac0c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80abf8:	00bfde84 	movi	r2,-134
  80abfc:	e0bffb15 	stw	r2,-20(fp)
  80ac00:	00000206 	br	80ac0c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ac04:	00bfebc4 	movi	r2,-81
  80ac08:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80ac0c:	e0bffb17 	ldw	r2,-20(fp)
  80ac10:	1000070e 	bge	r2,zero,80ac30 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80ac14:	080ab380 	call	80ab38 <alt_get_errno>
  80ac18:	1007883a 	mov	r3,r2
  80ac1c:	e0bffb17 	ldw	r2,-20(fp)
  80ac20:	0085c83a 	sub	r2,zero,r2
  80ac24:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ac28:	00bfffc4 	movi	r2,-1
  80ac2c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80ac30:	e0bffb17 	ldw	r2,-20(fp)
}
  80ac34:	e037883a 	mov	sp,fp
  80ac38:	dfc00117 	ldw	ra,4(sp)
  80ac3c:	df000017 	ldw	fp,0(sp)
  80ac40:	dec00204 	addi	sp,sp,8
  80ac44:	f800283a 	ret

0080ac48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ac48:	defffd04 	addi	sp,sp,-12
  80ac4c:	dfc00215 	stw	ra,8(sp)
  80ac50:	df000115 	stw	fp,4(sp)
  80ac54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ac58:	0009883a 	mov	r4,zero
  80ac5c:	080b0c00 	call	80b0c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80ac60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80ac64:	080b0f80 	call	80b0f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80ac68:	01802074 	movhi	r6,129
  80ac6c:	31ba6404 	addi	r6,r6,-5744
  80ac70:	01402074 	movhi	r5,129
  80ac74:	297a6404 	addi	r5,r5,-5744
  80ac78:	01002074 	movhi	r4,129
  80ac7c:	213a6404 	addi	r4,r4,-5744
  80ac80:	080db4c0 	call	80db4c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ac84:	080d6f40 	call	80d6f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ac88:	01002074 	movhi	r4,129
  80ac8c:	2135d504 	addi	r4,r4,-10412
  80ac90:	080e4d40 	call	80e4d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ac94:	d0a72a17 	ldw	r2,-25432(gp)
  80ac98:	d0e72b17 	ldw	r3,-25428(gp)
  80ac9c:	d1272c17 	ldw	r4,-25424(gp)
  80aca0:	200d883a 	mov	r6,r4
  80aca4:	180b883a 	mov	r5,r3
  80aca8:	1009883a 	mov	r4,r2
  80acac:	08002900 	call	800290 <main>
  80acb0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80acb4:	01000044 	movi	r4,1
  80acb8:	080a7840 	call	80a784 <close>
  exit (result);
  80acbc:	e13fff17 	ldw	r4,-4(fp)
  80acc0:	080e4e80 	call	80e4e8 <exit>

0080acc4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80acc4:	defffe04 	addi	sp,sp,-8
  80acc8:	df000115 	stw	fp,4(sp)
  80accc:	df000104 	addi	fp,sp,4
  80acd0:	e13fff15 	stw	r4,-4(fp)
}
  80acd4:	0001883a 	nop
  80acd8:	e037883a 	mov	sp,fp
  80acdc:	df000017 	ldw	fp,0(sp)
  80ace0:	dec00104 	addi	sp,sp,4
  80ace4:	f800283a 	ret

0080ace8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80ace8:	defffe04 	addi	sp,sp,-8
  80acec:	df000115 	stw	fp,4(sp)
  80acf0:	df000104 	addi	fp,sp,4
  80acf4:	e13fff15 	stw	r4,-4(fp)
}
  80acf8:	0001883a 	nop
  80acfc:	e037883a 	mov	sp,fp
  80ad00:	df000017 	ldw	fp,0(sp)
  80ad04:	dec00104 	addi	sp,sp,4
  80ad08:	f800283a 	ret

0080ad0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ad0c:	defffe04 	addi	sp,sp,-8
  80ad10:	dfc00115 	stw	ra,4(sp)
  80ad14:	df000015 	stw	fp,0(sp)
  80ad18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ad1c:	d0a00917 	ldw	r2,-32732(gp)
  80ad20:	10000326 	beq	r2,zero,80ad30 <alt_get_errno+0x24>
  80ad24:	d0a00917 	ldw	r2,-32732(gp)
  80ad28:	103ee83a 	callr	r2
  80ad2c:	00000106 	br	80ad34 <alt_get_errno+0x28>
  80ad30:	d0a72904 	addi	r2,gp,-25436
}
  80ad34:	e037883a 	mov	sp,fp
  80ad38:	dfc00117 	ldw	ra,4(sp)
  80ad3c:	df000017 	ldw	fp,0(sp)
  80ad40:	dec00204 	addi	sp,sp,8
  80ad44:	f800283a 	ret

0080ad48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ad48:	defff904 	addi	sp,sp,-28
  80ad4c:	dfc00615 	stw	ra,24(sp)
  80ad50:	df000515 	stw	fp,20(sp)
  80ad54:	df000504 	addi	fp,sp,20
  80ad58:	e13ffd15 	stw	r4,-12(fp)
  80ad5c:	e17ffe15 	stw	r5,-8(fp)
  80ad60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ad64:	e0bffd17 	ldw	r2,-12(fp)
  80ad68:	10000616 	blt	r2,zero,80ad84 <read+0x3c>
  80ad6c:	e0bffd17 	ldw	r2,-12(fp)
  80ad70:	10c00324 	muli	r3,r2,12
  80ad74:	00802074 	movhi	r2,129
  80ad78:	10bd2704 	addi	r2,r2,-2916
  80ad7c:	1885883a 	add	r2,r3,r2
  80ad80:	00000106 	br	80ad88 <read+0x40>
  80ad84:	0005883a 	mov	r2,zero
  80ad88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ad8c:	e0bffb17 	ldw	r2,-20(fp)
  80ad90:	10002226 	beq	r2,zero,80ae1c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80ad94:	e0bffb17 	ldw	r2,-20(fp)
  80ad98:	10800217 	ldw	r2,8(r2)
  80ad9c:	108000cc 	andi	r2,r2,3
  80ada0:	10800060 	cmpeqi	r2,r2,1
  80ada4:	1000181e 	bne	r2,zero,80ae08 <read+0xc0>
        (fd->dev->read))
  80ada8:	e0bffb17 	ldw	r2,-20(fp)
  80adac:	10800017 	ldw	r2,0(r2)
  80adb0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80adb4:	10001426 	beq	r2,zero,80ae08 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80adb8:	e0bffb17 	ldw	r2,-20(fp)
  80adbc:	10800017 	ldw	r2,0(r2)
  80adc0:	10800517 	ldw	r2,20(r2)
  80adc4:	e0ffff17 	ldw	r3,-4(fp)
  80adc8:	180d883a 	mov	r6,r3
  80adcc:	e17ffe17 	ldw	r5,-8(fp)
  80add0:	e13ffb17 	ldw	r4,-20(fp)
  80add4:	103ee83a 	callr	r2
  80add8:	e0bffc15 	stw	r2,-16(fp)
  80addc:	e0bffc17 	ldw	r2,-16(fp)
  80ade0:	1000070e 	bge	r2,zero,80ae00 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80ade4:	080ad0c0 	call	80ad0c <alt_get_errno>
  80ade8:	1007883a 	mov	r3,r2
  80adec:	e0bffc17 	ldw	r2,-16(fp)
  80adf0:	0085c83a 	sub	r2,zero,r2
  80adf4:	18800015 	stw	r2,0(r3)
          return -1;
  80adf8:	00bfffc4 	movi	r2,-1
  80adfc:	00000c06 	br	80ae30 <read+0xe8>
        }
        return rval;
  80ae00:	e0bffc17 	ldw	r2,-16(fp)
  80ae04:	00000a06 	br	80ae30 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80ae08:	080ad0c0 	call	80ad0c <alt_get_errno>
  80ae0c:	1007883a 	mov	r3,r2
  80ae10:	00800344 	movi	r2,13
  80ae14:	18800015 	stw	r2,0(r3)
  80ae18:	00000406 	br	80ae2c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80ae1c:	080ad0c0 	call	80ad0c <alt_get_errno>
  80ae20:	1007883a 	mov	r3,r2
  80ae24:	00801444 	movi	r2,81
  80ae28:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ae2c:	00bfffc4 	movi	r2,-1
}
  80ae30:	e037883a 	mov	sp,fp
  80ae34:	dfc00117 	ldw	ra,4(sp)
  80ae38:	df000017 	ldw	fp,0(sp)
  80ae3c:	dec00204 	addi	sp,sp,8
  80ae40:	f800283a 	ret

0080ae44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ae44:	defffe04 	addi	sp,sp,-8
  80ae48:	df000115 	stw	fp,4(sp)
  80ae4c:	df000104 	addi	fp,sp,4
  80ae50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ae54:	e0bfff17 	ldw	r2,-4(fp)
  80ae58:	108000d0 	cmplti	r2,r2,3
  80ae5c:	10000d1e 	bne	r2,zero,80ae94 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80ae60:	00802074 	movhi	r2,129
  80ae64:	10bd2704 	addi	r2,r2,-2916
  80ae68:	e0ffff17 	ldw	r3,-4(fp)
  80ae6c:	18c00324 	muli	r3,r3,12
  80ae70:	10c5883a 	add	r2,r2,r3
  80ae74:	10800204 	addi	r2,r2,8
  80ae78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ae7c:	00802074 	movhi	r2,129
  80ae80:	10bd2704 	addi	r2,r2,-2916
  80ae84:	e0ffff17 	ldw	r3,-4(fp)
  80ae88:	18c00324 	muli	r3,r3,12
  80ae8c:	10c5883a 	add	r2,r2,r3
  80ae90:	10000015 	stw	zero,0(r2)
  }
}
  80ae94:	0001883a 	nop
  80ae98:	e037883a 	mov	sp,fp
  80ae9c:	df000017 	ldw	fp,0(sp)
  80aea0:	dec00104 	addi	sp,sp,4
  80aea4:	f800283a 	ret

0080aea8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80aea8:	defff904 	addi	sp,sp,-28
  80aeac:	df000615 	stw	fp,24(sp)
  80aeb0:	df000604 	addi	fp,sp,24
  80aeb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aeb8:	0005303a 	rdctl	r2,status
  80aebc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aec0:	e0fffe17 	ldw	r3,-8(fp)
  80aec4:	00bfff84 	movi	r2,-2
  80aec8:	1884703a 	and	r2,r3,r2
  80aecc:	1001703a 	wrctl	status,r2
  
  return context;
  80aed0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80aed4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80aed8:	d0a00a17 	ldw	r2,-32728(gp)
  80aedc:	10c000c4 	addi	r3,r2,3
  80aee0:	00bfff04 	movi	r2,-4
  80aee4:	1884703a 	and	r2,r3,r2
  80aee8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80aeec:	d0e00a17 	ldw	r3,-32728(gp)
  80aef0:	e0bfff17 	ldw	r2,-4(fp)
  80aef4:	1887883a 	add	r3,r3,r2
  80aef8:	00804034 	movhi	r2,256
  80aefc:	10800004 	addi	r2,r2,0
  80af00:	10c0062e 	bgeu	r2,r3,80af1c <sbrk+0x74>
  80af04:	e0bffb17 	ldw	r2,-20(fp)
  80af08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80af0c:	e0bffa17 	ldw	r2,-24(fp)
  80af10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80af14:	00bfffc4 	movi	r2,-1
  80af18:	00000b06 	br	80af48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80af1c:	d0a00a17 	ldw	r2,-32728(gp)
  80af20:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80af24:	d0e00a17 	ldw	r3,-32728(gp)
  80af28:	e0bfff17 	ldw	r2,-4(fp)
  80af2c:	1885883a 	add	r2,r3,r2
  80af30:	d0a00a15 	stw	r2,-32728(gp)
  80af34:	e0bffb17 	ldw	r2,-20(fp)
  80af38:	e0bffc15 	stw	r2,-16(fp)
  80af3c:	e0bffc17 	ldw	r2,-16(fp)
  80af40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80af44:	e0bffd17 	ldw	r2,-12(fp)
} 
  80af48:	e037883a 	mov	sp,fp
  80af4c:	df000017 	ldw	fp,0(sp)
  80af50:	dec00104 	addi	sp,sp,4
  80af54:	f800283a 	ret

0080af58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80af58:	defffe04 	addi	sp,sp,-8
  80af5c:	dfc00115 	stw	ra,4(sp)
  80af60:	df000015 	stw	fp,0(sp)
  80af64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80af68:	d0a00917 	ldw	r2,-32732(gp)
  80af6c:	10000326 	beq	r2,zero,80af7c <alt_get_errno+0x24>
  80af70:	d0a00917 	ldw	r2,-32732(gp)
  80af74:	103ee83a 	callr	r2
  80af78:	00000106 	br	80af80 <alt_get_errno+0x28>
  80af7c:	d0a72904 	addi	r2,gp,-25436
}
  80af80:	e037883a 	mov	sp,fp
  80af84:	dfc00117 	ldw	ra,4(sp)
  80af88:	df000017 	ldw	fp,0(sp)
  80af8c:	dec00204 	addi	sp,sp,8
  80af90:	f800283a 	ret

0080af94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80af94:	defff904 	addi	sp,sp,-28
  80af98:	dfc00615 	stw	ra,24(sp)
  80af9c:	df000515 	stw	fp,20(sp)
  80afa0:	df000504 	addi	fp,sp,20
  80afa4:	e13ffd15 	stw	r4,-12(fp)
  80afa8:	e17ffe15 	stw	r5,-8(fp)
  80afac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80afb0:	e0bffd17 	ldw	r2,-12(fp)
  80afb4:	10000616 	blt	r2,zero,80afd0 <write+0x3c>
  80afb8:	e0bffd17 	ldw	r2,-12(fp)
  80afbc:	10c00324 	muli	r3,r2,12
  80afc0:	00802074 	movhi	r2,129
  80afc4:	10bd2704 	addi	r2,r2,-2916
  80afc8:	1885883a 	add	r2,r3,r2
  80afcc:	00000106 	br	80afd4 <write+0x40>
  80afd0:	0005883a 	mov	r2,zero
  80afd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80afd8:	e0bffb17 	ldw	r2,-20(fp)
  80afdc:	10002126 	beq	r2,zero,80b064 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80afe0:	e0bffb17 	ldw	r2,-20(fp)
  80afe4:	10800217 	ldw	r2,8(r2)
  80afe8:	108000cc 	andi	r2,r2,3
  80afec:	10001826 	beq	r2,zero,80b050 <write+0xbc>
  80aff0:	e0bffb17 	ldw	r2,-20(fp)
  80aff4:	10800017 	ldw	r2,0(r2)
  80aff8:	10800617 	ldw	r2,24(r2)
  80affc:	10001426 	beq	r2,zero,80b050 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b000:	e0bffb17 	ldw	r2,-20(fp)
  80b004:	10800017 	ldw	r2,0(r2)
  80b008:	10800617 	ldw	r2,24(r2)
  80b00c:	e0ffff17 	ldw	r3,-4(fp)
  80b010:	180d883a 	mov	r6,r3
  80b014:	e17ffe17 	ldw	r5,-8(fp)
  80b018:	e13ffb17 	ldw	r4,-20(fp)
  80b01c:	103ee83a 	callr	r2
  80b020:	e0bffc15 	stw	r2,-16(fp)
  80b024:	e0bffc17 	ldw	r2,-16(fp)
  80b028:	1000070e 	bge	r2,zero,80b048 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80b02c:	080af580 	call	80af58 <alt_get_errno>
  80b030:	1007883a 	mov	r3,r2
  80b034:	e0bffc17 	ldw	r2,-16(fp)
  80b038:	0085c83a 	sub	r2,zero,r2
  80b03c:	18800015 	stw	r2,0(r3)
        return -1;
  80b040:	00bfffc4 	movi	r2,-1
  80b044:	00000c06 	br	80b078 <write+0xe4>
      }
      return rval;
  80b048:	e0bffc17 	ldw	r2,-16(fp)
  80b04c:	00000a06 	br	80b078 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b050:	080af580 	call	80af58 <alt_get_errno>
  80b054:	1007883a 	mov	r3,r2
  80b058:	00800344 	movi	r2,13
  80b05c:	18800015 	stw	r2,0(r3)
  80b060:	00000406 	br	80b074 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b064:	080af580 	call	80af58 <alt_get_errno>
  80b068:	1007883a 	mov	r3,r2
  80b06c:	00801444 	movi	r2,81
  80b070:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b074:	00bfffc4 	movi	r2,-1
}
  80b078:	e037883a 	mov	sp,fp
  80b07c:	dfc00117 	ldw	ra,4(sp)
  80b080:	df000017 	ldw	fp,0(sp)
  80b084:	dec00204 	addi	sp,sp,8
  80b088:	f800283a 	ret

0080b08c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b08c:	defffd04 	addi	sp,sp,-12
  80b090:	dfc00215 	stw	ra,8(sp)
  80b094:	df000115 	stw	fp,4(sp)
  80b098:	df000104 	addi	fp,sp,4
  80b09c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b0a0:	d1600604 	addi	r5,gp,-32744
  80b0a4:	e13fff17 	ldw	r4,-4(fp)
  80b0a8:	080d6500 	call	80d650 <alt_dev_llist_insert>
}
  80b0ac:	e037883a 	mov	sp,fp
  80b0b0:	dfc00117 	ldw	ra,4(sp)
  80b0b4:	df000017 	ldw	fp,0(sp)
  80b0b8:	dec00204 	addi	sp,sp,8
  80b0bc:	f800283a 	ret

0080b0c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b0c0:	defffd04 	addi	sp,sp,-12
  80b0c4:	dfc00215 	stw	ra,8(sp)
  80b0c8:	df000115 	stw	fp,4(sp)
  80b0cc:	df000104 	addi	fp,sp,4
  80b0d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80b0d4:	080dff00 	call	80dff0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b0d8:	00800044 	movi	r2,1
  80b0dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b0e0:	0001883a 	nop
  80b0e4:	e037883a 	mov	sp,fp
  80b0e8:	dfc00117 	ldw	ra,4(sp)
  80b0ec:	df000017 	ldw	fp,0(sp)
  80b0f0:	dec00204 	addi	sp,sp,8
  80b0f4:	f800283a 	ret

0080b0f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b0f8:	defffe04 	addi	sp,sp,-8
  80b0fc:	dfc00115 	stw	ra,4(sp)
  80b100:	df000015 	stw	fp,0(sp)
  80b104:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80b108:	01c0fa04 	movi	r7,1000
  80b10c:	01800084 	movi	r6,2
  80b110:	000b883a 	mov	r5,zero
  80b114:	01004074 	movhi	r4,257
  80b118:	21040804 	addi	r4,r4,4128
  80b11c:	080cb4c0 	call	80cb4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80b120:	01800044 	movi	r6,1
  80b124:	000b883a 	mov	r5,zero
  80b128:	01002074 	movhi	r4,129
  80b12c:	213d9104 	addi	r4,r4,-2492
  80b130:	080b2f40 	call	80b2f4 <altera_avalon_jtag_uart_init>
  80b134:	01002074 	movhi	r4,129
  80b138:	213d8704 	addi	r4,r4,-2532
  80b13c:	080b08c0 	call	80b08c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80b140:	01002074 	movhi	r4,129
  80b144:	2101a904 	addi	r4,r4,1700
  80b148:	080c9400 	call	80c940 <altera_avalon_lcd_16207_init>
  80b14c:	01002074 	movhi	r4,129
  80b150:	21019f04 	addi	r4,r4,1660
  80b154:	080b08c0 	call	80b08c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80b158:	000d883a 	mov	r6,zero
  80b15c:	000b883a 	mov	r5,zero
  80b160:	01002074 	movhi	r4,129
  80b164:	2101f104 	addi	r4,r4,1988
  80b168:	080ccd80 	call	80ccd8 <altera_avalon_uart_init>
  80b16c:	01002074 	movhi	r4,129
  80b170:	2101e704 	addi	r4,r4,1948
  80b174:	080b08c0 	call	80b08c <alt_dev_reg>
}
  80b178:	0001883a 	nop
  80b17c:	e037883a 	mov	sp,fp
  80b180:	dfc00117 	ldw	ra,4(sp)
  80b184:	df000017 	ldw	fp,0(sp)
  80b188:	dec00204 	addi	sp,sp,8
  80b18c:	f800283a 	ret

0080b190 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b190:	defffa04 	addi	sp,sp,-24
  80b194:	dfc00515 	stw	ra,20(sp)
  80b198:	df000415 	stw	fp,16(sp)
  80b19c:	df000404 	addi	fp,sp,16
  80b1a0:	e13ffd15 	stw	r4,-12(fp)
  80b1a4:	e17ffe15 	stw	r5,-8(fp)
  80b1a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b1ac:	e0bffd17 	ldw	r2,-12(fp)
  80b1b0:	10800017 	ldw	r2,0(r2)
  80b1b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b1b8:	e0bffc17 	ldw	r2,-16(fp)
  80b1bc:	10c00a04 	addi	r3,r2,40
  80b1c0:	e0bffd17 	ldw	r2,-12(fp)
  80b1c4:	10800217 	ldw	r2,8(r2)
  80b1c8:	100f883a 	mov	r7,r2
  80b1cc:	e1bfff17 	ldw	r6,-4(fp)
  80b1d0:	e17ffe17 	ldw	r5,-8(fp)
  80b1d4:	1809883a 	mov	r4,r3
  80b1d8:	080b7b80 	call	80b7b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b1dc:	e037883a 	mov	sp,fp
  80b1e0:	dfc00117 	ldw	ra,4(sp)
  80b1e4:	df000017 	ldw	fp,0(sp)
  80b1e8:	dec00204 	addi	sp,sp,8
  80b1ec:	f800283a 	ret

0080b1f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b1f0:	defffa04 	addi	sp,sp,-24
  80b1f4:	dfc00515 	stw	ra,20(sp)
  80b1f8:	df000415 	stw	fp,16(sp)
  80b1fc:	df000404 	addi	fp,sp,16
  80b200:	e13ffd15 	stw	r4,-12(fp)
  80b204:	e17ffe15 	stw	r5,-8(fp)
  80b208:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b20c:	e0bffd17 	ldw	r2,-12(fp)
  80b210:	10800017 	ldw	r2,0(r2)
  80b214:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b218:	e0bffc17 	ldw	r2,-16(fp)
  80b21c:	10c00a04 	addi	r3,r2,40
  80b220:	e0bffd17 	ldw	r2,-12(fp)
  80b224:	10800217 	ldw	r2,8(r2)
  80b228:	100f883a 	mov	r7,r2
  80b22c:	e1bfff17 	ldw	r6,-4(fp)
  80b230:	e17ffe17 	ldw	r5,-8(fp)
  80b234:	1809883a 	mov	r4,r3
  80b238:	080b9d40 	call	80b9d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b23c:	e037883a 	mov	sp,fp
  80b240:	dfc00117 	ldw	ra,4(sp)
  80b244:	df000017 	ldw	fp,0(sp)
  80b248:	dec00204 	addi	sp,sp,8
  80b24c:	f800283a 	ret

0080b250 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b250:	defffc04 	addi	sp,sp,-16
  80b254:	dfc00315 	stw	ra,12(sp)
  80b258:	df000215 	stw	fp,8(sp)
  80b25c:	df000204 	addi	fp,sp,8
  80b260:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b264:	e0bfff17 	ldw	r2,-4(fp)
  80b268:	10800017 	ldw	r2,0(r2)
  80b26c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b270:	e0bffe17 	ldw	r2,-8(fp)
  80b274:	10c00a04 	addi	r3,r2,40
  80b278:	e0bfff17 	ldw	r2,-4(fp)
  80b27c:	10800217 	ldw	r2,8(r2)
  80b280:	100b883a 	mov	r5,r2
  80b284:	1809883a 	mov	r4,r3
  80b288:	080b6600 	call	80b660 <altera_avalon_jtag_uart_close>
}
  80b28c:	e037883a 	mov	sp,fp
  80b290:	dfc00117 	ldw	ra,4(sp)
  80b294:	df000017 	ldw	fp,0(sp)
  80b298:	dec00204 	addi	sp,sp,8
  80b29c:	f800283a 	ret

0080b2a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80b2a0:	defffa04 	addi	sp,sp,-24
  80b2a4:	dfc00515 	stw	ra,20(sp)
  80b2a8:	df000415 	stw	fp,16(sp)
  80b2ac:	df000404 	addi	fp,sp,16
  80b2b0:	e13ffd15 	stw	r4,-12(fp)
  80b2b4:	e17ffe15 	stw	r5,-8(fp)
  80b2b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80b2bc:	e0bffd17 	ldw	r2,-12(fp)
  80b2c0:	10800017 	ldw	r2,0(r2)
  80b2c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b2c8:	e0bffc17 	ldw	r2,-16(fp)
  80b2cc:	10800a04 	addi	r2,r2,40
  80b2d0:	e1bfff17 	ldw	r6,-4(fp)
  80b2d4:	e17ffe17 	ldw	r5,-8(fp)
  80b2d8:	1009883a 	mov	r4,r2
  80b2dc:	080b6c80 	call	80b6c8 <altera_avalon_jtag_uart_ioctl>
}
  80b2e0:	e037883a 	mov	sp,fp
  80b2e4:	dfc00117 	ldw	ra,4(sp)
  80b2e8:	df000017 	ldw	fp,0(sp)
  80b2ec:	dec00204 	addi	sp,sp,8
  80b2f0:	f800283a 	ret

0080b2f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b2f4:	defffa04 	addi	sp,sp,-24
  80b2f8:	dfc00515 	stw	ra,20(sp)
  80b2fc:	df000415 	stw	fp,16(sp)
  80b300:	df000404 	addi	fp,sp,16
  80b304:	e13ffd15 	stw	r4,-12(fp)
  80b308:	e17ffe15 	stw	r5,-8(fp)
  80b30c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b310:	e0bffd17 	ldw	r2,-12(fp)
  80b314:	00c00044 	movi	r3,1
  80b318:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b31c:	e0bffd17 	ldw	r2,-12(fp)
  80b320:	10800017 	ldw	r2,0(r2)
  80b324:	10800104 	addi	r2,r2,4
  80b328:	1007883a 	mov	r3,r2
  80b32c:	e0bffd17 	ldw	r2,-12(fp)
  80b330:	10800817 	ldw	r2,32(r2)
  80b334:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80b338:	e0bffe17 	ldw	r2,-8(fp)
  80b33c:	e0ffff17 	ldw	r3,-4(fp)
  80b340:	d8000015 	stw	zero,0(sp)
  80b344:	e1fffd17 	ldw	r7,-12(fp)
  80b348:	01802074 	movhi	r6,129
  80b34c:	31aced04 	addi	r6,r6,-19532
  80b350:	180b883a 	mov	r5,r3
  80b354:	1009883a 	mov	r4,r2
  80b358:	080d7e80 	call	80d7e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b35c:	e0bffd17 	ldw	r2,-12(fp)
  80b360:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b364:	e0bffd17 	ldw	r2,-12(fp)
  80b368:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b36c:	d0e72e17 	ldw	r3,-25416(gp)
  80b370:	e1fffd17 	ldw	r7,-12(fp)
  80b374:	01802074 	movhi	r6,129
  80b378:	31ad7004 	addi	r6,r6,-19008
  80b37c:	180b883a 	mov	r5,r3
  80b380:	1009883a 	mov	r4,r2
  80b384:	080d4a00 	call	80d4a0 <alt_alarm_start>
  80b388:	1000040e 	bge	r2,zero,80b39c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80b38c:	e0fffd17 	ldw	r3,-12(fp)
  80b390:	00a00034 	movhi	r2,32768
  80b394:	10bfffc4 	addi	r2,r2,-1
  80b398:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80b39c:	0001883a 	nop
  80b3a0:	e037883a 	mov	sp,fp
  80b3a4:	dfc00117 	ldw	ra,4(sp)
  80b3a8:	df000017 	ldw	fp,0(sp)
  80b3ac:	dec00204 	addi	sp,sp,8
  80b3b0:	f800283a 	ret

0080b3b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80b3b4:	defff804 	addi	sp,sp,-32
  80b3b8:	df000715 	stw	fp,28(sp)
  80b3bc:	df000704 	addi	fp,sp,28
  80b3c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80b3c4:	e0bfff17 	ldw	r2,-4(fp)
  80b3c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80b3cc:	e0bffb17 	ldw	r2,-20(fp)
  80b3d0:	10800017 	ldw	r2,0(r2)
  80b3d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b3d8:	e0bffc17 	ldw	r2,-16(fp)
  80b3dc:	10800104 	addi	r2,r2,4
  80b3e0:	10800037 	ldwio	r2,0(r2)
  80b3e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80b3e8:	e0bffd17 	ldw	r2,-12(fp)
  80b3ec:	1080c00c 	andi	r2,r2,768
  80b3f0:	10006d26 	beq	r2,zero,80b5a8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80b3f4:	e0bffd17 	ldw	r2,-12(fp)
  80b3f8:	1080400c 	andi	r2,r2,256
  80b3fc:	10003526 	beq	r2,zero,80b4d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80b400:	00800074 	movhi	r2,1
  80b404:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b408:	e0bffb17 	ldw	r2,-20(fp)
  80b40c:	10800a17 	ldw	r2,40(r2)
  80b410:	10800044 	addi	r2,r2,1
  80b414:	1081ffcc 	andi	r2,r2,2047
  80b418:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80b41c:	e0bffb17 	ldw	r2,-20(fp)
  80b420:	10c00b17 	ldw	r3,44(r2)
  80b424:	e0bffe17 	ldw	r2,-8(fp)
  80b428:	18801526 	beq	r3,r2,80b480 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b42c:	e0bffc17 	ldw	r2,-16(fp)
  80b430:	10800037 	ldwio	r2,0(r2)
  80b434:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b438:	e0bff917 	ldw	r2,-28(fp)
  80b43c:	10a0000c 	andi	r2,r2,32768
  80b440:	10001126 	beq	r2,zero,80b488 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b444:	e0bffb17 	ldw	r2,-20(fp)
  80b448:	10800a17 	ldw	r2,40(r2)
  80b44c:	e0fff917 	ldw	r3,-28(fp)
  80b450:	1809883a 	mov	r4,r3
  80b454:	e0fffb17 	ldw	r3,-20(fp)
  80b458:	1885883a 	add	r2,r3,r2
  80b45c:	10800e04 	addi	r2,r2,56
  80b460:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b464:	e0bffb17 	ldw	r2,-20(fp)
  80b468:	10800a17 	ldw	r2,40(r2)
  80b46c:	10800044 	addi	r2,r2,1
  80b470:	10c1ffcc 	andi	r3,r2,2047
  80b474:	e0bffb17 	ldw	r2,-20(fp)
  80b478:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80b47c:	003fe206 	br	80b408 <__alt_mem_onchip_mem+0xff803408>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80b480:	0001883a 	nop
  80b484:	00000106 	br	80b48c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80b488:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b48c:	e0bff917 	ldw	r2,-28(fp)
  80b490:	10bfffec 	andhi	r2,r2,65535
  80b494:	10000f26 	beq	r2,zero,80b4d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b498:	e0bffb17 	ldw	r2,-20(fp)
  80b49c:	10c00817 	ldw	r3,32(r2)
  80b4a0:	00bfff84 	movi	r2,-2
  80b4a4:	1886703a 	and	r3,r3,r2
  80b4a8:	e0bffb17 	ldw	r2,-20(fp)
  80b4ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b4b0:	e0bffc17 	ldw	r2,-16(fp)
  80b4b4:	10800104 	addi	r2,r2,4
  80b4b8:	1007883a 	mov	r3,r2
  80b4bc:	e0bffb17 	ldw	r2,-20(fp)
  80b4c0:	10800817 	ldw	r2,32(r2)
  80b4c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b4c8:	e0bffc17 	ldw	r2,-16(fp)
  80b4cc:	10800104 	addi	r2,r2,4
  80b4d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b4d4:	e0bffd17 	ldw	r2,-12(fp)
  80b4d8:	1080800c 	andi	r2,r2,512
  80b4dc:	103fbe26 	beq	r2,zero,80b3d8 <__alt_mem_onchip_mem+0xff8033d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b4e0:	e0bffd17 	ldw	r2,-12(fp)
  80b4e4:	1004d43a 	srli	r2,r2,16
  80b4e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b4ec:	00001406 	br	80b540 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b4f0:	e0bffc17 	ldw	r2,-16(fp)
  80b4f4:	e0fffb17 	ldw	r3,-20(fp)
  80b4f8:	18c00d17 	ldw	r3,52(r3)
  80b4fc:	e13ffb17 	ldw	r4,-20(fp)
  80b500:	20c7883a 	add	r3,r4,r3
  80b504:	18c20e04 	addi	r3,r3,2104
  80b508:	18c00003 	ldbu	r3,0(r3)
  80b50c:	18c03fcc 	andi	r3,r3,255
  80b510:	18c0201c 	xori	r3,r3,128
  80b514:	18ffe004 	addi	r3,r3,-128
  80b518:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b51c:	e0bffb17 	ldw	r2,-20(fp)
  80b520:	10800d17 	ldw	r2,52(r2)
  80b524:	10800044 	addi	r2,r2,1
  80b528:	10c1ffcc 	andi	r3,r2,2047
  80b52c:	e0bffb17 	ldw	r2,-20(fp)
  80b530:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b534:	e0bffa17 	ldw	r2,-24(fp)
  80b538:	10bfffc4 	addi	r2,r2,-1
  80b53c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b540:	e0bffa17 	ldw	r2,-24(fp)
  80b544:	10000526 	beq	r2,zero,80b55c <altera_avalon_jtag_uart_irq+0x1a8>
  80b548:	e0bffb17 	ldw	r2,-20(fp)
  80b54c:	10c00d17 	ldw	r3,52(r2)
  80b550:	e0bffb17 	ldw	r2,-20(fp)
  80b554:	10800c17 	ldw	r2,48(r2)
  80b558:	18bfe51e 	bne	r3,r2,80b4f0 <__alt_mem_onchip_mem+0xff8034f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80b55c:	e0bffa17 	ldw	r2,-24(fp)
  80b560:	103f9d26 	beq	r2,zero,80b3d8 <__alt_mem_onchip_mem+0xff8033d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b564:	e0bffb17 	ldw	r2,-20(fp)
  80b568:	10c00817 	ldw	r3,32(r2)
  80b56c:	00bfff44 	movi	r2,-3
  80b570:	1886703a 	and	r3,r3,r2
  80b574:	e0bffb17 	ldw	r2,-20(fp)
  80b578:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b57c:	e0bffb17 	ldw	r2,-20(fp)
  80b580:	10800017 	ldw	r2,0(r2)
  80b584:	10800104 	addi	r2,r2,4
  80b588:	1007883a 	mov	r3,r2
  80b58c:	e0bffb17 	ldw	r2,-20(fp)
  80b590:	10800817 	ldw	r2,32(r2)
  80b594:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b598:	e0bffc17 	ldw	r2,-16(fp)
  80b59c:	10800104 	addi	r2,r2,4
  80b5a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b5a4:	003f8c06 	br	80b3d8 <__alt_mem_onchip_mem+0xff8033d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80b5a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80b5ac:	0001883a 	nop
  80b5b0:	e037883a 	mov	sp,fp
  80b5b4:	df000017 	ldw	fp,0(sp)
  80b5b8:	dec00104 	addi	sp,sp,4
  80b5bc:	f800283a 	ret

0080b5c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b5c0:	defff804 	addi	sp,sp,-32
  80b5c4:	df000715 	stw	fp,28(sp)
  80b5c8:	df000704 	addi	fp,sp,28
  80b5cc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b5d0:	e0bffb17 	ldw	r2,-20(fp)
  80b5d4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b5d8:	e0bff917 	ldw	r2,-28(fp)
  80b5dc:	10800017 	ldw	r2,0(r2)
  80b5e0:	10800104 	addi	r2,r2,4
  80b5e4:	10800037 	ldwio	r2,0(r2)
  80b5e8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b5ec:	e0bffa17 	ldw	r2,-24(fp)
  80b5f0:	1081000c 	andi	r2,r2,1024
  80b5f4:	10000b26 	beq	r2,zero,80b624 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b5f8:	e0bff917 	ldw	r2,-28(fp)
  80b5fc:	10800017 	ldw	r2,0(r2)
  80b600:	10800104 	addi	r2,r2,4
  80b604:	1007883a 	mov	r3,r2
  80b608:	e0bff917 	ldw	r2,-28(fp)
  80b60c:	10800817 	ldw	r2,32(r2)
  80b610:	10810014 	ori	r2,r2,1024
  80b614:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80b618:	e0bff917 	ldw	r2,-28(fp)
  80b61c:	10000915 	stw	zero,36(r2)
  80b620:	00000a06 	br	80b64c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b624:	e0bff917 	ldw	r2,-28(fp)
  80b628:	10c00917 	ldw	r3,36(r2)
  80b62c:	00a00034 	movhi	r2,32768
  80b630:	10bfff04 	addi	r2,r2,-4
  80b634:	10c00536 	bltu	r2,r3,80b64c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80b638:	e0bff917 	ldw	r2,-28(fp)
  80b63c:	10800917 	ldw	r2,36(r2)
  80b640:	10c00044 	addi	r3,r2,1
  80b644:	e0bff917 	ldw	r2,-28(fp)
  80b648:	10c00915 	stw	r3,36(r2)
  80b64c:	d0a72e17 	ldw	r2,-25416(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b650:	e037883a 	mov	sp,fp
  80b654:	df000017 	ldw	fp,0(sp)
  80b658:	dec00104 	addi	sp,sp,4
  80b65c:	f800283a 	ret

0080b660 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b660:	defffd04 	addi	sp,sp,-12
  80b664:	df000215 	stw	fp,8(sp)
  80b668:	df000204 	addi	fp,sp,8
  80b66c:	e13ffe15 	stw	r4,-8(fp)
  80b670:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b674:	00000506 	br	80b68c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80b678:	e0bfff17 	ldw	r2,-4(fp)
  80b67c:	1090000c 	andi	r2,r2,16384
  80b680:	10000226 	beq	r2,zero,80b68c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80b684:	00bffd44 	movi	r2,-11
  80b688:	00000b06 	br	80b6b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b68c:	e0bffe17 	ldw	r2,-8(fp)
  80b690:	10c00d17 	ldw	r3,52(r2)
  80b694:	e0bffe17 	ldw	r2,-8(fp)
  80b698:	10800c17 	ldw	r2,48(r2)
  80b69c:	18800526 	beq	r3,r2,80b6b4 <altera_avalon_jtag_uart_close+0x54>
  80b6a0:	e0bffe17 	ldw	r2,-8(fp)
  80b6a4:	10c00917 	ldw	r3,36(r2)
  80b6a8:	e0bffe17 	ldw	r2,-8(fp)
  80b6ac:	10800117 	ldw	r2,4(r2)
  80b6b0:	18bff136 	bltu	r3,r2,80b678 <__alt_mem_onchip_mem+0xff803678>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b6b4:	0005883a 	mov	r2,zero
}
  80b6b8:	e037883a 	mov	sp,fp
  80b6bc:	df000017 	ldw	fp,0(sp)
  80b6c0:	dec00104 	addi	sp,sp,4
  80b6c4:	f800283a 	ret

0080b6c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b6c8:	defffa04 	addi	sp,sp,-24
  80b6cc:	df000515 	stw	fp,20(sp)
  80b6d0:	df000504 	addi	fp,sp,20
  80b6d4:	e13ffd15 	stw	r4,-12(fp)
  80b6d8:	e17ffe15 	stw	r5,-8(fp)
  80b6dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80b6e0:	00bff9c4 	movi	r2,-25
  80b6e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80b6e8:	e0bffe17 	ldw	r2,-8(fp)
  80b6ec:	10da8060 	cmpeqi	r3,r2,27137
  80b6f0:	1800031e 	bne	r3,zero,80b700 <altera_avalon_jtag_uart_ioctl+0x38>
  80b6f4:	109a80a0 	cmpeqi	r2,r2,27138
  80b6f8:	1000181e 	bne	r2,zero,80b75c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80b6fc:	00002906 	br	80b7a4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b700:	e0bffd17 	ldw	r2,-12(fp)
  80b704:	10c00117 	ldw	r3,4(r2)
  80b708:	00a00034 	movhi	r2,32768
  80b70c:	10bfffc4 	addi	r2,r2,-1
  80b710:	18802126 	beq	r3,r2,80b798 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80b714:	e0bfff17 	ldw	r2,-4(fp)
  80b718:	10800017 	ldw	r2,0(r2)
  80b71c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b720:	e0bffc17 	ldw	r2,-16(fp)
  80b724:	10800090 	cmplti	r2,r2,2
  80b728:	1000061e 	bne	r2,zero,80b744 <altera_avalon_jtag_uart_ioctl+0x7c>
  80b72c:	e0fffc17 	ldw	r3,-16(fp)
  80b730:	00a00034 	movhi	r2,32768
  80b734:	10bfffc4 	addi	r2,r2,-1
  80b738:	18800226 	beq	r3,r2,80b744 <altera_avalon_jtag_uart_ioctl+0x7c>
  80b73c:	e0bffc17 	ldw	r2,-16(fp)
  80b740:	00000206 	br	80b74c <altera_avalon_jtag_uart_ioctl+0x84>
  80b744:	00a00034 	movhi	r2,32768
  80b748:	10bfff84 	addi	r2,r2,-2
  80b74c:	e0fffd17 	ldw	r3,-12(fp)
  80b750:	18800115 	stw	r2,4(r3)
      rc = 0;
  80b754:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80b758:	00000f06 	br	80b798 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b75c:	e0bffd17 	ldw	r2,-12(fp)
  80b760:	10c00117 	ldw	r3,4(r2)
  80b764:	00a00034 	movhi	r2,32768
  80b768:	10bfffc4 	addi	r2,r2,-1
  80b76c:	18800c26 	beq	r3,r2,80b7a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b770:	e0bffd17 	ldw	r2,-12(fp)
  80b774:	10c00917 	ldw	r3,36(r2)
  80b778:	e0bffd17 	ldw	r2,-12(fp)
  80b77c:	10800117 	ldw	r2,4(r2)
  80b780:	1885803a 	cmpltu	r2,r3,r2
  80b784:	10c03fcc 	andi	r3,r2,255
  80b788:	e0bfff17 	ldw	r2,-4(fp)
  80b78c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80b790:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80b794:	00000206 	br	80b7a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80b798:	0001883a 	nop
  80b79c:	00000106 	br	80b7a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80b7a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80b7a4:	e0bffb17 	ldw	r2,-20(fp)
}
  80b7a8:	e037883a 	mov	sp,fp
  80b7ac:	df000017 	ldw	fp,0(sp)
  80b7b0:	dec00104 	addi	sp,sp,4
  80b7b4:	f800283a 	ret

0080b7b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b7b8:	defff304 	addi	sp,sp,-52
  80b7bc:	dfc00c15 	stw	ra,48(sp)
  80b7c0:	df000b15 	stw	fp,44(sp)
  80b7c4:	df000b04 	addi	fp,sp,44
  80b7c8:	e13ffc15 	stw	r4,-16(fp)
  80b7cc:	e17ffd15 	stw	r5,-12(fp)
  80b7d0:	e1bffe15 	stw	r6,-8(fp)
  80b7d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80b7d8:	e0bffd17 	ldw	r2,-12(fp)
  80b7dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b7e0:	00004706 	br	80b900 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b7e4:	e0bffc17 	ldw	r2,-16(fp)
  80b7e8:	10800a17 	ldw	r2,40(r2)
  80b7ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b7f0:	e0bffc17 	ldw	r2,-16(fp)
  80b7f4:	10800b17 	ldw	r2,44(r2)
  80b7f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80b7fc:	e0fff717 	ldw	r3,-36(fp)
  80b800:	e0bff817 	ldw	r2,-32(fp)
  80b804:	18800536 	bltu	r3,r2,80b81c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b808:	e0fff717 	ldw	r3,-36(fp)
  80b80c:	e0bff817 	ldw	r2,-32(fp)
  80b810:	1885c83a 	sub	r2,r3,r2
  80b814:	e0bff615 	stw	r2,-40(fp)
  80b818:	00000406 	br	80b82c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b81c:	00c20004 	movi	r3,2048
  80b820:	e0bff817 	ldw	r2,-32(fp)
  80b824:	1885c83a 	sub	r2,r3,r2
  80b828:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80b82c:	e0bff617 	ldw	r2,-40(fp)
  80b830:	10001e26 	beq	r2,zero,80b8ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80b834:	e0fffe17 	ldw	r3,-8(fp)
  80b838:	e0bff617 	ldw	r2,-40(fp)
  80b83c:	1880022e 	bgeu	r3,r2,80b848 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80b840:	e0bffe17 	ldw	r2,-8(fp)
  80b844:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b848:	e0bffc17 	ldw	r2,-16(fp)
  80b84c:	10c00e04 	addi	r3,r2,56
  80b850:	e0bff817 	ldw	r2,-32(fp)
  80b854:	1885883a 	add	r2,r3,r2
  80b858:	e1bff617 	ldw	r6,-40(fp)
  80b85c:	100b883a 	mov	r5,r2
  80b860:	e13ff517 	ldw	r4,-44(fp)
  80b864:	0808dc00 	call	808dc0 <memcpy>
      ptr   += n;
  80b868:	e0fff517 	ldw	r3,-44(fp)
  80b86c:	e0bff617 	ldw	r2,-40(fp)
  80b870:	1885883a 	add	r2,r3,r2
  80b874:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80b878:	e0fffe17 	ldw	r3,-8(fp)
  80b87c:	e0bff617 	ldw	r2,-40(fp)
  80b880:	1885c83a 	sub	r2,r3,r2
  80b884:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b888:	e0fff817 	ldw	r3,-32(fp)
  80b88c:	e0bff617 	ldw	r2,-40(fp)
  80b890:	1885883a 	add	r2,r3,r2
  80b894:	10c1ffcc 	andi	r3,r2,2047
  80b898:	e0bffc17 	ldw	r2,-16(fp)
  80b89c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b8a0:	e0bffe17 	ldw	r2,-8(fp)
  80b8a4:	00bfcf16 	blt	zero,r2,80b7e4 <__alt_mem_onchip_mem+0xff8037e4>
  80b8a8:	00000106 	br	80b8b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80b8ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80b8b0:	e0fff517 	ldw	r3,-44(fp)
  80b8b4:	e0bffd17 	ldw	r2,-12(fp)
  80b8b8:	1880141e 	bne	r3,r2,80b90c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b8bc:	e0bfff17 	ldw	r2,-4(fp)
  80b8c0:	1090000c 	andi	r2,r2,16384
  80b8c4:	1000131e 	bne	r2,zero,80b914 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b8c8:	0001883a 	nop
  80b8cc:	e0bffc17 	ldw	r2,-16(fp)
  80b8d0:	10c00a17 	ldw	r3,40(r2)
  80b8d4:	e0bff717 	ldw	r2,-36(fp)
  80b8d8:	1880051e 	bne	r3,r2,80b8f0 <altera_avalon_jtag_uart_read+0x138>
  80b8dc:	e0bffc17 	ldw	r2,-16(fp)
  80b8e0:	10c00917 	ldw	r3,36(r2)
  80b8e4:	e0bffc17 	ldw	r2,-16(fp)
  80b8e8:	10800117 	ldw	r2,4(r2)
  80b8ec:	18bff736 	bltu	r3,r2,80b8cc <__alt_mem_onchip_mem+0xff8038cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b8f0:	e0bffc17 	ldw	r2,-16(fp)
  80b8f4:	10c00a17 	ldw	r3,40(r2)
  80b8f8:	e0bff717 	ldw	r2,-36(fp)
  80b8fc:	18800726 	beq	r3,r2,80b91c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b900:	e0bffe17 	ldw	r2,-8(fp)
  80b904:	00bfb716 	blt	zero,r2,80b7e4 <__alt_mem_onchip_mem+0xff8037e4>
  80b908:	00000506 	br	80b920 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80b90c:	0001883a 	nop
  80b910:	00000306 	br	80b920 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80b914:	0001883a 	nop
  80b918:	00000106 	br	80b920 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80b91c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b920:	e0fff517 	ldw	r3,-44(fp)
  80b924:	e0bffd17 	ldw	r2,-12(fp)
  80b928:	18801826 	beq	r3,r2,80b98c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b92c:	0005303a 	rdctl	r2,status
  80b930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b934:	e0fffb17 	ldw	r3,-20(fp)
  80b938:	00bfff84 	movi	r2,-2
  80b93c:	1884703a 	and	r2,r3,r2
  80b940:	1001703a 	wrctl	status,r2
  
  return context;
  80b944:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b948:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b94c:	e0bffc17 	ldw	r2,-16(fp)
  80b950:	10800817 	ldw	r2,32(r2)
  80b954:	10c00054 	ori	r3,r2,1
  80b958:	e0bffc17 	ldw	r2,-16(fp)
  80b95c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b960:	e0bffc17 	ldw	r2,-16(fp)
  80b964:	10800017 	ldw	r2,0(r2)
  80b968:	10800104 	addi	r2,r2,4
  80b96c:	1007883a 	mov	r3,r2
  80b970:	e0bffc17 	ldw	r2,-16(fp)
  80b974:	10800817 	ldw	r2,32(r2)
  80b978:	18800035 	stwio	r2,0(r3)
  80b97c:	e0bffa17 	ldw	r2,-24(fp)
  80b980:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b984:	e0bff917 	ldw	r2,-28(fp)
  80b988:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80b98c:	e0fff517 	ldw	r3,-44(fp)
  80b990:	e0bffd17 	ldw	r2,-12(fp)
  80b994:	18800426 	beq	r3,r2,80b9a8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80b998:	e0fff517 	ldw	r3,-44(fp)
  80b99c:	e0bffd17 	ldw	r2,-12(fp)
  80b9a0:	1885c83a 	sub	r2,r3,r2
  80b9a4:	00000606 	br	80b9c0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80b9a8:	e0bfff17 	ldw	r2,-4(fp)
  80b9ac:	1090000c 	andi	r2,r2,16384
  80b9b0:	10000226 	beq	r2,zero,80b9bc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80b9b4:	00bffd44 	movi	r2,-11
  80b9b8:	00000106 	br	80b9c0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80b9bc:	00bffec4 	movi	r2,-5
}
  80b9c0:	e037883a 	mov	sp,fp
  80b9c4:	dfc00117 	ldw	ra,4(sp)
  80b9c8:	df000017 	ldw	fp,0(sp)
  80b9cc:	dec00204 	addi	sp,sp,8
  80b9d0:	f800283a 	ret

0080b9d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b9d4:	defff304 	addi	sp,sp,-52
  80b9d8:	dfc00c15 	stw	ra,48(sp)
  80b9dc:	df000b15 	stw	fp,44(sp)
  80b9e0:	df000b04 	addi	fp,sp,44
  80b9e4:	e13ffc15 	stw	r4,-16(fp)
  80b9e8:	e17ffd15 	stw	r5,-12(fp)
  80b9ec:	e1bffe15 	stw	r6,-8(fp)
  80b9f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80b9f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80b9f8:	e0bffd17 	ldw	r2,-12(fp)
  80b9fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ba00:	00003706 	br	80bae0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80ba04:	e0bffc17 	ldw	r2,-16(fp)
  80ba08:	10800c17 	ldw	r2,48(r2)
  80ba0c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80ba10:	e0bffc17 	ldw	r2,-16(fp)
  80ba14:	10800d17 	ldw	r2,52(r2)
  80ba18:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80ba1c:	e0fff917 	ldw	r3,-28(fp)
  80ba20:	e0bff517 	ldw	r2,-44(fp)
  80ba24:	1880062e 	bgeu	r3,r2,80ba40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80ba28:	e0fff517 	ldw	r3,-44(fp)
  80ba2c:	e0bff917 	ldw	r2,-28(fp)
  80ba30:	1885c83a 	sub	r2,r3,r2
  80ba34:	10bfffc4 	addi	r2,r2,-1
  80ba38:	e0bff615 	stw	r2,-40(fp)
  80ba3c:	00000b06 	br	80ba6c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80ba40:	e0bff517 	ldw	r2,-44(fp)
  80ba44:	10000526 	beq	r2,zero,80ba5c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80ba48:	00c20004 	movi	r3,2048
  80ba4c:	e0bff917 	ldw	r2,-28(fp)
  80ba50:	1885c83a 	sub	r2,r3,r2
  80ba54:	e0bff615 	stw	r2,-40(fp)
  80ba58:	00000406 	br	80ba6c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80ba5c:	00c1ffc4 	movi	r3,2047
  80ba60:	e0bff917 	ldw	r2,-28(fp)
  80ba64:	1885c83a 	sub	r2,r3,r2
  80ba68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80ba6c:	e0bff617 	ldw	r2,-40(fp)
  80ba70:	10001e26 	beq	r2,zero,80baec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80ba74:	e0fffe17 	ldw	r3,-8(fp)
  80ba78:	e0bff617 	ldw	r2,-40(fp)
  80ba7c:	1880022e 	bgeu	r3,r2,80ba88 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80ba80:	e0bffe17 	ldw	r2,-8(fp)
  80ba84:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80ba88:	e0bffc17 	ldw	r2,-16(fp)
  80ba8c:	10c20e04 	addi	r3,r2,2104
  80ba90:	e0bff917 	ldw	r2,-28(fp)
  80ba94:	1885883a 	add	r2,r3,r2
  80ba98:	e1bff617 	ldw	r6,-40(fp)
  80ba9c:	e17ffd17 	ldw	r5,-12(fp)
  80baa0:	1009883a 	mov	r4,r2
  80baa4:	0808dc00 	call	808dc0 <memcpy>
      ptr   += n;
  80baa8:	e0fffd17 	ldw	r3,-12(fp)
  80baac:	e0bff617 	ldw	r2,-40(fp)
  80bab0:	1885883a 	add	r2,r3,r2
  80bab4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80bab8:	e0fffe17 	ldw	r3,-8(fp)
  80babc:	e0bff617 	ldw	r2,-40(fp)
  80bac0:	1885c83a 	sub	r2,r3,r2
  80bac4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bac8:	e0fff917 	ldw	r3,-28(fp)
  80bacc:	e0bff617 	ldw	r2,-40(fp)
  80bad0:	1885883a 	add	r2,r3,r2
  80bad4:	10c1ffcc 	andi	r3,r2,2047
  80bad8:	e0bffc17 	ldw	r2,-16(fp)
  80badc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80bae0:	e0bffe17 	ldw	r2,-8(fp)
  80bae4:	00bfc716 	blt	zero,r2,80ba04 <__alt_mem_onchip_mem+0xff803a04>
  80bae8:	00000106 	br	80baf0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80baec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80baf0:	0005303a 	rdctl	r2,status
  80baf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80baf8:	e0fffb17 	ldw	r3,-20(fp)
  80bafc:	00bfff84 	movi	r2,-2
  80bb00:	1884703a 	and	r2,r3,r2
  80bb04:	1001703a 	wrctl	status,r2
  
  return context;
  80bb08:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80bb0c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bb10:	e0bffc17 	ldw	r2,-16(fp)
  80bb14:	10800817 	ldw	r2,32(r2)
  80bb18:	10c00094 	ori	r3,r2,2
  80bb1c:	e0bffc17 	ldw	r2,-16(fp)
  80bb20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bb24:	e0bffc17 	ldw	r2,-16(fp)
  80bb28:	10800017 	ldw	r2,0(r2)
  80bb2c:	10800104 	addi	r2,r2,4
  80bb30:	1007883a 	mov	r3,r2
  80bb34:	e0bffc17 	ldw	r2,-16(fp)
  80bb38:	10800817 	ldw	r2,32(r2)
  80bb3c:	18800035 	stwio	r2,0(r3)
  80bb40:	e0bffa17 	ldw	r2,-24(fp)
  80bb44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb48:	e0bff817 	ldw	r2,-32(fp)
  80bb4c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80bb50:	e0bffe17 	ldw	r2,-8(fp)
  80bb54:	0080100e 	bge	zero,r2,80bb98 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80bb58:	e0bfff17 	ldw	r2,-4(fp)
  80bb5c:	1090000c 	andi	r2,r2,16384
  80bb60:	1000101e 	bne	r2,zero,80bba4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80bb64:	0001883a 	nop
  80bb68:	e0bffc17 	ldw	r2,-16(fp)
  80bb6c:	10c00d17 	ldw	r3,52(r2)
  80bb70:	e0bff517 	ldw	r2,-44(fp)
  80bb74:	1880051e 	bne	r3,r2,80bb8c <altera_avalon_jtag_uart_write+0x1b8>
  80bb78:	e0bffc17 	ldw	r2,-16(fp)
  80bb7c:	10c00917 	ldw	r3,36(r2)
  80bb80:	e0bffc17 	ldw	r2,-16(fp)
  80bb84:	10800117 	ldw	r2,4(r2)
  80bb88:	18bff736 	bltu	r3,r2,80bb68 <__alt_mem_onchip_mem+0xff803b68>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80bb8c:	e0bffc17 	ldw	r2,-16(fp)
  80bb90:	10800917 	ldw	r2,36(r2)
  80bb94:	1000051e 	bne	r2,zero,80bbac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80bb98:	e0bffe17 	ldw	r2,-8(fp)
  80bb9c:	00bfd016 	blt	zero,r2,80bae0 <__alt_mem_onchip_mem+0xff803ae0>
  80bba0:	00000306 	br	80bbb0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80bba4:	0001883a 	nop
  80bba8:	00000106 	br	80bbb0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80bbac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80bbb0:	e0fffd17 	ldw	r3,-12(fp)
  80bbb4:	e0bff717 	ldw	r2,-36(fp)
  80bbb8:	18800426 	beq	r3,r2,80bbcc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80bbbc:	e0fffd17 	ldw	r3,-12(fp)
  80bbc0:	e0bff717 	ldw	r2,-36(fp)
  80bbc4:	1885c83a 	sub	r2,r3,r2
  80bbc8:	00000606 	br	80bbe4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80bbcc:	e0bfff17 	ldw	r2,-4(fp)
  80bbd0:	1090000c 	andi	r2,r2,16384
  80bbd4:	10000226 	beq	r2,zero,80bbe0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80bbd8:	00bffd44 	movi	r2,-11
  80bbdc:	00000106 	br	80bbe4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80bbe0:	00bffec4 	movi	r2,-5
}
  80bbe4:	e037883a 	mov	sp,fp
  80bbe8:	dfc00117 	ldw	ra,4(sp)
  80bbec:	df000017 	ldw	fp,0(sp)
  80bbf0:	dec00204 	addi	sp,sp,8
  80bbf4:	f800283a 	ret

0080bbf8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80bbf8:	defffa04 	addi	sp,sp,-24
  80bbfc:	dfc00515 	stw	ra,20(sp)
  80bc00:	df000415 	stw	fp,16(sp)
  80bc04:	df000404 	addi	fp,sp,16
  80bc08:	e13ffe15 	stw	r4,-8(fp)
  80bc0c:	2805883a 	mov	r2,r5
  80bc10:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80bc14:	e0bffe17 	ldw	r2,-8(fp)
  80bc18:	10800017 	ldw	r2,0(r2)
  80bc1c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80bc20:	008003f4 	movhi	r2,15
  80bc24:	10909004 	addi	r2,r2,16960
  80bc28:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80bc2c:	e0bffe17 	ldw	r2,-8(fp)
  80bc30:	10800803 	ldbu	r2,32(r2)
  80bc34:	10803fcc 	andi	r2,r2,255
  80bc38:	1080201c 	xori	r2,r2,128
  80bc3c:	10bfe004 	addi	r2,r2,-128
  80bc40:	1000151e 	bne	r2,zero,80bc98 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bc44:	00000906 	br	80bc6c <lcd_write_command+0x74>
    if (--i == 0)
  80bc48:	e0bffc17 	ldw	r2,-16(fp)
  80bc4c:	10bfffc4 	addi	r2,r2,-1
  80bc50:	e0bffc15 	stw	r2,-16(fp)
  80bc54:	e0bffc17 	ldw	r2,-16(fp)
  80bc58:	1000041e 	bne	r2,zero,80bc6c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80bc5c:	e0bffe17 	ldw	r2,-8(fp)
  80bc60:	00c00044 	movi	r3,1
  80bc64:	10c00805 	stb	r3,32(r2)
      return;
  80bc68:	00000c06 	br	80bc9c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bc6c:	e0bffd17 	ldw	r2,-12(fp)
  80bc70:	10800104 	addi	r2,r2,4
  80bc74:	10800037 	ldwio	r2,0(r2)
  80bc78:	1080200c 	andi	r2,r2,128
  80bc7c:	103ff21e 	bne	r2,zero,80bc48 <__alt_mem_onchip_mem+0xff803c48>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80bc80:	01001904 	movi	r4,100
  80bc84:	080dfc00 	call	80dfc0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80bc88:	e0bffd17 	ldw	r2,-12(fp)
  80bc8c:	e0ffff03 	ldbu	r3,-4(fp)
  80bc90:	10c00035 	stwio	r3,0(r2)
  80bc94:	00000106 	br	80bc9c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80bc98:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80bc9c:	e037883a 	mov	sp,fp
  80bca0:	dfc00117 	ldw	ra,4(sp)
  80bca4:	df000017 	ldw	fp,0(sp)
  80bca8:	dec00204 	addi	sp,sp,8
  80bcac:	f800283a 	ret

0080bcb0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80bcb0:	defffa04 	addi	sp,sp,-24
  80bcb4:	dfc00515 	stw	ra,20(sp)
  80bcb8:	df000415 	stw	fp,16(sp)
  80bcbc:	df000404 	addi	fp,sp,16
  80bcc0:	e13ffe15 	stw	r4,-8(fp)
  80bcc4:	2805883a 	mov	r2,r5
  80bcc8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80bccc:	e0bffe17 	ldw	r2,-8(fp)
  80bcd0:	10800017 	ldw	r2,0(r2)
  80bcd4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80bcd8:	008003f4 	movhi	r2,15
  80bcdc:	10909004 	addi	r2,r2,16960
  80bce0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80bce4:	e0bffe17 	ldw	r2,-8(fp)
  80bce8:	10800803 	ldbu	r2,32(r2)
  80bcec:	10803fcc 	andi	r2,r2,255
  80bcf0:	1080201c 	xori	r2,r2,128
  80bcf4:	10bfe004 	addi	r2,r2,-128
  80bcf8:	10001d1e 	bne	r2,zero,80bd70 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bcfc:	00000906 	br	80bd24 <lcd_write_data+0x74>
    if (--i == 0)
  80bd00:	e0bffc17 	ldw	r2,-16(fp)
  80bd04:	10bfffc4 	addi	r2,r2,-1
  80bd08:	e0bffc15 	stw	r2,-16(fp)
  80bd0c:	e0bffc17 	ldw	r2,-16(fp)
  80bd10:	1000041e 	bne	r2,zero,80bd24 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80bd14:	e0bffe17 	ldw	r2,-8(fp)
  80bd18:	00c00044 	movi	r3,1
  80bd1c:	10c00805 	stb	r3,32(r2)
      return;
  80bd20:	00001406 	br	80bd74 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bd24:	e0bffd17 	ldw	r2,-12(fp)
  80bd28:	10800104 	addi	r2,r2,4
  80bd2c:	10800037 	ldwio	r2,0(r2)
  80bd30:	1080200c 	andi	r2,r2,128
  80bd34:	103ff21e 	bne	r2,zero,80bd00 <__alt_mem_onchip_mem+0xff803d00>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80bd38:	01001904 	movi	r4,100
  80bd3c:	080dfc00 	call	80dfc0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80bd40:	e0bffd17 	ldw	r2,-12(fp)
  80bd44:	10800204 	addi	r2,r2,8
  80bd48:	1007883a 	mov	r3,r2
  80bd4c:	e0bfff03 	ldbu	r2,-4(fp)
  80bd50:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80bd54:	e0bffe17 	ldw	r2,-8(fp)
  80bd58:	108008c3 	ldbu	r2,35(r2)
  80bd5c:	10800044 	addi	r2,r2,1
  80bd60:	1007883a 	mov	r3,r2
  80bd64:	e0bffe17 	ldw	r2,-8(fp)
  80bd68:	10c008c5 	stb	r3,35(r2)
  80bd6c:	00000106 	br	80bd74 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80bd70:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80bd74:	e037883a 	mov	sp,fp
  80bd78:	dfc00117 	ldw	ra,4(sp)
  80bd7c:	df000017 	ldw	fp,0(sp)
  80bd80:	dec00204 	addi	sp,sp,8
  80bd84:	f800283a 	ret

0080bd88 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80bd88:	defffc04 	addi	sp,sp,-16
  80bd8c:	dfc00315 	stw	ra,12(sp)
  80bd90:	df000215 	stw	fp,8(sp)
  80bd94:	df000204 	addi	fp,sp,8
  80bd98:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80bd9c:	01400044 	movi	r5,1
  80bda0:	e13fff17 	ldw	r4,-4(fp)
  80bda4:	080bbf80 	call	80bbf8 <lcd_write_command>

  sp->x = 0;
  80bda8:	e0bfff17 	ldw	r2,-4(fp)
  80bdac:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80bdb0:	e0bfff17 	ldw	r2,-4(fp)
  80bdb4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80bdb8:	e0bfff17 	ldw	r2,-4(fp)
  80bdbc:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bdc0:	e03ffe15 	stw	zero,-8(fp)
  80bdc4:	00001b06 	br	80be34 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80bdc8:	e0bffe17 	ldw	r2,-8(fp)
  80bdcc:	108018e4 	muli	r2,r2,99
  80bdd0:	10801004 	addi	r2,r2,64
  80bdd4:	e0ffff17 	ldw	r3,-4(fp)
  80bdd8:	1885883a 	add	r2,r3,r2
  80bddc:	01801444 	movi	r6,81
  80bde0:	01400804 	movi	r5,32
  80bde4:	1009883a 	mov	r4,r2
  80bde8:	08090640 	call	809064 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80bdec:	e0bffe17 	ldw	r2,-8(fp)
  80bdf0:	108018e4 	muli	r2,r2,99
  80bdf4:	10800c04 	addi	r2,r2,48
  80bdf8:	e0ffff17 	ldw	r3,-4(fp)
  80bdfc:	1885883a 	add	r2,r3,r2
  80be00:	01800404 	movi	r6,16
  80be04:	01400804 	movi	r5,32
  80be08:	1009883a 	mov	r4,r2
  80be0c:	08090640 	call	809064 <memset>
    sp->line[y].width = 0;
  80be10:	e0ffff17 	ldw	r3,-4(fp)
  80be14:	e0bffe17 	ldw	r2,-8(fp)
  80be18:	108018e4 	muli	r2,r2,99
  80be1c:	1885883a 	add	r2,r3,r2
  80be20:	10802444 	addi	r2,r2,145
  80be24:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80be28:	e0bffe17 	ldw	r2,-8(fp)
  80be2c:	10800044 	addi	r2,r2,1
  80be30:	e0bffe15 	stw	r2,-8(fp)
  80be34:	e0bffe17 	ldw	r2,-8(fp)
  80be38:	10800090 	cmplti	r2,r2,2
  80be3c:	103fe21e 	bne	r2,zero,80bdc8 <__alt_mem_onchip_mem+0xff803dc8>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80be40:	0001883a 	nop
  80be44:	e037883a 	mov	sp,fp
  80be48:	dfc00117 	ldw	ra,4(sp)
  80be4c:	df000017 	ldw	fp,0(sp)
  80be50:	dec00204 	addi	sp,sp,8
  80be54:	f800283a 	ret

0080be58 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80be58:	defff704 	addi	sp,sp,-36
  80be5c:	dfc00815 	stw	ra,32(sp)
  80be60:	df000715 	stw	fp,28(sp)
  80be64:	df000704 	addi	fp,sp,28
  80be68:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80be6c:	e0bfff17 	ldw	r2,-4(fp)
  80be70:	10800943 	ldbu	r2,37(r2)
  80be74:	10803fcc 	andi	r2,r2,255
  80be78:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80be7c:	e03ff915 	stw	zero,-28(fp)
  80be80:	00006706 	br	80c020 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80be84:	e0ffff17 	ldw	r3,-4(fp)
  80be88:	e0bff917 	ldw	r2,-28(fp)
  80be8c:	108018e4 	muli	r2,r2,99
  80be90:	1885883a 	add	r2,r3,r2
  80be94:	10802444 	addi	r2,r2,145
  80be98:	10800003 	ldbu	r2,0(r2)
  80be9c:	10803fcc 	andi	r2,r2,255
  80bea0:	1080201c 	xori	r2,r2,128
  80bea4:	10bfe004 	addi	r2,r2,-128
  80bea8:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80beac:	e0ffff17 	ldw	r3,-4(fp)
  80beb0:	e0bff917 	ldw	r2,-28(fp)
  80beb4:	108018e4 	muli	r2,r2,99
  80beb8:	1885883a 	add	r2,r3,r2
  80bebc:	10802484 	addi	r2,r2,146
  80bec0:	10800003 	ldbu	r2,0(r2)
  80bec4:	10c03fcc 	andi	r3,r2,255
  80bec8:	e0bffc17 	ldw	r2,-16(fp)
  80becc:	1885383a 	mul	r2,r3,r2
  80bed0:	1005d23a 	srai	r2,r2,8
  80bed4:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80bed8:	e0fffb17 	ldw	r3,-20(fp)
  80bedc:	e0bffd17 	ldw	r2,-12(fp)
  80bee0:	18800116 	blt	r3,r2,80bee8 <lcd_repaint_screen+0x90>
      offset = 0;
  80bee4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80bee8:	e03ffa15 	stw	zero,-24(fp)
  80beec:	00004606 	br	80c008 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80bef0:	e0fffa17 	ldw	r3,-24(fp)
  80bef4:	e0bffb17 	ldw	r2,-20(fp)
  80bef8:	1885883a 	add	r2,r3,r2
  80befc:	e17ffd17 	ldw	r5,-12(fp)
  80bf00:	1009883a 	mov	r4,r2
  80bf04:	080a6180 	call	80a618 <__modsi3>
  80bf08:	1009883a 	mov	r4,r2
  80bf0c:	e0ffff17 	ldw	r3,-4(fp)
  80bf10:	e0bff917 	ldw	r2,-28(fp)
  80bf14:	108018e4 	muli	r2,r2,99
  80bf18:	1885883a 	add	r2,r3,r2
  80bf1c:	1105883a 	add	r2,r2,r4
  80bf20:	10801004 	addi	r2,r2,64
  80bf24:	10800003 	ldbu	r2,0(r2)
  80bf28:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80bf2c:	e0ffff17 	ldw	r3,-4(fp)
  80bf30:	e0bff917 	ldw	r2,-28(fp)
  80bf34:	108018e4 	muli	r2,r2,99
  80bf38:	1887883a 	add	r3,r3,r2
  80bf3c:	e0bffa17 	ldw	r2,-24(fp)
  80bf40:	1885883a 	add	r2,r3,r2
  80bf44:	10800c04 	addi	r2,r2,48
  80bf48:	10800003 	ldbu	r2,0(r2)
  80bf4c:	10c03fcc 	andi	r3,r2,255
  80bf50:	18c0201c 	xori	r3,r3,128
  80bf54:	18ffe004 	addi	r3,r3,-128
  80bf58:	e0bffe07 	ldb	r2,-8(fp)
  80bf5c:	18802726 	beq	r3,r2,80bffc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80bf60:	e0fff917 	ldw	r3,-28(fp)
  80bf64:	d0a00b04 	addi	r2,gp,-32724
  80bf68:	1885883a 	add	r2,r3,r2
  80bf6c:	10800003 	ldbu	r2,0(r2)
  80bf70:	1007883a 	mov	r3,r2
  80bf74:	e0bffa17 	ldw	r2,-24(fp)
  80bf78:	1885883a 	add	r2,r3,r2
  80bf7c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80bf80:	e0fffe43 	ldbu	r3,-7(fp)
  80bf84:	e0bfff17 	ldw	r2,-4(fp)
  80bf88:	108008c3 	ldbu	r2,35(r2)
  80bf8c:	10803fcc 	andi	r2,r2,255
  80bf90:	1080201c 	xori	r2,r2,128
  80bf94:	10bfe004 	addi	r2,r2,-128
  80bf98:	18800a26 	beq	r3,r2,80bfc4 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80bf9c:	e0fffe43 	ldbu	r3,-7(fp)
  80bfa0:	00bfe004 	movi	r2,-128
  80bfa4:	1884b03a 	or	r2,r3,r2
  80bfa8:	10803fcc 	andi	r2,r2,255
  80bfac:	100b883a 	mov	r5,r2
  80bfb0:	e13fff17 	ldw	r4,-4(fp)
  80bfb4:	080bbf80 	call	80bbf8 <lcd_write_command>
          sp->address = address;
  80bfb8:	e0fffe43 	ldbu	r3,-7(fp)
  80bfbc:	e0bfff17 	ldw	r2,-4(fp)
  80bfc0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80bfc4:	e0bffe03 	ldbu	r2,-8(fp)
  80bfc8:	10803fcc 	andi	r2,r2,255
  80bfcc:	100b883a 	mov	r5,r2
  80bfd0:	e13fff17 	ldw	r4,-4(fp)
  80bfd4:	080bcb00 	call	80bcb0 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80bfd8:	e0ffff17 	ldw	r3,-4(fp)
  80bfdc:	e0bff917 	ldw	r2,-28(fp)
  80bfe0:	108018e4 	muli	r2,r2,99
  80bfe4:	1887883a 	add	r3,r3,r2
  80bfe8:	e0bffa17 	ldw	r2,-24(fp)
  80bfec:	1885883a 	add	r2,r3,r2
  80bff0:	10800c04 	addi	r2,r2,48
  80bff4:	e0fffe03 	ldbu	r3,-8(fp)
  80bff8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80bffc:	e0bffa17 	ldw	r2,-24(fp)
  80c000:	10800044 	addi	r2,r2,1
  80c004:	e0bffa15 	stw	r2,-24(fp)
  80c008:	e0bffa17 	ldw	r2,-24(fp)
  80c00c:	10800410 	cmplti	r2,r2,16
  80c010:	103fb71e 	bne	r2,zero,80bef0 <__alt_mem_onchip_mem+0xff803ef0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c014:	e0bff917 	ldw	r2,-28(fp)
  80c018:	10800044 	addi	r2,r2,1
  80c01c:	e0bff915 	stw	r2,-28(fp)
  80c020:	e0bff917 	ldw	r2,-28(fp)
  80c024:	10800090 	cmplti	r2,r2,2
  80c028:	103f961e 	bne	r2,zero,80be84 <__alt_mem_onchip_mem+0xff803e84>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80c02c:	0001883a 	nop
  80c030:	e037883a 	mov	sp,fp
  80c034:	dfc00117 	ldw	ra,4(sp)
  80c038:	df000017 	ldw	fp,0(sp)
  80c03c:	dec00204 	addi	sp,sp,8
  80c040:	f800283a 	ret

0080c044 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80c044:	defffc04 	addi	sp,sp,-16
  80c048:	dfc00315 	stw	ra,12(sp)
  80c04c:	df000215 	stw	fp,8(sp)
  80c050:	df000204 	addi	fp,sp,8
  80c054:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c058:	e03ffe15 	stw	zero,-8(fp)
  80c05c:	00001d06 	br	80c0d4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80c060:	e0bffe17 	ldw	r2,-8(fp)
  80c064:	00800f16 	blt	zero,r2,80c0a4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80c068:	e0bffe17 	ldw	r2,-8(fp)
  80c06c:	108018e4 	muli	r2,r2,99
  80c070:	10801004 	addi	r2,r2,64
  80c074:	e0ffff17 	ldw	r3,-4(fp)
  80c078:	1889883a 	add	r4,r3,r2
  80c07c:	e0bffe17 	ldw	r2,-8(fp)
  80c080:	10800044 	addi	r2,r2,1
  80c084:	108018e4 	muli	r2,r2,99
  80c088:	10801004 	addi	r2,r2,64
  80c08c:	e0ffff17 	ldw	r3,-4(fp)
  80c090:	1885883a 	add	r2,r3,r2
  80c094:	01801404 	movi	r6,80
  80c098:	100b883a 	mov	r5,r2
  80c09c:	0808dc00 	call	808dc0 <memcpy>
  80c0a0:	00000906 	br	80c0c8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80c0a4:	e0bffe17 	ldw	r2,-8(fp)
  80c0a8:	108018e4 	muli	r2,r2,99
  80c0ac:	10801004 	addi	r2,r2,64
  80c0b0:	e0ffff17 	ldw	r3,-4(fp)
  80c0b4:	1885883a 	add	r2,r3,r2
  80c0b8:	01801404 	movi	r6,80
  80c0bc:	01400804 	movi	r5,32
  80c0c0:	1009883a 	mov	r4,r2
  80c0c4:	08090640 	call	809064 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c0c8:	e0bffe17 	ldw	r2,-8(fp)
  80c0cc:	10800044 	addi	r2,r2,1
  80c0d0:	e0bffe15 	stw	r2,-8(fp)
  80c0d4:	e0bffe17 	ldw	r2,-8(fp)
  80c0d8:	10800090 	cmplti	r2,r2,2
  80c0dc:	103fe01e 	bne	r2,zero,80c060 <__alt_mem_onchip_mem+0xff804060>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80c0e0:	e0bfff17 	ldw	r2,-4(fp)
  80c0e4:	10800883 	ldbu	r2,34(r2)
  80c0e8:	10bfffc4 	addi	r2,r2,-1
  80c0ec:	1007883a 	mov	r3,r2
  80c0f0:	e0bfff17 	ldw	r2,-4(fp)
  80c0f4:	10c00885 	stb	r3,34(r2)
}
  80c0f8:	0001883a 	nop
  80c0fc:	e037883a 	mov	sp,fp
  80c100:	dfc00117 	ldw	ra,4(sp)
  80c104:	df000017 	ldw	fp,0(sp)
  80c108:	dec00204 	addi	sp,sp,8
  80c10c:	f800283a 	ret

0080c110 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80c110:	defff904 	addi	sp,sp,-28
  80c114:	dfc00615 	stw	ra,24(sp)
  80c118:	df000515 	stw	fp,20(sp)
  80c11c:	df000504 	addi	fp,sp,20
  80c120:	e13ffe15 	stw	r4,-8(fp)
  80c124:	2805883a 	mov	r2,r5
  80c128:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80c12c:	e03ffb15 	stw	zero,-20(fp)
  80c130:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80c134:	e0bffe17 	ldw	r2,-8(fp)
  80c138:	10800a03 	ldbu	r2,40(r2)
  80c13c:	10803fcc 	andi	r2,r2,255
  80c140:	1080201c 	xori	r2,r2,128
  80c144:	10bfe004 	addi	r2,r2,-128
  80c148:	108016d8 	cmpnei	r2,r2,91
  80c14c:	1000411e 	bne	r2,zero,80c254 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80c150:	e0bffe17 	ldw	r2,-8(fp)
  80c154:	10800a04 	addi	r2,r2,40
  80c158:	10800044 	addi	r2,r2,1
  80c15c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80c160:	00000c06 	br	80c194 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80c164:	e0bffb17 	ldw	r2,-20(fp)
  80c168:	10c002a4 	muli	r3,r2,10
  80c16c:	e0bffd17 	ldw	r2,-12(fp)
  80c170:	11000044 	addi	r4,r2,1
  80c174:	e13ffd15 	stw	r4,-12(fp)
  80c178:	10800003 	ldbu	r2,0(r2)
  80c17c:	10803fcc 	andi	r2,r2,255
  80c180:	1080201c 	xori	r2,r2,128
  80c184:	10bfe004 	addi	r2,r2,-128
  80c188:	10bff404 	addi	r2,r2,-48
  80c18c:	1885883a 	add	r2,r3,r2
  80c190:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80c194:	d0e00f17 	ldw	r3,-32708(gp)
  80c198:	e0bffd17 	ldw	r2,-12(fp)
  80c19c:	10800003 	ldbu	r2,0(r2)
  80c1a0:	10803fcc 	andi	r2,r2,255
  80c1a4:	1080201c 	xori	r2,r2,128
  80c1a8:	10bfe004 	addi	r2,r2,-128
  80c1ac:	10800044 	addi	r2,r2,1
  80c1b0:	1885883a 	add	r2,r3,r2
  80c1b4:	10800003 	ldbu	r2,0(r2)
  80c1b8:	10803fcc 	andi	r2,r2,255
  80c1bc:	1080010c 	andi	r2,r2,4
  80c1c0:	103fe81e 	bne	r2,zero,80c164 <__alt_mem_onchip_mem+0xff804164>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80c1c4:	e0bffd17 	ldw	r2,-12(fp)
  80c1c8:	10800003 	ldbu	r2,0(r2)
  80c1cc:	10803fcc 	andi	r2,r2,255
  80c1d0:	1080201c 	xori	r2,r2,128
  80c1d4:	10bfe004 	addi	r2,r2,-128
  80c1d8:	10800ed8 	cmpnei	r2,r2,59
  80c1dc:	10001f1e 	bne	r2,zero,80c25c <lcd_handle_escape+0x14c>
    {
      ptr++;
  80c1e0:	e0bffd17 	ldw	r2,-12(fp)
  80c1e4:	10800044 	addi	r2,r2,1
  80c1e8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80c1ec:	00000c06 	br	80c220 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80c1f0:	e0bffc17 	ldw	r2,-16(fp)
  80c1f4:	10c002a4 	muli	r3,r2,10
  80c1f8:	e0bffd17 	ldw	r2,-12(fp)
  80c1fc:	11000044 	addi	r4,r2,1
  80c200:	e13ffd15 	stw	r4,-12(fp)
  80c204:	10800003 	ldbu	r2,0(r2)
  80c208:	10803fcc 	andi	r2,r2,255
  80c20c:	1080201c 	xori	r2,r2,128
  80c210:	10bfe004 	addi	r2,r2,-128
  80c214:	10bff404 	addi	r2,r2,-48
  80c218:	1885883a 	add	r2,r3,r2
  80c21c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80c220:	d0e00f17 	ldw	r3,-32708(gp)
  80c224:	e0bffd17 	ldw	r2,-12(fp)
  80c228:	10800003 	ldbu	r2,0(r2)
  80c22c:	10803fcc 	andi	r2,r2,255
  80c230:	1080201c 	xori	r2,r2,128
  80c234:	10bfe004 	addi	r2,r2,-128
  80c238:	10800044 	addi	r2,r2,1
  80c23c:	1885883a 	add	r2,r3,r2
  80c240:	10800003 	ldbu	r2,0(r2)
  80c244:	10803fcc 	andi	r2,r2,255
  80c248:	1080010c 	andi	r2,r2,4
  80c24c:	103fe81e 	bne	r2,zero,80c1f0 <__alt_mem_onchip_mem+0xff8041f0>
  80c250:	00000206 	br	80c25c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80c254:	00bfffc4 	movi	r2,-1
  80c258:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80c25c:	e0bfff07 	ldb	r2,-4(fp)
  80c260:	10c012a0 	cmpeqi	r3,r2,74
  80c264:	1800291e 	bne	r3,zero,80c30c <lcd_handle_escape+0x1fc>
  80c268:	10c012c8 	cmpgei	r3,r2,75
  80c26c:	1800031e 	bne	r3,zero,80c27c <lcd_handle_escape+0x16c>
  80c270:	10801220 	cmpeqi	r2,r2,72
  80c274:	1000061e 	bne	r2,zero,80c290 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80c278:	00004a06 	br	80c3a4 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80c27c:	10c012e0 	cmpeqi	r3,r2,75
  80c280:	1800281e 	bne	r3,zero,80c324 <lcd_handle_escape+0x214>
  80c284:	108019a0 	cmpeqi	r2,r2,102
  80c288:	1000011e 	bne	r2,zero,80c290 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80c28c:	00004506 	br	80c3a4 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80c290:	e0bffc17 	ldw	r2,-16(fp)
  80c294:	0080050e 	bge	zero,r2,80c2ac <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80c298:	e0bffc17 	ldw	r2,-16(fp)
  80c29c:	10bfffc4 	addi	r2,r2,-1
  80c2a0:	1007883a 	mov	r3,r2
  80c2a4:	e0bffe17 	ldw	r2,-8(fp)
  80c2a8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80c2ac:	e0bffb17 	ldw	r2,-20(fp)
  80c2b0:	0080370e 	bge	zero,r2,80c390 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80c2b4:	e0bffb17 	ldw	r2,-20(fp)
  80c2b8:	10bfffc4 	addi	r2,r2,-1
  80c2bc:	1007883a 	mov	r3,r2
  80c2c0:	e0bffe17 	ldw	r2,-8(fp)
  80c2c4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80c2c8:	e0bffe17 	ldw	r2,-8(fp)
  80c2cc:	10800883 	ldbu	r2,34(r2)
  80c2d0:	10803fcc 	andi	r2,r2,255
  80c2d4:	10800170 	cmpltui	r2,r2,5
  80c2d8:	1000061e 	bne	r2,zero,80c2f4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80c2dc:	e0bffe17 	ldw	r2,-8(fp)
  80c2e0:	00c00104 	movi	r3,4
  80c2e4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80c2e8:	00000206 	br	80c2f4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80c2ec:	e13ffe17 	ldw	r4,-8(fp)
  80c2f0:	080c0440 	call	80c044 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80c2f4:	e0bffe17 	ldw	r2,-8(fp)
  80c2f8:	10800883 	ldbu	r2,34(r2)
  80c2fc:	10803fcc 	andi	r2,r2,255
  80c300:	108000e8 	cmpgeui	r2,r2,3
  80c304:	103ff91e 	bne	r2,zero,80c2ec <__alt_mem_onchip_mem+0xff8042ec>
        lcd_scroll_up(sp);
    }
    break;
  80c308:	00002106 	br	80c390 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80c30c:	e0bffb17 	ldw	r2,-20(fp)
  80c310:	10800098 	cmpnei	r2,r2,2
  80c314:	1000201e 	bne	r2,zero,80c398 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80c318:	e13ffe17 	ldw	r4,-8(fp)
  80c31c:	080bd880 	call	80bd88 <lcd_clear_screen>
    break;
  80c320:	00001d06 	br	80c398 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80c324:	e0bffb17 	ldw	r2,-20(fp)
  80c328:	00801d16 	blt	zero,r2,80c3a0 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80c32c:	e0bffe17 	ldw	r2,-8(fp)
  80c330:	10800843 	ldbu	r2,33(r2)
  80c334:	10803fcc 	andi	r2,r2,255
  80c338:	10801428 	cmpgeui	r2,r2,80
  80c33c:	1000181e 	bne	r2,zero,80c3a0 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80c340:	e0bffe17 	ldw	r2,-8(fp)
  80c344:	10800883 	ldbu	r2,34(r2)
  80c348:	10803fcc 	andi	r2,r2,255
  80c34c:	108018e4 	muli	r2,r2,99
  80c350:	10801004 	addi	r2,r2,64
  80c354:	e0fffe17 	ldw	r3,-8(fp)
  80c358:	1887883a 	add	r3,r3,r2
  80c35c:	e0bffe17 	ldw	r2,-8(fp)
  80c360:	10800843 	ldbu	r2,33(r2)
  80c364:	10803fcc 	andi	r2,r2,255
  80c368:	1889883a 	add	r4,r3,r2
  80c36c:	e0bffe17 	ldw	r2,-8(fp)
  80c370:	10800843 	ldbu	r2,33(r2)
  80c374:	10803fcc 	andi	r2,r2,255
  80c378:	00c01404 	movi	r3,80
  80c37c:	1885c83a 	sub	r2,r3,r2
  80c380:	100d883a 	mov	r6,r2
  80c384:	01400804 	movi	r5,32
  80c388:	08090640 	call	809064 <memset>
    }
    break;
  80c38c:	00000406 	br	80c3a0 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80c390:	0001883a 	nop
  80c394:	00000306 	br	80c3a4 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80c398:	0001883a 	nop
  80c39c:	00000106 	br	80c3a4 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80c3a0:	0001883a 	nop
  }
}
  80c3a4:	0001883a 	nop
  80c3a8:	e037883a 	mov	sp,fp
  80c3ac:	dfc00117 	ldw	ra,4(sp)
  80c3b0:	df000017 	ldw	fp,0(sp)
  80c3b4:	dec00204 	addi	sp,sp,8
  80c3b8:	f800283a 	ret

0080c3bc <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80c3bc:	defff304 	addi	sp,sp,-52
  80c3c0:	dfc00c15 	stw	ra,48(sp)
  80c3c4:	df000b15 	stw	fp,44(sp)
  80c3c8:	df000b04 	addi	fp,sp,44
  80c3cc:	e13ffc15 	stw	r4,-16(fp)
  80c3d0:	e17ffd15 	stw	r5,-12(fp)
  80c3d4:	e1bffe15 	stw	r6,-8(fp)
  80c3d8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80c3dc:	e0bffe17 	ldw	r2,-8(fp)
  80c3e0:	e0fffd17 	ldw	r3,-12(fp)
  80c3e4:	1885883a 	add	r2,r3,r2
  80c3e8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80c3ec:	e0bffc17 	ldw	r2,-16(fp)
  80c3f0:	00c00044 	movi	r3,1
  80c3f4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80c3f8:	00009906 	br	80c660 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80c3fc:	e0bffd17 	ldw	r2,-12(fp)
  80c400:	10800003 	ldbu	r2,0(r2)
  80c404:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80c408:	e0bffc17 	ldw	r2,-16(fp)
  80c40c:	10800903 	ldbu	r2,36(r2)
  80c410:	10803fcc 	andi	r2,r2,255
  80c414:	1080201c 	xori	r2,r2,128
  80c418:	10bfe004 	addi	r2,r2,-128
  80c41c:	10003716 	blt	r2,zero,80c4fc <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80c420:	e0bffc17 	ldw	r2,-16(fp)
  80c424:	10800903 	ldbu	r2,36(r2)
  80c428:	10803fcc 	andi	r2,r2,255
  80c42c:	1080201c 	xori	r2,r2,128
  80c430:	10bfe004 	addi	r2,r2,-128
  80c434:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80c438:	e0bffa17 	ldw	r2,-24(fp)
  80c43c:	1000031e 	bne	r2,zero,80c44c <altera_avalon_lcd_16207_write+0x90>
  80c440:	e0bff907 	ldb	r2,-28(fp)
  80c444:	108016d8 	cmpnei	r2,r2,91
  80c448:	10000d1e 	bne	r2,zero,80c480 <altera_avalon_lcd_16207_write+0xc4>
  80c44c:	e0bffa17 	ldw	r2,-24(fp)
  80c450:	10001826 	beq	r2,zero,80c4b4 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80c454:	d0e00f17 	ldw	r3,-32708(gp)
  80c458:	e0bff907 	ldb	r2,-28(fp)
  80c45c:	10800044 	addi	r2,r2,1
  80c460:	1885883a 	add	r2,r3,r2
  80c464:	10800003 	ldbu	r2,0(r2)
  80c468:	10803fcc 	andi	r2,r2,255
  80c46c:	1080010c 	andi	r2,r2,4
  80c470:	1000101e 	bne	r2,zero,80c4b4 <altera_avalon_lcd_16207_write+0xf8>
  80c474:	e0bff907 	ldb	r2,-28(fp)
  80c478:	10800ee0 	cmpeqi	r2,r2,59
  80c47c:	10000d1e 	bne	r2,zero,80c4b4 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80c480:	e0fffc17 	ldw	r3,-16(fp)
  80c484:	e0bffa17 	ldw	r2,-24(fp)
  80c488:	1885883a 	add	r2,r3,r2
  80c48c:	10800a04 	addi	r2,r2,40
  80c490:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80c494:	e0bff907 	ldb	r2,-28(fp)
  80c498:	100b883a 	mov	r5,r2
  80c49c:	e13ffc17 	ldw	r4,-16(fp)
  80c4a0:	080c1100 	call	80c110 <lcd_handle_escape>

        sp->esccount = -1;
  80c4a4:	e0bffc17 	ldw	r2,-16(fp)
  80c4a8:	00ffffc4 	movi	r3,-1
  80c4ac:	10c00905 	stb	r3,36(r2)
  80c4b0:	00006806 	br	80c654 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80c4b4:	e0bffc17 	ldw	r2,-16(fp)
  80c4b8:	10800903 	ldbu	r2,36(r2)
  80c4bc:	10803fcc 	andi	r2,r2,255
  80c4c0:	108001e8 	cmpgeui	r2,r2,7
  80c4c4:	1000631e 	bne	r2,zero,80c654 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80c4c8:	e0fffc17 	ldw	r3,-16(fp)
  80c4cc:	e0bffa17 	ldw	r2,-24(fp)
  80c4d0:	1885883a 	add	r2,r3,r2
  80c4d4:	10800a04 	addi	r2,r2,40
  80c4d8:	e0fff903 	ldbu	r3,-28(fp)
  80c4dc:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80c4e0:	e0bffc17 	ldw	r2,-16(fp)
  80c4e4:	10800903 	ldbu	r2,36(r2)
  80c4e8:	10800044 	addi	r2,r2,1
  80c4ec:	1007883a 	mov	r3,r2
  80c4f0:	e0bffc17 	ldw	r2,-16(fp)
  80c4f4:	10c00905 	stb	r3,36(r2)
  80c4f8:	00005606 	br	80c654 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80c4fc:	e0bff907 	ldb	r2,-28(fp)
  80c500:	108006d8 	cmpnei	r2,r2,27
  80c504:	1000031e 	bne	r2,zero,80c514 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80c508:	e0bffc17 	ldw	r2,-16(fp)
  80c50c:	10000905 	stb	zero,36(r2)
  80c510:	00005006 	br	80c654 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80c514:	e0bff907 	ldb	r2,-28(fp)
  80c518:	10800358 	cmpnei	r2,r2,13
  80c51c:	1000031e 	bne	r2,zero,80c52c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80c520:	e0bffc17 	ldw	r2,-16(fp)
  80c524:	10000845 	stb	zero,33(r2)
  80c528:	00004a06 	br	80c654 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80c52c:	e0bff907 	ldb	r2,-28(fp)
  80c530:	10800298 	cmpnei	r2,r2,10
  80c534:	1000101e 	bne	r2,zero,80c578 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80c538:	e0bffc17 	ldw	r2,-16(fp)
  80c53c:	10000845 	stb	zero,33(r2)
      sp->y++;
  80c540:	e0bffc17 	ldw	r2,-16(fp)
  80c544:	10800883 	ldbu	r2,34(r2)
  80c548:	10800044 	addi	r2,r2,1
  80c54c:	1007883a 	mov	r3,r2
  80c550:	e0bffc17 	ldw	r2,-16(fp)
  80c554:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80c558:	e0bffc17 	ldw	r2,-16(fp)
  80c55c:	10800883 	ldbu	r2,34(r2)
  80c560:	10803fcc 	andi	r2,r2,255
  80c564:	108000f0 	cmpltui	r2,r2,3
  80c568:	10003a1e 	bne	r2,zero,80c654 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80c56c:	e13ffc17 	ldw	r4,-16(fp)
  80c570:	080c0440 	call	80c044 <lcd_scroll_up>
  80c574:	00003706 	br	80c654 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80c578:	e0bff907 	ldb	r2,-28(fp)
  80c57c:	10800218 	cmpnei	r2,r2,8
  80c580:	10000b1e 	bne	r2,zero,80c5b0 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80c584:	e0bffc17 	ldw	r2,-16(fp)
  80c588:	10800843 	ldbu	r2,33(r2)
  80c58c:	10803fcc 	andi	r2,r2,255
  80c590:	10003026 	beq	r2,zero,80c654 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80c594:	e0bffc17 	ldw	r2,-16(fp)
  80c598:	10800843 	ldbu	r2,33(r2)
  80c59c:	10bfffc4 	addi	r2,r2,-1
  80c5a0:	1007883a 	mov	r3,r2
  80c5a4:	e0bffc17 	ldw	r2,-16(fp)
  80c5a8:	10c00845 	stb	r3,33(r2)
  80c5ac:	00002906 	br	80c654 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80c5b0:	d0e00f17 	ldw	r3,-32708(gp)
  80c5b4:	e0bff907 	ldb	r2,-28(fp)
  80c5b8:	10800044 	addi	r2,r2,1
  80c5bc:	1885883a 	add	r2,r3,r2
  80c5c0:	10800003 	ldbu	r2,0(r2)
  80c5c4:	10803fcc 	andi	r2,r2,255
  80c5c8:	1080201c 	xori	r2,r2,128
  80c5cc:	10bfe004 	addi	r2,r2,-128
  80c5d0:	108025cc 	andi	r2,r2,151
  80c5d4:	10001f26 	beq	r2,zero,80c654 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80c5d8:	e0bffc17 	ldw	r2,-16(fp)
  80c5dc:	10800883 	ldbu	r2,34(r2)
  80c5e0:	10803fcc 	andi	r2,r2,255
  80c5e4:	108000b0 	cmpltui	r2,r2,2
  80c5e8:	1000021e 	bne	r2,zero,80c5f4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80c5ec:	e13ffc17 	ldw	r4,-16(fp)
  80c5f0:	080c0440 	call	80c044 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80c5f4:	e0bffc17 	ldw	r2,-16(fp)
  80c5f8:	10800843 	ldbu	r2,33(r2)
  80c5fc:	10803fcc 	andi	r2,r2,255
  80c600:	10801428 	cmpgeui	r2,r2,80
  80c604:	10000d1e 	bne	r2,zero,80c63c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80c608:	e0bffc17 	ldw	r2,-16(fp)
  80c60c:	10800883 	ldbu	r2,34(r2)
  80c610:	10c03fcc 	andi	r3,r2,255
  80c614:	e0bffc17 	ldw	r2,-16(fp)
  80c618:	10800843 	ldbu	r2,33(r2)
  80c61c:	10803fcc 	andi	r2,r2,255
  80c620:	e13ffc17 	ldw	r4,-16(fp)
  80c624:	18c018e4 	muli	r3,r3,99
  80c628:	20c7883a 	add	r3,r4,r3
  80c62c:	1885883a 	add	r2,r3,r2
  80c630:	10801004 	addi	r2,r2,64
  80c634:	e0fff903 	ldbu	r3,-28(fp)
  80c638:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80c63c:	e0bffc17 	ldw	r2,-16(fp)
  80c640:	10800843 	ldbu	r2,33(r2)
  80c644:	10800044 	addi	r2,r2,1
  80c648:	1007883a 	mov	r3,r2
  80c64c:	e0bffc17 	ldw	r2,-16(fp)
  80c650:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80c654:	e0bffd17 	ldw	r2,-12(fp)
  80c658:	10800044 	addi	r2,r2,1
  80c65c:	e0bffd15 	stw	r2,-12(fp)
  80c660:	e0fffd17 	ldw	r3,-12(fp)
  80c664:	e0bff817 	ldw	r2,-32(fp)
  80c668:	18bf6436 	bltu	r3,r2,80c3fc <__alt_mem_onchip_mem+0xff8043fc>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80c66c:	00800404 	movi	r2,16
  80c670:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c674:	e03ff515 	stw	zero,-44(fp)
  80c678:	00003706 	br	80c758 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80c67c:	00801404 	movi	r2,80
  80c680:	e0bff715 	stw	r2,-36(fp)
  80c684:	00001106 	br	80c6cc <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80c688:	e0bff717 	ldw	r2,-36(fp)
  80c68c:	10bfffc4 	addi	r2,r2,-1
  80c690:	e13ffc17 	ldw	r4,-16(fp)
  80c694:	e0fff517 	ldw	r3,-44(fp)
  80c698:	18c018e4 	muli	r3,r3,99
  80c69c:	20c7883a 	add	r3,r4,r3
  80c6a0:	1885883a 	add	r2,r3,r2
  80c6a4:	10801004 	addi	r2,r2,64
  80c6a8:	10800003 	ldbu	r2,0(r2)
  80c6ac:	10803fcc 	andi	r2,r2,255
  80c6b0:	1080201c 	xori	r2,r2,128
  80c6b4:	10bfe004 	addi	r2,r2,-128
  80c6b8:	10800820 	cmpeqi	r2,r2,32
  80c6bc:	10000626 	beq	r2,zero,80c6d8 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80c6c0:	e0bff717 	ldw	r2,-36(fp)
  80c6c4:	10bfffc4 	addi	r2,r2,-1
  80c6c8:	e0bff715 	stw	r2,-36(fp)
  80c6cc:	e0bff717 	ldw	r2,-36(fp)
  80c6d0:	00bfed16 	blt	zero,r2,80c688 <__alt_mem_onchip_mem+0xff804688>
  80c6d4:	00000106 	br	80c6dc <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80c6d8:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80c6dc:	e0bff717 	ldw	r2,-36(fp)
  80c6e0:	10800448 	cmpgei	r2,r2,17
  80c6e4:	1000031e 	bne	r2,zero,80c6f4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80c6e8:	00800404 	movi	r2,16
  80c6ec:	e0bff715 	stw	r2,-36(fp)
  80c6f0:	00000306 	br	80c700 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80c6f4:	e0bff717 	ldw	r2,-36(fp)
  80c6f8:	10800044 	addi	r2,r2,1
  80c6fc:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80c700:	e0bff717 	ldw	r2,-36(fp)
  80c704:	1009883a 	mov	r4,r2
  80c708:	e0fffc17 	ldw	r3,-16(fp)
  80c70c:	e0bff517 	ldw	r2,-44(fp)
  80c710:	108018e4 	muli	r2,r2,99
  80c714:	1885883a 	add	r2,r3,r2
  80c718:	10802444 	addi	r2,r2,145
  80c71c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80c720:	e0fff617 	ldw	r3,-40(fp)
  80c724:	e0bff717 	ldw	r2,-36(fp)
  80c728:	1880020e 	bge	r3,r2,80c734 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80c72c:	e0bff717 	ldw	r2,-36(fp)
  80c730:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80c734:	e0fffc17 	ldw	r3,-16(fp)
  80c738:	e0bff517 	ldw	r2,-44(fp)
  80c73c:	108018e4 	muli	r2,r2,99
  80c740:	1885883a 	add	r2,r3,r2
  80c744:	10802484 	addi	r2,r2,146
  80c748:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c74c:	e0bff517 	ldw	r2,-44(fp)
  80c750:	10800044 	addi	r2,r2,1
  80c754:	e0bff515 	stw	r2,-44(fp)
  80c758:	e0bff517 	ldw	r2,-44(fp)
  80c75c:	10800090 	cmplti	r2,r2,2
  80c760:	103fc61e 	bne	r2,zero,80c67c <__alt_mem_onchip_mem+0xff80467c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80c764:	e0bff617 	ldw	r2,-40(fp)
  80c768:	10800448 	cmpgei	r2,r2,17
  80c76c:	1000031e 	bne	r2,zero,80c77c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80c770:	e0bffc17 	ldw	r2,-16(fp)
  80c774:	10000985 	stb	zero,38(r2)
  80c778:	00002e06 	br	80c834 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80c77c:	e0bff617 	ldw	r2,-40(fp)
  80c780:	1085883a 	add	r2,r2,r2
  80c784:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80c788:	e0bff617 	ldw	r2,-40(fp)
  80c78c:	1007883a 	mov	r3,r2
  80c790:	e0bffc17 	ldw	r2,-16(fp)
  80c794:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c798:	e03ff515 	stw	zero,-44(fp)
  80c79c:	00002206 	br	80c828 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80c7a0:	e0fffc17 	ldw	r3,-16(fp)
  80c7a4:	e0bff517 	ldw	r2,-44(fp)
  80c7a8:	108018e4 	muli	r2,r2,99
  80c7ac:	1885883a 	add	r2,r3,r2
  80c7b0:	10802444 	addi	r2,r2,145
  80c7b4:	10800003 	ldbu	r2,0(r2)
  80c7b8:	10803fcc 	andi	r2,r2,255
  80c7bc:	1080201c 	xori	r2,r2,128
  80c7c0:	10bfe004 	addi	r2,r2,-128
  80c7c4:	10800450 	cmplti	r2,r2,17
  80c7c8:	1000141e 	bne	r2,zero,80c81c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80c7cc:	e0fffc17 	ldw	r3,-16(fp)
  80c7d0:	e0bff517 	ldw	r2,-44(fp)
  80c7d4:	108018e4 	muli	r2,r2,99
  80c7d8:	1885883a 	add	r2,r3,r2
  80c7dc:	10802444 	addi	r2,r2,145
  80c7e0:	10800003 	ldbu	r2,0(r2)
  80c7e4:	10803fcc 	andi	r2,r2,255
  80c7e8:	1080201c 	xori	r2,r2,128
  80c7ec:	10bfe004 	addi	r2,r2,-128
  80c7f0:	1004923a 	slli	r2,r2,8
  80c7f4:	e17ff617 	ldw	r5,-40(fp)
  80c7f8:	1009883a 	mov	r4,r2
  80c7fc:	080a5940 	call	80a594 <__divsi3>
  80c800:	1009883a 	mov	r4,r2
  80c804:	e0fffc17 	ldw	r3,-16(fp)
  80c808:	e0bff517 	ldw	r2,-44(fp)
  80c80c:	108018e4 	muli	r2,r2,99
  80c810:	1885883a 	add	r2,r3,r2
  80c814:	10802484 	addi	r2,r2,146
  80c818:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c81c:	e0bff517 	ldw	r2,-44(fp)
  80c820:	10800044 	addi	r2,r2,1
  80c824:	e0bff515 	stw	r2,-44(fp)
  80c828:	e0bff517 	ldw	r2,-44(fp)
  80c82c:	10800090 	cmplti	r2,r2,2
  80c830:	103fdb1e 	bne	r2,zero,80c7a0 <__alt_mem_onchip_mem+0xff8047a0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80c834:	e0bffc17 	ldw	r2,-16(fp)
  80c838:	10800943 	ldbu	r2,37(r2)
  80c83c:	10803fcc 	andi	r2,r2,255
  80c840:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80c844:	e13ffc17 	ldw	r4,-16(fp)
  80c848:	080be580 	call	80be58 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80c84c:	e0bffc17 	ldw	r2,-16(fp)
  80c850:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80c854:	e0bffc17 	ldw	r2,-16(fp)
  80c858:	10800943 	ldbu	r2,37(r2)
  80c85c:	10c03fcc 	andi	r3,r2,255
  80c860:	e0bffb17 	ldw	r2,-20(fp)
  80c864:	18800426 	beq	r3,r2,80c878 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80c868:	e0bffc17 	ldw	r2,-16(fp)
  80c86c:	00c00044 	movi	r3,1
  80c870:	10c009c5 	stb	r3,39(r2)
  }
  80c874:	003fef06 	br	80c834 <__alt_mem_onchip_mem+0xff804834>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80c878:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80c87c:	e0bffe17 	ldw	r2,-8(fp)
}
  80c880:	e037883a 	mov	sp,fp
  80c884:	dfc00117 	ldw	ra,4(sp)
  80c888:	df000017 	ldw	fp,0(sp)
  80c88c:	dec00204 	addi	sp,sp,8
  80c890:	f800283a 	ret

0080c894 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80c894:	defffc04 	addi	sp,sp,-16
  80c898:	dfc00315 	stw	ra,12(sp)
  80c89c:	df000215 	stw	fp,8(sp)
  80c8a0:	df000204 	addi	fp,sp,8
  80c8a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80c8a8:	e0bfff17 	ldw	r2,-4(fp)
  80c8ac:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80c8b0:	e0bffe17 	ldw	r2,-8(fp)
  80c8b4:	10800943 	ldbu	r2,37(r2)
  80c8b8:	10803fcc 	andi	r2,r2,255
  80c8bc:	10c00044 	addi	r3,r2,1
  80c8c0:	e0bffe17 	ldw	r2,-8(fp)
  80c8c4:	10800983 	ldbu	r2,38(r2)
  80c8c8:	10803fcc 	andi	r2,r2,255
  80c8cc:	18800316 	blt	r3,r2,80c8dc <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80c8d0:	e0bffe17 	ldw	r2,-8(fp)
  80c8d4:	10000945 	stb	zero,37(r2)
  80c8d8:	00000606 	br	80c8f4 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80c8dc:	e0bffe17 	ldw	r2,-8(fp)
  80c8e0:	10800943 	ldbu	r2,37(r2)
  80c8e4:	10800044 	addi	r2,r2,1
  80c8e8:	1007883a 	mov	r3,r2
  80c8ec:	e0bffe17 	ldw	r2,-8(fp)
  80c8f0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80c8f4:	e0bffe17 	ldw	r2,-8(fp)
  80c8f8:	10800983 	ldbu	r2,38(r2)
  80c8fc:	10803fcc 	andi	r2,r2,255
  80c900:	10000826 	beq	r2,zero,80c924 <alt_lcd_16207_timeout+0x90>
  80c904:	e0bffe17 	ldw	r2,-8(fp)
  80c908:	108009c3 	ldbu	r2,39(r2)
  80c90c:	10803fcc 	andi	r2,r2,255
  80c910:	1080201c 	xori	r2,r2,128
  80c914:	10bfe004 	addi	r2,r2,-128
  80c918:	1000021e 	bne	r2,zero,80c924 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80c91c:	e13ffe17 	ldw	r4,-8(fp)
  80c920:	080be580 	call	80be58 <lcd_repaint_screen>

  return sp->period;
  80c924:	e0bffe17 	ldw	r2,-8(fp)
  80c928:	10800717 	ldw	r2,28(r2)
}
  80c92c:	e037883a 	mov	sp,fp
  80c930:	dfc00117 	ldw	ra,4(sp)
  80c934:	df000017 	ldw	fp,0(sp)
  80c938:	dec00204 	addi	sp,sp,8
  80c93c:	f800283a 	ret

0080c940 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80c940:	defffc04 	addi	sp,sp,-16
  80c944:	dfc00315 	stw	ra,12(sp)
  80c948:	df000215 	stw	fp,8(sp)
  80c94c:	df000204 	addi	fp,sp,8
  80c950:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80c954:	e0bfff17 	ldw	r2,-4(fp)
  80c958:	10800017 	ldw	r2,0(r2)
  80c95c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80c960:	e0bfff17 	ldw	r2,-4(fp)
  80c964:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80c968:	010ea604 	movi	r4,15000
  80c96c:	080dfc00 	call	80dfc0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c970:	e0bffe17 	ldw	r2,-8(fp)
  80c974:	00c00c04 	movi	r3,48
  80c978:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80c97c:	01040104 	movi	r4,4100
  80c980:	080dfc00 	call	80dfc0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c984:	e0bffe17 	ldw	r2,-8(fp)
  80c988:	00c00c04 	movi	r3,48
  80c98c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80c990:	0100fa04 	movi	r4,1000
  80c994:	080dfc00 	call	80dfc0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c998:	e0bffe17 	ldw	r2,-8(fp)
  80c99c:	00c00c04 	movi	r3,48
  80c9a0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80c9a4:	01400e04 	movi	r5,56
  80c9a8:	e13fff17 	ldw	r4,-4(fp)
  80c9ac:	080bbf80 	call	80bbf8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80c9b0:	01400204 	movi	r5,8
  80c9b4:	e13fff17 	ldw	r4,-4(fp)
  80c9b8:	080bbf80 	call	80bbf8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80c9bc:	e13fff17 	ldw	r4,-4(fp)
  80c9c0:	080bd880 	call	80bd88 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80c9c4:	01400184 	movi	r5,6
  80c9c8:	e13fff17 	ldw	r4,-4(fp)
  80c9cc:	080bbf80 	call	80bbf8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80c9d0:	01400304 	movi	r5,12
  80c9d4:	e13fff17 	ldw	r4,-4(fp)
  80c9d8:	080bbf80 	call	80bbf8 <lcd_write_command>

  sp->esccount = -1;
  80c9dc:	e0bfff17 	ldw	r2,-4(fp)
  80c9e0:	00ffffc4 	movi	r3,-1
  80c9e4:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80c9e8:	e0bfff17 	ldw	r2,-4(fp)
  80c9ec:	10800a04 	addi	r2,r2,40
  80c9f0:	01800204 	movi	r6,8
  80c9f4:	000b883a 	mov	r5,zero
  80c9f8:	1009883a 	mov	r4,r2
  80c9fc:	08090640 	call	809064 <memset>

  sp->scrollpos = 0;
  80ca00:	e0bfff17 	ldw	r2,-4(fp)
  80ca04:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80ca08:	e0bfff17 	ldw	r2,-4(fp)
  80ca0c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80ca10:	e0bfff17 	ldw	r2,-4(fp)
  80ca14:	100009c5 	stb	zero,39(r2)
  80ca18:	d0a72e17 	ldw	r2,-25416(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80ca1c:	01400284 	movi	r5,10
  80ca20:	1009883a 	mov	r4,r2
  80ca24:	080a68c0 	call	80a68c <__udivsi3>
  80ca28:	1007883a 	mov	r3,r2
  80ca2c:	e0bfff17 	ldw	r2,-4(fp)
  80ca30:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80ca34:	e0bfff17 	ldw	r2,-4(fp)
  80ca38:	10c00104 	addi	r3,r2,4
  80ca3c:	e0bfff17 	ldw	r2,-4(fp)
  80ca40:	10800717 	ldw	r2,28(r2)
  80ca44:	e1ffff17 	ldw	r7,-4(fp)
  80ca48:	01802074 	movhi	r6,129
  80ca4c:	31b22504 	addi	r6,r6,-14188
  80ca50:	100b883a 	mov	r5,r2
  80ca54:	1809883a 	mov	r4,r3
  80ca58:	080d4a00 	call	80d4a0 <alt_alarm_start>
}
  80ca5c:	0001883a 	nop
  80ca60:	e037883a 	mov	sp,fp
  80ca64:	dfc00117 	ldw	ra,4(sp)
  80ca68:	df000017 	ldw	fp,0(sp)
  80ca6c:	dec00204 	addi	sp,sp,8
  80ca70:	f800283a 	ret

0080ca74 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ca74:	defffa04 	addi	sp,sp,-24
  80ca78:	dfc00515 	stw	ra,20(sp)
  80ca7c:	df000415 	stw	fp,16(sp)
  80ca80:	df000404 	addi	fp,sp,16
  80ca84:	e13ffd15 	stw	r4,-12(fp)
  80ca88:	e17ffe15 	stw	r5,-8(fp)
  80ca8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80ca90:	e0bffd17 	ldw	r2,-12(fp)
  80ca94:	10800017 	ldw	r2,0(r2)
  80ca98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80ca9c:	e0bffc17 	ldw	r2,-16(fp)
  80caa0:	10c00a04 	addi	r3,r2,40
  80caa4:	e0bffd17 	ldw	r2,-12(fp)
  80caa8:	10800217 	ldw	r2,8(r2)
  80caac:	100f883a 	mov	r7,r2
  80cab0:	e1bfff17 	ldw	r6,-4(fp)
  80cab4:	e17ffe17 	ldw	r5,-8(fp)
  80cab8:	1809883a 	mov	r4,r3
  80cabc:	080c3bc0 	call	80c3bc <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80cac0:	e037883a 	mov	sp,fp
  80cac4:	dfc00117 	ldw	ra,4(sp)
  80cac8:	df000017 	ldw	fp,0(sp)
  80cacc:	dec00204 	addi	sp,sp,8
  80cad0:	f800283a 	ret

0080cad4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80cad4:	defffa04 	addi	sp,sp,-24
  80cad8:	dfc00515 	stw	ra,20(sp)
  80cadc:	df000415 	stw	fp,16(sp)
  80cae0:	df000404 	addi	fp,sp,16
  80cae4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80cae8:	0007883a 	mov	r3,zero
  80caec:	e0bfff17 	ldw	r2,-4(fp)
  80caf0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80caf4:	e0bfff17 	ldw	r2,-4(fp)
  80caf8:	10800104 	addi	r2,r2,4
  80cafc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cb00:	0005303a 	rdctl	r2,status
  80cb04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cb08:	e0fffd17 	ldw	r3,-12(fp)
  80cb0c:	00bfff84 	movi	r2,-2
  80cb10:	1884703a 	and	r2,r3,r2
  80cb14:	1001703a 	wrctl	status,r2
  
  return context;
  80cb18:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80cb1c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80cb20:	080deb80 	call	80deb8 <alt_tick>
  80cb24:	e0bffc17 	ldw	r2,-16(fp)
  80cb28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb2c:	e0bffe17 	ldw	r2,-8(fp)
  80cb30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80cb34:	0001883a 	nop
  80cb38:	e037883a 	mov	sp,fp
  80cb3c:	dfc00117 	ldw	ra,4(sp)
  80cb40:	df000017 	ldw	fp,0(sp)
  80cb44:	dec00204 	addi	sp,sp,8
  80cb48:	f800283a 	ret

0080cb4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80cb4c:	defff804 	addi	sp,sp,-32
  80cb50:	dfc00715 	stw	ra,28(sp)
  80cb54:	df000615 	stw	fp,24(sp)
  80cb58:	df000604 	addi	fp,sp,24
  80cb5c:	e13ffc15 	stw	r4,-16(fp)
  80cb60:	e17ffd15 	stw	r5,-12(fp)
  80cb64:	e1bffe15 	stw	r6,-8(fp)
  80cb68:	e1ffff15 	stw	r7,-4(fp)
  80cb6c:	e0bfff17 	ldw	r2,-4(fp)
  80cb70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80cb74:	d0a72e17 	ldw	r2,-25416(gp)
  80cb78:	1000021e 	bne	r2,zero,80cb84 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80cb7c:	e0bffb17 	ldw	r2,-20(fp)
  80cb80:	d0a72e15 	stw	r2,-25416(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80cb84:	e0bffc17 	ldw	r2,-16(fp)
  80cb88:	10800104 	addi	r2,r2,4
  80cb8c:	00c001c4 	movi	r3,7
  80cb90:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80cb94:	d8000015 	stw	zero,0(sp)
  80cb98:	e1fffc17 	ldw	r7,-16(fp)
  80cb9c:	01802074 	movhi	r6,129
  80cba0:	31b2b504 	addi	r6,r6,-13612
  80cba4:	e17ffe17 	ldw	r5,-8(fp)
  80cba8:	e13ffd17 	ldw	r4,-12(fp)
  80cbac:	080d7e80 	call	80d7e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80cbb0:	0001883a 	nop
  80cbb4:	e037883a 	mov	sp,fp
  80cbb8:	dfc00117 	ldw	ra,4(sp)
  80cbbc:	df000017 	ldw	fp,0(sp)
  80cbc0:	dec00204 	addi	sp,sp,8
  80cbc4:	f800283a 	ret

0080cbc8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80cbc8:	defffa04 	addi	sp,sp,-24
  80cbcc:	dfc00515 	stw	ra,20(sp)
  80cbd0:	df000415 	stw	fp,16(sp)
  80cbd4:	df000404 	addi	fp,sp,16
  80cbd8:	e13ffd15 	stw	r4,-12(fp)
  80cbdc:	e17ffe15 	stw	r5,-8(fp)
  80cbe0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cbe4:	e0bffd17 	ldw	r2,-12(fp)
  80cbe8:	10800017 	ldw	r2,0(r2)
  80cbec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80cbf0:	e0bffc17 	ldw	r2,-16(fp)
  80cbf4:	10c00a04 	addi	r3,r2,40
  80cbf8:	e0bffd17 	ldw	r2,-12(fp)
  80cbfc:	10800217 	ldw	r2,8(r2)
  80cc00:	100f883a 	mov	r7,r2
  80cc04:	e1bfff17 	ldw	r6,-4(fp)
  80cc08:	e17ffe17 	ldw	r5,-8(fp)
  80cc0c:	1809883a 	mov	r4,r3
  80cc10:	080d0dc0 	call	80d0dc <altera_avalon_uart_read>
      fd->fd_flags);
}
  80cc14:	e037883a 	mov	sp,fp
  80cc18:	dfc00117 	ldw	ra,4(sp)
  80cc1c:	df000017 	ldw	fp,0(sp)
  80cc20:	dec00204 	addi	sp,sp,8
  80cc24:	f800283a 	ret

0080cc28 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80cc28:	defffa04 	addi	sp,sp,-24
  80cc2c:	dfc00515 	stw	ra,20(sp)
  80cc30:	df000415 	stw	fp,16(sp)
  80cc34:	df000404 	addi	fp,sp,16
  80cc38:	e13ffd15 	stw	r4,-12(fp)
  80cc3c:	e17ffe15 	stw	r5,-8(fp)
  80cc40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cc44:	e0bffd17 	ldw	r2,-12(fp)
  80cc48:	10800017 	ldw	r2,0(r2)
  80cc4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80cc50:	e0bffc17 	ldw	r2,-16(fp)
  80cc54:	10c00a04 	addi	r3,r2,40
  80cc58:	e0bffd17 	ldw	r2,-12(fp)
  80cc5c:	10800217 	ldw	r2,8(r2)
  80cc60:	100f883a 	mov	r7,r2
  80cc64:	e1bfff17 	ldw	r6,-4(fp)
  80cc68:	e17ffe17 	ldw	r5,-8(fp)
  80cc6c:	1809883a 	mov	r4,r3
  80cc70:	080d2f40 	call	80d2f4 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80cc74:	e037883a 	mov	sp,fp
  80cc78:	dfc00117 	ldw	ra,4(sp)
  80cc7c:	df000017 	ldw	fp,0(sp)
  80cc80:	dec00204 	addi	sp,sp,8
  80cc84:	f800283a 	ret

0080cc88 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80cc88:	defffc04 	addi	sp,sp,-16
  80cc8c:	dfc00315 	stw	ra,12(sp)
  80cc90:	df000215 	stw	fp,8(sp)
  80cc94:	df000204 	addi	fp,sp,8
  80cc98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cc9c:	e0bfff17 	ldw	r2,-4(fp)
  80cca0:	10800017 	ldw	r2,0(r2)
  80cca4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80cca8:	e0bffe17 	ldw	r2,-8(fp)
  80ccac:	10c00a04 	addi	r3,r2,40
  80ccb0:	e0bfff17 	ldw	r2,-4(fp)
  80ccb4:	10800217 	ldw	r2,8(r2)
  80ccb8:	100b883a 	mov	r5,r2
  80ccbc:	1809883a 	mov	r4,r3
  80ccc0:	080d04c0 	call	80d04c <altera_avalon_uart_close>
}
  80ccc4:	e037883a 	mov	sp,fp
  80ccc8:	dfc00117 	ldw	ra,4(sp)
  80cccc:	df000017 	ldw	fp,0(sp)
  80ccd0:	dec00204 	addi	sp,sp,8
  80ccd4:	f800283a 	ret

0080ccd8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80ccd8:	defff804 	addi	sp,sp,-32
  80ccdc:	dfc00715 	stw	ra,28(sp)
  80cce0:	df000615 	stw	fp,24(sp)
  80cce4:	df000604 	addi	fp,sp,24
  80cce8:	e13ffd15 	stw	r4,-12(fp)
  80ccec:	e17ffe15 	stw	r5,-8(fp)
  80ccf0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80ccf4:	e0bffd17 	ldw	r2,-12(fp)
  80ccf8:	10800017 	ldw	r2,0(r2)
  80ccfc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80cd00:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80cd04:	1000041e 	bne	r2,zero,80cd18 <altera_avalon_uart_init+0x40>
  80cd08:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80cd0c:	1000021e 	bne	r2,zero,80cd18 <altera_avalon_uart_init+0x40>
  80cd10:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80cd14:	10000226 	beq	r2,zero,80cd20 <altera_avalon_uart_init+0x48>
  80cd18:	00800044 	movi	r2,1
  80cd1c:	00000106 	br	80cd24 <altera_avalon_uart_init+0x4c>
  80cd20:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80cd24:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80cd28:	e0bffc17 	ldw	r2,-16(fp)
  80cd2c:	10000f1e 	bne	r2,zero,80cd6c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80cd30:	e0bffd17 	ldw	r2,-12(fp)
  80cd34:	00c32004 	movi	r3,3200
  80cd38:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80cd3c:	e0bffb17 	ldw	r2,-20(fp)
  80cd40:	10800304 	addi	r2,r2,12
  80cd44:	e0fffd17 	ldw	r3,-12(fp)
  80cd48:	18c00117 	ldw	r3,4(r3)
  80cd4c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80cd50:	d8000015 	stw	zero,0(sp)
  80cd54:	e1fffd17 	ldw	r7,-12(fp)
  80cd58:	01802074 	movhi	r6,129
  80cd5c:	31b36104 	addi	r6,r6,-12924
  80cd60:	e17fff17 	ldw	r5,-4(fp)
  80cd64:	e13ffe17 	ldw	r4,-8(fp)
  80cd68:	080d7e80 	call	80d7e8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80cd6c:	0001883a 	nop
  80cd70:	e037883a 	mov	sp,fp
  80cd74:	dfc00117 	ldw	ra,4(sp)
  80cd78:	df000017 	ldw	fp,0(sp)
  80cd7c:	dec00204 	addi	sp,sp,8
  80cd80:	f800283a 	ret

0080cd84 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80cd84:	defffa04 	addi	sp,sp,-24
  80cd88:	dfc00515 	stw	ra,20(sp)
  80cd8c:	df000415 	stw	fp,16(sp)
  80cd90:	df000404 	addi	fp,sp,16
  80cd94:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80cd98:	e0bfff17 	ldw	r2,-4(fp)
  80cd9c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80cda0:	e0bffc17 	ldw	r2,-16(fp)
  80cda4:	10800017 	ldw	r2,0(r2)
  80cda8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80cdac:	e0bffd17 	ldw	r2,-12(fp)
  80cdb0:	10800204 	addi	r2,r2,8
  80cdb4:	10800037 	ldwio	r2,0(r2)
  80cdb8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80cdbc:	e0bffd17 	ldw	r2,-12(fp)
  80cdc0:	10800204 	addi	r2,r2,8
  80cdc4:	0007883a 	mov	r3,zero
  80cdc8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80cdcc:	e0bffd17 	ldw	r2,-12(fp)
  80cdd0:	10800204 	addi	r2,r2,8
  80cdd4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80cdd8:	e0bffe17 	ldw	r2,-8(fp)
  80cddc:	1080200c 	andi	r2,r2,128
  80cde0:	10000326 	beq	r2,zero,80cdf0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80cde4:	e17ffe17 	ldw	r5,-8(fp)
  80cde8:	e13ffc17 	ldw	r4,-16(fp)
  80cdec:	080ce200 	call	80ce20 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80cdf0:	e0bffe17 	ldw	r2,-8(fp)
  80cdf4:	1081100c 	andi	r2,r2,1088
  80cdf8:	10000326 	beq	r2,zero,80ce08 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80cdfc:	e17ffe17 	ldw	r5,-8(fp)
  80ce00:	e13ffc17 	ldw	r4,-16(fp)
  80ce04:	080cf040 	call	80cf04 <altera_avalon_uart_txirq>
  }
  

}
  80ce08:	0001883a 	nop
  80ce0c:	e037883a 	mov	sp,fp
  80ce10:	dfc00117 	ldw	ra,4(sp)
  80ce14:	df000017 	ldw	fp,0(sp)
  80ce18:	dec00204 	addi	sp,sp,8
  80ce1c:	f800283a 	ret

0080ce20 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80ce20:	defffc04 	addi	sp,sp,-16
  80ce24:	df000315 	stw	fp,12(sp)
  80ce28:	df000304 	addi	fp,sp,12
  80ce2c:	e13ffe15 	stw	r4,-8(fp)
  80ce30:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80ce34:	e0bfff17 	ldw	r2,-4(fp)
  80ce38:	108000cc 	andi	r2,r2,3
  80ce3c:	10002c1e 	bne	r2,zero,80cef0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80ce40:	e0bffe17 	ldw	r2,-8(fp)
  80ce44:	10800317 	ldw	r2,12(r2)
  80ce48:	e0bffe17 	ldw	r2,-8(fp)
  80ce4c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ce50:	e0bffe17 	ldw	r2,-8(fp)
  80ce54:	10800317 	ldw	r2,12(r2)
  80ce58:	10800044 	addi	r2,r2,1
  80ce5c:	10800fcc 	andi	r2,r2,63
  80ce60:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80ce64:	e0bffe17 	ldw	r2,-8(fp)
  80ce68:	10800317 	ldw	r2,12(r2)
  80ce6c:	e0fffe17 	ldw	r3,-8(fp)
  80ce70:	18c00017 	ldw	r3,0(r3)
  80ce74:	18c00037 	ldwio	r3,0(r3)
  80ce78:	1809883a 	mov	r4,r3
  80ce7c:	e0fffe17 	ldw	r3,-8(fp)
  80ce80:	1885883a 	add	r2,r3,r2
  80ce84:	10800704 	addi	r2,r2,28
  80ce88:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80ce8c:	e0bffe17 	ldw	r2,-8(fp)
  80ce90:	e0fffd17 	ldw	r3,-12(fp)
  80ce94:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ce98:	e0bffe17 	ldw	r2,-8(fp)
  80ce9c:	10800317 	ldw	r2,12(r2)
  80cea0:	10800044 	addi	r2,r2,1
  80cea4:	10800fcc 	andi	r2,r2,63
  80cea8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80ceac:	e0bffe17 	ldw	r2,-8(fp)
  80ceb0:	10c00217 	ldw	r3,8(r2)
  80ceb4:	e0bffd17 	ldw	r2,-12(fp)
  80ceb8:	18800e1e 	bne	r3,r2,80cef4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80cebc:	e0bffe17 	ldw	r2,-8(fp)
  80cec0:	10c00117 	ldw	r3,4(r2)
  80cec4:	00bfdfc4 	movi	r2,-129
  80cec8:	1886703a 	and	r3,r3,r2
  80cecc:	e0bffe17 	ldw	r2,-8(fp)
  80ced0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80ced4:	e0bffe17 	ldw	r2,-8(fp)
  80ced8:	10800017 	ldw	r2,0(r2)
  80cedc:	10800304 	addi	r2,r2,12
  80cee0:	e0fffe17 	ldw	r3,-8(fp)
  80cee4:	18c00117 	ldw	r3,4(r3)
  80cee8:	10c00035 	stwio	r3,0(r2)
  80ceec:	00000106 	br	80cef4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80cef0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80cef4:	e037883a 	mov	sp,fp
  80cef8:	df000017 	ldw	fp,0(sp)
  80cefc:	dec00104 	addi	sp,sp,4
  80cf00:	f800283a 	ret

0080cf04 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80cf04:	defffb04 	addi	sp,sp,-20
  80cf08:	df000415 	stw	fp,16(sp)
  80cf0c:	df000404 	addi	fp,sp,16
  80cf10:	e13ffc15 	stw	r4,-16(fp)
  80cf14:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80cf18:	e0bffc17 	ldw	r2,-16(fp)
  80cf1c:	10c00417 	ldw	r3,16(r2)
  80cf20:	e0bffc17 	ldw	r2,-16(fp)
  80cf24:	10800517 	ldw	r2,20(r2)
  80cf28:	18803226 	beq	r3,r2,80cff4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80cf2c:	e0bffc17 	ldw	r2,-16(fp)
  80cf30:	10800617 	ldw	r2,24(r2)
  80cf34:	1080008c 	andi	r2,r2,2
  80cf38:	10000326 	beq	r2,zero,80cf48 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80cf3c:	e0bffd17 	ldw	r2,-12(fp)
  80cf40:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80cf44:	10001d26 	beq	r2,zero,80cfbc <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80cf48:	e0bffc17 	ldw	r2,-16(fp)
  80cf4c:	10800417 	ldw	r2,16(r2)
  80cf50:	e0bffc17 	ldw	r2,-16(fp)
  80cf54:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80cf58:	e0bffc17 	ldw	r2,-16(fp)
  80cf5c:	10800017 	ldw	r2,0(r2)
  80cf60:	10800104 	addi	r2,r2,4
  80cf64:	e0fffc17 	ldw	r3,-16(fp)
  80cf68:	18c00417 	ldw	r3,16(r3)
  80cf6c:	e13ffc17 	ldw	r4,-16(fp)
  80cf70:	20c7883a 	add	r3,r4,r3
  80cf74:	18c01704 	addi	r3,r3,92
  80cf78:	18c00003 	ldbu	r3,0(r3)
  80cf7c:	18c03fcc 	andi	r3,r3,255
  80cf80:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80cf84:	e0bffc17 	ldw	r2,-16(fp)
  80cf88:	10800417 	ldw	r2,16(r2)
  80cf8c:	10800044 	addi	r2,r2,1
  80cf90:	e0fffc17 	ldw	r3,-16(fp)
  80cf94:	18800415 	stw	r2,16(r3)
  80cf98:	10c00fcc 	andi	r3,r2,63
  80cf9c:	e0bffc17 	ldw	r2,-16(fp)
  80cfa0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80cfa4:	e0bffc17 	ldw	r2,-16(fp)
  80cfa8:	10800117 	ldw	r2,4(r2)
  80cfac:	10c01014 	ori	r3,r2,64
  80cfb0:	e0bffc17 	ldw	r2,-16(fp)
  80cfb4:	10c00115 	stw	r3,4(r2)
  80cfb8:	00000e06 	br	80cff4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80cfbc:	e0bffc17 	ldw	r2,-16(fp)
  80cfc0:	10800017 	ldw	r2,0(r2)
  80cfc4:	10800204 	addi	r2,r2,8
  80cfc8:	10800037 	ldwio	r2,0(r2)
  80cfcc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80cfd0:	e0bffd17 	ldw	r2,-12(fp)
  80cfd4:	1082000c 	andi	r2,r2,2048
  80cfd8:	1000061e 	bne	r2,zero,80cff4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80cfdc:	e0bffc17 	ldw	r2,-16(fp)
  80cfe0:	10c00117 	ldw	r3,4(r2)
  80cfe4:	00bfefc4 	movi	r2,-65
  80cfe8:	1886703a 	and	r3,r3,r2
  80cfec:	e0bffc17 	ldw	r2,-16(fp)
  80cff0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80cff4:	e0bffc17 	ldw	r2,-16(fp)
  80cff8:	10c00417 	ldw	r3,16(r2)
  80cffc:	e0bffc17 	ldw	r2,-16(fp)
  80d000:	10800517 	ldw	r2,20(r2)
  80d004:	1880061e 	bne	r3,r2,80d020 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d008:	e0bffc17 	ldw	r2,-16(fp)
  80d00c:	10c00117 	ldw	r3,4(r2)
  80d010:	00beefc4 	movi	r2,-1089
  80d014:	1886703a 	and	r3,r3,r2
  80d018:	e0bffc17 	ldw	r2,-16(fp)
  80d01c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d020:	e0bffc17 	ldw	r2,-16(fp)
  80d024:	10800017 	ldw	r2,0(r2)
  80d028:	10800304 	addi	r2,r2,12
  80d02c:	e0fffc17 	ldw	r3,-16(fp)
  80d030:	18c00117 	ldw	r3,4(r3)
  80d034:	10c00035 	stwio	r3,0(r2)
}
  80d038:	0001883a 	nop
  80d03c:	e037883a 	mov	sp,fp
  80d040:	df000017 	ldw	fp,0(sp)
  80d044:	dec00104 	addi	sp,sp,4
  80d048:	f800283a 	ret

0080d04c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80d04c:	defffd04 	addi	sp,sp,-12
  80d050:	df000215 	stw	fp,8(sp)
  80d054:	df000204 	addi	fp,sp,8
  80d058:	e13ffe15 	stw	r4,-8(fp)
  80d05c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d060:	00000506 	br	80d078 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80d064:	e0bfff17 	ldw	r2,-4(fp)
  80d068:	1090000c 	andi	r2,r2,16384
  80d06c:	10000226 	beq	r2,zero,80d078 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80d070:	00bffd44 	movi	r2,-11
  80d074:	00000606 	br	80d090 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d078:	e0bffe17 	ldw	r2,-8(fp)
  80d07c:	10c00417 	ldw	r3,16(r2)
  80d080:	e0bffe17 	ldw	r2,-8(fp)
  80d084:	10800517 	ldw	r2,20(r2)
  80d088:	18bff61e 	bne	r3,r2,80d064 <__alt_mem_onchip_mem+0xff805064>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d08c:	0005883a 	mov	r2,zero
}
  80d090:	e037883a 	mov	sp,fp
  80d094:	df000017 	ldw	fp,0(sp)
  80d098:	dec00104 	addi	sp,sp,4
  80d09c:	f800283a 	ret

0080d0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d0a0:	defffe04 	addi	sp,sp,-8
  80d0a4:	dfc00115 	stw	ra,4(sp)
  80d0a8:	df000015 	stw	fp,0(sp)
  80d0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d0b0:	d0a00917 	ldw	r2,-32732(gp)
  80d0b4:	10000326 	beq	r2,zero,80d0c4 <alt_get_errno+0x24>
  80d0b8:	d0a00917 	ldw	r2,-32732(gp)
  80d0bc:	103ee83a 	callr	r2
  80d0c0:	00000106 	br	80d0c8 <alt_get_errno+0x28>
  80d0c4:	d0a72904 	addi	r2,gp,-25436
}
  80d0c8:	e037883a 	mov	sp,fp
  80d0cc:	dfc00117 	ldw	ra,4(sp)
  80d0d0:	df000017 	ldw	fp,0(sp)
  80d0d4:	dec00204 	addi	sp,sp,8
  80d0d8:	f800283a 	ret

0080d0dc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80d0dc:	defff204 	addi	sp,sp,-56
  80d0e0:	dfc00d15 	stw	ra,52(sp)
  80d0e4:	df000c15 	stw	fp,48(sp)
  80d0e8:	df000c04 	addi	fp,sp,48
  80d0ec:	e13ffc15 	stw	r4,-16(fp)
  80d0f0:	e17ffd15 	stw	r5,-12(fp)
  80d0f4:	e1bffe15 	stw	r6,-8(fp)
  80d0f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80d0fc:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80d100:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80d104:	e0bfff17 	ldw	r2,-4(fp)
  80d108:	1090000c 	andi	r2,r2,16384
  80d10c:	1005003a 	cmpeq	r2,r2,zero
  80d110:	10803fcc 	andi	r2,r2,255
  80d114:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d118:	00001306 	br	80d168 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80d11c:	e0bff517 	ldw	r2,-44(fp)
  80d120:	10800044 	addi	r2,r2,1
  80d124:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80d128:	e0bffd17 	ldw	r2,-12(fp)
  80d12c:	10c00044 	addi	r3,r2,1
  80d130:	e0fffd15 	stw	r3,-12(fp)
  80d134:	e0fffc17 	ldw	r3,-16(fp)
  80d138:	18c00217 	ldw	r3,8(r3)
  80d13c:	e13ffc17 	ldw	r4,-16(fp)
  80d140:	20c7883a 	add	r3,r4,r3
  80d144:	18c00704 	addi	r3,r3,28
  80d148:	18c00003 	ldbu	r3,0(r3)
  80d14c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80d150:	e0bffc17 	ldw	r2,-16(fp)
  80d154:	10800217 	ldw	r2,8(r2)
  80d158:	10800044 	addi	r2,r2,1
  80d15c:	10c00fcc 	andi	r3,r2,63
  80d160:	e0bffc17 	ldw	r2,-16(fp)
  80d164:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d168:	e0fff517 	ldw	r3,-44(fp)
  80d16c:	e0bffe17 	ldw	r2,-8(fp)
  80d170:	1880050e 	bge	r3,r2,80d188 <altera_avalon_uart_read+0xac>
  80d174:	e0bffc17 	ldw	r2,-16(fp)
  80d178:	10c00217 	ldw	r3,8(r2)
  80d17c:	e0bffc17 	ldw	r2,-16(fp)
  80d180:	10800317 	ldw	r2,12(r2)
  80d184:	18bfe51e 	bne	r3,r2,80d11c <__alt_mem_onchip_mem+0xff80511c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80d188:	e0bff517 	ldw	r2,-44(fp)
  80d18c:	1000251e 	bne	r2,zero,80d224 <altera_avalon_uart_read+0x148>
  80d190:	e0bffc17 	ldw	r2,-16(fp)
  80d194:	10c00217 	ldw	r3,8(r2)
  80d198:	e0bffc17 	ldw	r2,-16(fp)
  80d19c:	10800317 	ldw	r2,12(r2)
  80d1a0:	1880201e 	bne	r3,r2,80d224 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80d1a4:	e0bff617 	ldw	r2,-40(fp)
  80d1a8:	1000071e 	bne	r2,zero,80d1c8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80d1ac:	080d0a00 	call	80d0a0 <alt_get_errno>
  80d1b0:	1007883a 	mov	r3,r2
  80d1b4:	008002c4 	movi	r2,11
  80d1b8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80d1bc:	00800044 	movi	r2,1
  80d1c0:	e0bff405 	stb	r2,-48(fp)
        break;
  80d1c4:	00001b06 	br	80d234 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d1c8:	0005303a 	rdctl	r2,status
  80d1cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d1d0:	e0fff917 	ldw	r3,-28(fp)
  80d1d4:	00bfff84 	movi	r2,-2
  80d1d8:	1884703a 	and	r2,r3,r2
  80d1dc:	1001703a 	wrctl	status,r2
  
  return context;
  80d1e0:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80d1e4:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d1e8:	e0bffc17 	ldw	r2,-16(fp)
  80d1ec:	10800117 	ldw	r2,4(r2)
  80d1f0:	10c02014 	ori	r3,r2,128
  80d1f4:	e0bffc17 	ldw	r2,-16(fp)
  80d1f8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d1fc:	e0bffc17 	ldw	r2,-16(fp)
  80d200:	10800017 	ldw	r2,0(r2)
  80d204:	10800304 	addi	r2,r2,12
  80d208:	e0fffc17 	ldw	r3,-16(fp)
  80d20c:	18c00117 	ldw	r3,4(r3)
  80d210:	10c00035 	stwio	r3,0(r2)
  80d214:	e0bff817 	ldw	r2,-32(fp)
  80d218:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d21c:	e0bffa17 	ldw	r2,-24(fp)
  80d220:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80d224:	e0bff517 	ldw	r2,-44(fp)
  80d228:	1000021e 	bne	r2,zero,80d234 <altera_avalon_uart_read+0x158>
  80d22c:	e0bffe17 	ldw	r2,-8(fp)
  80d230:	103fcd1e 	bne	r2,zero,80d168 <__alt_mem_onchip_mem+0xff805168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d234:	0005303a 	rdctl	r2,status
  80d238:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d23c:	e0fffb17 	ldw	r3,-20(fp)
  80d240:	00bfff84 	movi	r2,-2
  80d244:	1884703a 	and	r2,r3,r2
  80d248:	1001703a 	wrctl	status,r2
  
  return context;
  80d24c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80d250:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d254:	e0bffc17 	ldw	r2,-16(fp)
  80d258:	10800117 	ldw	r2,4(r2)
  80d25c:	10c02014 	ori	r3,r2,128
  80d260:	e0bffc17 	ldw	r2,-16(fp)
  80d264:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d268:	e0bffc17 	ldw	r2,-16(fp)
  80d26c:	10800017 	ldw	r2,0(r2)
  80d270:	10800304 	addi	r2,r2,12
  80d274:	e0fffc17 	ldw	r3,-16(fp)
  80d278:	18c00117 	ldw	r3,4(r3)
  80d27c:	10c00035 	stwio	r3,0(r2)
  80d280:	e0bff817 	ldw	r2,-32(fp)
  80d284:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d288:	e0bff717 	ldw	r2,-36(fp)
  80d28c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80d290:	e0bff403 	ldbu	r2,-48(fp)
  80d294:	10000226 	beq	r2,zero,80d2a0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80d298:	00bffd44 	movi	r2,-11
  80d29c:	00000106 	br	80d2a4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80d2a0:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80d2a4:	e037883a 	mov	sp,fp
  80d2a8:	dfc00117 	ldw	ra,4(sp)
  80d2ac:	df000017 	ldw	fp,0(sp)
  80d2b0:	dec00204 	addi	sp,sp,8
  80d2b4:	f800283a 	ret

0080d2b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d2b8:	defffe04 	addi	sp,sp,-8
  80d2bc:	dfc00115 	stw	ra,4(sp)
  80d2c0:	df000015 	stw	fp,0(sp)
  80d2c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d2c8:	d0a00917 	ldw	r2,-32732(gp)
  80d2cc:	10000326 	beq	r2,zero,80d2dc <alt_get_errno+0x24>
  80d2d0:	d0a00917 	ldw	r2,-32732(gp)
  80d2d4:	103ee83a 	callr	r2
  80d2d8:	00000106 	br	80d2e0 <alt_get_errno+0x28>
  80d2dc:	d0a72904 	addi	r2,gp,-25436
}
  80d2e0:	e037883a 	mov	sp,fp
  80d2e4:	dfc00117 	ldw	ra,4(sp)
  80d2e8:	df000017 	ldw	fp,0(sp)
  80d2ec:	dec00204 	addi	sp,sp,8
  80d2f0:	f800283a 	ret

0080d2f4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80d2f4:	defff204 	addi	sp,sp,-56
  80d2f8:	dfc00d15 	stw	ra,52(sp)
  80d2fc:	df000c15 	stw	fp,48(sp)
  80d300:	df000c04 	addi	fp,sp,48
  80d304:	e13ffc15 	stw	r4,-16(fp)
  80d308:	e17ffd15 	stw	r5,-12(fp)
  80d30c:	e1bffe15 	stw	r6,-8(fp)
  80d310:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80d314:	e0bffe17 	ldw	r2,-8(fp)
  80d318:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80d31c:	e0bfff17 	ldw	r2,-4(fp)
  80d320:	1090000c 	andi	r2,r2,16384
  80d324:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80d328:	00003c06 	br	80d41c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d32c:	e0bffc17 	ldw	r2,-16(fp)
  80d330:	10800517 	ldw	r2,20(r2)
  80d334:	10800044 	addi	r2,r2,1
  80d338:	10800fcc 	andi	r2,r2,63
  80d33c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80d340:	e0bffc17 	ldw	r2,-16(fp)
  80d344:	10c00417 	ldw	r3,16(r2)
  80d348:	e0bff717 	ldw	r2,-36(fp)
  80d34c:	1880221e 	bne	r3,r2,80d3d8 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80d350:	e0bff517 	ldw	r2,-44(fp)
  80d354:	10000526 	beq	r2,zero,80d36c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80d358:	080d2b80 	call	80d2b8 <alt_get_errno>
  80d35c:	1007883a 	mov	r3,r2
  80d360:	008002c4 	movi	r2,11
  80d364:	18800015 	stw	r2,0(r3)
        break;
  80d368:	00002e06 	br	80d424 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d36c:	0005303a 	rdctl	r2,status
  80d370:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d374:	e0fff917 	ldw	r3,-28(fp)
  80d378:	00bfff84 	movi	r2,-2
  80d37c:	1884703a 	and	r2,r3,r2
  80d380:	1001703a 	wrctl	status,r2
  
  return context;
  80d384:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80d388:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d38c:	e0bffc17 	ldw	r2,-16(fp)
  80d390:	10800117 	ldw	r2,4(r2)
  80d394:	10c11014 	ori	r3,r2,1088
  80d398:	e0bffc17 	ldw	r2,-16(fp)
  80d39c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d3a0:	e0bffc17 	ldw	r2,-16(fp)
  80d3a4:	10800017 	ldw	r2,0(r2)
  80d3a8:	10800304 	addi	r2,r2,12
  80d3ac:	e0fffc17 	ldw	r3,-16(fp)
  80d3b0:	18c00117 	ldw	r3,4(r3)
  80d3b4:	10c00035 	stwio	r3,0(r2)
  80d3b8:	e0bff817 	ldw	r2,-32(fp)
  80d3bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d3c0:	e0bff617 	ldw	r2,-40(fp)
  80d3c4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80d3c8:	e0bffc17 	ldw	r2,-16(fp)
  80d3cc:	10c00417 	ldw	r3,16(r2)
  80d3d0:	e0bff717 	ldw	r2,-36(fp)
  80d3d4:	18bffc26 	beq	r3,r2,80d3c8 <__alt_mem_onchip_mem+0xff8053c8>
      }
    }

    count--;
  80d3d8:	e0bff417 	ldw	r2,-48(fp)
  80d3dc:	10bfffc4 	addi	r2,r2,-1
  80d3e0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80d3e4:	e0bffc17 	ldw	r2,-16(fp)
  80d3e8:	10c00517 	ldw	r3,20(r2)
  80d3ec:	e0bffd17 	ldw	r2,-12(fp)
  80d3f0:	11000044 	addi	r4,r2,1
  80d3f4:	e13ffd15 	stw	r4,-12(fp)
  80d3f8:	10800003 	ldbu	r2,0(r2)
  80d3fc:	1009883a 	mov	r4,r2
  80d400:	e0bffc17 	ldw	r2,-16(fp)
  80d404:	10c5883a 	add	r2,r2,r3
  80d408:	10801704 	addi	r2,r2,92
  80d40c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80d410:	e0bffc17 	ldw	r2,-16(fp)
  80d414:	e0fff717 	ldw	r3,-36(fp)
  80d418:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80d41c:	e0bff417 	ldw	r2,-48(fp)
  80d420:	103fc21e 	bne	r2,zero,80d32c <__alt_mem_onchip_mem+0xff80532c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d424:	0005303a 	rdctl	r2,status
  80d428:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d42c:	e0fffb17 	ldw	r3,-20(fp)
  80d430:	00bfff84 	movi	r2,-2
  80d434:	1884703a 	and	r2,r3,r2
  80d438:	1001703a 	wrctl	status,r2
  
  return context;
  80d43c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80d440:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d444:	e0bffc17 	ldw	r2,-16(fp)
  80d448:	10800117 	ldw	r2,4(r2)
  80d44c:	10c11014 	ori	r3,r2,1088
  80d450:	e0bffc17 	ldw	r2,-16(fp)
  80d454:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d458:	e0bffc17 	ldw	r2,-16(fp)
  80d45c:	10800017 	ldw	r2,0(r2)
  80d460:	10800304 	addi	r2,r2,12
  80d464:	e0fffc17 	ldw	r3,-16(fp)
  80d468:	18c00117 	ldw	r3,4(r3)
  80d46c:	10c00035 	stwio	r3,0(r2)
  80d470:	e0bff817 	ldw	r2,-32(fp)
  80d474:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d478:	e0bffa17 	ldw	r2,-24(fp)
  80d47c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80d480:	e0fffe17 	ldw	r3,-8(fp)
  80d484:	e0bff417 	ldw	r2,-48(fp)
  80d488:	1885c83a 	sub	r2,r3,r2
}
  80d48c:	e037883a 	mov	sp,fp
  80d490:	dfc00117 	ldw	ra,4(sp)
  80d494:	df000017 	ldw	fp,0(sp)
  80d498:	dec00204 	addi	sp,sp,8
  80d49c:	f800283a 	ret

0080d4a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80d4a0:	defff504 	addi	sp,sp,-44
  80d4a4:	df000a15 	stw	fp,40(sp)
  80d4a8:	df000a04 	addi	fp,sp,40
  80d4ac:	e13ffc15 	stw	r4,-16(fp)
  80d4b0:	e17ffd15 	stw	r5,-12(fp)
  80d4b4:	e1bffe15 	stw	r6,-8(fp)
  80d4b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80d4bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d4c0:	d0a72e17 	ldw	r2,-25416(gp)
  
  if (alt_ticks_per_second ())
  80d4c4:	10003c26 	beq	r2,zero,80d5b8 <alt_alarm_start+0x118>
  {
    if (alarm)
  80d4c8:	e0bffc17 	ldw	r2,-16(fp)
  80d4cc:	10003826 	beq	r2,zero,80d5b0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80d4d0:	e0bffc17 	ldw	r2,-16(fp)
  80d4d4:	e0fffe17 	ldw	r3,-8(fp)
  80d4d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80d4dc:	e0bffc17 	ldw	r2,-16(fp)
  80d4e0:	e0ffff17 	ldw	r3,-4(fp)
  80d4e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d4e8:	0005303a 	rdctl	r2,status
  80d4ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d4f0:	e0fff917 	ldw	r3,-28(fp)
  80d4f4:	00bfff84 	movi	r2,-2
  80d4f8:	1884703a 	and	r2,r3,r2
  80d4fc:	1001703a 	wrctl	status,r2
  
  return context;
  80d500:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80d504:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80d508:	d0a72f17 	ldw	r2,-25412(gp)
      
      current_nticks = alt_nticks();
  80d50c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80d510:	e0fffd17 	ldw	r3,-12(fp)
  80d514:	e0bff617 	ldw	r2,-40(fp)
  80d518:	1885883a 	add	r2,r3,r2
  80d51c:	10c00044 	addi	r3,r2,1
  80d520:	e0bffc17 	ldw	r2,-16(fp)
  80d524:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80d528:	e0bffc17 	ldw	r2,-16(fp)
  80d52c:	10c00217 	ldw	r3,8(r2)
  80d530:	e0bff617 	ldw	r2,-40(fp)
  80d534:	1880042e 	bgeu	r3,r2,80d548 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80d538:	e0bffc17 	ldw	r2,-16(fp)
  80d53c:	00c00044 	movi	r3,1
  80d540:	10c00405 	stb	r3,16(r2)
  80d544:	00000206 	br	80d550 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80d548:	e0bffc17 	ldw	r2,-16(fp)
  80d54c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80d550:	e0bffc17 	ldw	r2,-16(fp)
  80d554:	d0e00d04 	addi	r3,gp,-32716
  80d558:	e0fffa15 	stw	r3,-24(fp)
  80d55c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80d560:	e0bffb17 	ldw	r2,-20(fp)
  80d564:	e0fffa17 	ldw	r3,-24(fp)
  80d568:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80d56c:	e0bffa17 	ldw	r2,-24(fp)
  80d570:	10c00017 	ldw	r3,0(r2)
  80d574:	e0bffb17 	ldw	r2,-20(fp)
  80d578:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80d57c:	e0bffa17 	ldw	r2,-24(fp)
  80d580:	10800017 	ldw	r2,0(r2)
  80d584:	e0fffb17 	ldw	r3,-20(fp)
  80d588:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80d58c:	e0bffa17 	ldw	r2,-24(fp)
  80d590:	e0fffb17 	ldw	r3,-20(fp)
  80d594:	10c00015 	stw	r3,0(r2)
  80d598:	e0bff817 	ldw	r2,-32(fp)
  80d59c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d5a0:	e0bff717 	ldw	r2,-36(fp)
  80d5a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80d5a8:	0005883a 	mov	r2,zero
  80d5ac:	00000306 	br	80d5bc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80d5b0:	00bffa84 	movi	r2,-22
  80d5b4:	00000106 	br	80d5bc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80d5b8:	00bfde84 	movi	r2,-134
  }
}
  80d5bc:	e037883a 	mov	sp,fp
  80d5c0:	df000017 	ldw	fp,0(sp)
  80d5c4:	dec00104 	addi	sp,sp,4
  80d5c8:	f800283a 	ret

0080d5cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80d5cc:	defffe04 	addi	sp,sp,-8
  80d5d0:	df000115 	stw	fp,4(sp)
  80d5d4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80d5d8:	e03fff15 	stw	zero,-4(fp)
  80d5dc:	00000506 	br	80d5f4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80d5e0:	e0bfff17 	ldw	r2,-4(fp)
  80d5e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80d5e8:	e0bfff17 	ldw	r2,-4(fp)
  80d5ec:	10800804 	addi	r2,r2,32
  80d5f0:	e0bfff15 	stw	r2,-4(fp)
  80d5f4:	e0bfff17 	ldw	r2,-4(fp)
  80d5f8:	10820030 	cmpltui	r2,r2,2048
  80d5fc:	103ff81e 	bne	r2,zero,80d5e0 <__alt_mem_onchip_mem+0xff8055e0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80d600:	0001883a 	nop
  80d604:	e037883a 	mov	sp,fp
  80d608:	df000017 	ldw	fp,0(sp)
  80d60c:	dec00104 	addi	sp,sp,4
  80d610:	f800283a 	ret

0080d614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d614:	defffe04 	addi	sp,sp,-8
  80d618:	dfc00115 	stw	ra,4(sp)
  80d61c:	df000015 	stw	fp,0(sp)
  80d620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d624:	d0a00917 	ldw	r2,-32732(gp)
  80d628:	10000326 	beq	r2,zero,80d638 <alt_get_errno+0x24>
  80d62c:	d0a00917 	ldw	r2,-32732(gp)
  80d630:	103ee83a 	callr	r2
  80d634:	00000106 	br	80d63c <alt_get_errno+0x28>
  80d638:	d0a72904 	addi	r2,gp,-25436
}
  80d63c:	e037883a 	mov	sp,fp
  80d640:	dfc00117 	ldw	ra,4(sp)
  80d644:	df000017 	ldw	fp,0(sp)
  80d648:	dec00204 	addi	sp,sp,8
  80d64c:	f800283a 	ret

0080d650 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80d650:	defffa04 	addi	sp,sp,-24
  80d654:	dfc00515 	stw	ra,20(sp)
  80d658:	df000415 	stw	fp,16(sp)
  80d65c:	df000404 	addi	fp,sp,16
  80d660:	e13ffe15 	stw	r4,-8(fp)
  80d664:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80d668:	e0bffe17 	ldw	r2,-8(fp)
  80d66c:	10000326 	beq	r2,zero,80d67c <alt_dev_llist_insert+0x2c>
  80d670:	e0bffe17 	ldw	r2,-8(fp)
  80d674:	10800217 	ldw	r2,8(r2)
  80d678:	1000061e 	bne	r2,zero,80d694 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80d67c:	080d6140 	call	80d614 <alt_get_errno>
  80d680:	1007883a 	mov	r3,r2
  80d684:	00800584 	movi	r2,22
  80d688:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80d68c:	00bffa84 	movi	r2,-22
  80d690:	00001306 	br	80d6e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80d694:	e0bffe17 	ldw	r2,-8(fp)
  80d698:	e0ffff17 	ldw	r3,-4(fp)
  80d69c:	e0fffc15 	stw	r3,-16(fp)
  80d6a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80d6a4:	e0bffd17 	ldw	r2,-12(fp)
  80d6a8:	e0fffc17 	ldw	r3,-16(fp)
  80d6ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80d6b0:	e0bffc17 	ldw	r2,-16(fp)
  80d6b4:	10c00017 	ldw	r3,0(r2)
  80d6b8:	e0bffd17 	ldw	r2,-12(fp)
  80d6bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80d6c0:	e0bffc17 	ldw	r2,-16(fp)
  80d6c4:	10800017 	ldw	r2,0(r2)
  80d6c8:	e0fffd17 	ldw	r3,-12(fp)
  80d6cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80d6d0:	e0bffc17 	ldw	r2,-16(fp)
  80d6d4:	e0fffd17 	ldw	r3,-12(fp)
  80d6d8:	10c00015 	stw	r3,0(r2)

  return 0;  
  80d6dc:	0005883a 	mov	r2,zero
}
  80d6e0:	e037883a 	mov	sp,fp
  80d6e4:	dfc00117 	ldw	ra,4(sp)
  80d6e8:	df000017 	ldw	fp,0(sp)
  80d6ec:	dec00204 	addi	sp,sp,8
  80d6f0:	f800283a 	ret

0080d6f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80d6f4:	defffd04 	addi	sp,sp,-12
  80d6f8:	dfc00215 	stw	ra,8(sp)
  80d6fc:	df000115 	stw	fp,4(sp)
  80d700:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80d704:	00802074 	movhi	r2,129
  80d708:	10ba1904 	addi	r2,r2,-6044
  80d70c:	e0bfff15 	stw	r2,-4(fp)
  80d710:	00000606 	br	80d72c <_do_ctors+0x38>
        (*ctor) (); 
  80d714:	e0bfff17 	ldw	r2,-4(fp)
  80d718:	10800017 	ldw	r2,0(r2)
  80d71c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80d720:	e0bfff17 	ldw	r2,-4(fp)
  80d724:	10bfff04 	addi	r2,r2,-4
  80d728:	e0bfff15 	stw	r2,-4(fp)
  80d72c:	e0ffff17 	ldw	r3,-4(fp)
  80d730:	00802074 	movhi	r2,129
  80d734:	10ba1a04 	addi	r2,r2,-6040
  80d738:	18bff62e 	bgeu	r3,r2,80d714 <__alt_mem_onchip_mem+0xff805714>
        (*ctor) (); 
}
  80d73c:	0001883a 	nop
  80d740:	e037883a 	mov	sp,fp
  80d744:	dfc00117 	ldw	ra,4(sp)
  80d748:	df000017 	ldw	fp,0(sp)
  80d74c:	dec00204 	addi	sp,sp,8
  80d750:	f800283a 	ret

0080d754 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80d754:	defffd04 	addi	sp,sp,-12
  80d758:	dfc00215 	stw	ra,8(sp)
  80d75c:	df000115 	stw	fp,4(sp)
  80d760:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80d764:	00802074 	movhi	r2,129
  80d768:	10ba1904 	addi	r2,r2,-6044
  80d76c:	e0bfff15 	stw	r2,-4(fp)
  80d770:	00000606 	br	80d78c <_do_dtors+0x38>
        (*dtor) (); 
  80d774:	e0bfff17 	ldw	r2,-4(fp)
  80d778:	10800017 	ldw	r2,0(r2)
  80d77c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80d780:	e0bfff17 	ldw	r2,-4(fp)
  80d784:	10bfff04 	addi	r2,r2,-4
  80d788:	e0bfff15 	stw	r2,-4(fp)
  80d78c:	e0ffff17 	ldw	r3,-4(fp)
  80d790:	00802074 	movhi	r2,129
  80d794:	10ba1a04 	addi	r2,r2,-6040
  80d798:	18bff62e 	bgeu	r3,r2,80d774 <__alt_mem_onchip_mem+0xff805774>
        (*dtor) (); 
}
  80d79c:	0001883a 	nop
  80d7a0:	e037883a 	mov	sp,fp
  80d7a4:	dfc00117 	ldw	ra,4(sp)
  80d7a8:	df000017 	ldw	fp,0(sp)
  80d7ac:	dec00204 	addi	sp,sp,8
  80d7b0:	f800283a 	ret

0080d7b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80d7b4:	defffe04 	addi	sp,sp,-8
  80d7b8:	dfc00115 	stw	ra,4(sp)
  80d7bc:	df000015 	stw	fp,0(sp)
  80d7c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80d7c4:	01440004 	movi	r5,4096
  80d7c8:	0009883a 	mov	r4,zero
  80d7cc:	080e3a80 	call	80e3a8 <alt_icache_flush>
#endif
}
  80d7d0:	0001883a 	nop
  80d7d4:	e037883a 	mov	sp,fp
  80d7d8:	dfc00117 	ldw	ra,4(sp)
  80d7dc:	df000017 	ldw	fp,0(sp)
  80d7e0:	dec00204 	addi	sp,sp,8
  80d7e4:	f800283a 	ret

0080d7e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80d7e8:	defff904 	addi	sp,sp,-28
  80d7ec:	dfc00615 	stw	ra,24(sp)
  80d7f0:	df000515 	stw	fp,20(sp)
  80d7f4:	df000504 	addi	fp,sp,20
  80d7f8:	e13ffc15 	stw	r4,-16(fp)
  80d7fc:	e17ffd15 	stw	r5,-12(fp)
  80d800:	e1bffe15 	stw	r6,-8(fp)
  80d804:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80d808:	e0800217 	ldw	r2,8(fp)
  80d80c:	d8800015 	stw	r2,0(sp)
  80d810:	e1ffff17 	ldw	r7,-4(fp)
  80d814:	e1bffe17 	ldw	r6,-8(fp)
  80d818:	e17ffd17 	ldw	r5,-12(fp)
  80d81c:	e13ffc17 	ldw	r4,-16(fp)
  80d820:	080d9980 	call	80d998 <alt_iic_isr_register>
}  
  80d824:	e037883a 	mov	sp,fp
  80d828:	dfc00117 	ldw	ra,4(sp)
  80d82c:	df000017 	ldw	fp,0(sp)
  80d830:	dec00204 	addi	sp,sp,8
  80d834:	f800283a 	ret

0080d838 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80d838:	defff904 	addi	sp,sp,-28
  80d83c:	df000615 	stw	fp,24(sp)
  80d840:	df000604 	addi	fp,sp,24
  80d844:	e13ffe15 	stw	r4,-8(fp)
  80d848:	e17fff15 	stw	r5,-4(fp)
  80d84c:	e0bfff17 	ldw	r2,-4(fp)
  80d850:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d854:	0005303a 	rdctl	r2,status
  80d858:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d85c:	e0fffb17 	ldw	r3,-20(fp)
  80d860:	00bfff84 	movi	r2,-2
  80d864:	1884703a 	and	r2,r3,r2
  80d868:	1001703a 	wrctl	status,r2
  
  return context;
  80d86c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d870:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80d874:	00c00044 	movi	r3,1
  80d878:	e0bffa17 	ldw	r2,-24(fp)
  80d87c:	1884983a 	sll	r2,r3,r2
  80d880:	1007883a 	mov	r3,r2
  80d884:	d0a72d17 	ldw	r2,-25420(gp)
  80d888:	1884b03a 	or	r2,r3,r2
  80d88c:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d890:	d0a72d17 	ldw	r2,-25420(gp)
  80d894:	100170fa 	wrctl	ienable,r2
  80d898:	e0bffc17 	ldw	r2,-16(fp)
  80d89c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d8a0:	e0bffd17 	ldw	r2,-12(fp)
  80d8a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d8a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80d8ac:	0001883a 	nop
}
  80d8b0:	e037883a 	mov	sp,fp
  80d8b4:	df000017 	ldw	fp,0(sp)
  80d8b8:	dec00104 	addi	sp,sp,4
  80d8bc:	f800283a 	ret

0080d8c0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80d8c0:	defff904 	addi	sp,sp,-28
  80d8c4:	df000615 	stw	fp,24(sp)
  80d8c8:	df000604 	addi	fp,sp,24
  80d8cc:	e13ffe15 	stw	r4,-8(fp)
  80d8d0:	e17fff15 	stw	r5,-4(fp)
  80d8d4:	e0bfff17 	ldw	r2,-4(fp)
  80d8d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d8dc:	0005303a 	rdctl	r2,status
  80d8e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d8e4:	e0fffb17 	ldw	r3,-20(fp)
  80d8e8:	00bfff84 	movi	r2,-2
  80d8ec:	1884703a 	and	r2,r3,r2
  80d8f0:	1001703a 	wrctl	status,r2
  
  return context;
  80d8f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d8f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80d8fc:	00c00044 	movi	r3,1
  80d900:	e0bffa17 	ldw	r2,-24(fp)
  80d904:	1884983a 	sll	r2,r3,r2
  80d908:	0084303a 	nor	r2,zero,r2
  80d90c:	1007883a 	mov	r3,r2
  80d910:	d0a72d17 	ldw	r2,-25420(gp)
  80d914:	1884703a 	and	r2,r3,r2
  80d918:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d91c:	d0a72d17 	ldw	r2,-25420(gp)
  80d920:	100170fa 	wrctl	ienable,r2
  80d924:	e0bffc17 	ldw	r2,-16(fp)
  80d928:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d92c:	e0bffd17 	ldw	r2,-12(fp)
  80d930:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d934:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80d938:	0001883a 	nop
}
  80d93c:	e037883a 	mov	sp,fp
  80d940:	df000017 	ldw	fp,0(sp)
  80d944:	dec00104 	addi	sp,sp,4
  80d948:	f800283a 	ret

0080d94c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80d94c:	defffc04 	addi	sp,sp,-16
  80d950:	df000315 	stw	fp,12(sp)
  80d954:	df000304 	addi	fp,sp,12
  80d958:	e13ffe15 	stw	r4,-8(fp)
  80d95c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80d960:	000530fa 	rdctl	r2,ienable
  80d964:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80d968:	00c00044 	movi	r3,1
  80d96c:	e0bfff17 	ldw	r2,-4(fp)
  80d970:	1884983a 	sll	r2,r3,r2
  80d974:	1007883a 	mov	r3,r2
  80d978:	e0bffd17 	ldw	r2,-12(fp)
  80d97c:	1884703a 	and	r2,r3,r2
  80d980:	1004c03a 	cmpne	r2,r2,zero
  80d984:	10803fcc 	andi	r2,r2,255
}
  80d988:	e037883a 	mov	sp,fp
  80d98c:	df000017 	ldw	fp,0(sp)
  80d990:	dec00104 	addi	sp,sp,4
  80d994:	f800283a 	ret

0080d998 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80d998:	defff504 	addi	sp,sp,-44
  80d99c:	dfc00a15 	stw	ra,40(sp)
  80d9a0:	df000915 	stw	fp,36(sp)
  80d9a4:	df000904 	addi	fp,sp,36
  80d9a8:	e13ffc15 	stw	r4,-16(fp)
  80d9ac:	e17ffd15 	stw	r5,-12(fp)
  80d9b0:	e1bffe15 	stw	r6,-8(fp)
  80d9b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80d9b8:	00bffa84 	movi	r2,-22
  80d9bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80d9c0:	e0bffd17 	ldw	r2,-12(fp)
  80d9c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80d9c8:	e0bff817 	ldw	r2,-32(fp)
  80d9cc:	10800808 	cmpgei	r2,r2,32
  80d9d0:	1000271e 	bne	r2,zero,80da70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d9d4:	0005303a 	rdctl	r2,status
  80d9d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d9dc:	e0fffb17 	ldw	r3,-20(fp)
  80d9e0:	00bfff84 	movi	r2,-2
  80d9e4:	1884703a 	and	r2,r3,r2
  80d9e8:	1001703a 	wrctl	status,r2
  
  return context;
  80d9ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80d9f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80d9f4:	00802074 	movhi	r2,129
  80d9f8:	10895304 	addi	r2,r2,9548
  80d9fc:	e0fff817 	ldw	r3,-32(fp)
  80da00:	180690fa 	slli	r3,r3,3
  80da04:	10c5883a 	add	r2,r2,r3
  80da08:	e0fffe17 	ldw	r3,-8(fp)
  80da0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80da10:	00802074 	movhi	r2,129
  80da14:	10895304 	addi	r2,r2,9548
  80da18:	e0fff817 	ldw	r3,-32(fp)
  80da1c:	180690fa 	slli	r3,r3,3
  80da20:	10c5883a 	add	r2,r2,r3
  80da24:	10800104 	addi	r2,r2,4
  80da28:	e0ffff17 	ldw	r3,-4(fp)
  80da2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80da30:	e0bffe17 	ldw	r2,-8(fp)
  80da34:	10000526 	beq	r2,zero,80da4c <alt_iic_isr_register+0xb4>
  80da38:	e0bff817 	ldw	r2,-32(fp)
  80da3c:	100b883a 	mov	r5,r2
  80da40:	e13ffc17 	ldw	r4,-16(fp)
  80da44:	080d8380 	call	80d838 <alt_ic_irq_enable>
  80da48:	00000406 	br	80da5c <alt_iic_isr_register+0xc4>
  80da4c:	e0bff817 	ldw	r2,-32(fp)
  80da50:	100b883a 	mov	r5,r2
  80da54:	e13ffc17 	ldw	r4,-16(fp)
  80da58:	080d8c00 	call	80d8c0 <alt_ic_irq_disable>
  80da5c:	e0bff715 	stw	r2,-36(fp)
  80da60:	e0bffa17 	ldw	r2,-24(fp)
  80da64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80da68:	e0bff917 	ldw	r2,-28(fp)
  80da6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80da70:	e0bff717 	ldw	r2,-36(fp)
}
  80da74:	e037883a 	mov	sp,fp
  80da78:	dfc00117 	ldw	ra,4(sp)
  80da7c:	df000017 	ldw	fp,0(sp)
  80da80:	dec00204 	addi	sp,sp,8
  80da84:	f800283a 	ret

0080da88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80da88:	defff904 	addi	sp,sp,-28
  80da8c:	dfc00615 	stw	ra,24(sp)
  80da90:	df000515 	stw	fp,20(sp)
  80da94:	df000504 	addi	fp,sp,20
  80da98:	e13ffc15 	stw	r4,-16(fp)
  80da9c:	e17ffd15 	stw	r5,-12(fp)
  80daa0:	e1bffe15 	stw	r6,-8(fp)
  80daa4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80daa8:	e1bfff17 	ldw	r6,-4(fp)
  80daac:	e17ffe17 	ldw	r5,-8(fp)
  80dab0:	e13ffd17 	ldw	r4,-12(fp)
  80dab4:	080dcc80 	call	80dcc8 <open>
  80dab8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80dabc:	e0bffb17 	ldw	r2,-20(fp)
  80dac0:	10001c16 	blt	r2,zero,80db34 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80dac4:	00802074 	movhi	r2,129
  80dac8:	10bd2704 	addi	r2,r2,-2916
  80dacc:	e0fffb17 	ldw	r3,-20(fp)
  80dad0:	18c00324 	muli	r3,r3,12
  80dad4:	10c5883a 	add	r2,r2,r3
  80dad8:	10c00017 	ldw	r3,0(r2)
  80dadc:	e0bffc17 	ldw	r2,-16(fp)
  80dae0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80dae4:	00802074 	movhi	r2,129
  80dae8:	10bd2704 	addi	r2,r2,-2916
  80daec:	e0fffb17 	ldw	r3,-20(fp)
  80daf0:	18c00324 	muli	r3,r3,12
  80daf4:	10c5883a 	add	r2,r2,r3
  80daf8:	10800104 	addi	r2,r2,4
  80dafc:	10c00017 	ldw	r3,0(r2)
  80db00:	e0bffc17 	ldw	r2,-16(fp)
  80db04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80db08:	00802074 	movhi	r2,129
  80db0c:	10bd2704 	addi	r2,r2,-2916
  80db10:	e0fffb17 	ldw	r3,-20(fp)
  80db14:	18c00324 	muli	r3,r3,12
  80db18:	10c5883a 	add	r2,r2,r3
  80db1c:	10800204 	addi	r2,r2,8
  80db20:	10c00017 	ldw	r3,0(r2)
  80db24:	e0bffc17 	ldw	r2,-16(fp)
  80db28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80db2c:	e13ffb17 	ldw	r4,-20(fp)
  80db30:	080ae440 	call	80ae44 <alt_release_fd>
  }
} 
  80db34:	0001883a 	nop
  80db38:	e037883a 	mov	sp,fp
  80db3c:	dfc00117 	ldw	ra,4(sp)
  80db40:	df000017 	ldw	fp,0(sp)
  80db44:	dec00204 	addi	sp,sp,8
  80db48:	f800283a 	ret

0080db4c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80db4c:	defffb04 	addi	sp,sp,-20
  80db50:	dfc00415 	stw	ra,16(sp)
  80db54:	df000315 	stw	fp,12(sp)
  80db58:	df000304 	addi	fp,sp,12
  80db5c:	e13ffd15 	stw	r4,-12(fp)
  80db60:	e17ffe15 	stw	r5,-8(fp)
  80db64:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80db68:	01c07fc4 	movi	r7,511
  80db6c:	01800044 	movi	r6,1
  80db70:	e17ffd17 	ldw	r5,-12(fp)
  80db74:	01002074 	movhi	r4,129
  80db78:	213d2a04 	addi	r4,r4,-2904
  80db7c:	080da880 	call	80da88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80db80:	01c07fc4 	movi	r7,511
  80db84:	000d883a 	mov	r6,zero
  80db88:	e17ffe17 	ldw	r5,-8(fp)
  80db8c:	01002074 	movhi	r4,129
  80db90:	213d2704 	addi	r4,r4,-2916
  80db94:	080da880 	call	80da88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80db98:	01c07fc4 	movi	r7,511
  80db9c:	01800044 	movi	r6,1
  80dba0:	e17fff17 	ldw	r5,-4(fp)
  80dba4:	01002074 	movhi	r4,129
  80dba8:	213d2d04 	addi	r4,r4,-2892
  80dbac:	080da880 	call	80da88 <alt_open_fd>
}  
  80dbb0:	0001883a 	nop
  80dbb4:	e037883a 	mov	sp,fp
  80dbb8:	dfc00117 	ldw	ra,4(sp)
  80dbbc:	df000017 	ldw	fp,0(sp)
  80dbc0:	dec00204 	addi	sp,sp,8
  80dbc4:	f800283a 	ret

0080dbc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dbc8:	defffe04 	addi	sp,sp,-8
  80dbcc:	dfc00115 	stw	ra,4(sp)
  80dbd0:	df000015 	stw	fp,0(sp)
  80dbd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dbd8:	d0a00917 	ldw	r2,-32732(gp)
  80dbdc:	10000326 	beq	r2,zero,80dbec <alt_get_errno+0x24>
  80dbe0:	d0a00917 	ldw	r2,-32732(gp)
  80dbe4:	103ee83a 	callr	r2
  80dbe8:	00000106 	br	80dbf0 <alt_get_errno+0x28>
  80dbec:	d0a72904 	addi	r2,gp,-25436
}
  80dbf0:	e037883a 	mov	sp,fp
  80dbf4:	dfc00117 	ldw	ra,4(sp)
  80dbf8:	df000017 	ldw	fp,0(sp)
  80dbfc:	dec00204 	addi	sp,sp,8
  80dc00:	f800283a 	ret

0080dc04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80dc04:	defffd04 	addi	sp,sp,-12
  80dc08:	df000215 	stw	fp,8(sp)
  80dc0c:	df000204 	addi	fp,sp,8
  80dc10:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80dc14:	e0bfff17 	ldw	r2,-4(fp)
  80dc18:	10800217 	ldw	r2,8(r2)
  80dc1c:	10d00034 	orhi	r3,r2,16384
  80dc20:	e0bfff17 	ldw	r2,-4(fp)
  80dc24:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80dc28:	e03ffe15 	stw	zero,-8(fp)
  80dc2c:	00001d06 	br	80dca4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80dc30:	00802074 	movhi	r2,129
  80dc34:	10bd2704 	addi	r2,r2,-2916
  80dc38:	e0fffe17 	ldw	r3,-8(fp)
  80dc3c:	18c00324 	muli	r3,r3,12
  80dc40:	10c5883a 	add	r2,r2,r3
  80dc44:	10c00017 	ldw	r3,0(r2)
  80dc48:	e0bfff17 	ldw	r2,-4(fp)
  80dc4c:	10800017 	ldw	r2,0(r2)
  80dc50:	1880111e 	bne	r3,r2,80dc98 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80dc54:	00802074 	movhi	r2,129
  80dc58:	10bd2704 	addi	r2,r2,-2916
  80dc5c:	e0fffe17 	ldw	r3,-8(fp)
  80dc60:	18c00324 	muli	r3,r3,12
  80dc64:	10c5883a 	add	r2,r2,r3
  80dc68:	10800204 	addi	r2,r2,8
  80dc6c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80dc70:	1000090e 	bge	r2,zero,80dc98 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80dc74:	e0bffe17 	ldw	r2,-8(fp)
  80dc78:	10c00324 	muli	r3,r2,12
  80dc7c:	00802074 	movhi	r2,129
  80dc80:	10bd2704 	addi	r2,r2,-2916
  80dc84:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80dc88:	e0bfff17 	ldw	r2,-4(fp)
  80dc8c:	18800226 	beq	r3,r2,80dc98 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80dc90:	00bffcc4 	movi	r2,-13
  80dc94:	00000806 	br	80dcb8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80dc98:	e0bffe17 	ldw	r2,-8(fp)
  80dc9c:	10800044 	addi	r2,r2,1
  80dca0:	e0bffe15 	stw	r2,-8(fp)
  80dca4:	d0a00817 	ldw	r2,-32736(gp)
  80dca8:	1007883a 	mov	r3,r2
  80dcac:	e0bffe17 	ldw	r2,-8(fp)
  80dcb0:	18bfdf2e 	bgeu	r3,r2,80dc30 <__alt_mem_onchip_mem+0xff805c30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80dcb4:	0005883a 	mov	r2,zero
}
  80dcb8:	e037883a 	mov	sp,fp
  80dcbc:	df000017 	ldw	fp,0(sp)
  80dcc0:	dec00104 	addi	sp,sp,4
  80dcc4:	f800283a 	ret

0080dcc8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80dcc8:	defff604 	addi	sp,sp,-40
  80dccc:	dfc00915 	stw	ra,36(sp)
  80dcd0:	df000815 	stw	fp,32(sp)
  80dcd4:	df000804 	addi	fp,sp,32
  80dcd8:	e13ffd15 	stw	r4,-12(fp)
  80dcdc:	e17ffe15 	stw	r5,-8(fp)
  80dce0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80dce4:	00bfffc4 	movi	r2,-1
  80dce8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80dcec:	00bffb44 	movi	r2,-19
  80dcf0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80dcf4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80dcf8:	d1600604 	addi	r5,gp,-32744
  80dcfc:	e13ffd17 	ldw	r4,-12(fp)
  80dd00:	080e16c0 	call	80e16c <alt_find_dev>
  80dd04:	e0bff815 	stw	r2,-32(fp)
  80dd08:	e0bff817 	ldw	r2,-32(fp)
  80dd0c:	1000051e 	bne	r2,zero,80dd24 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80dd10:	e13ffd17 	ldw	r4,-12(fp)
  80dd14:	080e1fc0 	call	80e1fc <alt_find_file>
  80dd18:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80dd1c:	00800044 	movi	r2,1
  80dd20:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80dd24:	e0bff817 	ldw	r2,-32(fp)
  80dd28:	10002926 	beq	r2,zero,80ddd0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80dd2c:	e13ff817 	ldw	r4,-32(fp)
  80dd30:	080e3040 	call	80e304 <alt_get_fd>
  80dd34:	e0bff915 	stw	r2,-28(fp)
  80dd38:	e0bff917 	ldw	r2,-28(fp)
  80dd3c:	1000030e 	bge	r2,zero,80dd4c <open+0x84>
    {
      status = index;
  80dd40:	e0bff917 	ldw	r2,-28(fp)
  80dd44:	e0bffa15 	stw	r2,-24(fp)
  80dd48:	00002306 	br	80ddd8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80dd4c:	e0bff917 	ldw	r2,-28(fp)
  80dd50:	10c00324 	muli	r3,r2,12
  80dd54:	00802074 	movhi	r2,129
  80dd58:	10bd2704 	addi	r2,r2,-2916
  80dd5c:	1885883a 	add	r2,r3,r2
  80dd60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80dd64:	e0fffe17 	ldw	r3,-8(fp)
  80dd68:	00900034 	movhi	r2,16384
  80dd6c:	10bfffc4 	addi	r2,r2,-1
  80dd70:	1886703a 	and	r3,r3,r2
  80dd74:	e0bffc17 	ldw	r2,-16(fp)
  80dd78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80dd7c:	e0bffb17 	ldw	r2,-20(fp)
  80dd80:	1000051e 	bne	r2,zero,80dd98 <open+0xd0>
  80dd84:	e13ffc17 	ldw	r4,-16(fp)
  80dd88:	080dc040 	call	80dc04 <alt_file_locked>
  80dd8c:	e0bffa15 	stw	r2,-24(fp)
  80dd90:	e0bffa17 	ldw	r2,-24(fp)
  80dd94:	10001016 	blt	r2,zero,80ddd8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80dd98:	e0bff817 	ldw	r2,-32(fp)
  80dd9c:	10800317 	ldw	r2,12(r2)
  80dda0:	10000826 	beq	r2,zero,80ddc4 <open+0xfc>
  80dda4:	e0bff817 	ldw	r2,-32(fp)
  80dda8:	10800317 	ldw	r2,12(r2)
  80ddac:	e1ffff17 	ldw	r7,-4(fp)
  80ddb0:	e1bffe17 	ldw	r6,-8(fp)
  80ddb4:	e17ffd17 	ldw	r5,-12(fp)
  80ddb8:	e13ffc17 	ldw	r4,-16(fp)
  80ddbc:	103ee83a 	callr	r2
  80ddc0:	00000106 	br	80ddc8 <open+0x100>
  80ddc4:	0005883a 	mov	r2,zero
  80ddc8:	e0bffa15 	stw	r2,-24(fp)
  80ddcc:	00000206 	br	80ddd8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80ddd0:	00bffb44 	movi	r2,-19
  80ddd4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80ddd8:	e0bffa17 	ldw	r2,-24(fp)
  80dddc:	1000090e 	bge	r2,zero,80de04 <open+0x13c>
  {
    alt_release_fd (index);  
  80dde0:	e13ff917 	ldw	r4,-28(fp)
  80dde4:	080ae440 	call	80ae44 <alt_release_fd>
    ALT_ERRNO = -status;
  80dde8:	080dbc80 	call	80dbc8 <alt_get_errno>
  80ddec:	1007883a 	mov	r3,r2
  80ddf0:	e0bffa17 	ldw	r2,-24(fp)
  80ddf4:	0085c83a 	sub	r2,zero,r2
  80ddf8:	18800015 	stw	r2,0(r3)
    return -1;
  80ddfc:	00bfffc4 	movi	r2,-1
  80de00:	00000106 	br	80de08 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80de04:	e0bff917 	ldw	r2,-28(fp)
}
  80de08:	e037883a 	mov	sp,fp
  80de0c:	dfc00117 	ldw	ra,4(sp)
  80de10:	df000017 	ldw	fp,0(sp)
  80de14:	dec00204 	addi	sp,sp,8
  80de18:	f800283a 	ret

0080de1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80de1c:	defffa04 	addi	sp,sp,-24
  80de20:	df000515 	stw	fp,20(sp)
  80de24:	df000504 	addi	fp,sp,20
  80de28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de2c:	0005303a 	rdctl	r2,status
  80de30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de34:	e0fffc17 	ldw	r3,-16(fp)
  80de38:	00bfff84 	movi	r2,-2
  80de3c:	1884703a 	and	r2,r3,r2
  80de40:	1001703a 	wrctl	status,r2
  
  return context;
  80de44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80de48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80de4c:	e0bfff17 	ldw	r2,-4(fp)
  80de50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80de54:	e0bffd17 	ldw	r2,-12(fp)
  80de58:	10800017 	ldw	r2,0(r2)
  80de5c:	e0fffd17 	ldw	r3,-12(fp)
  80de60:	18c00117 	ldw	r3,4(r3)
  80de64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80de68:	e0bffd17 	ldw	r2,-12(fp)
  80de6c:	10800117 	ldw	r2,4(r2)
  80de70:	e0fffd17 	ldw	r3,-12(fp)
  80de74:	18c00017 	ldw	r3,0(r3)
  80de78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80de7c:	e0bffd17 	ldw	r2,-12(fp)
  80de80:	e0fffd17 	ldw	r3,-12(fp)
  80de84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80de88:	e0bffd17 	ldw	r2,-12(fp)
  80de8c:	e0fffd17 	ldw	r3,-12(fp)
  80de90:	10c00015 	stw	r3,0(r2)
  80de94:	e0bffb17 	ldw	r2,-20(fp)
  80de98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de9c:	e0bffe17 	ldw	r2,-8(fp)
  80dea0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80dea4:	0001883a 	nop
  80dea8:	e037883a 	mov	sp,fp
  80deac:	df000017 	ldw	fp,0(sp)
  80deb0:	dec00104 	addi	sp,sp,4
  80deb4:	f800283a 	ret

0080deb8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80deb8:	defffb04 	addi	sp,sp,-20
  80debc:	dfc00415 	stw	ra,16(sp)
  80dec0:	df000315 	stw	fp,12(sp)
  80dec4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80dec8:	d0a00d17 	ldw	r2,-32716(gp)
  80decc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80ded0:	d0a72f17 	ldw	r2,-25412(gp)
  80ded4:	10800044 	addi	r2,r2,1
  80ded8:	d0a72f15 	stw	r2,-25412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80dedc:	00002e06 	br	80df98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80dee0:	e0bffd17 	ldw	r2,-12(fp)
  80dee4:	10800017 	ldw	r2,0(r2)
  80dee8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80deec:	e0bffd17 	ldw	r2,-12(fp)
  80def0:	10800403 	ldbu	r2,16(r2)
  80def4:	10803fcc 	andi	r2,r2,255
  80def8:	10000426 	beq	r2,zero,80df0c <alt_tick+0x54>
  80defc:	d0a72f17 	ldw	r2,-25412(gp)
  80df00:	1000021e 	bne	r2,zero,80df0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80df04:	e0bffd17 	ldw	r2,-12(fp)
  80df08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80df0c:	e0bffd17 	ldw	r2,-12(fp)
  80df10:	10800217 	ldw	r2,8(r2)
  80df14:	d0e72f17 	ldw	r3,-25412(gp)
  80df18:	18801d36 	bltu	r3,r2,80df90 <alt_tick+0xd8>
  80df1c:	e0bffd17 	ldw	r2,-12(fp)
  80df20:	10800403 	ldbu	r2,16(r2)
  80df24:	10803fcc 	andi	r2,r2,255
  80df28:	1000191e 	bne	r2,zero,80df90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80df2c:	e0bffd17 	ldw	r2,-12(fp)
  80df30:	10800317 	ldw	r2,12(r2)
  80df34:	e0fffd17 	ldw	r3,-12(fp)
  80df38:	18c00517 	ldw	r3,20(r3)
  80df3c:	1809883a 	mov	r4,r3
  80df40:	103ee83a 	callr	r2
  80df44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80df48:	e0bfff17 	ldw	r2,-4(fp)
  80df4c:	1000031e 	bne	r2,zero,80df5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80df50:	e13ffd17 	ldw	r4,-12(fp)
  80df54:	080de1c0 	call	80de1c <alt_alarm_stop>
  80df58:	00000d06 	br	80df90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80df5c:	e0bffd17 	ldw	r2,-12(fp)
  80df60:	10c00217 	ldw	r3,8(r2)
  80df64:	e0bfff17 	ldw	r2,-4(fp)
  80df68:	1887883a 	add	r3,r3,r2
  80df6c:	e0bffd17 	ldw	r2,-12(fp)
  80df70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80df74:	e0bffd17 	ldw	r2,-12(fp)
  80df78:	10c00217 	ldw	r3,8(r2)
  80df7c:	d0a72f17 	ldw	r2,-25412(gp)
  80df80:	1880032e 	bgeu	r3,r2,80df90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80df84:	e0bffd17 	ldw	r2,-12(fp)
  80df88:	00c00044 	movi	r3,1
  80df8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80df90:	e0bffe17 	ldw	r2,-8(fp)
  80df94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80df98:	e0fffd17 	ldw	r3,-12(fp)
  80df9c:	d0a00d04 	addi	r2,gp,-32716
  80dfa0:	18bfcf1e 	bne	r3,r2,80dee0 <__alt_mem_onchip_mem+0xff805ee0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80dfa4:	0001883a 	nop
}
  80dfa8:	0001883a 	nop
  80dfac:	e037883a 	mov	sp,fp
  80dfb0:	dfc00117 	ldw	ra,4(sp)
  80dfb4:	df000017 	ldw	fp,0(sp)
  80dfb8:	dec00204 	addi	sp,sp,8
  80dfbc:	f800283a 	ret

0080dfc0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80dfc0:	defffd04 	addi	sp,sp,-12
  80dfc4:	dfc00215 	stw	ra,8(sp)
  80dfc8:	df000115 	stw	fp,4(sp)
  80dfcc:	df000104 	addi	fp,sp,4
  80dfd0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80dfd4:	e13fff17 	ldw	r4,-4(fp)
  80dfd8:	080e0140 	call	80e014 <alt_busy_sleep>
}
  80dfdc:	e037883a 	mov	sp,fp
  80dfe0:	dfc00117 	ldw	ra,4(sp)
  80dfe4:	df000017 	ldw	fp,0(sp)
  80dfe8:	dec00204 	addi	sp,sp,8
  80dfec:	f800283a 	ret

0080dff0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80dff0:	deffff04 	addi	sp,sp,-4
  80dff4:	df000015 	stw	fp,0(sp)
  80dff8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80dffc:	000170fa 	wrctl	ienable,zero
}
  80e000:	0001883a 	nop
  80e004:	e037883a 	mov	sp,fp
  80e008:	df000017 	ldw	fp,0(sp)
  80e00c:	dec00104 	addi	sp,sp,4
  80e010:	f800283a 	ret

0080e014 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80e014:	defffa04 	addi	sp,sp,-24
  80e018:	dfc00515 	stw	ra,20(sp)
  80e01c:	df000415 	stw	fp,16(sp)
  80e020:	df000404 	addi	fp,sp,16
  80e024:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80e028:	008000c4 	movi	r2,3
  80e02c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80e030:	e0fffd17 	ldw	r3,-12(fp)
  80e034:	008003f4 	movhi	r2,15
  80e038:	10909004 	addi	r2,r2,16960
  80e03c:	1885383a 	mul	r2,r3,r2
  80e040:	100b883a 	mov	r5,r2
  80e044:	0100bef4 	movhi	r4,763
  80e048:	213c2004 	addi	r4,r4,-3968
  80e04c:	080a68c0 	call	80a68c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80e050:	100b883a 	mov	r5,r2
  80e054:	01200034 	movhi	r4,32768
  80e058:	213fffc4 	addi	r4,r4,-1
  80e05c:	080a68c0 	call	80a68c <__udivsi3>
  80e060:	100b883a 	mov	r5,r2
  80e064:	e13fff17 	ldw	r4,-4(fp)
  80e068:	080a68c0 	call	80a68c <__udivsi3>
  80e06c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80e070:	e0bffe17 	ldw	r2,-8(fp)
  80e074:	10002a26 	beq	r2,zero,80e120 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80e078:	e03ffc15 	stw	zero,-16(fp)
  80e07c:	00001706 	br	80e0dc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80e080:	00a00034 	movhi	r2,32768
  80e084:	10bfffc4 	addi	r2,r2,-1
  80e088:	10bfffc4 	addi	r2,r2,-1
  80e08c:	103ffe1e 	bne	r2,zero,80e088 <__alt_mem_onchip_mem+0xff806088>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80e090:	e0fffd17 	ldw	r3,-12(fp)
  80e094:	008003f4 	movhi	r2,15
  80e098:	10909004 	addi	r2,r2,16960
  80e09c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80e0a0:	100b883a 	mov	r5,r2
  80e0a4:	0100bef4 	movhi	r4,763
  80e0a8:	213c2004 	addi	r4,r4,-3968
  80e0ac:	080a68c0 	call	80a68c <__udivsi3>
  80e0b0:	100b883a 	mov	r5,r2
  80e0b4:	01200034 	movhi	r4,32768
  80e0b8:	213fffc4 	addi	r4,r4,-1
  80e0bc:	080a68c0 	call	80a68c <__udivsi3>
  80e0c0:	1007883a 	mov	r3,r2
  80e0c4:	e0bfff17 	ldw	r2,-4(fp)
  80e0c8:	10c5c83a 	sub	r2,r2,r3
  80e0cc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80e0d0:	e0bffc17 	ldw	r2,-16(fp)
  80e0d4:	10800044 	addi	r2,r2,1
  80e0d8:	e0bffc15 	stw	r2,-16(fp)
  80e0dc:	e0fffc17 	ldw	r3,-16(fp)
  80e0e0:	e0bffe17 	ldw	r2,-8(fp)
  80e0e4:	18bfe616 	blt	r3,r2,80e080 <__alt_mem_onchip_mem+0xff806080>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80e0e8:	e0fffd17 	ldw	r3,-12(fp)
  80e0ec:	008003f4 	movhi	r2,15
  80e0f0:	10909004 	addi	r2,r2,16960
  80e0f4:	1885383a 	mul	r2,r3,r2
  80e0f8:	100b883a 	mov	r5,r2
  80e0fc:	0100bef4 	movhi	r4,763
  80e100:	213c2004 	addi	r4,r4,-3968
  80e104:	080a68c0 	call	80a68c <__udivsi3>
  80e108:	1007883a 	mov	r3,r2
  80e10c:	e0bfff17 	ldw	r2,-4(fp)
  80e110:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e114:	10bfffc4 	addi	r2,r2,-1
  80e118:	103ffe1e 	bne	r2,zero,80e114 <__alt_mem_onchip_mem+0xff806114>
  80e11c:	00000d06 	br	80e154 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80e120:	e0fffd17 	ldw	r3,-12(fp)
  80e124:	008003f4 	movhi	r2,15
  80e128:	10909004 	addi	r2,r2,16960
  80e12c:	1885383a 	mul	r2,r3,r2
  80e130:	100b883a 	mov	r5,r2
  80e134:	0100bef4 	movhi	r4,763
  80e138:	213c2004 	addi	r4,r4,-3968
  80e13c:	080a68c0 	call	80a68c <__udivsi3>
  80e140:	1007883a 	mov	r3,r2
  80e144:	e0bfff17 	ldw	r2,-4(fp)
  80e148:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e14c:	10bfffc4 	addi	r2,r2,-1
  80e150:	00bffe16 	blt	zero,r2,80e14c <__alt_mem_onchip_mem+0xff80614c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80e154:	0005883a 	mov	r2,zero
}
  80e158:	e037883a 	mov	sp,fp
  80e15c:	dfc00117 	ldw	ra,4(sp)
  80e160:	df000017 	ldw	fp,0(sp)
  80e164:	dec00204 	addi	sp,sp,8
  80e168:	f800283a 	ret

0080e16c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80e16c:	defffa04 	addi	sp,sp,-24
  80e170:	dfc00515 	stw	ra,20(sp)
  80e174:	df000415 	stw	fp,16(sp)
  80e178:	df000404 	addi	fp,sp,16
  80e17c:	e13ffe15 	stw	r4,-8(fp)
  80e180:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80e184:	e0bfff17 	ldw	r2,-4(fp)
  80e188:	10800017 	ldw	r2,0(r2)
  80e18c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80e190:	e13ffe17 	ldw	r4,-8(fp)
  80e194:	0807a540 	call	807a54 <strlen>
  80e198:	10800044 	addi	r2,r2,1
  80e19c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e1a0:	00000d06 	br	80e1d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80e1a4:	e0bffc17 	ldw	r2,-16(fp)
  80e1a8:	10800217 	ldw	r2,8(r2)
  80e1ac:	e0fffd17 	ldw	r3,-12(fp)
  80e1b0:	180d883a 	mov	r6,r3
  80e1b4:	e17ffe17 	ldw	r5,-8(fp)
  80e1b8:	1009883a 	mov	r4,r2
  80e1bc:	080e5200 	call	80e520 <memcmp>
  80e1c0:	1000021e 	bne	r2,zero,80e1cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80e1c4:	e0bffc17 	ldw	r2,-16(fp)
  80e1c8:	00000706 	br	80e1e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80e1cc:	e0bffc17 	ldw	r2,-16(fp)
  80e1d0:	10800017 	ldw	r2,0(r2)
  80e1d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e1d8:	e0fffc17 	ldw	r3,-16(fp)
  80e1dc:	e0bfff17 	ldw	r2,-4(fp)
  80e1e0:	18bff01e 	bne	r3,r2,80e1a4 <__alt_mem_onchip_mem+0xff8061a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80e1e4:	0005883a 	mov	r2,zero
}
  80e1e8:	e037883a 	mov	sp,fp
  80e1ec:	dfc00117 	ldw	ra,4(sp)
  80e1f0:	df000017 	ldw	fp,0(sp)
  80e1f4:	dec00204 	addi	sp,sp,8
  80e1f8:	f800283a 	ret

0080e1fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80e1fc:	defffb04 	addi	sp,sp,-20
  80e200:	dfc00415 	stw	ra,16(sp)
  80e204:	df000315 	stw	fp,12(sp)
  80e208:	df000304 	addi	fp,sp,12
  80e20c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80e210:	d0a00417 	ldw	r2,-32752(gp)
  80e214:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e218:	00003106 	br	80e2e0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80e21c:	e0bffd17 	ldw	r2,-12(fp)
  80e220:	10800217 	ldw	r2,8(r2)
  80e224:	1009883a 	mov	r4,r2
  80e228:	0807a540 	call	807a54 <strlen>
  80e22c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80e230:	e0bffd17 	ldw	r2,-12(fp)
  80e234:	10c00217 	ldw	r3,8(r2)
  80e238:	e0bffe17 	ldw	r2,-8(fp)
  80e23c:	10bfffc4 	addi	r2,r2,-1
  80e240:	1885883a 	add	r2,r3,r2
  80e244:	10800003 	ldbu	r2,0(r2)
  80e248:	10803fcc 	andi	r2,r2,255
  80e24c:	1080201c 	xori	r2,r2,128
  80e250:	10bfe004 	addi	r2,r2,-128
  80e254:	10800bd8 	cmpnei	r2,r2,47
  80e258:	1000031e 	bne	r2,zero,80e268 <alt_find_file+0x6c>
    {
      len -= 1;
  80e25c:	e0bffe17 	ldw	r2,-8(fp)
  80e260:	10bfffc4 	addi	r2,r2,-1
  80e264:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e268:	e0bffe17 	ldw	r2,-8(fp)
  80e26c:	e0ffff17 	ldw	r3,-4(fp)
  80e270:	1885883a 	add	r2,r3,r2
  80e274:	10800003 	ldbu	r2,0(r2)
  80e278:	10803fcc 	andi	r2,r2,255
  80e27c:	1080201c 	xori	r2,r2,128
  80e280:	10bfe004 	addi	r2,r2,-128
  80e284:	10800be0 	cmpeqi	r2,r2,47
  80e288:	1000081e 	bne	r2,zero,80e2ac <alt_find_file+0xb0>
  80e28c:	e0bffe17 	ldw	r2,-8(fp)
  80e290:	e0ffff17 	ldw	r3,-4(fp)
  80e294:	1885883a 	add	r2,r3,r2
  80e298:	10800003 	ldbu	r2,0(r2)
  80e29c:	10803fcc 	andi	r2,r2,255
  80e2a0:	1080201c 	xori	r2,r2,128
  80e2a4:	10bfe004 	addi	r2,r2,-128
  80e2a8:	10000a1e 	bne	r2,zero,80e2d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80e2ac:	e0bffd17 	ldw	r2,-12(fp)
  80e2b0:	10800217 	ldw	r2,8(r2)
  80e2b4:	e0fffe17 	ldw	r3,-8(fp)
  80e2b8:	180d883a 	mov	r6,r3
  80e2bc:	e17fff17 	ldw	r5,-4(fp)
  80e2c0:	1009883a 	mov	r4,r2
  80e2c4:	080e5200 	call	80e520 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e2c8:	1000021e 	bne	r2,zero,80e2d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80e2cc:	e0bffd17 	ldw	r2,-12(fp)
  80e2d0:	00000706 	br	80e2f0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80e2d4:	e0bffd17 	ldw	r2,-12(fp)
  80e2d8:	10800017 	ldw	r2,0(r2)
  80e2dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e2e0:	e0fffd17 	ldw	r3,-12(fp)
  80e2e4:	d0a00404 	addi	r2,gp,-32752
  80e2e8:	18bfcc1e 	bne	r3,r2,80e21c <__alt_mem_onchip_mem+0xff80621c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80e2ec:	0005883a 	mov	r2,zero
}
  80e2f0:	e037883a 	mov	sp,fp
  80e2f4:	dfc00117 	ldw	ra,4(sp)
  80e2f8:	df000017 	ldw	fp,0(sp)
  80e2fc:	dec00204 	addi	sp,sp,8
  80e300:	f800283a 	ret

0080e304 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80e304:	defffc04 	addi	sp,sp,-16
  80e308:	df000315 	stw	fp,12(sp)
  80e30c:	df000304 	addi	fp,sp,12
  80e310:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80e314:	00bffa04 	movi	r2,-24
  80e318:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e31c:	e03ffd15 	stw	zero,-12(fp)
  80e320:	00001906 	br	80e388 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80e324:	00802074 	movhi	r2,129
  80e328:	10bd2704 	addi	r2,r2,-2916
  80e32c:	e0fffd17 	ldw	r3,-12(fp)
  80e330:	18c00324 	muli	r3,r3,12
  80e334:	10c5883a 	add	r2,r2,r3
  80e338:	10800017 	ldw	r2,0(r2)
  80e33c:	10000f1e 	bne	r2,zero,80e37c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80e340:	00802074 	movhi	r2,129
  80e344:	10bd2704 	addi	r2,r2,-2916
  80e348:	e0fffd17 	ldw	r3,-12(fp)
  80e34c:	18c00324 	muli	r3,r3,12
  80e350:	10c5883a 	add	r2,r2,r3
  80e354:	e0ffff17 	ldw	r3,-4(fp)
  80e358:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80e35c:	d0e00817 	ldw	r3,-32736(gp)
  80e360:	e0bffd17 	ldw	r2,-12(fp)
  80e364:	1880020e 	bge	r3,r2,80e370 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80e368:	e0bffd17 	ldw	r2,-12(fp)
  80e36c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80e370:	e0bffd17 	ldw	r2,-12(fp)
  80e374:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80e378:	00000606 	br	80e394 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e37c:	e0bffd17 	ldw	r2,-12(fp)
  80e380:	10800044 	addi	r2,r2,1
  80e384:	e0bffd15 	stw	r2,-12(fp)
  80e388:	e0bffd17 	ldw	r2,-12(fp)
  80e38c:	10800810 	cmplti	r2,r2,32
  80e390:	103fe41e 	bne	r2,zero,80e324 <__alt_mem_onchip_mem+0xff806324>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80e394:	e0bffe17 	ldw	r2,-8(fp)
}
  80e398:	e037883a 	mov	sp,fp
  80e39c:	df000017 	ldw	fp,0(sp)
  80e3a0:	dec00104 	addi	sp,sp,4
  80e3a4:	f800283a 	ret

0080e3a8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80e3a8:	defffb04 	addi	sp,sp,-20
  80e3ac:	df000415 	stw	fp,16(sp)
  80e3b0:	df000404 	addi	fp,sp,16
  80e3b4:	e13ffe15 	stw	r4,-8(fp)
  80e3b8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80e3bc:	e0bfff17 	ldw	r2,-4(fp)
  80e3c0:	10840070 	cmpltui	r2,r2,4097
  80e3c4:	1000021e 	bne	r2,zero,80e3d0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80e3c8:	00840004 	movi	r2,4096
  80e3cc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80e3d0:	e0fffe17 	ldw	r3,-8(fp)
  80e3d4:	e0bfff17 	ldw	r2,-4(fp)
  80e3d8:	1885883a 	add	r2,r3,r2
  80e3dc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80e3e0:	e0bffe17 	ldw	r2,-8(fp)
  80e3e4:	e0bffc15 	stw	r2,-16(fp)
  80e3e8:	00000506 	br	80e400 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80e3ec:	e0bffc17 	ldw	r2,-16(fp)
  80e3f0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80e3f4:	e0bffc17 	ldw	r2,-16(fp)
  80e3f8:	10800804 	addi	r2,r2,32
  80e3fc:	e0bffc15 	stw	r2,-16(fp)
  80e400:	e0fffc17 	ldw	r3,-16(fp)
  80e404:	e0bffd17 	ldw	r2,-12(fp)
  80e408:	18bff836 	bltu	r3,r2,80e3ec <__alt_mem_onchip_mem+0xff8063ec>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80e40c:	e0bffe17 	ldw	r2,-8(fp)
  80e410:	108007cc 	andi	r2,r2,31
  80e414:	10000226 	beq	r2,zero,80e420 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80e418:	e0bffc17 	ldw	r2,-16(fp)
  80e41c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80e420:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80e424:	0001883a 	nop
  80e428:	e037883a 	mov	sp,fp
  80e42c:	df000017 	ldw	fp,0(sp)
  80e430:	dec00104 	addi	sp,sp,4
  80e434:	f800283a 	ret

0080e438 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80e438:	defffe04 	addi	sp,sp,-8
  80e43c:	df000115 	stw	fp,4(sp)
  80e440:	df000104 	addi	fp,sp,4
  80e444:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80e448:	e0bfff17 	ldw	r2,-4(fp)
  80e44c:	10bffe84 	addi	r2,r2,-6
  80e450:	10c00428 	cmpgeui	r3,r2,16
  80e454:	18001a1e 	bne	r3,zero,80e4c0 <alt_exception_cause_generated_bad_addr+0x88>
  80e458:	100690ba 	slli	r3,r2,2
  80e45c:	00802074 	movhi	r2,129
  80e460:	10b91c04 	addi	r2,r2,-7056
  80e464:	1885883a 	add	r2,r3,r2
  80e468:	10800017 	ldw	r2,0(r2)
  80e46c:	1000683a 	jmp	r2
  80e470:	0080e4b0 	cmpltui	r2,zero,914
  80e474:	0080e4b0 	cmpltui	r2,zero,914
  80e478:	0080e4c0 	call	80e4c <__alt_mem_sdram-0x77f1b4>
  80e47c:	0080e4c0 	call	80e4c <__alt_mem_sdram-0x77f1b4>
  80e480:	0080e4c0 	call	80e4c <__alt_mem_sdram-0x77f1b4>
  80e484:	0080e4b0 	cmpltui	r2,zero,914
  80e488:	0080e4b8 	rdprs	r2,zero,914
  80e48c:	0080e4c0 	call	80e4c <__alt_mem_sdram-0x77f1b4>
  80e490:	0080e4b0 	cmpltui	r2,zero,914
  80e494:	0080e4b0 	cmpltui	r2,zero,914
  80e498:	0080e4c0 	call	80e4c <__alt_mem_sdram-0x77f1b4>
  80e49c:	0080e4b0 	cmpltui	r2,zero,914
  80e4a0:	0080e4b8 	rdprs	r2,zero,914
  80e4a4:	0080e4c0 	call	80e4c <__alt_mem_sdram-0x77f1b4>
  80e4a8:	0080e4c0 	call	80e4c <__alt_mem_sdram-0x77f1b4>
  80e4ac:	0080e4b0 	cmpltui	r2,zero,914
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80e4b0:	00800044 	movi	r2,1
  80e4b4:	00000306 	br	80e4c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80e4b8:	0005883a 	mov	r2,zero
  80e4bc:	00000106 	br	80e4c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80e4c0:	0005883a 	mov	r2,zero
  }
}
  80e4c4:	e037883a 	mov	sp,fp
  80e4c8:	df000017 	ldw	fp,0(sp)
  80e4cc:	dec00104 	addi	sp,sp,4
  80e4d0:	f800283a 	ret

0080e4d4 <atexit>:
  80e4d4:	200b883a 	mov	r5,r4
  80e4d8:	000f883a 	mov	r7,zero
  80e4dc:	000d883a 	mov	r6,zero
  80e4e0:	0009883a 	mov	r4,zero
  80e4e4:	080e59c1 	jmpi	80e59c <__register_exitproc>

0080e4e8 <exit>:
  80e4e8:	defffe04 	addi	sp,sp,-8
  80e4ec:	000b883a 	mov	r5,zero
  80e4f0:	dc000015 	stw	r16,0(sp)
  80e4f4:	dfc00115 	stw	ra,4(sp)
  80e4f8:	2021883a 	mov	r16,r4
  80e4fc:	080e6b40 	call	80e6b4 <__call_exitprocs>
  80e500:	00802074 	movhi	r2,129
  80e504:	10821804 	addi	r2,r2,2144
  80e508:	11000017 	ldw	r4,0(r2)
  80e50c:	20800f17 	ldw	r2,60(r4)
  80e510:	10000126 	beq	r2,zero,80e518 <exit+0x30>
  80e514:	103ee83a 	callr	r2
  80e518:	8009883a 	mov	r4,r16
  80e51c:	080e8340 	call	80e834 <_exit>

0080e520 <memcmp>:
  80e520:	01c000c4 	movi	r7,3
  80e524:	3980192e 	bgeu	r7,r6,80e58c <memcmp+0x6c>
  80e528:	2144b03a 	or	r2,r4,r5
  80e52c:	11c4703a 	and	r2,r2,r7
  80e530:	10000f26 	beq	r2,zero,80e570 <memcmp+0x50>
  80e534:	20800003 	ldbu	r2,0(r4)
  80e538:	28c00003 	ldbu	r3,0(r5)
  80e53c:	10c0151e 	bne	r2,r3,80e594 <memcmp+0x74>
  80e540:	31bfff84 	addi	r6,r6,-2
  80e544:	01ffffc4 	movi	r7,-1
  80e548:	00000406 	br	80e55c <memcmp+0x3c>
  80e54c:	20800003 	ldbu	r2,0(r4)
  80e550:	28c00003 	ldbu	r3,0(r5)
  80e554:	31bfffc4 	addi	r6,r6,-1
  80e558:	10c00e1e 	bne	r2,r3,80e594 <memcmp+0x74>
  80e55c:	21000044 	addi	r4,r4,1
  80e560:	29400044 	addi	r5,r5,1
  80e564:	31fff91e 	bne	r6,r7,80e54c <__alt_mem_onchip_mem+0xff80654c>
  80e568:	0005883a 	mov	r2,zero
  80e56c:	f800283a 	ret
  80e570:	20c00017 	ldw	r3,0(r4)
  80e574:	28800017 	ldw	r2,0(r5)
  80e578:	18bfee1e 	bne	r3,r2,80e534 <__alt_mem_onchip_mem+0xff806534>
  80e57c:	31bfff04 	addi	r6,r6,-4
  80e580:	21000104 	addi	r4,r4,4
  80e584:	29400104 	addi	r5,r5,4
  80e588:	39bff936 	bltu	r7,r6,80e570 <__alt_mem_onchip_mem+0xff806570>
  80e58c:	303fe91e 	bne	r6,zero,80e534 <__alt_mem_onchip_mem+0xff806534>
  80e590:	003ff506 	br	80e568 <__alt_mem_onchip_mem+0xff806568>
  80e594:	10c5c83a 	sub	r2,r2,r3
  80e598:	f800283a 	ret

0080e59c <__register_exitproc>:
  80e59c:	defffa04 	addi	sp,sp,-24
  80e5a0:	dc000315 	stw	r16,12(sp)
  80e5a4:	04002074 	movhi	r16,129
  80e5a8:	84021804 	addi	r16,r16,2144
  80e5ac:	80c00017 	ldw	r3,0(r16)
  80e5b0:	dc400415 	stw	r17,16(sp)
  80e5b4:	dfc00515 	stw	ra,20(sp)
  80e5b8:	18805217 	ldw	r2,328(r3)
  80e5bc:	2023883a 	mov	r17,r4
  80e5c0:	10003726 	beq	r2,zero,80e6a0 <__register_exitproc+0x104>
  80e5c4:	10c00117 	ldw	r3,4(r2)
  80e5c8:	010007c4 	movi	r4,31
  80e5cc:	20c00e16 	blt	r4,r3,80e608 <__register_exitproc+0x6c>
  80e5d0:	1a000044 	addi	r8,r3,1
  80e5d4:	8800221e 	bne	r17,zero,80e660 <__register_exitproc+0xc4>
  80e5d8:	18c00084 	addi	r3,r3,2
  80e5dc:	18c7883a 	add	r3,r3,r3
  80e5e0:	18c7883a 	add	r3,r3,r3
  80e5e4:	12000115 	stw	r8,4(r2)
  80e5e8:	10c7883a 	add	r3,r2,r3
  80e5ec:	19400015 	stw	r5,0(r3)
  80e5f0:	0005883a 	mov	r2,zero
  80e5f4:	dfc00517 	ldw	ra,20(sp)
  80e5f8:	dc400417 	ldw	r17,16(sp)
  80e5fc:	dc000317 	ldw	r16,12(sp)
  80e600:	dec00604 	addi	sp,sp,24
  80e604:	f800283a 	ret
  80e608:	00800034 	movhi	r2,0
  80e60c:	10800004 	addi	r2,r2,0
  80e610:	10002626 	beq	r2,zero,80e6ac <__register_exitproc+0x110>
  80e614:	01006404 	movi	r4,400
  80e618:	d9400015 	stw	r5,0(sp)
  80e61c:	d9800115 	stw	r6,4(sp)
  80e620:	d9c00215 	stw	r7,8(sp)
  80e624:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80e628:	d9400017 	ldw	r5,0(sp)
  80e62c:	d9800117 	ldw	r6,4(sp)
  80e630:	d9c00217 	ldw	r7,8(sp)
  80e634:	10001d26 	beq	r2,zero,80e6ac <__register_exitproc+0x110>
  80e638:	81000017 	ldw	r4,0(r16)
  80e63c:	10000115 	stw	zero,4(r2)
  80e640:	02000044 	movi	r8,1
  80e644:	22405217 	ldw	r9,328(r4)
  80e648:	0007883a 	mov	r3,zero
  80e64c:	12400015 	stw	r9,0(r2)
  80e650:	20805215 	stw	r2,328(r4)
  80e654:	10006215 	stw	zero,392(r2)
  80e658:	10006315 	stw	zero,396(r2)
  80e65c:	883fde26 	beq	r17,zero,80e5d8 <__alt_mem_onchip_mem+0xff8065d8>
  80e660:	18c9883a 	add	r4,r3,r3
  80e664:	2109883a 	add	r4,r4,r4
  80e668:	1109883a 	add	r4,r2,r4
  80e66c:	21802215 	stw	r6,136(r4)
  80e670:	01800044 	movi	r6,1
  80e674:	12406217 	ldw	r9,392(r2)
  80e678:	30cc983a 	sll	r6,r6,r3
  80e67c:	4992b03a 	or	r9,r9,r6
  80e680:	12406215 	stw	r9,392(r2)
  80e684:	21c04215 	stw	r7,264(r4)
  80e688:	01000084 	movi	r4,2
  80e68c:	893fd21e 	bne	r17,r4,80e5d8 <__alt_mem_onchip_mem+0xff8065d8>
  80e690:	11006317 	ldw	r4,396(r2)
  80e694:	218cb03a 	or	r6,r4,r6
  80e698:	11806315 	stw	r6,396(r2)
  80e69c:	003fce06 	br	80e5d8 <__alt_mem_onchip_mem+0xff8065d8>
  80e6a0:	18805304 	addi	r2,r3,332
  80e6a4:	18805215 	stw	r2,328(r3)
  80e6a8:	003fc606 	br	80e5c4 <__alt_mem_onchip_mem+0xff8065c4>
  80e6ac:	00bfffc4 	movi	r2,-1
  80e6b0:	003fd006 	br	80e5f4 <__alt_mem_onchip_mem+0xff8065f4>

0080e6b4 <__call_exitprocs>:
  80e6b4:	defff504 	addi	sp,sp,-44
  80e6b8:	df000915 	stw	fp,36(sp)
  80e6bc:	dd400615 	stw	r21,24(sp)
  80e6c0:	dc800315 	stw	r18,12(sp)
  80e6c4:	dfc00a15 	stw	ra,40(sp)
  80e6c8:	ddc00815 	stw	r23,32(sp)
  80e6cc:	dd800715 	stw	r22,28(sp)
  80e6d0:	dd000515 	stw	r20,20(sp)
  80e6d4:	dcc00415 	stw	r19,16(sp)
  80e6d8:	dc400215 	stw	r17,8(sp)
  80e6dc:	dc000115 	stw	r16,4(sp)
  80e6e0:	d9000015 	stw	r4,0(sp)
  80e6e4:	2839883a 	mov	fp,r5
  80e6e8:	04800044 	movi	r18,1
  80e6ec:	057fffc4 	movi	r21,-1
  80e6f0:	00802074 	movhi	r2,129
  80e6f4:	10821804 	addi	r2,r2,2144
  80e6f8:	12000017 	ldw	r8,0(r2)
  80e6fc:	45005217 	ldw	r20,328(r8)
  80e700:	44c05204 	addi	r19,r8,328
  80e704:	a0001c26 	beq	r20,zero,80e778 <__call_exitprocs+0xc4>
  80e708:	a0800117 	ldw	r2,4(r20)
  80e70c:	15ffffc4 	addi	r23,r2,-1
  80e710:	b8000d16 	blt	r23,zero,80e748 <__call_exitprocs+0x94>
  80e714:	14000044 	addi	r16,r2,1
  80e718:	8421883a 	add	r16,r16,r16
  80e71c:	8421883a 	add	r16,r16,r16
  80e720:	84402004 	addi	r17,r16,128
  80e724:	a463883a 	add	r17,r20,r17
  80e728:	a421883a 	add	r16,r20,r16
  80e72c:	e0001e26 	beq	fp,zero,80e7a8 <__call_exitprocs+0xf4>
  80e730:	80804017 	ldw	r2,256(r16)
  80e734:	e0801c26 	beq	fp,r2,80e7a8 <__call_exitprocs+0xf4>
  80e738:	bdffffc4 	addi	r23,r23,-1
  80e73c:	843fff04 	addi	r16,r16,-4
  80e740:	8c7fff04 	addi	r17,r17,-4
  80e744:	bd7ff91e 	bne	r23,r21,80e72c <__alt_mem_onchip_mem+0xff80672c>
  80e748:	00800034 	movhi	r2,0
  80e74c:	10800004 	addi	r2,r2,0
  80e750:	10000926 	beq	r2,zero,80e778 <__call_exitprocs+0xc4>
  80e754:	a0800117 	ldw	r2,4(r20)
  80e758:	1000301e 	bne	r2,zero,80e81c <__call_exitprocs+0x168>
  80e75c:	a0800017 	ldw	r2,0(r20)
  80e760:	10003226 	beq	r2,zero,80e82c <__call_exitprocs+0x178>
  80e764:	a009883a 	mov	r4,r20
  80e768:	98800015 	stw	r2,0(r19)
  80e76c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80e770:	9d000017 	ldw	r20,0(r19)
  80e774:	a03fe41e 	bne	r20,zero,80e708 <__alt_mem_onchip_mem+0xff806708>
  80e778:	dfc00a17 	ldw	ra,40(sp)
  80e77c:	df000917 	ldw	fp,36(sp)
  80e780:	ddc00817 	ldw	r23,32(sp)
  80e784:	dd800717 	ldw	r22,28(sp)
  80e788:	dd400617 	ldw	r21,24(sp)
  80e78c:	dd000517 	ldw	r20,20(sp)
  80e790:	dcc00417 	ldw	r19,16(sp)
  80e794:	dc800317 	ldw	r18,12(sp)
  80e798:	dc400217 	ldw	r17,8(sp)
  80e79c:	dc000117 	ldw	r16,4(sp)
  80e7a0:	dec00b04 	addi	sp,sp,44
  80e7a4:	f800283a 	ret
  80e7a8:	a0800117 	ldw	r2,4(r20)
  80e7ac:	80c00017 	ldw	r3,0(r16)
  80e7b0:	10bfffc4 	addi	r2,r2,-1
  80e7b4:	15c01426 	beq	r2,r23,80e808 <__call_exitprocs+0x154>
  80e7b8:	80000015 	stw	zero,0(r16)
  80e7bc:	183fde26 	beq	r3,zero,80e738 <__alt_mem_onchip_mem+0xff806738>
  80e7c0:	95c8983a 	sll	r4,r18,r23
  80e7c4:	a0806217 	ldw	r2,392(r20)
  80e7c8:	a5800117 	ldw	r22,4(r20)
  80e7cc:	2084703a 	and	r2,r4,r2
  80e7d0:	10000b26 	beq	r2,zero,80e800 <__call_exitprocs+0x14c>
  80e7d4:	a0806317 	ldw	r2,396(r20)
  80e7d8:	2088703a 	and	r4,r4,r2
  80e7dc:	20000c1e 	bne	r4,zero,80e810 <__call_exitprocs+0x15c>
  80e7e0:	89400017 	ldw	r5,0(r17)
  80e7e4:	d9000017 	ldw	r4,0(sp)
  80e7e8:	183ee83a 	callr	r3
  80e7ec:	a0800117 	ldw	r2,4(r20)
  80e7f0:	15bfbf1e 	bne	r2,r22,80e6f0 <__alt_mem_onchip_mem+0xff8066f0>
  80e7f4:	98800017 	ldw	r2,0(r19)
  80e7f8:	153fcf26 	beq	r2,r20,80e738 <__alt_mem_onchip_mem+0xff806738>
  80e7fc:	003fbc06 	br	80e6f0 <__alt_mem_onchip_mem+0xff8066f0>
  80e800:	183ee83a 	callr	r3
  80e804:	003ff906 	br	80e7ec <__alt_mem_onchip_mem+0xff8067ec>
  80e808:	a5c00115 	stw	r23,4(r20)
  80e80c:	003feb06 	br	80e7bc <__alt_mem_onchip_mem+0xff8067bc>
  80e810:	89000017 	ldw	r4,0(r17)
  80e814:	183ee83a 	callr	r3
  80e818:	003ff406 	br	80e7ec <__alt_mem_onchip_mem+0xff8067ec>
  80e81c:	a0800017 	ldw	r2,0(r20)
  80e820:	a027883a 	mov	r19,r20
  80e824:	1029883a 	mov	r20,r2
  80e828:	003fb606 	br	80e704 <__alt_mem_onchip_mem+0xff806704>
  80e82c:	0005883a 	mov	r2,zero
  80e830:	003ffb06 	br	80e820 <__alt_mem_onchip_mem+0xff806820>

0080e834 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80e834:	defffd04 	addi	sp,sp,-12
  80e838:	df000215 	stw	fp,8(sp)
  80e83c:	df000204 	addi	fp,sp,8
  80e840:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80e844:	0001883a 	nop
  80e848:	e0bfff17 	ldw	r2,-4(fp)
  80e84c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80e850:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80e854:	10000226 	beq	r2,zero,80e860 <_exit+0x2c>
    ALT_SIM_FAIL();
  80e858:	002af070 	cmpltui	zero,zero,43969
  80e85c:	00000106 	br	80e864 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80e860:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80e864:	003fff06 	br	80e864 <__alt_mem_onchip_mem+0xff806864>
