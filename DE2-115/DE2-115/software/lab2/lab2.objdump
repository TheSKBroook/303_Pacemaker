
lab2.elf:     file format elf32-littlenios2
lab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004ec8 memsz 0x00004ec8 flags r-x
    LOAD off    0x00005ee8 vaddr 0x00804ee8 paddr 0x0080672c align 2**12
         filesz 0x00001844 memsz 0x00001844 flags rw-
    LOAD off    0x00007f70 vaddr 0x00807f70 paddr 0x00807f70 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000049dc  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002c8  00804c20  00804c20  00005c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001844  00804ee8  0080672c  00005ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00807f70  00807f70  00007f70  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00808090  00808090  0000772c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0000772c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000772c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000770  00000000  00000000  00007750  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a02b  00000000  00000000  00007ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003933  00000000  00000000  00011eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003d4a  00000000  00000000  0001581e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000107c  00000000  00000000  00019568  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002398  00000000  00000000  0001a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000de4  00000000  00000000  0001c97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0001d760  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000200  00000000  00000000  0001d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001fb4a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0001fb4d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001fb50  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001fb51  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0001fb52  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0001fb5b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0001fb64  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0001fb6d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001d  00000000  00000000  0001fb79  2**0
                  CONTENTS, READONLY
 27 .jdi          00004de2  00000000  00000000  0001fb96  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000677b7  00000000  00000000  00024978  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00804c20 l    d  .rodata	00000000 .rodata
00804ee8 l    d  .rwdata	00000000 .rwdata
00807f70 l    d  .bss	00000000 .bss
00808090 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab2_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cs303_lab2.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00800c84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00800dec l     F .text	00000034 alt_dev_reg
00804ee8 l     O .rwdata	00001060 jtag_uart
00805f48 l     O .rwdata	00000120 lcd
00806068 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00801114 l     F .text	0000020c altera_avalon_jtag_uart_irq
00801320 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008066fc l     O .rwdata	00000004 colstart
00801958 l     F .text	000000b8 lcd_write_command
00801a10 l     F .text	000000d8 lcd_write_data
00801ae8 l     F .text	000000d0 lcd_clear_screen
00801bb8 l     F .text	000001ec lcd_repaint_screen
00801da4 l     F .text	000000cc lcd_scroll_up
00801e70 l     F .text	000002ac lcd_handle_escape
008025f4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00802834 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00802ae4 l     F .text	0000009c altera_avalon_uart_irq
00802b80 l     F .text	000000e4 altera_avalon_uart_rxirq
00802c64 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00802e00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00803018 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080332c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00803480 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008034ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00803920 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00803a60 l     F .text	0000003c alt_get_errno
00803a9c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00804d63 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
008062d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00807f88 g     O .bss	00000004 alt_instruction_exception_handler
00800d70 g     F .text	0000007c alt_main
00807f90 g     O .bss	00000100 alt_irq
0080672c g       *ABS*	00000000 __flash_rwdata_start
00803eec g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807f8c g     O .bss	00000004 errno
00807f78 g     O .bss	00000004 alt_argv
0080e6f8 g       *ABS*	00000000 _gp
00803ebc g     F .text	00000030 usleep
00800904 g     F .text	00000058 reset
00806154 g     O .rwdata	00000180 alt_fd_list
00804068 g     F .text	00000090 alt_find_dev
00804498 g     F .text	00000148 memcpy
008039e4 g     F .text	0000007c alt_io_redirect
00804c20 g       *ABS*	00000000 __DTOR_END__
00804334 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00801518 g     F .text	0000021c altera_avalon_jtag_uart_read
00804b30 g     F .text	00000064 .hidden __udivsi3
008042a4 g     F .text	00000090 alt_icache_flush
00806710 g     O .rwdata	00000004 alt_max_fd
00800b04 g     F .text	00000180 alt_irq_register
00806724 g     O .rwdata	00000004 _global_impure_ptr
00808090 g       *ABS*	00000000 __bss_end
00803830 g     F .text	000000f0 alt_iic_isr_register
00803db4 g     F .text	00000108 alt_tick
00802a38 g     F .text	000000ac altera_avalon_uart_init
008037e4 g     F .text	0000004c alt_ic_irq_enabled
00803d18 g     F .text	0000009c alt_alarm_stop
00807f70 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080612c g     O .rwdata	00000028 alt_dev_null
00803438 g     F .text	00000048 alt_dcache_flush_all
0080672c g       *ABS*	00000000 __ram_rwdata_end
00806708 g     O .rwdata	00000008 alt_dev_list
00804ee8 g       *ABS*	00000000 __ram_rodata_end
00804b94 g     F .text	00000058 .hidden __umodsi3
00808090 g       *ABS*	00000000 end
0080211c g     F .text	000004d8 altera_avalon_lcd_16207_write
00803054 g     F .text	000001ac altera_avalon_uart_write
00801054 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00804c20 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008028ac g     F .text	0000007c alt_avalon_timer_sc_init
00802988 g     F .text	00000060 altera_avalon_uart_write_fd
008029e8 g     F .text	00000050 altera_avalon_uart_close_fd
00801734 g     F .text	00000224 altera_avalon_jtag_uart_write
008048b8 g     F .text	00000180 __call_exitprocs
00800244 g     F .text	0000004c _start
00807f80 g     O .bss	00000004 _alt_tick_rate
00807f84 g     O .bss	00000004 _alt_nticks
00800e58 g     F .text	00000098 alt_sys_init
008047a0 g     F .text	00000118 __register_exitproc
008013c0 g     F .text	00000068 altera_avalon_jtag_uart_close
00804ee8 g       *ABS*	00000000 __ram_rwdata_start
00804c20 g       *ABS*	00000000 __ram_rodata_start
00800ef0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00804200 g     F .text	000000a4 alt_get_fd
00803f10 g     F .text	00000158 alt_busy_sleep
0080441c g     F .text	0000007c memcmp
00800fb0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00808090 g       *ABS*	00000000 __alt_stack_base
00801000 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080095c g     F .text	0000006c tick
008040f8 g     F .text	00000108 alt_find_file
008034e8 g     F .text	000000a4 alt_dev_llist_insert
00807f70 g       *ABS*	00000000 __bss_start
008045e0 g     F .text	00000128 memset
00800a14 g     F .text	000000f0 main
00807f7c g     O .bss	00000004 alt_envp
00800f50 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008026a0 g     F .text	00000134 altera_avalon_lcd_16207_init
00806714 g     O .rwdata	00000004 alt_errno
00804a38 g     F .text	00000084 .hidden __divsi3
00804c20 g       *ABS*	00000000 __CTOR_END__
00804c20 g       *ABS*	00000000 __flash_rodata_start
00804c20 g       *ABS*	00000000 __DTOR_LIST__
00800e20 g     F .text	00000038 alt_irq_init
00803cb4 g     F .text	00000064 alt_release_fd
008043d0 g     F .text	00000014 atexit
00806728 g     O .rwdata	00000004 _impure_ptr
00807f74 g     O .bss	00000004 alt_argc
008035ec g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008027d4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00806700 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00803680 g     F .text	00000050 alt_ic_isr_register
0080672c g       *ABS*	00000000 _edata
00802928 g     F .text	00000060 altera_avalon_uart_read_fd
00808090 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00801428 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00803758 g     F .text	0000008c alt_ic_irq_disable
008043e4 g     F .text	00000038 exit
00804abc g     F .text	00000074 .hidden __modsi3
00800290 g     F .text	00000674 logic
00806720 g     O .rwdata	00000004 __ctype_ptr__
008009c8 g     F .text	0000004c button_interrupts_function
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00804c62 g     O .rodata	00000101 _ctype_
00802dac g     F .text	00000054 altera_avalon_uart_close
00804bec g     F .text	00000034 _exit
00803200 g     F .text	0000012c alt_alarm_start
00804708 g     F .text	00000098 strlen
00803b60 g     F .text	00000154 open
0080364c g     F .text	00000034 alt_icache_flush_all
008066f8 g     O .rwdata	00000004 alt_priority_mask
008036d0 g     F .text	00000088 alt_ic_irq_enable
00802e3c g     F .text	000001dc altera_avalon_uart_read
00806718 g     O .rwdata	00000008 alt_alarm_list
0080358c g     F .text	00000060 _do_ctors
00803368 g     F .text	000000d0 close
00800cec g     F .text	00000084 alt_load



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802034 	movhi	r2,128
  800140:	109fe404 	addi	r2,r2,32656
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	109fe404 	addi	r2,r2,32656
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a62417 	ldw	r2,-26480(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a62417 	ldw	r2,-26480(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6b9be14 	ori	gp,gp,59128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	109fdc14 	ori	r2,r2,32624

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18e02414 	ori	r3,r3,32912

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0800cec0 	call	800cec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	0800d700 	call	800d70 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <logic>:
 * http://rtsys.informatik.uni-kiel.de/kieler
 */

#include "cs303_lab2.h"

void logic(TickData* d) {
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
  80029c:	e13fff15 	stw	r4,-4(fp)
  d->_g5 = d->_pg14_e1;
  8002a0:	e0bfff17 	ldw	r2,-4(fp)
  8002a4:	10c006c3 	ldbu	r3,27(r2)
  8002a8:	e0bfff17 	ldw	r2,-4(fp)
  8002ac:	10c00105 	stb	r3,4(r2)
  d->_g10 = d->_pg14;
  8002b0:	e0bfff17 	ldw	r2,-4(fp)
  8002b4:	10c00703 	ldbu	r3,28(r2)
  8002b8:	e0bfff17 	ldw	r2,-4(fp)
  8002bc:	10c001c5 	stb	r3,7(r2)
  d->_g14_e1 = !(d->_g5 || d->_g10);
  8002c0:	e0bfff17 	ldw	r2,-4(fp)
  8002c4:	10800103 	ldbu	r2,4(r2)
  8002c8:	10803fcc 	andi	r2,r2,255
  8002cc:	1080201c 	xori	r2,r2,128
  8002d0:	10bfe004 	addi	r2,r2,-128
  8002d4:	1000081e 	bne	r2,zero,8002f8 <logic+0x68>
  8002d8:	e0bfff17 	ldw	r2,-4(fp)
  8002dc:	108001c3 	ldbu	r2,7(r2)
  8002e0:	10803fcc 	andi	r2,r2,255
  8002e4:	1080201c 	xori	r2,r2,128
  8002e8:	10bfe004 	addi	r2,r2,-128
  8002ec:	1000021e 	bne	r2,zero,8002f8 <logic+0x68>
  8002f0:	00800044 	movi	r2,1
  8002f4:	00000106 	br	8002fc <logic+0x6c>
  8002f8:	0005883a 	mov	r2,zero
  8002fc:	1007883a 	mov	r3,r2
  800300:	e0bfff17 	ldw	r2,-4(fp)
  800304:	10c00605 	stb	r3,24(r2)
  d->_g6_e1 = !d->_g5;
  800308:	e0bfff17 	ldw	r2,-4(fp)
  80030c:	10800103 	ldbu	r2,4(r2)
  800310:	10803fcc 	andi	r2,r2,255
  800314:	1080201c 	xori	r2,r2,128
  800318:	10bfe004 	addi	r2,r2,-128
  80031c:	1005003a 	cmpeq	r2,r2,zero
  800320:	1007883a 	mov	r3,r2
  800324:	e0bfff17 	ldw	r2,-4(fp)
  800328:	10c00585 	stb	r3,22(r2)
  d->_g7 = d->_g5 && !d->R;
  80032c:	e0bfff17 	ldw	r2,-4(fp)
  800330:	10800103 	ldbu	r2,4(r2)
  800334:	10803fcc 	andi	r2,r2,255
  800338:	1080201c 	xori	r2,r2,128
  80033c:	10bfe004 	addi	r2,r2,-128
  800340:	10000826 	beq	r2,zero,800364 <logic+0xd4>
  800344:	e0bfff17 	ldw	r2,-4(fp)
  800348:	10800083 	ldbu	r2,2(r2)
  80034c:	10803fcc 	andi	r2,r2,255
  800350:	1080201c 	xori	r2,r2,128
  800354:	10bfe004 	addi	r2,r2,-128
  800358:	1000021e 	bne	r2,zero,800364 <logic+0xd4>
  80035c:	00800044 	movi	r2,1
  800360:	00000106 	br	800368 <logic+0xd8>
  800364:	0005883a 	mov	r2,zero
  800368:	1007883a 	mov	r3,r2
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	10c00185 	stb	r3,6(r2)
  d->_g5 = (d->_g5 && d->R) || (d->_g7 && d->A);
  800374:	e0bfff17 	ldw	r2,-4(fp)
  800378:	10800103 	ldbu	r2,4(r2)
  80037c:	10803fcc 	andi	r2,r2,255
  800380:	1080201c 	xori	r2,r2,128
  800384:	10bfe004 	addi	r2,r2,-128
  800388:	10000626 	beq	r2,zero,8003a4 <logic+0x114>
  80038c:	e0bfff17 	ldw	r2,-4(fp)
  800390:	10800083 	ldbu	r2,2(r2)
  800394:	10803fcc 	andi	r2,r2,255
  800398:	1080201c 	xori	r2,r2,128
  80039c:	10bfe004 	addi	r2,r2,-128
  8003a0:	10000c1e 	bne	r2,zero,8003d4 <logic+0x144>
  8003a4:	e0bfff17 	ldw	r2,-4(fp)
  8003a8:	10800183 	ldbu	r2,6(r2)
  8003ac:	10803fcc 	andi	r2,r2,255
  8003b0:	1080201c 	xori	r2,r2,128
  8003b4:	10bfe004 	addi	r2,r2,-128
  8003b8:	10000826 	beq	r2,zero,8003dc <logic+0x14c>
  8003bc:	e0bfff17 	ldw	r2,-4(fp)
  8003c0:	10800003 	ldbu	r2,0(r2)
  8003c4:	10803fcc 	andi	r2,r2,255
  8003c8:	1080201c 	xori	r2,r2,128
  8003cc:	10bfe004 	addi	r2,r2,-128
  8003d0:	10000226 	beq	r2,zero,8003dc <logic+0x14c>
  8003d4:	00800044 	movi	r2,1
  8003d8:	00000106 	br	8003e0 <logic+0x150>
  8003dc:	0005883a 	mov	r2,zero
  8003e0:	1007883a 	mov	r3,r2
  8003e4:	e0bfff17 	ldw	r2,-4(fp)
  8003e8:	10c00105 	stb	r3,4(r2)
  d->_g11_e2 = !d->_g10;
  8003ec:	e0bfff17 	ldw	r2,-4(fp)
  8003f0:	108001c3 	ldbu	r2,7(r2)
  8003f4:	10803fcc 	andi	r2,r2,255
  8003f8:	1080201c 	xori	r2,r2,128
  8003fc:	10bfe004 	addi	r2,r2,-128
  800400:	1005003a 	cmpeq	r2,r2,zero
  800404:	1007883a 	mov	r3,r2
  800408:	e0bfff17 	ldw	r2,-4(fp)
  80040c:	10c005c5 	stb	r3,23(r2)
  d->_g12 = d->_g10 && !d->R;
  800410:	e0bfff17 	ldw	r2,-4(fp)
  800414:	108001c3 	ldbu	r2,7(r2)
  800418:	10803fcc 	andi	r2,r2,255
  80041c:	1080201c 	xori	r2,r2,128
  800420:	10bfe004 	addi	r2,r2,-128
  800424:	10000826 	beq	r2,zero,800448 <logic+0x1b8>
  800428:	e0bfff17 	ldw	r2,-4(fp)
  80042c:	10800083 	ldbu	r2,2(r2)
  800430:	10803fcc 	andi	r2,r2,255
  800434:	1080201c 	xori	r2,r2,128
  800438:	10bfe004 	addi	r2,r2,-128
  80043c:	1000021e 	bne	r2,zero,800448 <logic+0x1b8>
  800440:	00800044 	movi	r2,1
  800444:	00000106 	br	80044c <logic+0x1bc>
  800448:	0005883a 	mov	r2,zero
  80044c:	1007883a 	mov	r3,r2
  800450:	e0bfff17 	ldw	r2,-4(fp)
  800454:	10c00245 	stb	r3,9(r2)
  d->_g10 = (d->_g10 && d->R) || (d->_g12 && d->B);
  800458:	e0bfff17 	ldw	r2,-4(fp)
  80045c:	108001c3 	ldbu	r2,7(r2)
  800460:	10803fcc 	andi	r2,r2,255
  800464:	1080201c 	xori	r2,r2,128
  800468:	10bfe004 	addi	r2,r2,-128
  80046c:	10000626 	beq	r2,zero,800488 <logic+0x1f8>
  800470:	e0bfff17 	ldw	r2,-4(fp)
  800474:	10800083 	ldbu	r2,2(r2)
  800478:	10803fcc 	andi	r2,r2,255
  80047c:	1080201c 	xori	r2,r2,128
  800480:	10bfe004 	addi	r2,r2,-128
  800484:	10000c1e 	bne	r2,zero,8004b8 <logic+0x228>
  800488:	e0bfff17 	ldw	r2,-4(fp)
  80048c:	10800243 	ldbu	r2,9(r2)
  800490:	10803fcc 	andi	r2,r2,255
  800494:	1080201c 	xori	r2,r2,128
  800498:	10bfe004 	addi	r2,r2,-128
  80049c:	10000826 	beq	r2,zero,8004c0 <logic+0x230>
  8004a0:	e0bfff17 	ldw	r2,-4(fp)
  8004a4:	10800043 	ldbu	r2,1(r2)
  8004a8:	10803fcc 	andi	r2,r2,255
  8004ac:	1080201c 	xori	r2,r2,128
  8004b0:	10bfe004 	addi	r2,r2,-128
  8004b4:	10000226 	beq	r2,zero,8004c0 <logic+0x230>
  8004b8:	00800044 	movi	r2,1
  8004bc:	00000106 	br	8004c4 <logic+0x234>
  8004c0:	0005883a 	mov	r2,zero
  8004c4:	1007883a 	mov	r3,r2
  8004c8:	e0bfff17 	ldw	r2,-4(fp)
  8004cc:	10c001c5 	stb	r3,7(r2)
  d->_g11_e2 = (d->_g6_e1 || d->_g5) && (d->_g11_e2 || d->_g10) && (d->_g5 || d->_g10);
  8004d0:	e0bfff17 	ldw	r2,-4(fp)
  8004d4:	10800583 	ldbu	r2,22(r2)
  8004d8:	10803fcc 	andi	r2,r2,255
  8004dc:	1080201c 	xori	r2,r2,128
  8004e0:	10bfe004 	addi	r2,r2,-128
  8004e4:	1000061e 	bne	r2,zero,800500 <logic+0x270>
  8004e8:	e0bfff17 	ldw	r2,-4(fp)
  8004ec:	10800103 	ldbu	r2,4(r2)
  8004f0:	10803fcc 	andi	r2,r2,255
  8004f4:	1080201c 	xori	r2,r2,128
  8004f8:	10bfe004 	addi	r2,r2,-128
  8004fc:	10001a26 	beq	r2,zero,800568 <logic+0x2d8>
  800500:	e0bfff17 	ldw	r2,-4(fp)
  800504:	108005c3 	ldbu	r2,23(r2)
  800508:	10803fcc 	andi	r2,r2,255
  80050c:	1080201c 	xori	r2,r2,128
  800510:	10bfe004 	addi	r2,r2,-128
  800514:	1000061e 	bne	r2,zero,800530 <logic+0x2a0>
  800518:	e0bfff17 	ldw	r2,-4(fp)
  80051c:	108001c3 	ldbu	r2,7(r2)
  800520:	10803fcc 	andi	r2,r2,255
  800524:	1080201c 	xori	r2,r2,128
  800528:	10bfe004 	addi	r2,r2,-128
  80052c:	10000e26 	beq	r2,zero,800568 <logic+0x2d8>
  800530:	e0bfff17 	ldw	r2,-4(fp)
  800534:	10800103 	ldbu	r2,4(r2)
  800538:	10803fcc 	andi	r2,r2,255
  80053c:	1080201c 	xori	r2,r2,128
  800540:	10bfe004 	addi	r2,r2,-128
  800544:	1000061e 	bne	r2,zero,800560 <logic+0x2d0>
  800548:	e0bfff17 	ldw	r2,-4(fp)
  80054c:	108001c3 	ldbu	r2,7(r2)
  800550:	10803fcc 	andi	r2,r2,255
  800554:	1080201c 	xori	r2,r2,128
  800558:	10bfe004 	addi	r2,r2,-128
  80055c:	10000226 	beq	r2,zero,800568 <logic+0x2d8>
  800560:	00800044 	movi	r2,1
  800564:	00000106 	br	80056c <logic+0x2dc>
  800568:	0005883a 	mov	r2,zero
  80056c:	1007883a 	mov	r3,r2
  800570:	e0bfff17 	ldw	r2,-4(fp)
  800574:	10c005c5 	stb	r3,23(r2)
  d->_g11 = d->_g11_e2 && !d->R;
  800578:	e0bfff17 	ldw	r2,-4(fp)
  80057c:	108005c3 	ldbu	r2,23(r2)
  800580:	10803fcc 	andi	r2,r2,255
  800584:	1080201c 	xori	r2,r2,128
  800588:	10bfe004 	addi	r2,r2,-128
  80058c:	10000826 	beq	r2,zero,8005b0 <logic+0x320>
  800590:	e0bfff17 	ldw	r2,-4(fp)
  800594:	10800083 	ldbu	r2,2(r2)
  800598:	10803fcc 	andi	r2,r2,255
  80059c:	1080201c 	xori	r2,r2,128
  8005a0:	10bfe004 	addi	r2,r2,-128
  8005a4:	1000021e 	bne	r2,zero,8005b0 <logic+0x320>
  8005a8:	00800044 	movi	r2,1
  8005ac:	00000106 	br	8005b4 <logic+0x324>
  8005b0:	0005883a 	mov	r2,zero
  8005b4:	1007883a 	mov	r3,r2
  8005b8:	e0bfff17 	ldw	r2,-4(fp)
  8005bc:	10c00205 	stb	r3,8(r2)
  if (d->_g11) {
  8005c0:	e0bfff17 	ldw	r2,-4(fp)
  8005c4:	10800203 	ldbu	r2,8(r2)
  8005c8:	10803fcc 	andi	r2,r2,255
  8005cc:	1080201c 	xori	r2,r2,128
  8005d0:	10bfe004 	addi	r2,r2,-128
  8005d4:	10000326 	beq	r2,zero,8005e4 <logic+0x354>
    d->O = 1;
  8005d8:	e0bfff17 	ldw	r2,-4(fp)
  8005dc:	00c00044 	movi	r3,1
  8005e0:	10c000c5 	stb	r3,3(r2)
  }
  d->_g6_e1 = (d->_g11_e2 && d->R) || d->_g11;
  8005e4:	e0bfff17 	ldw	r2,-4(fp)
  8005e8:	108005c3 	ldbu	r2,23(r2)
  8005ec:	10803fcc 	andi	r2,r2,255
  8005f0:	1080201c 	xori	r2,r2,128
  8005f4:	10bfe004 	addi	r2,r2,-128
  8005f8:	10000626 	beq	r2,zero,800614 <logic+0x384>
  8005fc:	e0bfff17 	ldw	r2,-4(fp)
  800600:	10800083 	ldbu	r2,2(r2)
  800604:	10803fcc 	andi	r2,r2,255
  800608:	1080201c 	xori	r2,r2,128
  80060c:	10bfe004 	addi	r2,r2,-128
  800610:	1000061e 	bne	r2,zero,80062c <logic+0x39c>
  800614:	e0bfff17 	ldw	r2,-4(fp)
  800618:	10800203 	ldbu	r2,8(r2)
  80061c:	10803fcc 	andi	r2,r2,255
  800620:	1080201c 	xori	r2,r2,128
  800624:	10bfe004 	addi	r2,r2,-128
  800628:	10000226 	beq	r2,zero,800634 <logic+0x3a4>
  80062c:	00800044 	movi	r2,1
  800630:	00000106 	br	800638 <logic+0x3a8>
  800634:	0005883a 	mov	r2,zero
  800638:	1007883a 	mov	r3,r2
  80063c:	e0bfff17 	ldw	r2,-4(fp)
  800640:	10c00585 	stb	r3,22(r2)
  d->_g6 = d->_pg20;
  800644:	e0bfff17 	ldw	r2,-4(fp)
  800648:	10c00743 	ldbu	r3,29(r2)
  80064c:	e0bfff17 	ldw	r2,-4(fp)
  800650:	10c00145 	stb	r3,5(r2)
  d->_g15 = !d->_g6;
  800654:	e0bfff17 	ldw	r2,-4(fp)
  800658:	10800143 	ldbu	r2,5(r2)
  80065c:	10803fcc 	andi	r2,r2,255
  800660:	1080201c 	xori	r2,r2,128
  800664:	10bfe004 	addi	r2,r2,-128
  800668:	1005003a 	cmpeq	r2,r2,zero
  80066c:	1007883a 	mov	r3,r2
  800670:	e0bfff17 	ldw	r2,-4(fp)
  800674:	10c00305 	stb	r3,12(r2)
  d->_g13 = d->_g6 && d->R;
  800678:	e0bfff17 	ldw	r2,-4(fp)
  80067c:	10800143 	ldbu	r2,5(r2)
  800680:	10803fcc 	andi	r2,r2,255
  800684:	1080201c 	xori	r2,r2,128
  800688:	10bfe004 	addi	r2,r2,-128
  80068c:	10000826 	beq	r2,zero,8006b0 <logic+0x420>
  800690:	e0bfff17 	ldw	r2,-4(fp)
  800694:	10800083 	ldbu	r2,2(r2)
  800698:	10803fcc 	andi	r2,r2,255
  80069c:	1080201c 	xori	r2,r2,128
  8006a0:	10bfe004 	addi	r2,r2,-128
  8006a4:	10000226 	beq	r2,zero,8006b0 <logic+0x420>
  8006a8:	00800044 	movi	r2,1
  8006ac:	00000106 	br	8006b4 <logic+0x424>
  8006b0:	0005883a 	mov	r2,zero
  8006b4:	1007883a 	mov	r3,r2
  8006b8:	e0bfff17 	ldw	r2,-4(fp)
  8006bc:	10c00285 	stb	r3,10(r2)
  d->_g19_e2 = (d->_g14_e1 || d->_g6_e1) && (d->_g15 || d->_g13) && (d->_g6_e1 || d->_g13);
  8006c0:	e0bfff17 	ldw	r2,-4(fp)
  8006c4:	10800603 	ldbu	r2,24(r2)
  8006c8:	10803fcc 	andi	r2,r2,255
  8006cc:	1080201c 	xori	r2,r2,128
  8006d0:	10bfe004 	addi	r2,r2,-128
  8006d4:	1000061e 	bne	r2,zero,8006f0 <logic+0x460>
  8006d8:	e0bfff17 	ldw	r2,-4(fp)
  8006dc:	10800583 	ldbu	r2,22(r2)
  8006e0:	10803fcc 	andi	r2,r2,255
  8006e4:	1080201c 	xori	r2,r2,128
  8006e8:	10bfe004 	addi	r2,r2,-128
  8006ec:	10001a26 	beq	r2,zero,800758 <logic+0x4c8>
  8006f0:	e0bfff17 	ldw	r2,-4(fp)
  8006f4:	10800303 	ldbu	r2,12(r2)
  8006f8:	10803fcc 	andi	r2,r2,255
  8006fc:	1080201c 	xori	r2,r2,128
  800700:	10bfe004 	addi	r2,r2,-128
  800704:	1000061e 	bne	r2,zero,800720 <logic+0x490>
  800708:	e0bfff17 	ldw	r2,-4(fp)
  80070c:	10800283 	ldbu	r2,10(r2)
  800710:	10803fcc 	andi	r2,r2,255
  800714:	1080201c 	xori	r2,r2,128
  800718:	10bfe004 	addi	r2,r2,-128
  80071c:	10000e26 	beq	r2,zero,800758 <logic+0x4c8>
  800720:	e0bfff17 	ldw	r2,-4(fp)
  800724:	10800583 	ldbu	r2,22(r2)
  800728:	10803fcc 	andi	r2,r2,255
  80072c:	1080201c 	xori	r2,r2,128
  800730:	10bfe004 	addi	r2,r2,-128
  800734:	1000061e 	bne	r2,zero,800750 <logic+0x4c0>
  800738:	e0bfff17 	ldw	r2,-4(fp)
  80073c:	10800283 	ldbu	r2,10(r2)
  800740:	10803fcc 	andi	r2,r2,255
  800744:	1080201c 	xori	r2,r2,128
  800748:	10bfe004 	addi	r2,r2,-128
  80074c:	10000226 	beq	r2,zero,800758 <logic+0x4c8>
  800750:	00800044 	movi	r2,1
  800754:	00000106 	br	80075c <logic+0x4cc>
  800758:	0005883a 	mov	r2,zero
  80075c:	1007883a 	mov	r3,r2
  800760:	e0bfff17 	ldw	r2,-4(fp)
  800764:	10c00645 	stb	r3,25(r2)
  d->_g19 = d->_GO || d->_g19_e2;
  800768:	e0bfff17 	ldw	r2,-4(fp)
  80076c:	108003c3 	ldbu	r2,15(r2)
  800770:	10803fcc 	andi	r2,r2,255
  800774:	1080201c 	xori	r2,r2,128
  800778:	10bfe004 	addi	r2,r2,-128
  80077c:	1000061e 	bne	r2,zero,800798 <logic+0x508>
  800780:	e0bfff17 	ldw	r2,-4(fp)
  800784:	10800643 	ldbu	r2,25(r2)
  800788:	10803fcc 	andi	r2,r2,255
  80078c:	1080201c 	xori	r2,r2,128
  800790:	10bfe004 	addi	r2,r2,-128
  800794:	10000226 	beq	r2,zero,8007a0 <logic+0x510>
  800798:	00800044 	movi	r2,1
  80079c:	00000106 	br	8007a4 <logic+0x514>
  8007a0:	0005883a 	mov	r2,zero
  8007a4:	1007883a 	mov	r3,r2
  8007a8:	e0bfff17 	ldw	r2,-4(fp)
  8007ac:	10c00345 	stb	r3,13(r2)
  if (d->_g19) {
  8007b0:	e0bfff17 	ldw	r2,-4(fp)
  8007b4:	10800343 	ldbu	r2,13(r2)
  8007b8:	10803fcc 	andi	r2,r2,255
  8007bc:	1080201c 	xori	r2,r2,128
  8007c0:	10bfe004 	addi	r2,r2,-128
  8007c4:	10000226 	beq	r2,zero,8007d0 <logic+0x540>
    d->O = 0;
  8007c8:	e0bfff17 	ldw	r2,-4(fp)
  8007cc:	100000c5 	stb	zero,3(r2)
  }
  d->_g14_e1 = d->_g19 || (d->_g7 && !d->A);
  8007d0:	e0bfff17 	ldw	r2,-4(fp)
  8007d4:	10800343 	ldbu	r2,13(r2)
  8007d8:	10803fcc 	andi	r2,r2,255
  8007dc:	1080201c 	xori	r2,r2,128
  8007e0:	10bfe004 	addi	r2,r2,-128
  8007e4:	10000c1e 	bne	r2,zero,800818 <logic+0x588>
  8007e8:	e0bfff17 	ldw	r2,-4(fp)
  8007ec:	10800183 	ldbu	r2,6(r2)
  8007f0:	10803fcc 	andi	r2,r2,255
  8007f4:	1080201c 	xori	r2,r2,128
  8007f8:	10bfe004 	addi	r2,r2,-128
  8007fc:	10000826 	beq	r2,zero,800820 <logic+0x590>
  800800:	e0bfff17 	ldw	r2,-4(fp)
  800804:	10800003 	ldbu	r2,0(r2)
  800808:	10803fcc 	andi	r2,r2,255
  80080c:	1080201c 	xori	r2,r2,128
  800810:	10bfe004 	addi	r2,r2,-128
  800814:	1000021e 	bne	r2,zero,800820 <logic+0x590>
  800818:	00800044 	movi	r2,1
  80081c:	00000106 	br	800824 <logic+0x594>
  800820:	0005883a 	mov	r2,zero
  800824:	1007883a 	mov	r3,r2
  800828:	e0bfff17 	ldw	r2,-4(fp)
  80082c:	10c00605 	stb	r3,24(r2)
  d->_g14 = d->_g19 || (d->_g12 && !d->B);
  800830:	e0bfff17 	ldw	r2,-4(fp)
  800834:	10800343 	ldbu	r2,13(r2)
  800838:	10803fcc 	andi	r2,r2,255
  80083c:	1080201c 	xori	r2,r2,128
  800840:	10bfe004 	addi	r2,r2,-128
  800844:	10000c1e 	bne	r2,zero,800878 <logic+0x5e8>
  800848:	e0bfff17 	ldw	r2,-4(fp)
  80084c:	10800243 	ldbu	r2,9(r2)
  800850:	10803fcc 	andi	r2,r2,255
  800854:	1080201c 	xori	r2,r2,128
  800858:	10bfe004 	addi	r2,r2,-128
  80085c:	10000826 	beq	r2,zero,800880 <logic+0x5f0>
  800860:	e0bfff17 	ldw	r2,-4(fp)
  800864:	10800043 	ldbu	r2,1(r2)
  800868:	10803fcc 	andi	r2,r2,255
  80086c:	1080201c 	xori	r2,r2,128
  800870:	10bfe004 	addi	r2,r2,-128
  800874:	1000021e 	bne	r2,zero,800880 <logic+0x5f0>
  800878:	00800044 	movi	r2,1
  80087c:	00000106 	br	800884 <logic+0x5f4>
  800880:	0005883a 	mov	r2,zero
  800884:	1007883a 	mov	r3,r2
  800888:	e0bfff17 	ldw	r2,-4(fp)
  80088c:	10c002c5 	stb	r3,11(r2)
  d->_g20 = d->_g19 || (d->_g6 && !d->R);
  800890:	e0bfff17 	ldw	r2,-4(fp)
  800894:	10800343 	ldbu	r2,13(r2)
  800898:	10803fcc 	andi	r2,r2,255
  80089c:	1080201c 	xori	r2,r2,128
  8008a0:	10bfe004 	addi	r2,r2,-128
  8008a4:	10000c1e 	bne	r2,zero,8008d8 <logic+0x648>
  8008a8:	e0bfff17 	ldw	r2,-4(fp)
  8008ac:	10800143 	ldbu	r2,5(r2)
  8008b0:	10803fcc 	andi	r2,r2,255
  8008b4:	1080201c 	xori	r2,r2,128
  8008b8:	10bfe004 	addi	r2,r2,-128
  8008bc:	10000826 	beq	r2,zero,8008e0 <logic+0x650>
  8008c0:	e0bfff17 	ldw	r2,-4(fp)
  8008c4:	10800083 	ldbu	r2,2(r2)
  8008c8:	10803fcc 	andi	r2,r2,255
  8008cc:	1080201c 	xori	r2,r2,128
  8008d0:	10bfe004 	addi	r2,r2,-128
  8008d4:	1000021e 	bne	r2,zero,8008e0 <logic+0x650>
  8008d8:	00800044 	movi	r2,1
  8008dc:	00000106 	br	8008e4 <logic+0x654>
  8008e0:	0005883a 	mov	r2,zero
  8008e4:	1007883a 	mov	r3,r2
  8008e8:	e0bfff17 	ldw	r2,-4(fp)
  8008ec:	10c00385 	stb	r3,14(r2)
}
  8008f0:	0001883a 	nop
  8008f4:	e037883a 	mov	sp,fp
  8008f8:	df000017 	ldw	fp,0(sp)
  8008fc:	dec00104 	addi	sp,sp,4
  800900:	f800283a 	ret

00800904 <reset>:

void reset(TickData* d) {
  800904:	defffe04 	addi	sp,sp,-8
  800908:	df000115 	stw	fp,4(sp)
  80090c:	df000104 	addi	fp,sp,4
  800910:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  800914:	e0bfff17 	ldw	r2,-4(fp)
  800918:	00c00044 	movi	r3,1
  80091c:	10c003c5 	stb	r3,15(r2)
  d->_TERM = 0;
  800920:	e0bfff17 	ldw	r2,-4(fp)
  800924:	10000685 	stb	zero,26(r2)
  d->O = 0;
  800928:	e0bfff17 	ldw	r2,-4(fp)
  80092c:	100000c5 	stb	zero,3(r2)
  d->_pg14_e1 = 0;
  800930:	e0bfff17 	ldw	r2,-4(fp)
  800934:	100006c5 	stb	zero,27(r2)
  d->_pg14 = 0;
  800938:	e0bfff17 	ldw	r2,-4(fp)
  80093c:	10000705 	stb	zero,28(r2)
  d->_pg20 = 0;
  800940:	e0bfff17 	ldw	r2,-4(fp)
  800944:	10000745 	stb	zero,29(r2)
}
  800948:	0001883a 	nop
  80094c:	e037883a 	mov	sp,fp
  800950:	df000017 	ldw	fp,0(sp)
  800954:	dec00104 	addi	sp,sp,4
  800958:	f800283a 	ret

0080095c <tick>:

void tick(TickData* d) {
  80095c:	defffd04 	addi	sp,sp,-12
  800960:	dfc00215 	stw	ra,8(sp)
  800964:	df000115 	stw	fp,4(sp)
  800968:	df000104 	addi	fp,sp,4
  80096c:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  800970:	e13fff17 	ldw	r4,-4(fp)
  800974:	08002900 	call	800290 <logic>

  d->_pg14_e1 = d->_g14_e1;
  800978:	e0bfff17 	ldw	r2,-4(fp)
  80097c:	10c00603 	ldbu	r3,24(r2)
  800980:	e0bfff17 	ldw	r2,-4(fp)
  800984:	10c006c5 	stb	r3,27(r2)
  d->_pg14 = d->_g14;
  800988:	e0bfff17 	ldw	r2,-4(fp)
  80098c:	10c002c3 	ldbu	r3,11(r2)
  800990:	e0bfff17 	ldw	r2,-4(fp)
  800994:	10c00705 	stb	r3,28(r2)
  d->_pg20 = d->_g20;
  800998:	e0bfff17 	ldw	r2,-4(fp)
  80099c:	10c00383 	ldbu	r3,14(r2)
  8009a0:	e0bfff17 	ldw	r2,-4(fp)
  8009a4:	10c00745 	stb	r3,29(r2)
  d->_GO = 0;
  8009a8:	e0bfff17 	ldw	r2,-4(fp)
  8009ac:	100003c5 	stb	zero,15(r2)
}
  8009b0:	0001883a 	nop
  8009b4:	e037883a 	mov	sp,fp
  8009b8:	dfc00117 	ldw	ra,4(sp)
  8009bc:	df000017 	ldw	fp,0(sp)
  8009c0:	dec00204 	addi	sp,sp,8
  8009c4:	f800283a 	ret

008009c8 <button_interrupts_function>:
#include <stdio.h>
#include <sys/alt_irq.h>
#include "cs303_lab2.h"   // Your generated SCCharts header


void button_interrupts_function(void*context, alt_u32 id) {
  8009c8:	defffc04 	addi	sp,sp,-16
  8009cc:	df000315 	stw	fp,12(sp)
  8009d0:	df000304 	addi	fp,sp,12
  8009d4:	e13ffe15 	stw	r4,-8(fp)
  8009d8:	e17fff15 	stw	r5,-4(fp)
	int* flag = (int*) context;
  8009dc:	e0bffe17 	ldw	r2,-8(fp)
  8009e0:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x0);
  8009e4:	0007883a 	mov	r3,zero
  8009e8:	00804074 	movhi	r2,257
  8009ec:	10842b04 	addi	r2,r2,4268
  8009f0:	10c00035 	stwio	r3,0(r2)

    *flag = 1;
  8009f4:	e0bffd17 	ldw	r2,-12(fp)
  8009f8:	00c00044 	movi	r3,1
  8009fc:	10c00015 	stw	r3,0(r2)
}
  800a00:	0001883a 	nop
  800a04:	e037883a 	mov	sp,fp
  800a08:	df000017 	ldw	fp,0(sp)
  800a0c:	dec00104 	addi	sp,sp,4
  800a10:	f800283a 	ret

00800a14 <main>:

int main(void) {
  800a14:	defff304 	addi	sp,sp,-52
  800a18:	dfc00c15 	stw	ra,48(sp)
  800a1c:	df000b15 	stw	fp,44(sp)
  800a20:	df000b04 	addi	fp,sp,44
    TickData data;
    volatile int interrupt_flag = 0;
  800a24:	e03fff15 	stw	zero,-4(fp)
    void* temp = (void*) &interrupt_flag;
  800a28:	e0bfff04 	addi	r2,fp,-4
  800a2c:	e0bff515 	stw	r2,-44(fp)


    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  800a30:	00c001c4 	movi	r3,7
  800a34:	00804074 	movhi	r2,257
  800a38:	10842a04 	addi	r2,r2,4264
  800a3c:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0x0);
  800a40:	0007883a 	mov	r3,zero
  800a44:	00804074 	movhi	r2,257
  800a48:	10842b04 	addi	r2,r2,4268
  800a4c:	10c00035 	stwio	r3,0(r2)

    alt_irq_register(KEYS_IRQ, temp, button_interrupts_function);
  800a50:	01802034 	movhi	r6,128
  800a54:	31827204 	addi	r6,r6,2504
  800a58:	e17ff517 	ldw	r5,-44(fp)
  800a5c:	01000104 	movi	r4,4
  800a60:	0800b040 	call	800b04 <alt_irq_register>

    // Initialize SCCharts
    reset(&data);
  800a64:	e0bff704 	addi	r2,fp,-36
  800a68:	1009883a 	mov	r4,r2
  800a6c:	08009040 	call	800904 <reset>

    while (1) {

        if ( interrupt_flag ) {
  800a70:	e0bfff17 	ldw	r2,-4(fp)
  800a74:	10001426 	beq	r2,zero,800ac8 <main+0xb4>

            // Read keys (active low)
            int keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  800a78:	00804074 	movhi	r2,257
  800a7c:	10842804 	addi	r2,r2,4256
  800a80:	10800037 	ldwio	r2,0(r2)
  800a84:	e0bff615 	stw	r2,-40(fp)

            // Map keys to inputs
            data.A = (keys & 0x4) ? 0 : 1;  // KEY2
  800a88:	e0bff617 	ldw	r2,-40(fp)
  800a8c:	1080010c 	andi	r2,r2,4
  800a90:	1005003a 	cmpeq	r2,r2,zero
  800a94:	e0bff705 	stb	r2,-36(fp)
            data.B = (keys & 0x2) ? 0 : 1;  // KEY1
  800a98:	e0bff617 	ldw	r2,-40(fp)
  800a9c:	1080008c 	andi	r2,r2,2
  800aa0:	1005003a 	cmpeq	r2,r2,zero
  800aa4:	e0bff745 	stb	r2,-35(fp)
            data.R = (keys & 0x1) ? 0 : 1;  // KEY0
  800aa8:	e0bff617 	ldw	r2,-40(fp)
  800aac:	1080004c 	andi	r2,r2,1
  800ab0:	1005003a 	cmpeq	r2,r2,zero
  800ab4:	e0bff785 	stb	r2,-34(fp)

            interrupt_flag = 0;
  800ab8:	e03fff15 	stw	zero,-4(fp)

            // Run SCCharts logic
            tick(&data);
  800abc:	e0bff704 	addi	r2,fp,-36
  800ac0:	1009883a 	mov	r4,r2
  800ac4:	080095c0 	call	80095c <tick>
        }

        // Drive output O to Red LEDs
        if (data.O) {
  800ac8:	e0bff7c3 	ldbu	r2,-33(fp)
  800acc:	10803fcc 	andi	r2,r2,255
  800ad0:	1080201c 	xori	r2,r2,128
  800ad4:	10bfe004 	addi	r2,r2,-128
  800ad8:	10000526 	beq	r2,zero,800af0 <main+0xdc>
            IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x1);  // Turn on LED0
  800adc:	00c00044 	movi	r3,1
  800ae0:	00804074 	movhi	r2,257
  800ae4:	10842004 	addi	r2,r2,4224
  800ae8:	10c00035 	stwio	r3,0(r2)
  800aec:	003fe006 	br	800a70 <__alt_mem_onchip_mem+0xff7f8a70>
        } else {
            IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x0);  // Turn off LEDs
  800af0:	0007883a 	mov	r3,zero
  800af4:	00804074 	movhi	r2,257
  800af8:	10842004 	addi	r2,r2,4224
  800afc:	10c00035 	stwio	r3,0(r2)
        }

    }
  800b00:	003fdb06 	br	800a70 <__alt_mem_onchip_mem+0xff7f8a70>

00800b04 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  800b04:	defff004 	addi	sp,sp,-64
  800b08:	df000f15 	stw	fp,60(sp)
  800b0c:	df000f04 	addi	fp,sp,60
  800b10:	e13ffd15 	stw	r4,-12(fp)
  800b14:	e17ffe15 	stw	r5,-8(fp)
  800b18:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  800b1c:	00bffa84 	movi	r2,-22
  800b20:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  800b24:	e0bffd17 	ldw	r2,-12(fp)
  800b28:	10800828 	cmpgeui	r2,r2,32
  800b2c:	1000501e 	bne	r2,zero,800c70 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800b30:	0005303a 	rdctl	r2,status
  800b34:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800b38:	e0fff617 	ldw	r3,-40(fp)
  800b3c:	00bfff84 	movi	r2,-2
  800b40:	1884703a 	and	r2,r3,r2
  800b44:	1001703a 	wrctl	status,r2
  
  return context;
  800b48:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  800b4c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  800b50:	00802034 	movhi	r2,128
  800b54:	109fe404 	addi	r2,r2,32656
  800b58:	e0fffd17 	ldw	r3,-12(fp)
  800b5c:	180690fa 	slli	r3,r3,3
  800b60:	10c5883a 	add	r2,r2,r3
  800b64:	e0ffff17 	ldw	r3,-4(fp)
  800b68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  800b6c:	00802034 	movhi	r2,128
  800b70:	109fe404 	addi	r2,r2,32656
  800b74:	e0fffd17 	ldw	r3,-12(fp)
  800b78:	180690fa 	slli	r3,r3,3
  800b7c:	10c5883a 	add	r2,r2,r3
  800b80:	10800104 	addi	r2,r2,4
  800b84:	e0fffe17 	ldw	r3,-8(fp)
  800b88:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  800b8c:	e0bfff17 	ldw	r2,-4(fp)
  800b90:	10001926 	beq	r2,zero,800bf8 <alt_irq_register+0xf4>
  800b94:	e0bffd17 	ldw	r2,-12(fp)
  800b98:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800b9c:	0005303a 	rdctl	r2,status
  800ba0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800ba4:	e0fff717 	ldw	r3,-36(fp)
  800ba8:	00bfff84 	movi	r2,-2
  800bac:	1884703a 	and	r2,r3,r2
  800bb0:	1001703a 	wrctl	status,r2
  
  return context;
  800bb4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  800bb8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  800bbc:	00c00044 	movi	r3,1
  800bc0:	e0bff217 	ldw	r2,-56(fp)
  800bc4:	1884983a 	sll	r2,r3,r2
  800bc8:	1007883a 	mov	r3,r2
  800bcc:	d0a61e17 	ldw	r2,-26504(gp)
  800bd0:	1884b03a 	or	r2,r3,r2
  800bd4:	d0a61e15 	stw	r2,-26504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800bd8:	d0a61e17 	ldw	r2,-26504(gp)
  800bdc:	100170fa 	wrctl	ienable,r2
  800be0:	e0bff817 	ldw	r2,-32(fp)
  800be4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800be8:	e0bff917 	ldw	r2,-28(fp)
  800bec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  800bf0:	0005883a 	mov	r2,zero
  800bf4:	00001906 	br	800c5c <alt_irq_register+0x158>
  800bf8:	e0bffd17 	ldw	r2,-12(fp)
  800bfc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800c00:	0005303a 	rdctl	r2,status
  800c04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800c08:	e0fffa17 	ldw	r3,-24(fp)
  800c0c:	00bfff84 	movi	r2,-2
  800c10:	1884703a 	and	r2,r3,r2
  800c14:	1001703a 	wrctl	status,r2
  
  return context;
  800c18:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  800c1c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  800c20:	00c00044 	movi	r3,1
  800c24:	e0bff417 	ldw	r2,-48(fp)
  800c28:	1884983a 	sll	r2,r3,r2
  800c2c:	0084303a 	nor	r2,zero,r2
  800c30:	1007883a 	mov	r3,r2
  800c34:	d0a61e17 	ldw	r2,-26504(gp)
  800c38:	1884703a 	and	r2,r3,r2
  800c3c:	d0a61e15 	stw	r2,-26504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800c40:	d0a61e17 	ldw	r2,-26504(gp)
  800c44:	100170fa 	wrctl	ienable,r2
  800c48:	e0bffb17 	ldw	r2,-20(fp)
  800c4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800c50:	e0bffc17 	ldw	r2,-16(fp)
  800c54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  800c58:	0005883a 	mov	r2,zero
  800c5c:	e0bff115 	stw	r2,-60(fp)
  800c60:	e0bff317 	ldw	r2,-52(fp)
  800c64:	e0bff515 	stw	r2,-44(fp)
  800c68:	e0bff517 	ldw	r2,-44(fp)
  800c6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  800c70:	e0bff117 	ldw	r2,-60(fp)
}
  800c74:	e037883a 	mov	sp,fp
  800c78:	df000017 	ldw	fp,0(sp)
  800c7c:	dec00104 	addi	sp,sp,4
  800c80:	f800283a 	ret

00800c84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800c84:	defffc04 	addi	sp,sp,-16
  800c88:	df000315 	stw	fp,12(sp)
  800c8c:	df000304 	addi	fp,sp,12
  800c90:	e13ffd15 	stw	r4,-12(fp)
  800c94:	e17ffe15 	stw	r5,-8(fp)
  800c98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800c9c:	e0fffe17 	ldw	r3,-8(fp)
  800ca0:	e0bffd17 	ldw	r2,-12(fp)
  800ca4:	18800c26 	beq	r3,r2,800cd8 <alt_load_section+0x54>
  {
    while( to != end )
  800ca8:	00000806 	br	800ccc <alt_load_section+0x48>
    {
      *to++ = *from++;
  800cac:	e0bffe17 	ldw	r2,-8(fp)
  800cb0:	10c00104 	addi	r3,r2,4
  800cb4:	e0fffe15 	stw	r3,-8(fp)
  800cb8:	e0fffd17 	ldw	r3,-12(fp)
  800cbc:	19000104 	addi	r4,r3,4
  800cc0:	e13ffd15 	stw	r4,-12(fp)
  800cc4:	18c00017 	ldw	r3,0(r3)
  800cc8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800ccc:	e0fffe17 	ldw	r3,-8(fp)
  800cd0:	e0bfff17 	ldw	r2,-4(fp)
  800cd4:	18bff51e 	bne	r3,r2,800cac <__alt_mem_onchip_mem+0xff7f8cac>
    {
      *to++ = *from++;
    }
  }
}
  800cd8:	0001883a 	nop
  800cdc:	e037883a 	mov	sp,fp
  800ce0:	df000017 	ldw	fp,0(sp)
  800ce4:	dec00104 	addi	sp,sp,4
  800ce8:	f800283a 	ret

00800cec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800cec:	defffe04 	addi	sp,sp,-8
  800cf0:	dfc00115 	stw	ra,4(sp)
  800cf4:	df000015 	stw	fp,0(sp)
  800cf8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800cfc:	01802034 	movhi	r6,128
  800d00:	3199cb04 	addi	r6,r6,26412
  800d04:	01402034 	movhi	r5,128
  800d08:	2953ba04 	addi	r5,r5,20200
  800d0c:	01002034 	movhi	r4,128
  800d10:	2119cb04 	addi	r4,r4,26412
  800d14:	0800c840 	call	800c84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800d18:	01802034 	movhi	r6,128
  800d1c:	31809104 	addi	r6,r6,580
  800d20:	01402034 	movhi	r5,128
  800d24:	29400804 	addi	r5,r5,32
  800d28:	01002034 	movhi	r4,128
  800d2c:	21000804 	addi	r4,r4,32
  800d30:	0800c840 	call	800c84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  800d34:	01802034 	movhi	r6,128
  800d38:	3193ba04 	addi	r6,r6,20200
  800d3c:	01402034 	movhi	r5,128
  800d40:	29530804 	addi	r5,r5,19488
  800d44:	01002034 	movhi	r4,128
  800d48:	21130804 	addi	r4,r4,19488
  800d4c:	0800c840 	call	800c84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800d50:	08034380 	call	803438 <alt_dcache_flush_all>
  alt_icache_flush_all();
  800d54:	080364c0 	call	80364c <alt_icache_flush_all>
}
  800d58:	0001883a 	nop
  800d5c:	e037883a 	mov	sp,fp
  800d60:	dfc00117 	ldw	ra,4(sp)
  800d64:	df000017 	ldw	fp,0(sp)
  800d68:	dec00204 	addi	sp,sp,8
  800d6c:	f800283a 	ret

00800d70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800d70:	defffd04 	addi	sp,sp,-12
  800d74:	dfc00215 	stw	ra,8(sp)
  800d78:	df000115 	stw	fp,4(sp)
  800d7c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800d80:	0009883a 	mov	r4,zero
  800d84:	0800e200 	call	800e20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800d88:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800d8c:	0800e580 	call	800e58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800d90:	01802034 	movhi	r6,128
  800d94:	31930804 	addi	r6,r6,19488
  800d98:	01402034 	movhi	r5,128
  800d9c:	29530804 	addi	r5,r5,19488
  800da0:	01002034 	movhi	r4,128
  800da4:	21130804 	addi	r4,r4,19488
  800da8:	08039e40 	call	8039e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  800dac:	080358c0 	call	80358c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800db0:	01002034 	movhi	r4,128
  800db4:	210d7b04 	addi	r4,r4,13804
  800db8:	08043d00 	call	8043d0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  800dbc:	d0a61f17 	ldw	r2,-26500(gp)
  800dc0:	d0e62017 	ldw	r3,-26496(gp)
  800dc4:	d1262117 	ldw	r4,-26492(gp)
  800dc8:	200d883a 	mov	r6,r4
  800dcc:	180b883a 	mov	r5,r3
  800dd0:	1009883a 	mov	r4,r2
  800dd4:	0800a140 	call	800a14 <main>
  800dd8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  800ddc:	01000044 	movi	r4,1
  800de0:	08033680 	call	803368 <close>
  exit (result);
  800de4:	e13fff17 	ldw	r4,-4(fp)
  800de8:	08043e40 	call	8043e4 <exit>

00800dec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  800dec:	defffd04 	addi	sp,sp,-12
  800df0:	dfc00215 	stw	ra,8(sp)
  800df4:	df000115 	stw	fp,4(sp)
  800df8:	df000104 	addi	fp,sp,4
  800dfc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800e00:	d1600404 	addi	r5,gp,-32752
  800e04:	e13fff17 	ldw	r4,-4(fp)
  800e08:	08034e80 	call	8034e8 <alt_dev_llist_insert>
}
  800e0c:	e037883a 	mov	sp,fp
  800e10:	dfc00117 	ldw	ra,4(sp)
  800e14:	df000017 	ldw	fp,0(sp)
  800e18:	dec00204 	addi	sp,sp,8
  800e1c:	f800283a 	ret

00800e20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800e20:	defffd04 	addi	sp,sp,-12
  800e24:	dfc00215 	stw	ra,8(sp)
  800e28:	df000115 	stw	fp,4(sp)
  800e2c:	df000104 	addi	fp,sp,4
  800e30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  800e34:	0803eec0 	call	803eec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800e38:	00800044 	movi	r2,1
  800e3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800e40:	0001883a 	nop
  800e44:	e037883a 	mov	sp,fp
  800e48:	dfc00117 	ldw	ra,4(sp)
  800e4c:	df000017 	ldw	fp,0(sp)
  800e50:	dec00204 	addi	sp,sp,8
  800e54:	f800283a 	ret

00800e58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800e58:	defffe04 	addi	sp,sp,-8
  800e5c:	dfc00115 	stw	ra,4(sp)
  800e60:	df000015 	stw	fp,0(sp)
  800e64:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  800e68:	01c0fa04 	movi	r7,1000
  800e6c:	01800084 	movi	r6,2
  800e70:	000b883a 	mov	r5,zero
  800e74:	01004074 	movhi	r4,257
  800e78:	21040804 	addi	r4,r4,4128
  800e7c:	08028ac0 	call	8028ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  800e80:	01800044 	movi	r6,1
  800e84:	000b883a 	mov	r5,zero
  800e88:	01002034 	movhi	r4,128
  800e8c:	2113c404 	addi	r4,r4,20240
  800e90:	08010540 	call	801054 <altera_avalon_jtag_uart_init>
  800e94:	01002034 	movhi	r4,128
  800e98:	2113ba04 	addi	r4,r4,20200
  800e9c:	0800dec0 	call	800dec <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  800ea0:	01002034 	movhi	r4,128
  800ea4:	2117dc04 	addi	r4,r4,24432
  800ea8:	08026a00 	call	8026a0 <altera_avalon_lcd_16207_init>
  800eac:	01002034 	movhi	r4,128
  800eb0:	2117d204 	addi	r4,r4,24392
  800eb4:	0800dec0 	call	800dec <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  800eb8:	000d883a 	mov	r6,zero
  800ebc:	000b883a 	mov	r5,zero
  800ec0:	01002034 	movhi	r4,128
  800ec4:	21182404 	addi	r4,r4,24720
  800ec8:	0802a380 	call	802a38 <altera_avalon_uart_init>
  800ecc:	01002034 	movhi	r4,128
  800ed0:	21181a04 	addi	r4,r4,24680
  800ed4:	0800dec0 	call	800dec <alt_dev_reg>
}
  800ed8:	0001883a 	nop
  800edc:	e037883a 	mov	sp,fp
  800ee0:	dfc00117 	ldw	ra,4(sp)
  800ee4:	df000017 	ldw	fp,0(sp)
  800ee8:	dec00204 	addi	sp,sp,8
  800eec:	f800283a 	ret

00800ef0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800ef0:	defffa04 	addi	sp,sp,-24
  800ef4:	dfc00515 	stw	ra,20(sp)
  800ef8:	df000415 	stw	fp,16(sp)
  800efc:	df000404 	addi	fp,sp,16
  800f00:	e13ffd15 	stw	r4,-12(fp)
  800f04:	e17ffe15 	stw	r5,-8(fp)
  800f08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800f0c:	e0bffd17 	ldw	r2,-12(fp)
  800f10:	10800017 	ldw	r2,0(r2)
  800f14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800f18:	e0bffc17 	ldw	r2,-16(fp)
  800f1c:	10c00a04 	addi	r3,r2,40
  800f20:	e0bffd17 	ldw	r2,-12(fp)
  800f24:	10800217 	ldw	r2,8(r2)
  800f28:	100f883a 	mov	r7,r2
  800f2c:	e1bfff17 	ldw	r6,-4(fp)
  800f30:	e17ffe17 	ldw	r5,-8(fp)
  800f34:	1809883a 	mov	r4,r3
  800f38:	08015180 	call	801518 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800f3c:	e037883a 	mov	sp,fp
  800f40:	dfc00117 	ldw	ra,4(sp)
  800f44:	df000017 	ldw	fp,0(sp)
  800f48:	dec00204 	addi	sp,sp,8
  800f4c:	f800283a 	ret

00800f50 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  800f50:	defffa04 	addi	sp,sp,-24
  800f54:	dfc00515 	stw	ra,20(sp)
  800f58:	df000415 	stw	fp,16(sp)
  800f5c:	df000404 	addi	fp,sp,16
  800f60:	e13ffd15 	stw	r4,-12(fp)
  800f64:	e17ffe15 	stw	r5,-8(fp)
  800f68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800f6c:	e0bffd17 	ldw	r2,-12(fp)
  800f70:	10800017 	ldw	r2,0(r2)
  800f74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800f78:	e0bffc17 	ldw	r2,-16(fp)
  800f7c:	10c00a04 	addi	r3,r2,40
  800f80:	e0bffd17 	ldw	r2,-12(fp)
  800f84:	10800217 	ldw	r2,8(r2)
  800f88:	100f883a 	mov	r7,r2
  800f8c:	e1bfff17 	ldw	r6,-4(fp)
  800f90:	e17ffe17 	ldw	r5,-8(fp)
  800f94:	1809883a 	mov	r4,r3
  800f98:	08017340 	call	801734 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  800f9c:	e037883a 	mov	sp,fp
  800fa0:	dfc00117 	ldw	ra,4(sp)
  800fa4:	df000017 	ldw	fp,0(sp)
  800fa8:	dec00204 	addi	sp,sp,8
  800fac:	f800283a 	ret

00800fb0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  800fb0:	defffc04 	addi	sp,sp,-16
  800fb4:	dfc00315 	stw	ra,12(sp)
  800fb8:	df000215 	stw	fp,8(sp)
  800fbc:	df000204 	addi	fp,sp,8
  800fc0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800fc4:	e0bfff17 	ldw	r2,-4(fp)
  800fc8:	10800017 	ldw	r2,0(r2)
  800fcc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  800fd0:	e0bffe17 	ldw	r2,-8(fp)
  800fd4:	10c00a04 	addi	r3,r2,40
  800fd8:	e0bfff17 	ldw	r2,-4(fp)
  800fdc:	10800217 	ldw	r2,8(r2)
  800fe0:	100b883a 	mov	r5,r2
  800fe4:	1809883a 	mov	r4,r3
  800fe8:	08013c00 	call	8013c0 <altera_avalon_jtag_uart_close>
}
  800fec:	e037883a 	mov	sp,fp
  800ff0:	dfc00117 	ldw	ra,4(sp)
  800ff4:	df000017 	ldw	fp,0(sp)
  800ff8:	dec00204 	addi	sp,sp,8
  800ffc:	f800283a 	ret

00801000 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  801000:	defffa04 	addi	sp,sp,-24
  801004:	dfc00515 	stw	ra,20(sp)
  801008:	df000415 	stw	fp,16(sp)
  80100c:	df000404 	addi	fp,sp,16
  801010:	e13ffd15 	stw	r4,-12(fp)
  801014:	e17ffe15 	stw	r5,-8(fp)
  801018:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80101c:	e0bffd17 	ldw	r2,-12(fp)
  801020:	10800017 	ldw	r2,0(r2)
  801024:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  801028:	e0bffc17 	ldw	r2,-16(fp)
  80102c:	10800a04 	addi	r2,r2,40
  801030:	e1bfff17 	ldw	r6,-4(fp)
  801034:	e17ffe17 	ldw	r5,-8(fp)
  801038:	1009883a 	mov	r4,r2
  80103c:	08014280 	call	801428 <altera_avalon_jtag_uart_ioctl>
}
  801040:	e037883a 	mov	sp,fp
  801044:	dfc00117 	ldw	ra,4(sp)
  801048:	df000017 	ldw	fp,0(sp)
  80104c:	dec00204 	addi	sp,sp,8
  801050:	f800283a 	ret

00801054 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  801054:	defffa04 	addi	sp,sp,-24
  801058:	dfc00515 	stw	ra,20(sp)
  80105c:	df000415 	stw	fp,16(sp)
  801060:	df000404 	addi	fp,sp,16
  801064:	e13ffd15 	stw	r4,-12(fp)
  801068:	e17ffe15 	stw	r5,-8(fp)
  80106c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  801070:	e0bffd17 	ldw	r2,-12(fp)
  801074:	00c00044 	movi	r3,1
  801078:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80107c:	e0bffd17 	ldw	r2,-12(fp)
  801080:	10800017 	ldw	r2,0(r2)
  801084:	10800104 	addi	r2,r2,4
  801088:	1007883a 	mov	r3,r2
  80108c:	e0bffd17 	ldw	r2,-12(fp)
  801090:	10800817 	ldw	r2,32(r2)
  801094:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  801098:	e0bffe17 	ldw	r2,-8(fp)
  80109c:	e0ffff17 	ldw	r3,-4(fp)
  8010a0:	d8000015 	stw	zero,0(sp)
  8010a4:	e1fffd17 	ldw	r7,-12(fp)
  8010a8:	01802034 	movhi	r6,128
  8010ac:	31844504 	addi	r6,r6,4372
  8010b0:	180b883a 	mov	r5,r3
  8010b4:	1009883a 	mov	r4,r2
  8010b8:	08036800 	call	803680 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8010bc:	e0bffd17 	ldw	r2,-12(fp)
  8010c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8010c4:	e0bffd17 	ldw	r2,-12(fp)
  8010c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8010cc:	d0e62217 	ldw	r3,-26488(gp)
  8010d0:	e1fffd17 	ldw	r7,-12(fp)
  8010d4:	01802034 	movhi	r6,128
  8010d8:	3184c804 	addi	r6,r6,4896
  8010dc:	180b883a 	mov	r5,r3
  8010e0:	1009883a 	mov	r4,r2
  8010e4:	08032000 	call	803200 <alt_alarm_start>
  8010e8:	1000040e 	bge	r2,zero,8010fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8010ec:	e0fffd17 	ldw	r3,-12(fp)
  8010f0:	00a00034 	movhi	r2,32768
  8010f4:	10bfffc4 	addi	r2,r2,-1
  8010f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8010fc:	0001883a 	nop
  801100:	e037883a 	mov	sp,fp
  801104:	dfc00117 	ldw	ra,4(sp)
  801108:	df000017 	ldw	fp,0(sp)
  80110c:	dec00204 	addi	sp,sp,8
  801110:	f800283a 	ret

00801114 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  801114:	defff804 	addi	sp,sp,-32
  801118:	df000715 	stw	fp,28(sp)
  80111c:	df000704 	addi	fp,sp,28
  801120:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  801124:	e0bfff17 	ldw	r2,-4(fp)
  801128:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80112c:	e0bffb17 	ldw	r2,-20(fp)
  801130:	10800017 	ldw	r2,0(r2)
  801134:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  801138:	e0bffc17 	ldw	r2,-16(fp)
  80113c:	10800104 	addi	r2,r2,4
  801140:	10800037 	ldwio	r2,0(r2)
  801144:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  801148:	e0bffd17 	ldw	r2,-12(fp)
  80114c:	1080c00c 	andi	r2,r2,768
  801150:	10006d26 	beq	r2,zero,801308 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  801154:	e0bffd17 	ldw	r2,-12(fp)
  801158:	1080400c 	andi	r2,r2,256
  80115c:	10003526 	beq	r2,zero,801234 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  801160:	00800074 	movhi	r2,1
  801164:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  801168:	e0bffb17 	ldw	r2,-20(fp)
  80116c:	10800a17 	ldw	r2,40(r2)
  801170:	10800044 	addi	r2,r2,1
  801174:	1081ffcc 	andi	r2,r2,2047
  801178:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80117c:	e0bffb17 	ldw	r2,-20(fp)
  801180:	10c00b17 	ldw	r3,44(r2)
  801184:	e0bffe17 	ldw	r2,-8(fp)
  801188:	18801526 	beq	r3,r2,8011e0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80118c:	e0bffc17 	ldw	r2,-16(fp)
  801190:	10800037 	ldwio	r2,0(r2)
  801194:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  801198:	e0bff917 	ldw	r2,-28(fp)
  80119c:	10a0000c 	andi	r2,r2,32768
  8011a0:	10001126 	beq	r2,zero,8011e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8011a4:	e0bffb17 	ldw	r2,-20(fp)
  8011a8:	10800a17 	ldw	r2,40(r2)
  8011ac:	e0fff917 	ldw	r3,-28(fp)
  8011b0:	1809883a 	mov	r4,r3
  8011b4:	e0fffb17 	ldw	r3,-20(fp)
  8011b8:	1885883a 	add	r2,r3,r2
  8011bc:	10800e04 	addi	r2,r2,56
  8011c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8011c4:	e0bffb17 	ldw	r2,-20(fp)
  8011c8:	10800a17 	ldw	r2,40(r2)
  8011cc:	10800044 	addi	r2,r2,1
  8011d0:	10c1ffcc 	andi	r3,r2,2047
  8011d4:	e0bffb17 	ldw	r2,-20(fp)
  8011d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8011dc:	003fe206 	br	801168 <__alt_mem_onchip_mem+0xff7f9168>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  8011e0:	0001883a 	nop
  8011e4:	00000106 	br	8011ec <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  8011e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8011ec:	e0bff917 	ldw	r2,-28(fp)
  8011f0:	10bfffec 	andhi	r2,r2,65535
  8011f4:	10000f26 	beq	r2,zero,801234 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8011f8:	e0bffb17 	ldw	r2,-20(fp)
  8011fc:	10c00817 	ldw	r3,32(r2)
  801200:	00bfff84 	movi	r2,-2
  801204:	1886703a 	and	r3,r3,r2
  801208:	e0bffb17 	ldw	r2,-20(fp)
  80120c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  801210:	e0bffc17 	ldw	r2,-16(fp)
  801214:	10800104 	addi	r2,r2,4
  801218:	1007883a 	mov	r3,r2
  80121c:	e0bffb17 	ldw	r2,-20(fp)
  801220:	10800817 	ldw	r2,32(r2)
  801224:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  801228:	e0bffc17 	ldw	r2,-16(fp)
  80122c:	10800104 	addi	r2,r2,4
  801230:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  801234:	e0bffd17 	ldw	r2,-12(fp)
  801238:	1080800c 	andi	r2,r2,512
  80123c:	103fbe26 	beq	r2,zero,801138 <__alt_mem_onchip_mem+0xff7f9138>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  801240:	e0bffd17 	ldw	r2,-12(fp)
  801244:	1004d43a 	srli	r2,r2,16
  801248:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80124c:	00001406 	br	8012a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  801250:	e0bffc17 	ldw	r2,-16(fp)
  801254:	e0fffb17 	ldw	r3,-20(fp)
  801258:	18c00d17 	ldw	r3,52(r3)
  80125c:	e13ffb17 	ldw	r4,-20(fp)
  801260:	20c7883a 	add	r3,r4,r3
  801264:	18c20e04 	addi	r3,r3,2104
  801268:	18c00003 	ldbu	r3,0(r3)
  80126c:	18c03fcc 	andi	r3,r3,255
  801270:	18c0201c 	xori	r3,r3,128
  801274:	18ffe004 	addi	r3,r3,-128
  801278:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80127c:	e0bffb17 	ldw	r2,-20(fp)
  801280:	10800d17 	ldw	r2,52(r2)
  801284:	10800044 	addi	r2,r2,1
  801288:	10c1ffcc 	andi	r3,r2,2047
  80128c:	e0bffb17 	ldw	r2,-20(fp)
  801290:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  801294:	e0bffa17 	ldw	r2,-24(fp)
  801298:	10bfffc4 	addi	r2,r2,-1
  80129c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8012a0:	e0bffa17 	ldw	r2,-24(fp)
  8012a4:	10000526 	beq	r2,zero,8012bc <altera_avalon_jtag_uart_irq+0x1a8>
  8012a8:	e0bffb17 	ldw	r2,-20(fp)
  8012ac:	10c00d17 	ldw	r3,52(r2)
  8012b0:	e0bffb17 	ldw	r2,-20(fp)
  8012b4:	10800c17 	ldw	r2,48(r2)
  8012b8:	18bfe51e 	bne	r3,r2,801250 <__alt_mem_onchip_mem+0xff7f9250>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8012bc:	e0bffa17 	ldw	r2,-24(fp)
  8012c0:	103f9d26 	beq	r2,zero,801138 <__alt_mem_onchip_mem+0xff7f9138>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8012c4:	e0bffb17 	ldw	r2,-20(fp)
  8012c8:	10c00817 	ldw	r3,32(r2)
  8012cc:	00bfff44 	movi	r2,-3
  8012d0:	1886703a 	and	r3,r3,r2
  8012d4:	e0bffb17 	ldw	r2,-20(fp)
  8012d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8012dc:	e0bffb17 	ldw	r2,-20(fp)
  8012e0:	10800017 	ldw	r2,0(r2)
  8012e4:	10800104 	addi	r2,r2,4
  8012e8:	1007883a 	mov	r3,r2
  8012ec:	e0bffb17 	ldw	r2,-20(fp)
  8012f0:	10800817 	ldw	r2,32(r2)
  8012f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8012f8:	e0bffc17 	ldw	r2,-16(fp)
  8012fc:	10800104 	addi	r2,r2,4
  801300:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  801304:	003f8c06 	br	801138 <__alt_mem_onchip_mem+0xff7f9138>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  801308:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80130c:	0001883a 	nop
  801310:	e037883a 	mov	sp,fp
  801314:	df000017 	ldw	fp,0(sp)
  801318:	dec00104 	addi	sp,sp,4
  80131c:	f800283a 	ret

00801320 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  801320:	defff804 	addi	sp,sp,-32
  801324:	df000715 	stw	fp,28(sp)
  801328:	df000704 	addi	fp,sp,28
  80132c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  801330:	e0bffb17 	ldw	r2,-20(fp)
  801334:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  801338:	e0bff917 	ldw	r2,-28(fp)
  80133c:	10800017 	ldw	r2,0(r2)
  801340:	10800104 	addi	r2,r2,4
  801344:	10800037 	ldwio	r2,0(r2)
  801348:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80134c:	e0bffa17 	ldw	r2,-24(fp)
  801350:	1081000c 	andi	r2,r2,1024
  801354:	10000b26 	beq	r2,zero,801384 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  801358:	e0bff917 	ldw	r2,-28(fp)
  80135c:	10800017 	ldw	r2,0(r2)
  801360:	10800104 	addi	r2,r2,4
  801364:	1007883a 	mov	r3,r2
  801368:	e0bff917 	ldw	r2,-28(fp)
  80136c:	10800817 	ldw	r2,32(r2)
  801370:	10810014 	ori	r2,r2,1024
  801374:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  801378:	e0bff917 	ldw	r2,-28(fp)
  80137c:	10000915 	stw	zero,36(r2)
  801380:	00000a06 	br	8013ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  801384:	e0bff917 	ldw	r2,-28(fp)
  801388:	10c00917 	ldw	r3,36(r2)
  80138c:	00a00034 	movhi	r2,32768
  801390:	10bfff04 	addi	r2,r2,-4
  801394:	10c00536 	bltu	r2,r3,8013ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  801398:	e0bff917 	ldw	r2,-28(fp)
  80139c:	10800917 	ldw	r2,36(r2)
  8013a0:	10c00044 	addi	r3,r2,1
  8013a4:	e0bff917 	ldw	r2,-28(fp)
  8013a8:	10c00915 	stw	r3,36(r2)
  8013ac:	d0a62217 	ldw	r2,-26488(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8013b0:	e037883a 	mov	sp,fp
  8013b4:	df000017 	ldw	fp,0(sp)
  8013b8:	dec00104 	addi	sp,sp,4
  8013bc:	f800283a 	ret

008013c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8013c0:	defffd04 	addi	sp,sp,-12
  8013c4:	df000215 	stw	fp,8(sp)
  8013c8:	df000204 	addi	fp,sp,8
  8013cc:	e13ffe15 	stw	r4,-8(fp)
  8013d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8013d4:	00000506 	br	8013ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8013d8:	e0bfff17 	ldw	r2,-4(fp)
  8013dc:	1090000c 	andi	r2,r2,16384
  8013e0:	10000226 	beq	r2,zero,8013ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8013e4:	00bffd44 	movi	r2,-11
  8013e8:	00000b06 	br	801418 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8013ec:	e0bffe17 	ldw	r2,-8(fp)
  8013f0:	10c00d17 	ldw	r3,52(r2)
  8013f4:	e0bffe17 	ldw	r2,-8(fp)
  8013f8:	10800c17 	ldw	r2,48(r2)
  8013fc:	18800526 	beq	r3,r2,801414 <altera_avalon_jtag_uart_close+0x54>
  801400:	e0bffe17 	ldw	r2,-8(fp)
  801404:	10c00917 	ldw	r3,36(r2)
  801408:	e0bffe17 	ldw	r2,-8(fp)
  80140c:	10800117 	ldw	r2,4(r2)
  801410:	18bff136 	bltu	r3,r2,8013d8 <__alt_mem_onchip_mem+0xff7f93d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  801414:	0005883a 	mov	r2,zero
}
  801418:	e037883a 	mov	sp,fp
  80141c:	df000017 	ldw	fp,0(sp)
  801420:	dec00104 	addi	sp,sp,4
  801424:	f800283a 	ret

00801428 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  801428:	defffa04 	addi	sp,sp,-24
  80142c:	df000515 	stw	fp,20(sp)
  801430:	df000504 	addi	fp,sp,20
  801434:	e13ffd15 	stw	r4,-12(fp)
  801438:	e17ffe15 	stw	r5,-8(fp)
  80143c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  801440:	00bff9c4 	movi	r2,-25
  801444:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  801448:	e0bffe17 	ldw	r2,-8(fp)
  80144c:	10da8060 	cmpeqi	r3,r2,27137
  801450:	1800031e 	bne	r3,zero,801460 <altera_avalon_jtag_uart_ioctl+0x38>
  801454:	109a80a0 	cmpeqi	r2,r2,27138
  801458:	1000181e 	bne	r2,zero,8014bc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80145c:	00002906 	br	801504 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  801460:	e0bffd17 	ldw	r2,-12(fp)
  801464:	10c00117 	ldw	r3,4(r2)
  801468:	00a00034 	movhi	r2,32768
  80146c:	10bfffc4 	addi	r2,r2,-1
  801470:	18802126 	beq	r3,r2,8014f8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  801474:	e0bfff17 	ldw	r2,-4(fp)
  801478:	10800017 	ldw	r2,0(r2)
  80147c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10800090 	cmplti	r2,r2,2
  801488:	1000061e 	bne	r2,zero,8014a4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80148c:	e0fffc17 	ldw	r3,-16(fp)
  801490:	00a00034 	movhi	r2,32768
  801494:	10bfffc4 	addi	r2,r2,-1
  801498:	18800226 	beq	r3,r2,8014a4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80149c:	e0bffc17 	ldw	r2,-16(fp)
  8014a0:	00000206 	br	8014ac <altera_avalon_jtag_uart_ioctl+0x84>
  8014a4:	00a00034 	movhi	r2,32768
  8014a8:	10bfff84 	addi	r2,r2,-2
  8014ac:	e0fffd17 	ldw	r3,-12(fp)
  8014b0:	18800115 	stw	r2,4(r3)
      rc = 0;
  8014b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8014b8:	00000f06 	br	8014f8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8014bc:	e0bffd17 	ldw	r2,-12(fp)
  8014c0:	10c00117 	ldw	r3,4(r2)
  8014c4:	00a00034 	movhi	r2,32768
  8014c8:	10bfffc4 	addi	r2,r2,-1
  8014cc:	18800c26 	beq	r3,r2,801500 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8014d0:	e0bffd17 	ldw	r2,-12(fp)
  8014d4:	10c00917 	ldw	r3,36(r2)
  8014d8:	e0bffd17 	ldw	r2,-12(fp)
  8014dc:	10800117 	ldw	r2,4(r2)
  8014e0:	1885803a 	cmpltu	r2,r3,r2
  8014e4:	10c03fcc 	andi	r3,r2,255
  8014e8:	e0bfff17 	ldw	r2,-4(fp)
  8014ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8014f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8014f4:	00000206 	br	801500 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8014f8:	0001883a 	nop
  8014fc:	00000106 	br	801504 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  801500:	0001883a 	nop

  default:
    break;
  }

  return rc;
  801504:	e0bffb17 	ldw	r2,-20(fp)
}
  801508:	e037883a 	mov	sp,fp
  80150c:	df000017 	ldw	fp,0(sp)
  801510:	dec00104 	addi	sp,sp,4
  801514:	f800283a 	ret

00801518 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  801518:	defff304 	addi	sp,sp,-52
  80151c:	dfc00c15 	stw	ra,48(sp)
  801520:	df000b15 	stw	fp,44(sp)
  801524:	df000b04 	addi	fp,sp,44
  801528:	e13ffc15 	stw	r4,-16(fp)
  80152c:	e17ffd15 	stw	r5,-12(fp)
  801530:	e1bffe15 	stw	r6,-8(fp)
  801534:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  801538:	e0bffd17 	ldw	r2,-12(fp)
  80153c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  801540:	00004706 	br	801660 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  801544:	e0bffc17 	ldw	r2,-16(fp)
  801548:	10800a17 	ldw	r2,40(r2)
  80154c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  801550:	e0bffc17 	ldw	r2,-16(fp)
  801554:	10800b17 	ldw	r2,44(r2)
  801558:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80155c:	e0fff717 	ldw	r3,-36(fp)
  801560:	e0bff817 	ldw	r2,-32(fp)
  801564:	18800536 	bltu	r3,r2,80157c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  801568:	e0fff717 	ldw	r3,-36(fp)
  80156c:	e0bff817 	ldw	r2,-32(fp)
  801570:	1885c83a 	sub	r2,r3,r2
  801574:	e0bff615 	stw	r2,-40(fp)
  801578:	00000406 	br	80158c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80157c:	00c20004 	movi	r3,2048
  801580:	e0bff817 	ldw	r2,-32(fp)
  801584:	1885c83a 	sub	r2,r3,r2
  801588:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80158c:	e0bff617 	ldw	r2,-40(fp)
  801590:	10001e26 	beq	r2,zero,80160c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  801594:	e0fffe17 	ldw	r3,-8(fp)
  801598:	e0bff617 	ldw	r2,-40(fp)
  80159c:	1880022e 	bgeu	r3,r2,8015a8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8015a0:	e0bffe17 	ldw	r2,-8(fp)
  8015a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8015a8:	e0bffc17 	ldw	r2,-16(fp)
  8015ac:	10c00e04 	addi	r3,r2,56
  8015b0:	e0bff817 	ldw	r2,-32(fp)
  8015b4:	1885883a 	add	r2,r3,r2
  8015b8:	e1bff617 	ldw	r6,-40(fp)
  8015bc:	100b883a 	mov	r5,r2
  8015c0:	e13ff517 	ldw	r4,-44(fp)
  8015c4:	08044980 	call	804498 <memcpy>
      ptr   += n;
  8015c8:	e0fff517 	ldw	r3,-44(fp)
  8015cc:	e0bff617 	ldw	r2,-40(fp)
  8015d0:	1885883a 	add	r2,r3,r2
  8015d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8015d8:	e0fffe17 	ldw	r3,-8(fp)
  8015dc:	e0bff617 	ldw	r2,-40(fp)
  8015e0:	1885c83a 	sub	r2,r3,r2
  8015e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8015e8:	e0fff817 	ldw	r3,-32(fp)
  8015ec:	e0bff617 	ldw	r2,-40(fp)
  8015f0:	1885883a 	add	r2,r3,r2
  8015f4:	10c1ffcc 	andi	r3,r2,2047
  8015f8:	e0bffc17 	ldw	r2,-16(fp)
  8015fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  801600:	e0bffe17 	ldw	r2,-8(fp)
  801604:	00bfcf16 	blt	zero,r2,801544 <__alt_mem_onchip_mem+0xff7f9544>
  801608:	00000106 	br	801610 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80160c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  801610:	e0fff517 	ldw	r3,-44(fp)
  801614:	e0bffd17 	ldw	r2,-12(fp)
  801618:	1880141e 	bne	r3,r2,80166c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80161c:	e0bfff17 	ldw	r2,-4(fp)
  801620:	1090000c 	andi	r2,r2,16384
  801624:	1000131e 	bne	r2,zero,801674 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  801628:	0001883a 	nop
  80162c:	e0bffc17 	ldw	r2,-16(fp)
  801630:	10c00a17 	ldw	r3,40(r2)
  801634:	e0bff717 	ldw	r2,-36(fp)
  801638:	1880051e 	bne	r3,r2,801650 <altera_avalon_jtag_uart_read+0x138>
  80163c:	e0bffc17 	ldw	r2,-16(fp)
  801640:	10c00917 	ldw	r3,36(r2)
  801644:	e0bffc17 	ldw	r2,-16(fp)
  801648:	10800117 	ldw	r2,4(r2)
  80164c:	18bff736 	bltu	r3,r2,80162c <__alt_mem_onchip_mem+0xff7f962c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  801650:	e0bffc17 	ldw	r2,-16(fp)
  801654:	10c00a17 	ldw	r3,40(r2)
  801658:	e0bff717 	ldw	r2,-36(fp)
  80165c:	18800726 	beq	r3,r2,80167c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  801660:	e0bffe17 	ldw	r2,-8(fp)
  801664:	00bfb716 	blt	zero,r2,801544 <__alt_mem_onchip_mem+0xff7f9544>
  801668:	00000506 	br	801680 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80166c:	0001883a 	nop
  801670:	00000306 	br	801680 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  801674:	0001883a 	nop
  801678:	00000106 	br	801680 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80167c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  801680:	e0fff517 	ldw	r3,-44(fp)
  801684:	e0bffd17 	ldw	r2,-12(fp)
  801688:	18801826 	beq	r3,r2,8016ec <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80168c:	0005303a 	rdctl	r2,status
  801690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801694:	e0fffb17 	ldw	r3,-20(fp)
  801698:	00bfff84 	movi	r2,-2
  80169c:	1884703a 	and	r2,r3,r2
  8016a0:	1001703a 	wrctl	status,r2
  
  return context;
  8016a4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8016a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8016ac:	e0bffc17 	ldw	r2,-16(fp)
  8016b0:	10800817 	ldw	r2,32(r2)
  8016b4:	10c00054 	ori	r3,r2,1
  8016b8:	e0bffc17 	ldw	r2,-16(fp)
  8016bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8016c0:	e0bffc17 	ldw	r2,-16(fp)
  8016c4:	10800017 	ldw	r2,0(r2)
  8016c8:	10800104 	addi	r2,r2,4
  8016cc:	1007883a 	mov	r3,r2
  8016d0:	e0bffc17 	ldw	r2,-16(fp)
  8016d4:	10800817 	ldw	r2,32(r2)
  8016d8:	18800035 	stwio	r2,0(r3)
  8016dc:	e0bffa17 	ldw	r2,-24(fp)
  8016e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8016e4:	e0bff917 	ldw	r2,-28(fp)
  8016e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8016ec:	e0fff517 	ldw	r3,-44(fp)
  8016f0:	e0bffd17 	ldw	r2,-12(fp)
  8016f4:	18800426 	beq	r3,r2,801708 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8016f8:	e0fff517 	ldw	r3,-44(fp)
  8016fc:	e0bffd17 	ldw	r2,-12(fp)
  801700:	1885c83a 	sub	r2,r3,r2
  801704:	00000606 	br	801720 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  801708:	e0bfff17 	ldw	r2,-4(fp)
  80170c:	1090000c 	andi	r2,r2,16384
  801710:	10000226 	beq	r2,zero,80171c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  801714:	00bffd44 	movi	r2,-11
  801718:	00000106 	br	801720 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80171c:	00bffec4 	movi	r2,-5
}
  801720:	e037883a 	mov	sp,fp
  801724:	dfc00117 	ldw	ra,4(sp)
  801728:	df000017 	ldw	fp,0(sp)
  80172c:	dec00204 	addi	sp,sp,8
  801730:	f800283a 	ret

00801734 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  801734:	defff304 	addi	sp,sp,-52
  801738:	dfc00c15 	stw	ra,48(sp)
  80173c:	df000b15 	stw	fp,44(sp)
  801740:	df000b04 	addi	fp,sp,44
  801744:	e13ffc15 	stw	r4,-16(fp)
  801748:	e17ffd15 	stw	r5,-12(fp)
  80174c:	e1bffe15 	stw	r6,-8(fp)
  801750:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  801754:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  801758:	e0bffd17 	ldw	r2,-12(fp)
  80175c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801760:	00003706 	br	801840 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  801764:	e0bffc17 	ldw	r2,-16(fp)
  801768:	10800c17 	ldw	r2,48(r2)
  80176c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  801770:	e0bffc17 	ldw	r2,-16(fp)
  801774:	10800d17 	ldw	r2,52(r2)
  801778:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80177c:	e0fff917 	ldw	r3,-28(fp)
  801780:	e0bff517 	ldw	r2,-44(fp)
  801784:	1880062e 	bgeu	r3,r2,8017a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  801788:	e0fff517 	ldw	r3,-44(fp)
  80178c:	e0bff917 	ldw	r2,-28(fp)
  801790:	1885c83a 	sub	r2,r3,r2
  801794:	10bfffc4 	addi	r2,r2,-1
  801798:	e0bff615 	stw	r2,-40(fp)
  80179c:	00000b06 	br	8017cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8017a0:	e0bff517 	ldw	r2,-44(fp)
  8017a4:	10000526 	beq	r2,zero,8017bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8017a8:	00c20004 	movi	r3,2048
  8017ac:	e0bff917 	ldw	r2,-28(fp)
  8017b0:	1885c83a 	sub	r2,r3,r2
  8017b4:	e0bff615 	stw	r2,-40(fp)
  8017b8:	00000406 	br	8017cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8017bc:	00c1ffc4 	movi	r3,2047
  8017c0:	e0bff917 	ldw	r2,-28(fp)
  8017c4:	1885c83a 	sub	r2,r3,r2
  8017c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8017cc:	e0bff617 	ldw	r2,-40(fp)
  8017d0:	10001e26 	beq	r2,zero,80184c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8017d4:	e0fffe17 	ldw	r3,-8(fp)
  8017d8:	e0bff617 	ldw	r2,-40(fp)
  8017dc:	1880022e 	bgeu	r3,r2,8017e8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8017e0:	e0bffe17 	ldw	r2,-8(fp)
  8017e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8017e8:	e0bffc17 	ldw	r2,-16(fp)
  8017ec:	10c20e04 	addi	r3,r2,2104
  8017f0:	e0bff917 	ldw	r2,-28(fp)
  8017f4:	1885883a 	add	r2,r3,r2
  8017f8:	e1bff617 	ldw	r6,-40(fp)
  8017fc:	e17ffd17 	ldw	r5,-12(fp)
  801800:	1009883a 	mov	r4,r2
  801804:	08044980 	call	804498 <memcpy>
      ptr   += n;
  801808:	e0fffd17 	ldw	r3,-12(fp)
  80180c:	e0bff617 	ldw	r2,-40(fp)
  801810:	1885883a 	add	r2,r3,r2
  801814:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  801818:	e0fffe17 	ldw	r3,-8(fp)
  80181c:	e0bff617 	ldw	r2,-40(fp)
  801820:	1885c83a 	sub	r2,r3,r2
  801824:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  801828:	e0fff917 	ldw	r3,-28(fp)
  80182c:	e0bff617 	ldw	r2,-40(fp)
  801830:	1885883a 	add	r2,r3,r2
  801834:	10c1ffcc 	andi	r3,r2,2047
  801838:	e0bffc17 	ldw	r2,-16(fp)
  80183c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801840:	e0bffe17 	ldw	r2,-8(fp)
  801844:	00bfc716 	blt	zero,r2,801764 <__alt_mem_onchip_mem+0xff7f9764>
  801848:	00000106 	br	801850 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80184c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801850:	0005303a 	rdctl	r2,status
  801854:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801858:	e0fffb17 	ldw	r3,-20(fp)
  80185c:	00bfff84 	movi	r2,-2
  801860:	1884703a 	and	r2,r3,r2
  801864:	1001703a 	wrctl	status,r2
  
  return context;
  801868:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80186c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  801870:	e0bffc17 	ldw	r2,-16(fp)
  801874:	10800817 	ldw	r2,32(r2)
  801878:	10c00094 	ori	r3,r2,2
  80187c:	e0bffc17 	ldw	r2,-16(fp)
  801880:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  801884:	e0bffc17 	ldw	r2,-16(fp)
  801888:	10800017 	ldw	r2,0(r2)
  80188c:	10800104 	addi	r2,r2,4
  801890:	1007883a 	mov	r3,r2
  801894:	e0bffc17 	ldw	r2,-16(fp)
  801898:	10800817 	ldw	r2,32(r2)
  80189c:	18800035 	stwio	r2,0(r3)
  8018a0:	e0bffa17 	ldw	r2,-24(fp)
  8018a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8018a8:	e0bff817 	ldw	r2,-32(fp)
  8018ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8018b0:	e0bffe17 	ldw	r2,-8(fp)
  8018b4:	0080100e 	bge	zero,r2,8018f8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8018b8:	e0bfff17 	ldw	r2,-4(fp)
  8018bc:	1090000c 	andi	r2,r2,16384
  8018c0:	1000101e 	bne	r2,zero,801904 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8018c4:	0001883a 	nop
  8018c8:	e0bffc17 	ldw	r2,-16(fp)
  8018cc:	10c00d17 	ldw	r3,52(r2)
  8018d0:	e0bff517 	ldw	r2,-44(fp)
  8018d4:	1880051e 	bne	r3,r2,8018ec <altera_avalon_jtag_uart_write+0x1b8>
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10c00917 	ldw	r3,36(r2)
  8018e0:	e0bffc17 	ldw	r2,-16(fp)
  8018e4:	10800117 	ldw	r2,4(r2)
  8018e8:	18bff736 	bltu	r3,r2,8018c8 <__alt_mem_onchip_mem+0xff7f98c8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8018ec:	e0bffc17 	ldw	r2,-16(fp)
  8018f0:	10800917 	ldw	r2,36(r2)
  8018f4:	1000051e 	bne	r2,zero,80190c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8018f8:	e0bffe17 	ldw	r2,-8(fp)
  8018fc:	00bfd016 	blt	zero,r2,801840 <__alt_mem_onchip_mem+0xff7f9840>
  801900:	00000306 	br	801910 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  801904:	0001883a 	nop
  801908:	00000106 	br	801910 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80190c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  801910:	e0fffd17 	ldw	r3,-12(fp)
  801914:	e0bff717 	ldw	r2,-36(fp)
  801918:	18800426 	beq	r3,r2,80192c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80191c:	e0fffd17 	ldw	r3,-12(fp)
  801920:	e0bff717 	ldw	r2,-36(fp)
  801924:	1885c83a 	sub	r2,r3,r2
  801928:	00000606 	br	801944 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80192c:	e0bfff17 	ldw	r2,-4(fp)
  801930:	1090000c 	andi	r2,r2,16384
  801934:	10000226 	beq	r2,zero,801940 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  801938:	00bffd44 	movi	r2,-11
  80193c:	00000106 	br	801944 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  801940:	00bffec4 	movi	r2,-5
}
  801944:	e037883a 	mov	sp,fp
  801948:	dfc00117 	ldw	ra,4(sp)
  80194c:	df000017 	ldw	fp,0(sp)
  801950:	dec00204 	addi	sp,sp,8
  801954:	f800283a 	ret

00801958 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  801958:	defffa04 	addi	sp,sp,-24
  80195c:	dfc00515 	stw	ra,20(sp)
  801960:	df000415 	stw	fp,16(sp)
  801964:	df000404 	addi	fp,sp,16
  801968:	e13ffe15 	stw	r4,-8(fp)
  80196c:	2805883a 	mov	r2,r5
  801970:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801974:	e0bffe17 	ldw	r2,-8(fp)
  801978:	10800017 	ldw	r2,0(r2)
  80197c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801980:	008003f4 	movhi	r2,15
  801984:	10909004 	addi	r2,r2,16960
  801988:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80198c:	e0bffe17 	ldw	r2,-8(fp)
  801990:	10800803 	ldbu	r2,32(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	1080201c 	xori	r2,r2,128
  80199c:	10bfe004 	addi	r2,r2,-128
  8019a0:	1000151e 	bne	r2,zero,8019f8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8019a4:	00000906 	br	8019cc <lcd_write_command+0x74>
    if (--i == 0)
  8019a8:	e0bffc17 	ldw	r2,-16(fp)
  8019ac:	10bfffc4 	addi	r2,r2,-1
  8019b0:	e0bffc15 	stw	r2,-16(fp)
  8019b4:	e0bffc17 	ldw	r2,-16(fp)
  8019b8:	1000041e 	bne	r2,zero,8019cc <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8019bc:	e0bffe17 	ldw	r2,-8(fp)
  8019c0:	00c00044 	movi	r3,1
  8019c4:	10c00805 	stb	r3,32(r2)
      return;
  8019c8:	00000c06 	br	8019fc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8019cc:	e0bffd17 	ldw	r2,-12(fp)
  8019d0:	10800104 	addi	r2,r2,4
  8019d4:	10800037 	ldwio	r2,0(r2)
  8019d8:	1080200c 	andi	r2,r2,128
  8019dc:	103ff21e 	bne	r2,zero,8019a8 <__alt_mem_onchip_mem+0xff7f99a8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8019e0:	01001904 	movi	r4,100
  8019e4:	0803ebc0 	call	803ebc <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8019e8:	e0bffd17 	ldw	r2,-12(fp)
  8019ec:	e0ffff03 	ldbu	r3,-4(fp)
  8019f0:	10c00035 	stwio	r3,0(r2)
  8019f4:	00000106 	br	8019fc <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8019f8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8019fc:	e037883a 	mov	sp,fp
  801a00:	dfc00117 	ldw	ra,4(sp)
  801a04:	df000017 	ldw	fp,0(sp)
  801a08:	dec00204 	addi	sp,sp,8
  801a0c:	f800283a 	ret

00801a10 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  801a10:	defffa04 	addi	sp,sp,-24
  801a14:	dfc00515 	stw	ra,20(sp)
  801a18:	df000415 	stw	fp,16(sp)
  801a1c:	df000404 	addi	fp,sp,16
  801a20:	e13ffe15 	stw	r4,-8(fp)
  801a24:	2805883a 	mov	r2,r5
  801a28:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801a2c:	e0bffe17 	ldw	r2,-8(fp)
  801a30:	10800017 	ldw	r2,0(r2)
  801a34:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801a38:	008003f4 	movhi	r2,15
  801a3c:	10909004 	addi	r2,r2,16960
  801a40:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  801a44:	e0bffe17 	ldw	r2,-8(fp)
  801a48:	10800803 	ldbu	r2,32(r2)
  801a4c:	10803fcc 	andi	r2,r2,255
  801a50:	1080201c 	xori	r2,r2,128
  801a54:	10bfe004 	addi	r2,r2,-128
  801a58:	10001d1e 	bne	r2,zero,801ad0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801a5c:	00000906 	br	801a84 <lcd_write_data+0x74>
    if (--i == 0)
  801a60:	e0bffc17 	ldw	r2,-16(fp)
  801a64:	10bfffc4 	addi	r2,r2,-1
  801a68:	e0bffc15 	stw	r2,-16(fp)
  801a6c:	e0bffc17 	ldw	r2,-16(fp)
  801a70:	1000041e 	bne	r2,zero,801a84 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  801a74:	e0bffe17 	ldw	r2,-8(fp)
  801a78:	00c00044 	movi	r3,1
  801a7c:	10c00805 	stb	r3,32(r2)
      return;
  801a80:	00001406 	br	801ad4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801a84:	e0bffd17 	ldw	r2,-12(fp)
  801a88:	10800104 	addi	r2,r2,4
  801a8c:	10800037 	ldwio	r2,0(r2)
  801a90:	1080200c 	andi	r2,r2,128
  801a94:	103ff21e 	bne	r2,zero,801a60 <__alt_mem_onchip_mem+0xff7f9a60>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801a98:	01001904 	movi	r4,100
  801a9c:	0803ebc0 	call	803ebc <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  801aa0:	e0bffd17 	ldw	r2,-12(fp)
  801aa4:	10800204 	addi	r2,r2,8
  801aa8:	1007883a 	mov	r3,r2
  801aac:	e0bfff03 	ldbu	r2,-4(fp)
  801ab0:	18800035 	stwio	r2,0(r3)

  sp->address++;
  801ab4:	e0bffe17 	ldw	r2,-8(fp)
  801ab8:	108008c3 	ldbu	r2,35(r2)
  801abc:	10800044 	addi	r2,r2,1
  801ac0:	1007883a 	mov	r3,r2
  801ac4:	e0bffe17 	ldw	r2,-8(fp)
  801ac8:	10c008c5 	stb	r3,35(r2)
  801acc:	00000106 	br	801ad4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  801ad0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  801ad4:	e037883a 	mov	sp,fp
  801ad8:	dfc00117 	ldw	ra,4(sp)
  801adc:	df000017 	ldw	fp,0(sp)
  801ae0:	dec00204 	addi	sp,sp,8
  801ae4:	f800283a 	ret

00801ae8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  801ae8:	defffc04 	addi	sp,sp,-16
  801aec:	dfc00315 	stw	ra,12(sp)
  801af0:	df000215 	stw	fp,8(sp)
  801af4:	df000204 	addi	fp,sp,8
  801af8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  801afc:	01400044 	movi	r5,1
  801b00:	e13fff17 	ldw	r4,-4(fp)
  801b04:	08019580 	call	801958 <lcd_write_command>

  sp->x = 0;
  801b08:	e0bfff17 	ldw	r2,-4(fp)
  801b0c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  801b10:	e0bfff17 	ldw	r2,-4(fp)
  801b14:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  801b18:	e0bfff17 	ldw	r2,-4(fp)
  801b1c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b20:	e03ffe15 	stw	zero,-8(fp)
  801b24:	00001b06 	br	801b94 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  801b28:	e0bffe17 	ldw	r2,-8(fp)
  801b2c:	108018e4 	muli	r2,r2,99
  801b30:	10801004 	addi	r2,r2,64
  801b34:	e0ffff17 	ldw	r3,-4(fp)
  801b38:	1885883a 	add	r2,r3,r2
  801b3c:	01801444 	movi	r6,81
  801b40:	01400804 	movi	r5,32
  801b44:	1009883a 	mov	r4,r2
  801b48:	08045e00 	call	8045e0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  801b4c:	e0bffe17 	ldw	r2,-8(fp)
  801b50:	108018e4 	muli	r2,r2,99
  801b54:	10800c04 	addi	r2,r2,48
  801b58:	e0ffff17 	ldw	r3,-4(fp)
  801b5c:	1885883a 	add	r2,r3,r2
  801b60:	01800404 	movi	r6,16
  801b64:	01400804 	movi	r5,32
  801b68:	1009883a 	mov	r4,r2
  801b6c:	08045e00 	call	8045e0 <memset>
    sp->line[y].width = 0;
  801b70:	e0ffff17 	ldw	r3,-4(fp)
  801b74:	e0bffe17 	ldw	r2,-8(fp)
  801b78:	108018e4 	muli	r2,r2,99
  801b7c:	1885883a 	add	r2,r3,r2
  801b80:	10802444 	addi	r2,r2,145
  801b84:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b88:	e0bffe17 	ldw	r2,-8(fp)
  801b8c:	10800044 	addi	r2,r2,1
  801b90:	e0bffe15 	stw	r2,-8(fp)
  801b94:	e0bffe17 	ldw	r2,-8(fp)
  801b98:	10800090 	cmplti	r2,r2,2
  801b9c:	103fe21e 	bne	r2,zero,801b28 <__alt_mem_onchip_mem+0xff7f9b28>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  801ba0:	0001883a 	nop
  801ba4:	e037883a 	mov	sp,fp
  801ba8:	dfc00117 	ldw	ra,4(sp)
  801bac:	df000017 	ldw	fp,0(sp)
  801bb0:	dec00204 	addi	sp,sp,8
  801bb4:	f800283a 	ret

00801bb8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  801bb8:	defff704 	addi	sp,sp,-36
  801bbc:	dfc00815 	stw	ra,32(sp)
  801bc0:	df000715 	stw	fp,28(sp)
  801bc4:	df000704 	addi	fp,sp,28
  801bc8:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  801bcc:	e0bfff17 	ldw	r2,-4(fp)
  801bd0:	10800943 	ldbu	r2,37(r2)
  801bd4:	10803fcc 	andi	r2,r2,255
  801bd8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801bdc:	e03ff915 	stw	zero,-28(fp)
  801be0:	00006706 	br	801d80 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  801be4:	e0ffff17 	ldw	r3,-4(fp)
  801be8:	e0bff917 	ldw	r2,-28(fp)
  801bec:	108018e4 	muli	r2,r2,99
  801bf0:	1885883a 	add	r2,r3,r2
  801bf4:	10802444 	addi	r2,r2,145
  801bf8:	10800003 	ldbu	r2,0(r2)
  801bfc:	10803fcc 	andi	r2,r2,255
  801c00:	1080201c 	xori	r2,r2,128
  801c04:	10bfe004 	addi	r2,r2,-128
  801c08:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  801c0c:	e0ffff17 	ldw	r3,-4(fp)
  801c10:	e0bff917 	ldw	r2,-28(fp)
  801c14:	108018e4 	muli	r2,r2,99
  801c18:	1885883a 	add	r2,r3,r2
  801c1c:	10802484 	addi	r2,r2,146
  801c20:	10800003 	ldbu	r2,0(r2)
  801c24:	10c03fcc 	andi	r3,r2,255
  801c28:	e0bffc17 	ldw	r2,-16(fp)
  801c2c:	1885383a 	mul	r2,r3,r2
  801c30:	1005d23a 	srai	r2,r2,8
  801c34:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  801c38:	e0fffb17 	ldw	r3,-20(fp)
  801c3c:	e0bffd17 	ldw	r2,-12(fp)
  801c40:	18800116 	blt	r3,r2,801c48 <lcd_repaint_screen+0x90>
      offset = 0;
  801c44:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801c48:	e03ffa15 	stw	zero,-24(fp)
  801c4c:	00004606 	br	801d68 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  801c50:	e0fffa17 	ldw	r3,-24(fp)
  801c54:	e0bffb17 	ldw	r2,-20(fp)
  801c58:	1885883a 	add	r2,r3,r2
  801c5c:	e17ffd17 	ldw	r5,-12(fp)
  801c60:	1009883a 	mov	r4,r2
  801c64:	0804abc0 	call	804abc <__modsi3>
  801c68:	1009883a 	mov	r4,r2
  801c6c:	e0ffff17 	ldw	r3,-4(fp)
  801c70:	e0bff917 	ldw	r2,-28(fp)
  801c74:	108018e4 	muli	r2,r2,99
  801c78:	1885883a 	add	r2,r3,r2
  801c7c:	1105883a 	add	r2,r2,r4
  801c80:	10801004 	addi	r2,r2,64
  801c84:	10800003 	ldbu	r2,0(r2)
  801c88:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  801c8c:	e0ffff17 	ldw	r3,-4(fp)
  801c90:	e0bff917 	ldw	r2,-28(fp)
  801c94:	108018e4 	muli	r2,r2,99
  801c98:	1887883a 	add	r3,r3,r2
  801c9c:	e0bffa17 	ldw	r2,-24(fp)
  801ca0:	1885883a 	add	r2,r3,r2
  801ca4:	10800c04 	addi	r2,r2,48
  801ca8:	10800003 	ldbu	r2,0(r2)
  801cac:	10c03fcc 	andi	r3,r2,255
  801cb0:	18c0201c 	xori	r3,r3,128
  801cb4:	18ffe004 	addi	r3,r3,-128
  801cb8:	e0bffe07 	ldb	r2,-8(fp)
  801cbc:	18802726 	beq	r3,r2,801d5c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  801cc0:	e0fff917 	ldw	r3,-28(fp)
  801cc4:	d0a00104 	addi	r2,gp,-32764
  801cc8:	1885883a 	add	r2,r3,r2
  801ccc:	10800003 	ldbu	r2,0(r2)
  801cd0:	1007883a 	mov	r3,r2
  801cd4:	e0bffa17 	ldw	r2,-24(fp)
  801cd8:	1885883a 	add	r2,r3,r2
  801cdc:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  801ce0:	e0fffe43 	ldbu	r3,-7(fp)
  801ce4:	e0bfff17 	ldw	r2,-4(fp)
  801ce8:	108008c3 	ldbu	r2,35(r2)
  801cec:	10803fcc 	andi	r2,r2,255
  801cf0:	1080201c 	xori	r2,r2,128
  801cf4:	10bfe004 	addi	r2,r2,-128
  801cf8:	18800a26 	beq	r3,r2,801d24 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  801cfc:	e0fffe43 	ldbu	r3,-7(fp)
  801d00:	00bfe004 	movi	r2,-128
  801d04:	1884b03a 	or	r2,r3,r2
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	100b883a 	mov	r5,r2
  801d10:	e13fff17 	ldw	r4,-4(fp)
  801d14:	08019580 	call	801958 <lcd_write_command>
          sp->address = address;
  801d18:	e0fffe43 	ldbu	r3,-7(fp)
  801d1c:	e0bfff17 	ldw	r2,-4(fp)
  801d20:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  801d24:	e0bffe03 	ldbu	r2,-8(fp)
  801d28:	10803fcc 	andi	r2,r2,255
  801d2c:	100b883a 	mov	r5,r2
  801d30:	e13fff17 	ldw	r4,-4(fp)
  801d34:	0801a100 	call	801a10 <lcd_write_data>
        sp->line[y].visible[x] = c;
  801d38:	e0ffff17 	ldw	r3,-4(fp)
  801d3c:	e0bff917 	ldw	r2,-28(fp)
  801d40:	108018e4 	muli	r2,r2,99
  801d44:	1887883a 	add	r3,r3,r2
  801d48:	e0bffa17 	ldw	r2,-24(fp)
  801d4c:	1885883a 	add	r2,r3,r2
  801d50:	10800c04 	addi	r2,r2,48
  801d54:	e0fffe03 	ldbu	r3,-8(fp)
  801d58:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801d5c:	e0bffa17 	ldw	r2,-24(fp)
  801d60:	10800044 	addi	r2,r2,1
  801d64:	e0bffa15 	stw	r2,-24(fp)
  801d68:	e0bffa17 	ldw	r2,-24(fp)
  801d6c:	10800410 	cmplti	r2,r2,16
  801d70:	103fb71e 	bne	r2,zero,801c50 <__alt_mem_onchip_mem+0xff7f9c50>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801d74:	e0bff917 	ldw	r2,-28(fp)
  801d78:	10800044 	addi	r2,r2,1
  801d7c:	e0bff915 	stw	r2,-28(fp)
  801d80:	e0bff917 	ldw	r2,-28(fp)
  801d84:	10800090 	cmplti	r2,r2,2
  801d88:	103f961e 	bne	r2,zero,801be4 <__alt_mem_onchip_mem+0xff7f9be4>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  801d8c:	0001883a 	nop
  801d90:	e037883a 	mov	sp,fp
  801d94:	dfc00117 	ldw	ra,4(sp)
  801d98:	df000017 	ldw	fp,0(sp)
  801d9c:	dec00204 	addi	sp,sp,8
  801da0:	f800283a 	ret

00801da4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  801da4:	defffc04 	addi	sp,sp,-16
  801da8:	dfc00315 	stw	ra,12(sp)
  801dac:	df000215 	stw	fp,8(sp)
  801db0:	df000204 	addi	fp,sp,8
  801db4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801db8:	e03ffe15 	stw	zero,-8(fp)
  801dbc:	00001d06 	br	801e34 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  801dc0:	e0bffe17 	ldw	r2,-8(fp)
  801dc4:	00800f16 	blt	zero,r2,801e04 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  801dc8:	e0bffe17 	ldw	r2,-8(fp)
  801dcc:	108018e4 	muli	r2,r2,99
  801dd0:	10801004 	addi	r2,r2,64
  801dd4:	e0ffff17 	ldw	r3,-4(fp)
  801dd8:	1889883a 	add	r4,r3,r2
  801ddc:	e0bffe17 	ldw	r2,-8(fp)
  801de0:	10800044 	addi	r2,r2,1
  801de4:	108018e4 	muli	r2,r2,99
  801de8:	10801004 	addi	r2,r2,64
  801dec:	e0ffff17 	ldw	r3,-4(fp)
  801df0:	1885883a 	add	r2,r3,r2
  801df4:	01801404 	movi	r6,80
  801df8:	100b883a 	mov	r5,r2
  801dfc:	08044980 	call	804498 <memcpy>
  801e00:	00000906 	br	801e28 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  801e04:	e0bffe17 	ldw	r2,-8(fp)
  801e08:	108018e4 	muli	r2,r2,99
  801e0c:	10801004 	addi	r2,r2,64
  801e10:	e0ffff17 	ldw	r3,-4(fp)
  801e14:	1885883a 	add	r2,r3,r2
  801e18:	01801404 	movi	r6,80
  801e1c:	01400804 	movi	r5,32
  801e20:	1009883a 	mov	r4,r2
  801e24:	08045e00 	call	8045e0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801e28:	e0bffe17 	ldw	r2,-8(fp)
  801e2c:	10800044 	addi	r2,r2,1
  801e30:	e0bffe15 	stw	r2,-8(fp)
  801e34:	e0bffe17 	ldw	r2,-8(fp)
  801e38:	10800090 	cmplti	r2,r2,2
  801e3c:	103fe01e 	bne	r2,zero,801dc0 <__alt_mem_onchip_mem+0xff7f9dc0>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  801e40:	e0bfff17 	ldw	r2,-4(fp)
  801e44:	10800883 	ldbu	r2,34(r2)
  801e48:	10bfffc4 	addi	r2,r2,-1
  801e4c:	1007883a 	mov	r3,r2
  801e50:	e0bfff17 	ldw	r2,-4(fp)
  801e54:	10c00885 	stb	r3,34(r2)
}
  801e58:	0001883a 	nop
  801e5c:	e037883a 	mov	sp,fp
  801e60:	dfc00117 	ldw	ra,4(sp)
  801e64:	df000017 	ldw	fp,0(sp)
  801e68:	dec00204 	addi	sp,sp,8
  801e6c:	f800283a 	ret

00801e70 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  801e70:	defff904 	addi	sp,sp,-28
  801e74:	dfc00615 	stw	ra,24(sp)
  801e78:	df000515 	stw	fp,20(sp)
  801e7c:	df000504 	addi	fp,sp,20
  801e80:	e13ffe15 	stw	r4,-8(fp)
  801e84:	2805883a 	mov	r2,r5
  801e88:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  801e8c:	e03ffb15 	stw	zero,-20(fp)
  801e90:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  801e94:	e0bffe17 	ldw	r2,-8(fp)
  801e98:	10800a03 	ldbu	r2,40(r2)
  801e9c:	10803fcc 	andi	r2,r2,255
  801ea0:	1080201c 	xori	r2,r2,128
  801ea4:	10bfe004 	addi	r2,r2,-128
  801ea8:	108016d8 	cmpnei	r2,r2,91
  801eac:	1000411e 	bne	r2,zero,801fb4 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  801eb0:	e0bffe17 	ldw	r2,-8(fp)
  801eb4:	10800a04 	addi	r2,r2,40
  801eb8:	10800044 	addi	r2,r2,1
  801ebc:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  801ec0:	00000c06 	br	801ef4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  801ec4:	e0bffb17 	ldw	r2,-20(fp)
  801ec8:	10c002a4 	muli	r3,r2,10
  801ecc:	e0bffd17 	ldw	r2,-12(fp)
  801ed0:	11000044 	addi	r4,r2,1
  801ed4:	e13ffd15 	stw	r4,-12(fp)
  801ed8:	10800003 	ldbu	r2,0(r2)
  801edc:	10803fcc 	andi	r2,r2,255
  801ee0:	1080201c 	xori	r2,r2,128
  801ee4:	10bfe004 	addi	r2,r2,-128
  801ee8:	10bff404 	addi	r2,r2,-48
  801eec:	1885883a 	add	r2,r3,r2
  801ef0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  801ef4:	d0e00a17 	ldw	r3,-32728(gp)
  801ef8:	e0bffd17 	ldw	r2,-12(fp)
  801efc:	10800003 	ldbu	r2,0(r2)
  801f00:	10803fcc 	andi	r2,r2,255
  801f04:	1080201c 	xori	r2,r2,128
  801f08:	10bfe004 	addi	r2,r2,-128
  801f0c:	10800044 	addi	r2,r2,1
  801f10:	1885883a 	add	r2,r3,r2
  801f14:	10800003 	ldbu	r2,0(r2)
  801f18:	10803fcc 	andi	r2,r2,255
  801f1c:	1080010c 	andi	r2,r2,4
  801f20:	103fe81e 	bne	r2,zero,801ec4 <__alt_mem_onchip_mem+0xff7f9ec4>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  801f24:	e0bffd17 	ldw	r2,-12(fp)
  801f28:	10800003 	ldbu	r2,0(r2)
  801f2c:	10803fcc 	andi	r2,r2,255
  801f30:	1080201c 	xori	r2,r2,128
  801f34:	10bfe004 	addi	r2,r2,-128
  801f38:	10800ed8 	cmpnei	r2,r2,59
  801f3c:	10001f1e 	bne	r2,zero,801fbc <lcd_handle_escape+0x14c>
    {
      ptr++;
  801f40:	e0bffd17 	ldw	r2,-12(fp)
  801f44:	10800044 	addi	r2,r2,1
  801f48:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  801f4c:	00000c06 	br	801f80 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  801f50:	e0bffc17 	ldw	r2,-16(fp)
  801f54:	10c002a4 	muli	r3,r2,10
  801f58:	e0bffd17 	ldw	r2,-12(fp)
  801f5c:	11000044 	addi	r4,r2,1
  801f60:	e13ffd15 	stw	r4,-12(fp)
  801f64:	10800003 	ldbu	r2,0(r2)
  801f68:	10803fcc 	andi	r2,r2,255
  801f6c:	1080201c 	xori	r2,r2,128
  801f70:	10bfe004 	addi	r2,r2,-128
  801f74:	10bff404 	addi	r2,r2,-48
  801f78:	1885883a 	add	r2,r3,r2
  801f7c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  801f80:	d0e00a17 	ldw	r3,-32728(gp)
  801f84:	e0bffd17 	ldw	r2,-12(fp)
  801f88:	10800003 	ldbu	r2,0(r2)
  801f8c:	10803fcc 	andi	r2,r2,255
  801f90:	1080201c 	xori	r2,r2,128
  801f94:	10bfe004 	addi	r2,r2,-128
  801f98:	10800044 	addi	r2,r2,1
  801f9c:	1885883a 	add	r2,r3,r2
  801fa0:	10800003 	ldbu	r2,0(r2)
  801fa4:	10803fcc 	andi	r2,r2,255
  801fa8:	1080010c 	andi	r2,r2,4
  801fac:	103fe81e 	bne	r2,zero,801f50 <__alt_mem_onchip_mem+0xff7f9f50>
  801fb0:	00000206 	br	801fbc <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801fb4:	00bfffc4 	movi	r2,-1
  801fb8:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  801fbc:	e0bfff07 	ldb	r2,-4(fp)
  801fc0:	10c012a0 	cmpeqi	r3,r2,74
  801fc4:	1800291e 	bne	r3,zero,80206c <lcd_handle_escape+0x1fc>
  801fc8:	10c012c8 	cmpgei	r3,r2,75
  801fcc:	1800031e 	bne	r3,zero,801fdc <lcd_handle_escape+0x16c>
  801fd0:	10801220 	cmpeqi	r2,r2,72
  801fd4:	1000061e 	bne	r2,zero,801ff0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  801fd8:	00004a06 	br	802104 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  801fdc:	10c012e0 	cmpeqi	r3,r2,75
  801fe0:	1800281e 	bne	r3,zero,802084 <lcd_handle_escape+0x214>
  801fe4:	108019a0 	cmpeqi	r2,r2,102
  801fe8:	1000011e 	bne	r2,zero,801ff0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  801fec:	00004506 	br	802104 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  801ff0:	e0bffc17 	ldw	r2,-16(fp)
  801ff4:	0080050e 	bge	zero,r2,80200c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  801ff8:	e0bffc17 	ldw	r2,-16(fp)
  801ffc:	10bfffc4 	addi	r2,r2,-1
  802000:	1007883a 	mov	r3,r2
  802004:	e0bffe17 	ldw	r2,-8(fp)
  802008:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80200c:	e0bffb17 	ldw	r2,-20(fp)
  802010:	0080370e 	bge	zero,r2,8020f0 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  802014:	e0bffb17 	ldw	r2,-20(fp)
  802018:	10bfffc4 	addi	r2,r2,-1
  80201c:	1007883a 	mov	r3,r2
  802020:	e0bffe17 	ldw	r2,-8(fp)
  802024:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  802028:	e0bffe17 	ldw	r2,-8(fp)
  80202c:	10800883 	ldbu	r2,34(r2)
  802030:	10803fcc 	andi	r2,r2,255
  802034:	10800170 	cmpltui	r2,r2,5
  802038:	1000061e 	bne	r2,zero,802054 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80203c:	e0bffe17 	ldw	r2,-8(fp)
  802040:	00c00104 	movi	r3,4
  802044:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  802048:	00000206 	br	802054 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80204c:	e13ffe17 	ldw	r4,-8(fp)
  802050:	0801da40 	call	801da4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  802054:	e0bffe17 	ldw	r2,-8(fp)
  802058:	10800883 	ldbu	r2,34(r2)
  80205c:	10803fcc 	andi	r2,r2,255
  802060:	108000e8 	cmpgeui	r2,r2,3
  802064:	103ff91e 	bne	r2,zero,80204c <__alt_mem_onchip_mem+0xff7fa04c>
        lcd_scroll_up(sp);
    }
    break;
  802068:	00002106 	br	8020f0 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80206c:	e0bffb17 	ldw	r2,-20(fp)
  802070:	10800098 	cmpnei	r2,r2,2
  802074:	1000201e 	bne	r2,zero,8020f8 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  802078:	e13ffe17 	ldw	r4,-8(fp)
  80207c:	0801ae80 	call	801ae8 <lcd_clear_screen>
    break;
  802080:	00001d06 	br	8020f8 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  802084:	e0bffb17 	ldw	r2,-20(fp)
  802088:	00801d16 	blt	zero,r2,802100 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80208c:	e0bffe17 	ldw	r2,-8(fp)
  802090:	10800843 	ldbu	r2,33(r2)
  802094:	10803fcc 	andi	r2,r2,255
  802098:	10801428 	cmpgeui	r2,r2,80
  80209c:	1000181e 	bne	r2,zero,802100 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8020a0:	e0bffe17 	ldw	r2,-8(fp)
  8020a4:	10800883 	ldbu	r2,34(r2)
  8020a8:	10803fcc 	andi	r2,r2,255
  8020ac:	108018e4 	muli	r2,r2,99
  8020b0:	10801004 	addi	r2,r2,64
  8020b4:	e0fffe17 	ldw	r3,-8(fp)
  8020b8:	1887883a 	add	r3,r3,r2
  8020bc:	e0bffe17 	ldw	r2,-8(fp)
  8020c0:	10800843 	ldbu	r2,33(r2)
  8020c4:	10803fcc 	andi	r2,r2,255
  8020c8:	1889883a 	add	r4,r3,r2
  8020cc:	e0bffe17 	ldw	r2,-8(fp)
  8020d0:	10800843 	ldbu	r2,33(r2)
  8020d4:	10803fcc 	andi	r2,r2,255
  8020d8:	00c01404 	movi	r3,80
  8020dc:	1885c83a 	sub	r2,r3,r2
  8020e0:	100d883a 	mov	r6,r2
  8020e4:	01400804 	movi	r5,32
  8020e8:	08045e00 	call	8045e0 <memset>
    }
    break;
  8020ec:	00000406 	br	802100 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  8020f0:	0001883a 	nop
  8020f4:	00000306 	br	802104 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  8020f8:	0001883a 	nop
  8020fc:	00000106 	br	802104 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  802100:	0001883a 	nop
  }
}
  802104:	0001883a 	nop
  802108:	e037883a 	mov	sp,fp
  80210c:	dfc00117 	ldw	ra,4(sp)
  802110:	df000017 	ldw	fp,0(sp)
  802114:	dec00204 	addi	sp,sp,8
  802118:	f800283a 	ret

0080211c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80211c:	defff304 	addi	sp,sp,-52
  802120:	dfc00c15 	stw	ra,48(sp)
  802124:	df000b15 	stw	fp,44(sp)
  802128:	df000b04 	addi	fp,sp,44
  80212c:	e13ffc15 	stw	r4,-16(fp)
  802130:	e17ffd15 	stw	r5,-12(fp)
  802134:	e1bffe15 	stw	r6,-8(fp)
  802138:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80213c:	e0bffe17 	ldw	r2,-8(fp)
  802140:	e0fffd17 	ldw	r3,-12(fp)
  802144:	1885883a 	add	r2,r3,r2
  802148:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80214c:	e0bffc17 	ldw	r2,-16(fp)
  802150:	00c00044 	movi	r3,1
  802154:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  802158:	00009906 	br	8023c0 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80215c:	e0bffd17 	ldw	r2,-12(fp)
  802160:	10800003 	ldbu	r2,0(r2)
  802164:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  802168:	e0bffc17 	ldw	r2,-16(fp)
  80216c:	10800903 	ldbu	r2,36(r2)
  802170:	10803fcc 	andi	r2,r2,255
  802174:	1080201c 	xori	r2,r2,128
  802178:	10bfe004 	addi	r2,r2,-128
  80217c:	10003716 	blt	r2,zero,80225c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  802180:	e0bffc17 	ldw	r2,-16(fp)
  802184:	10800903 	ldbu	r2,36(r2)
  802188:	10803fcc 	andi	r2,r2,255
  80218c:	1080201c 	xori	r2,r2,128
  802190:	10bfe004 	addi	r2,r2,-128
  802194:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  802198:	e0bffa17 	ldw	r2,-24(fp)
  80219c:	1000031e 	bne	r2,zero,8021ac <altera_avalon_lcd_16207_write+0x90>
  8021a0:	e0bff907 	ldb	r2,-28(fp)
  8021a4:	108016d8 	cmpnei	r2,r2,91
  8021a8:	10000d1e 	bne	r2,zero,8021e0 <altera_avalon_lcd_16207_write+0xc4>
  8021ac:	e0bffa17 	ldw	r2,-24(fp)
  8021b0:	10001826 	beq	r2,zero,802214 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8021b4:	d0e00a17 	ldw	r3,-32728(gp)
  8021b8:	e0bff907 	ldb	r2,-28(fp)
  8021bc:	10800044 	addi	r2,r2,1
  8021c0:	1885883a 	add	r2,r3,r2
  8021c4:	10800003 	ldbu	r2,0(r2)
  8021c8:	10803fcc 	andi	r2,r2,255
  8021cc:	1080010c 	andi	r2,r2,4
  8021d0:	1000101e 	bne	r2,zero,802214 <altera_avalon_lcd_16207_write+0xf8>
  8021d4:	e0bff907 	ldb	r2,-28(fp)
  8021d8:	10800ee0 	cmpeqi	r2,r2,59
  8021dc:	10000d1e 	bne	r2,zero,802214 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  8021e0:	e0fffc17 	ldw	r3,-16(fp)
  8021e4:	e0bffa17 	ldw	r2,-24(fp)
  8021e8:	1885883a 	add	r2,r3,r2
  8021ec:	10800a04 	addi	r2,r2,40
  8021f0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8021f4:	e0bff907 	ldb	r2,-28(fp)
  8021f8:	100b883a 	mov	r5,r2
  8021fc:	e13ffc17 	ldw	r4,-16(fp)
  802200:	0801e700 	call	801e70 <lcd_handle_escape>

        sp->esccount = -1;
  802204:	e0bffc17 	ldw	r2,-16(fp)
  802208:	00ffffc4 	movi	r3,-1
  80220c:	10c00905 	stb	r3,36(r2)
  802210:	00006806 	br	8023b4 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  802214:	e0bffc17 	ldw	r2,-16(fp)
  802218:	10800903 	ldbu	r2,36(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	108001e8 	cmpgeui	r2,r2,7
  802224:	1000631e 	bne	r2,zero,8023b4 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  802228:	e0fffc17 	ldw	r3,-16(fp)
  80222c:	e0bffa17 	ldw	r2,-24(fp)
  802230:	1885883a 	add	r2,r3,r2
  802234:	10800a04 	addi	r2,r2,40
  802238:	e0fff903 	ldbu	r3,-28(fp)
  80223c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  802240:	e0bffc17 	ldw	r2,-16(fp)
  802244:	10800903 	ldbu	r2,36(r2)
  802248:	10800044 	addi	r2,r2,1
  80224c:	1007883a 	mov	r3,r2
  802250:	e0bffc17 	ldw	r2,-16(fp)
  802254:	10c00905 	stb	r3,36(r2)
  802258:	00005606 	br	8023b4 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80225c:	e0bff907 	ldb	r2,-28(fp)
  802260:	108006d8 	cmpnei	r2,r2,27
  802264:	1000031e 	bne	r2,zero,802274 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  802268:	e0bffc17 	ldw	r2,-16(fp)
  80226c:	10000905 	stb	zero,36(r2)
  802270:	00005006 	br	8023b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  802274:	e0bff907 	ldb	r2,-28(fp)
  802278:	10800358 	cmpnei	r2,r2,13
  80227c:	1000031e 	bne	r2,zero,80228c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  802280:	e0bffc17 	ldw	r2,-16(fp)
  802284:	10000845 	stb	zero,33(r2)
  802288:	00004a06 	br	8023b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80228c:	e0bff907 	ldb	r2,-28(fp)
  802290:	10800298 	cmpnei	r2,r2,10
  802294:	1000101e 	bne	r2,zero,8022d8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  802298:	e0bffc17 	ldw	r2,-16(fp)
  80229c:	10000845 	stb	zero,33(r2)
      sp->y++;
  8022a0:	e0bffc17 	ldw	r2,-16(fp)
  8022a4:	10800883 	ldbu	r2,34(r2)
  8022a8:	10800044 	addi	r2,r2,1
  8022ac:	1007883a 	mov	r3,r2
  8022b0:	e0bffc17 	ldw	r2,-16(fp)
  8022b4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8022b8:	e0bffc17 	ldw	r2,-16(fp)
  8022bc:	10800883 	ldbu	r2,34(r2)
  8022c0:	10803fcc 	andi	r2,r2,255
  8022c4:	108000f0 	cmpltui	r2,r2,3
  8022c8:	10003a1e 	bne	r2,zero,8023b4 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8022cc:	e13ffc17 	ldw	r4,-16(fp)
  8022d0:	0801da40 	call	801da4 <lcd_scroll_up>
  8022d4:	00003706 	br	8023b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8022d8:	e0bff907 	ldb	r2,-28(fp)
  8022dc:	10800218 	cmpnei	r2,r2,8
  8022e0:	10000b1e 	bne	r2,zero,802310 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  8022e4:	e0bffc17 	ldw	r2,-16(fp)
  8022e8:	10800843 	ldbu	r2,33(r2)
  8022ec:	10803fcc 	andi	r2,r2,255
  8022f0:	10003026 	beq	r2,zero,8023b4 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  8022f4:	e0bffc17 	ldw	r2,-16(fp)
  8022f8:	10800843 	ldbu	r2,33(r2)
  8022fc:	10bfffc4 	addi	r2,r2,-1
  802300:	1007883a 	mov	r3,r2
  802304:	e0bffc17 	ldw	r2,-16(fp)
  802308:	10c00845 	stb	r3,33(r2)
  80230c:	00002906 	br	8023b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  802310:	d0e00a17 	ldw	r3,-32728(gp)
  802314:	e0bff907 	ldb	r2,-28(fp)
  802318:	10800044 	addi	r2,r2,1
  80231c:	1885883a 	add	r2,r3,r2
  802320:	10800003 	ldbu	r2,0(r2)
  802324:	10803fcc 	andi	r2,r2,255
  802328:	1080201c 	xori	r2,r2,128
  80232c:	10bfe004 	addi	r2,r2,-128
  802330:	108025cc 	andi	r2,r2,151
  802334:	10001f26 	beq	r2,zero,8023b4 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  802338:	e0bffc17 	ldw	r2,-16(fp)
  80233c:	10800883 	ldbu	r2,34(r2)
  802340:	10803fcc 	andi	r2,r2,255
  802344:	108000b0 	cmpltui	r2,r2,2
  802348:	1000021e 	bne	r2,zero,802354 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80234c:	e13ffc17 	ldw	r4,-16(fp)
  802350:	0801da40 	call	801da4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  802354:	e0bffc17 	ldw	r2,-16(fp)
  802358:	10800843 	ldbu	r2,33(r2)
  80235c:	10803fcc 	andi	r2,r2,255
  802360:	10801428 	cmpgeui	r2,r2,80
  802364:	10000d1e 	bne	r2,zero,80239c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  802368:	e0bffc17 	ldw	r2,-16(fp)
  80236c:	10800883 	ldbu	r2,34(r2)
  802370:	10c03fcc 	andi	r3,r2,255
  802374:	e0bffc17 	ldw	r2,-16(fp)
  802378:	10800843 	ldbu	r2,33(r2)
  80237c:	10803fcc 	andi	r2,r2,255
  802380:	e13ffc17 	ldw	r4,-16(fp)
  802384:	18c018e4 	muli	r3,r3,99
  802388:	20c7883a 	add	r3,r4,r3
  80238c:	1885883a 	add	r2,r3,r2
  802390:	10801004 	addi	r2,r2,64
  802394:	e0fff903 	ldbu	r3,-28(fp)
  802398:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	10800843 	ldbu	r2,33(r2)
  8023a4:	10800044 	addi	r2,r2,1
  8023a8:	1007883a 	mov	r3,r2
  8023ac:	e0bffc17 	ldw	r2,-16(fp)
  8023b0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8023b4:	e0bffd17 	ldw	r2,-12(fp)
  8023b8:	10800044 	addi	r2,r2,1
  8023bc:	e0bffd15 	stw	r2,-12(fp)
  8023c0:	e0fffd17 	ldw	r3,-12(fp)
  8023c4:	e0bff817 	ldw	r2,-32(fp)
  8023c8:	18bf6436 	bltu	r3,r2,80215c <__alt_mem_onchip_mem+0xff7fa15c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8023cc:	00800404 	movi	r2,16
  8023d0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8023d4:	e03ff515 	stw	zero,-44(fp)
  8023d8:	00003706 	br	8024b8 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8023dc:	00801404 	movi	r2,80
  8023e0:	e0bff715 	stw	r2,-36(fp)
  8023e4:	00001106 	br	80242c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  8023e8:	e0bff717 	ldw	r2,-36(fp)
  8023ec:	10bfffc4 	addi	r2,r2,-1
  8023f0:	e13ffc17 	ldw	r4,-16(fp)
  8023f4:	e0fff517 	ldw	r3,-44(fp)
  8023f8:	18c018e4 	muli	r3,r3,99
  8023fc:	20c7883a 	add	r3,r4,r3
  802400:	1885883a 	add	r2,r3,r2
  802404:	10801004 	addi	r2,r2,64
  802408:	10800003 	ldbu	r2,0(r2)
  80240c:	10803fcc 	andi	r2,r2,255
  802410:	1080201c 	xori	r2,r2,128
  802414:	10bfe004 	addi	r2,r2,-128
  802418:	10800820 	cmpeqi	r2,r2,32
  80241c:	10000626 	beq	r2,zero,802438 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  802420:	e0bff717 	ldw	r2,-36(fp)
  802424:	10bfffc4 	addi	r2,r2,-1
  802428:	e0bff715 	stw	r2,-36(fp)
  80242c:	e0bff717 	ldw	r2,-36(fp)
  802430:	00bfed16 	blt	zero,r2,8023e8 <__alt_mem_onchip_mem+0xff7fa3e8>
  802434:	00000106 	br	80243c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  802438:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80243c:	e0bff717 	ldw	r2,-36(fp)
  802440:	10800448 	cmpgei	r2,r2,17
  802444:	1000031e 	bne	r2,zero,802454 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  802448:	00800404 	movi	r2,16
  80244c:	e0bff715 	stw	r2,-36(fp)
  802450:	00000306 	br	802460 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  802454:	e0bff717 	ldw	r2,-36(fp)
  802458:	10800044 	addi	r2,r2,1
  80245c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  802460:	e0bff717 	ldw	r2,-36(fp)
  802464:	1009883a 	mov	r4,r2
  802468:	e0fffc17 	ldw	r3,-16(fp)
  80246c:	e0bff517 	ldw	r2,-44(fp)
  802470:	108018e4 	muli	r2,r2,99
  802474:	1885883a 	add	r2,r3,r2
  802478:	10802444 	addi	r2,r2,145
  80247c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  802480:	e0fff617 	ldw	r3,-40(fp)
  802484:	e0bff717 	ldw	r2,-36(fp)
  802488:	1880020e 	bge	r3,r2,802494 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80248c:	e0bff717 	ldw	r2,-36(fp)
  802490:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  802494:	e0fffc17 	ldw	r3,-16(fp)
  802498:	e0bff517 	ldw	r2,-44(fp)
  80249c:	108018e4 	muli	r2,r2,99
  8024a0:	1885883a 	add	r2,r3,r2
  8024a4:	10802484 	addi	r2,r2,146
  8024a8:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8024ac:	e0bff517 	ldw	r2,-44(fp)
  8024b0:	10800044 	addi	r2,r2,1
  8024b4:	e0bff515 	stw	r2,-44(fp)
  8024b8:	e0bff517 	ldw	r2,-44(fp)
  8024bc:	10800090 	cmplti	r2,r2,2
  8024c0:	103fc61e 	bne	r2,zero,8023dc <__alt_mem_onchip_mem+0xff7fa3dc>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8024c4:	e0bff617 	ldw	r2,-40(fp)
  8024c8:	10800448 	cmpgei	r2,r2,17
  8024cc:	1000031e 	bne	r2,zero,8024dc <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8024d0:	e0bffc17 	ldw	r2,-16(fp)
  8024d4:	10000985 	stb	zero,38(r2)
  8024d8:	00002e06 	br	802594 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8024dc:	e0bff617 	ldw	r2,-40(fp)
  8024e0:	1085883a 	add	r2,r2,r2
  8024e4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8024e8:	e0bff617 	ldw	r2,-40(fp)
  8024ec:	1007883a 	mov	r3,r2
  8024f0:	e0bffc17 	ldw	r2,-16(fp)
  8024f4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8024f8:	e03ff515 	stw	zero,-44(fp)
  8024fc:	00002206 	br	802588 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  802500:	e0fffc17 	ldw	r3,-16(fp)
  802504:	e0bff517 	ldw	r2,-44(fp)
  802508:	108018e4 	muli	r2,r2,99
  80250c:	1885883a 	add	r2,r3,r2
  802510:	10802444 	addi	r2,r2,145
  802514:	10800003 	ldbu	r2,0(r2)
  802518:	10803fcc 	andi	r2,r2,255
  80251c:	1080201c 	xori	r2,r2,128
  802520:	10bfe004 	addi	r2,r2,-128
  802524:	10800450 	cmplti	r2,r2,17
  802528:	1000141e 	bne	r2,zero,80257c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80252c:	e0fffc17 	ldw	r3,-16(fp)
  802530:	e0bff517 	ldw	r2,-44(fp)
  802534:	108018e4 	muli	r2,r2,99
  802538:	1885883a 	add	r2,r3,r2
  80253c:	10802444 	addi	r2,r2,145
  802540:	10800003 	ldbu	r2,0(r2)
  802544:	10803fcc 	andi	r2,r2,255
  802548:	1080201c 	xori	r2,r2,128
  80254c:	10bfe004 	addi	r2,r2,-128
  802550:	1004923a 	slli	r2,r2,8
  802554:	e17ff617 	ldw	r5,-40(fp)
  802558:	1009883a 	mov	r4,r2
  80255c:	0804a380 	call	804a38 <__divsi3>
  802560:	1009883a 	mov	r4,r2
  802564:	e0fffc17 	ldw	r3,-16(fp)
  802568:	e0bff517 	ldw	r2,-44(fp)
  80256c:	108018e4 	muli	r2,r2,99
  802570:	1885883a 	add	r2,r3,r2
  802574:	10802484 	addi	r2,r2,146
  802578:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80257c:	e0bff517 	ldw	r2,-44(fp)
  802580:	10800044 	addi	r2,r2,1
  802584:	e0bff515 	stw	r2,-44(fp)
  802588:	e0bff517 	ldw	r2,-44(fp)
  80258c:	10800090 	cmplti	r2,r2,2
  802590:	103fdb1e 	bne	r2,zero,802500 <__alt_mem_onchip_mem+0xff7fa500>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  802594:	e0bffc17 	ldw	r2,-16(fp)
  802598:	10800943 	ldbu	r2,37(r2)
  80259c:	10803fcc 	andi	r2,r2,255
  8025a0:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8025a4:	e13ffc17 	ldw	r4,-16(fp)
  8025a8:	0801bb80 	call	801bb8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8025ac:	e0bffc17 	ldw	r2,-16(fp)
  8025b0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8025b4:	e0bffc17 	ldw	r2,-16(fp)
  8025b8:	10800943 	ldbu	r2,37(r2)
  8025bc:	10c03fcc 	andi	r3,r2,255
  8025c0:	e0bffb17 	ldw	r2,-20(fp)
  8025c4:	18800426 	beq	r3,r2,8025d8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8025c8:	e0bffc17 	ldw	r2,-16(fp)
  8025cc:	00c00044 	movi	r3,1
  8025d0:	10c009c5 	stb	r3,39(r2)
  }
  8025d4:	003fef06 	br	802594 <__alt_mem_onchip_mem+0xff7fa594>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8025d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8025dc:	e0bffe17 	ldw	r2,-8(fp)
}
  8025e0:	e037883a 	mov	sp,fp
  8025e4:	dfc00117 	ldw	ra,4(sp)
  8025e8:	df000017 	ldw	fp,0(sp)
  8025ec:	dec00204 	addi	sp,sp,8
  8025f0:	f800283a 	ret

008025f4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8025f4:	defffc04 	addi	sp,sp,-16
  8025f8:	dfc00315 	stw	ra,12(sp)
  8025fc:	df000215 	stw	fp,8(sp)
  802600:	df000204 	addi	fp,sp,8
  802604:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  802608:	e0bfff17 	ldw	r2,-4(fp)
  80260c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  802610:	e0bffe17 	ldw	r2,-8(fp)
  802614:	10800943 	ldbu	r2,37(r2)
  802618:	10803fcc 	andi	r2,r2,255
  80261c:	10c00044 	addi	r3,r2,1
  802620:	e0bffe17 	ldw	r2,-8(fp)
  802624:	10800983 	ldbu	r2,38(r2)
  802628:	10803fcc 	andi	r2,r2,255
  80262c:	18800316 	blt	r3,r2,80263c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  802630:	e0bffe17 	ldw	r2,-8(fp)
  802634:	10000945 	stb	zero,37(r2)
  802638:	00000606 	br	802654 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80263c:	e0bffe17 	ldw	r2,-8(fp)
  802640:	10800943 	ldbu	r2,37(r2)
  802644:	10800044 	addi	r2,r2,1
  802648:	1007883a 	mov	r3,r2
  80264c:	e0bffe17 	ldw	r2,-8(fp)
  802650:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  802654:	e0bffe17 	ldw	r2,-8(fp)
  802658:	10800983 	ldbu	r2,38(r2)
  80265c:	10803fcc 	andi	r2,r2,255
  802660:	10000826 	beq	r2,zero,802684 <alt_lcd_16207_timeout+0x90>
  802664:	e0bffe17 	ldw	r2,-8(fp)
  802668:	108009c3 	ldbu	r2,39(r2)
  80266c:	10803fcc 	andi	r2,r2,255
  802670:	1080201c 	xori	r2,r2,128
  802674:	10bfe004 	addi	r2,r2,-128
  802678:	1000021e 	bne	r2,zero,802684 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80267c:	e13ffe17 	ldw	r4,-8(fp)
  802680:	0801bb80 	call	801bb8 <lcd_repaint_screen>

  return sp->period;
  802684:	e0bffe17 	ldw	r2,-8(fp)
  802688:	10800717 	ldw	r2,28(r2)
}
  80268c:	e037883a 	mov	sp,fp
  802690:	dfc00117 	ldw	ra,4(sp)
  802694:	df000017 	ldw	fp,0(sp)
  802698:	dec00204 	addi	sp,sp,8
  80269c:	f800283a 	ret

008026a0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8026a0:	defffc04 	addi	sp,sp,-16
  8026a4:	dfc00315 	stw	ra,12(sp)
  8026a8:	df000215 	stw	fp,8(sp)
  8026ac:	df000204 	addi	fp,sp,8
  8026b0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8026b4:	e0bfff17 	ldw	r2,-4(fp)
  8026b8:	10800017 	ldw	r2,0(r2)
  8026bc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8026c0:	e0bfff17 	ldw	r2,-4(fp)
  8026c4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8026c8:	010ea604 	movi	r4,15000
  8026cc:	0803ebc0 	call	803ebc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8026d0:	e0bffe17 	ldw	r2,-8(fp)
  8026d4:	00c00c04 	movi	r3,48
  8026d8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8026dc:	01040104 	movi	r4,4100
  8026e0:	0803ebc0 	call	803ebc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8026e4:	e0bffe17 	ldw	r2,-8(fp)
  8026e8:	00c00c04 	movi	r3,48
  8026ec:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8026f0:	0100fa04 	movi	r4,1000
  8026f4:	0803ebc0 	call	803ebc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8026f8:	e0bffe17 	ldw	r2,-8(fp)
  8026fc:	00c00c04 	movi	r3,48
  802700:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  802704:	01400e04 	movi	r5,56
  802708:	e13fff17 	ldw	r4,-4(fp)
  80270c:	08019580 	call	801958 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  802710:	01400204 	movi	r5,8
  802714:	e13fff17 	ldw	r4,-4(fp)
  802718:	08019580 	call	801958 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80271c:	e13fff17 	ldw	r4,-4(fp)
  802720:	0801ae80 	call	801ae8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  802724:	01400184 	movi	r5,6
  802728:	e13fff17 	ldw	r4,-4(fp)
  80272c:	08019580 	call	801958 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  802730:	01400304 	movi	r5,12
  802734:	e13fff17 	ldw	r4,-4(fp)
  802738:	08019580 	call	801958 <lcd_write_command>

  sp->esccount = -1;
  80273c:	e0bfff17 	ldw	r2,-4(fp)
  802740:	00ffffc4 	movi	r3,-1
  802744:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  802748:	e0bfff17 	ldw	r2,-4(fp)
  80274c:	10800a04 	addi	r2,r2,40
  802750:	01800204 	movi	r6,8
  802754:	000b883a 	mov	r5,zero
  802758:	1009883a 	mov	r4,r2
  80275c:	08045e00 	call	8045e0 <memset>

  sp->scrollpos = 0;
  802760:	e0bfff17 	ldw	r2,-4(fp)
  802764:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  802768:	e0bfff17 	ldw	r2,-4(fp)
  80276c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  802770:	e0bfff17 	ldw	r2,-4(fp)
  802774:	100009c5 	stb	zero,39(r2)
  802778:	d0a62217 	ldw	r2,-26488(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80277c:	01400284 	movi	r5,10
  802780:	1009883a 	mov	r4,r2
  802784:	0804b300 	call	804b30 <__udivsi3>
  802788:	1007883a 	mov	r3,r2
  80278c:	e0bfff17 	ldw	r2,-4(fp)
  802790:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  802794:	e0bfff17 	ldw	r2,-4(fp)
  802798:	10c00104 	addi	r3,r2,4
  80279c:	e0bfff17 	ldw	r2,-4(fp)
  8027a0:	10800717 	ldw	r2,28(r2)
  8027a4:	e1ffff17 	ldw	r7,-4(fp)
  8027a8:	01802034 	movhi	r6,128
  8027ac:	31897d04 	addi	r6,r6,9716
  8027b0:	100b883a 	mov	r5,r2
  8027b4:	1809883a 	mov	r4,r3
  8027b8:	08032000 	call	803200 <alt_alarm_start>
}
  8027bc:	0001883a 	nop
  8027c0:	e037883a 	mov	sp,fp
  8027c4:	dfc00117 	ldw	ra,4(sp)
  8027c8:	df000017 	ldw	fp,0(sp)
  8027cc:	dec00204 	addi	sp,sp,8
  8027d0:	f800283a 	ret

008027d4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8027d4:	defffa04 	addi	sp,sp,-24
  8027d8:	dfc00515 	stw	ra,20(sp)
  8027dc:	df000415 	stw	fp,16(sp)
  8027e0:	df000404 	addi	fp,sp,16
  8027e4:	e13ffd15 	stw	r4,-12(fp)
  8027e8:	e17ffe15 	stw	r5,-8(fp)
  8027ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8027f0:	e0bffd17 	ldw	r2,-12(fp)
  8027f4:	10800017 	ldw	r2,0(r2)
  8027f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8027fc:	e0bffc17 	ldw	r2,-16(fp)
  802800:	10c00a04 	addi	r3,r2,40
  802804:	e0bffd17 	ldw	r2,-12(fp)
  802808:	10800217 	ldw	r2,8(r2)
  80280c:	100f883a 	mov	r7,r2
  802810:	e1bfff17 	ldw	r6,-4(fp)
  802814:	e17ffe17 	ldw	r5,-8(fp)
  802818:	1809883a 	mov	r4,r3
  80281c:	080211c0 	call	80211c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  802820:	e037883a 	mov	sp,fp
  802824:	dfc00117 	ldw	ra,4(sp)
  802828:	df000017 	ldw	fp,0(sp)
  80282c:	dec00204 	addi	sp,sp,8
  802830:	f800283a 	ret

00802834 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  802834:	defffa04 	addi	sp,sp,-24
  802838:	dfc00515 	stw	ra,20(sp)
  80283c:	df000415 	stw	fp,16(sp)
  802840:	df000404 	addi	fp,sp,16
  802844:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  802848:	0007883a 	mov	r3,zero
  80284c:	e0bfff17 	ldw	r2,-4(fp)
  802850:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  802854:	e0bfff17 	ldw	r2,-4(fp)
  802858:	10800104 	addi	r2,r2,4
  80285c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802860:	0005303a 	rdctl	r2,status
  802864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802868:	e0fffd17 	ldw	r3,-12(fp)
  80286c:	00bfff84 	movi	r2,-2
  802870:	1884703a 	and	r2,r3,r2
  802874:	1001703a 	wrctl	status,r2
  
  return context;
  802878:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80287c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  802880:	0803db40 	call	803db4 <alt_tick>
  802884:	e0bffc17 	ldw	r2,-16(fp)
  802888:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80288c:	e0bffe17 	ldw	r2,-8(fp)
  802890:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  802894:	0001883a 	nop
  802898:	e037883a 	mov	sp,fp
  80289c:	dfc00117 	ldw	ra,4(sp)
  8028a0:	df000017 	ldw	fp,0(sp)
  8028a4:	dec00204 	addi	sp,sp,8
  8028a8:	f800283a 	ret

008028ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8028ac:	defff804 	addi	sp,sp,-32
  8028b0:	dfc00715 	stw	ra,28(sp)
  8028b4:	df000615 	stw	fp,24(sp)
  8028b8:	df000604 	addi	fp,sp,24
  8028bc:	e13ffc15 	stw	r4,-16(fp)
  8028c0:	e17ffd15 	stw	r5,-12(fp)
  8028c4:	e1bffe15 	stw	r6,-8(fp)
  8028c8:	e1ffff15 	stw	r7,-4(fp)
  8028cc:	e0bfff17 	ldw	r2,-4(fp)
  8028d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8028d4:	d0a62217 	ldw	r2,-26488(gp)
  8028d8:	1000021e 	bne	r2,zero,8028e4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8028dc:	e0bffb17 	ldw	r2,-20(fp)
  8028e0:	d0a62215 	stw	r2,-26488(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	10800104 	addi	r2,r2,4
  8028ec:	00c001c4 	movi	r3,7
  8028f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8028f4:	d8000015 	stw	zero,0(sp)
  8028f8:	e1fffc17 	ldw	r7,-16(fp)
  8028fc:	01802034 	movhi	r6,128
  802900:	318a0d04 	addi	r6,r6,10292
  802904:	e17ffe17 	ldw	r5,-8(fp)
  802908:	e13ffd17 	ldw	r4,-12(fp)
  80290c:	08036800 	call	803680 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  802910:	0001883a 	nop
  802914:	e037883a 	mov	sp,fp
  802918:	dfc00117 	ldw	ra,4(sp)
  80291c:	df000017 	ldw	fp,0(sp)
  802920:	dec00204 	addi	sp,sp,8
  802924:	f800283a 	ret

00802928 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  802928:	defffa04 	addi	sp,sp,-24
  80292c:	dfc00515 	stw	ra,20(sp)
  802930:	df000415 	stw	fp,16(sp)
  802934:	df000404 	addi	fp,sp,16
  802938:	e13ffd15 	stw	r4,-12(fp)
  80293c:	e17ffe15 	stw	r5,-8(fp)
  802940:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802944:	e0bffd17 	ldw	r2,-12(fp)
  802948:	10800017 	ldw	r2,0(r2)
  80294c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  802950:	e0bffc17 	ldw	r2,-16(fp)
  802954:	10c00a04 	addi	r3,r2,40
  802958:	e0bffd17 	ldw	r2,-12(fp)
  80295c:	10800217 	ldw	r2,8(r2)
  802960:	100f883a 	mov	r7,r2
  802964:	e1bfff17 	ldw	r6,-4(fp)
  802968:	e17ffe17 	ldw	r5,-8(fp)
  80296c:	1809883a 	mov	r4,r3
  802970:	0802e3c0 	call	802e3c <altera_avalon_uart_read>
      fd->fd_flags);
}
  802974:	e037883a 	mov	sp,fp
  802978:	dfc00117 	ldw	ra,4(sp)
  80297c:	df000017 	ldw	fp,0(sp)
  802980:	dec00204 	addi	sp,sp,8
  802984:	f800283a 	ret

00802988 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  802988:	defffa04 	addi	sp,sp,-24
  80298c:	dfc00515 	stw	ra,20(sp)
  802990:	df000415 	stw	fp,16(sp)
  802994:	df000404 	addi	fp,sp,16
  802998:	e13ffd15 	stw	r4,-12(fp)
  80299c:	e17ffe15 	stw	r5,-8(fp)
  8029a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8029a4:	e0bffd17 	ldw	r2,-12(fp)
  8029a8:	10800017 	ldw	r2,0(r2)
  8029ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8029b0:	e0bffc17 	ldw	r2,-16(fp)
  8029b4:	10c00a04 	addi	r3,r2,40
  8029b8:	e0bffd17 	ldw	r2,-12(fp)
  8029bc:	10800217 	ldw	r2,8(r2)
  8029c0:	100f883a 	mov	r7,r2
  8029c4:	e1bfff17 	ldw	r6,-4(fp)
  8029c8:	e17ffe17 	ldw	r5,-8(fp)
  8029cc:	1809883a 	mov	r4,r3
  8029d0:	08030540 	call	803054 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8029d4:	e037883a 	mov	sp,fp
  8029d8:	dfc00117 	ldw	ra,4(sp)
  8029dc:	df000017 	ldw	fp,0(sp)
  8029e0:	dec00204 	addi	sp,sp,8
  8029e4:	f800283a 	ret

008029e8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8029e8:	defffc04 	addi	sp,sp,-16
  8029ec:	dfc00315 	stw	ra,12(sp)
  8029f0:	df000215 	stw	fp,8(sp)
  8029f4:	df000204 	addi	fp,sp,8
  8029f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8029fc:	e0bfff17 	ldw	r2,-4(fp)
  802a00:	10800017 	ldw	r2,0(r2)
  802a04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  802a08:	e0bffe17 	ldw	r2,-8(fp)
  802a0c:	10c00a04 	addi	r3,r2,40
  802a10:	e0bfff17 	ldw	r2,-4(fp)
  802a14:	10800217 	ldw	r2,8(r2)
  802a18:	100b883a 	mov	r5,r2
  802a1c:	1809883a 	mov	r4,r3
  802a20:	0802dac0 	call	802dac <altera_avalon_uart_close>
}
  802a24:	e037883a 	mov	sp,fp
  802a28:	dfc00117 	ldw	ra,4(sp)
  802a2c:	df000017 	ldw	fp,0(sp)
  802a30:	dec00204 	addi	sp,sp,8
  802a34:	f800283a 	ret

00802a38 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  802a38:	defff804 	addi	sp,sp,-32
  802a3c:	dfc00715 	stw	ra,28(sp)
  802a40:	df000615 	stw	fp,24(sp)
  802a44:	df000604 	addi	fp,sp,24
  802a48:	e13ffd15 	stw	r4,-12(fp)
  802a4c:	e17ffe15 	stw	r5,-8(fp)
  802a50:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  802a54:	e0bffd17 	ldw	r2,-12(fp)
  802a58:	10800017 	ldw	r2,0(r2)
  802a5c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  802a60:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  802a64:	1000041e 	bne	r2,zero,802a78 <altera_avalon_uart_init+0x40>
  802a68:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  802a6c:	1000021e 	bne	r2,zero,802a78 <altera_avalon_uart_init+0x40>
  802a70:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  802a74:	10000226 	beq	r2,zero,802a80 <altera_avalon_uart_init+0x48>
  802a78:	00800044 	movi	r2,1
  802a7c:	00000106 	br	802a84 <altera_avalon_uart_init+0x4c>
  802a80:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  802a84:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  802a88:	e0bffc17 	ldw	r2,-16(fp)
  802a8c:	10000f1e 	bne	r2,zero,802acc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  802a90:	e0bffd17 	ldw	r2,-12(fp)
  802a94:	00c32004 	movi	r3,3200
  802a98:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  802a9c:	e0bffb17 	ldw	r2,-20(fp)
  802aa0:	10800304 	addi	r2,r2,12
  802aa4:	e0fffd17 	ldw	r3,-12(fp)
  802aa8:	18c00117 	ldw	r3,4(r3)
  802aac:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  802ab0:	d8000015 	stw	zero,0(sp)
  802ab4:	e1fffd17 	ldw	r7,-12(fp)
  802ab8:	01802034 	movhi	r6,128
  802abc:	318ab904 	addi	r6,r6,10980
  802ac0:	e17fff17 	ldw	r5,-4(fp)
  802ac4:	e13ffe17 	ldw	r4,-8(fp)
  802ac8:	08036800 	call	803680 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  802acc:	0001883a 	nop
  802ad0:	e037883a 	mov	sp,fp
  802ad4:	dfc00117 	ldw	ra,4(sp)
  802ad8:	df000017 	ldw	fp,0(sp)
  802adc:	dec00204 	addi	sp,sp,8
  802ae0:	f800283a 	ret

00802ae4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  802ae4:	defffa04 	addi	sp,sp,-24
  802ae8:	dfc00515 	stw	ra,20(sp)
  802aec:	df000415 	stw	fp,16(sp)
  802af0:	df000404 	addi	fp,sp,16
  802af4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  802af8:	e0bfff17 	ldw	r2,-4(fp)
  802afc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  802b00:	e0bffc17 	ldw	r2,-16(fp)
  802b04:	10800017 	ldw	r2,0(r2)
  802b08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  802b0c:	e0bffd17 	ldw	r2,-12(fp)
  802b10:	10800204 	addi	r2,r2,8
  802b14:	10800037 	ldwio	r2,0(r2)
  802b18:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  802b1c:	e0bffd17 	ldw	r2,-12(fp)
  802b20:	10800204 	addi	r2,r2,8
  802b24:	0007883a 	mov	r3,zero
  802b28:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  802b2c:	e0bffd17 	ldw	r2,-12(fp)
  802b30:	10800204 	addi	r2,r2,8
  802b34:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  802b38:	e0bffe17 	ldw	r2,-8(fp)
  802b3c:	1080200c 	andi	r2,r2,128
  802b40:	10000326 	beq	r2,zero,802b50 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  802b44:	e17ffe17 	ldw	r5,-8(fp)
  802b48:	e13ffc17 	ldw	r4,-16(fp)
  802b4c:	0802b800 	call	802b80 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  802b50:	e0bffe17 	ldw	r2,-8(fp)
  802b54:	1081100c 	andi	r2,r2,1088
  802b58:	10000326 	beq	r2,zero,802b68 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  802b5c:	e17ffe17 	ldw	r5,-8(fp)
  802b60:	e13ffc17 	ldw	r4,-16(fp)
  802b64:	0802c640 	call	802c64 <altera_avalon_uart_txirq>
  }
  

}
  802b68:	0001883a 	nop
  802b6c:	e037883a 	mov	sp,fp
  802b70:	dfc00117 	ldw	ra,4(sp)
  802b74:	df000017 	ldw	fp,0(sp)
  802b78:	dec00204 	addi	sp,sp,8
  802b7c:	f800283a 	ret

00802b80 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  802b80:	defffc04 	addi	sp,sp,-16
  802b84:	df000315 	stw	fp,12(sp)
  802b88:	df000304 	addi	fp,sp,12
  802b8c:	e13ffe15 	stw	r4,-8(fp)
  802b90:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  802b94:	e0bfff17 	ldw	r2,-4(fp)
  802b98:	108000cc 	andi	r2,r2,3
  802b9c:	10002c1e 	bne	r2,zero,802c50 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  802ba0:	e0bffe17 	ldw	r2,-8(fp)
  802ba4:	10800317 	ldw	r2,12(r2)
  802ba8:	e0bffe17 	ldw	r2,-8(fp)
  802bac:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802bb0:	e0bffe17 	ldw	r2,-8(fp)
  802bb4:	10800317 	ldw	r2,12(r2)
  802bb8:	10800044 	addi	r2,r2,1
  802bbc:	10800fcc 	andi	r2,r2,63
  802bc0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  802bc4:	e0bffe17 	ldw	r2,-8(fp)
  802bc8:	10800317 	ldw	r2,12(r2)
  802bcc:	e0fffe17 	ldw	r3,-8(fp)
  802bd0:	18c00017 	ldw	r3,0(r3)
  802bd4:	18c00037 	ldwio	r3,0(r3)
  802bd8:	1809883a 	mov	r4,r3
  802bdc:	e0fffe17 	ldw	r3,-8(fp)
  802be0:	1885883a 	add	r2,r3,r2
  802be4:	10800704 	addi	r2,r2,28
  802be8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  802bec:	e0bffe17 	ldw	r2,-8(fp)
  802bf0:	e0fffd17 	ldw	r3,-12(fp)
  802bf4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802bf8:	e0bffe17 	ldw	r2,-8(fp)
  802bfc:	10800317 	ldw	r2,12(r2)
  802c00:	10800044 	addi	r2,r2,1
  802c04:	10800fcc 	andi	r2,r2,63
  802c08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  802c0c:	e0bffe17 	ldw	r2,-8(fp)
  802c10:	10c00217 	ldw	r3,8(r2)
  802c14:	e0bffd17 	ldw	r2,-12(fp)
  802c18:	18800e1e 	bne	r3,r2,802c54 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802c1c:	e0bffe17 	ldw	r2,-8(fp)
  802c20:	10c00117 	ldw	r3,4(r2)
  802c24:	00bfdfc4 	movi	r2,-129
  802c28:	1886703a 	and	r3,r3,r2
  802c2c:	e0bffe17 	ldw	r2,-8(fp)
  802c30:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  802c34:	e0bffe17 	ldw	r2,-8(fp)
  802c38:	10800017 	ldw	r2,0(r2)
  802c3c:	10800304 	addi	r2,r2,12
  802c40:	e0fffe17 	ldw	r3,-8(fp)
  802c44:	18c00117 	ldw	r3,4(r3)
  802c48:	10c00035 	stwio	r3,0(r2)
  802c4c:	00000106 	br	802c54 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  802c50:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  802c54:	e037883a 	mov	sp,fp
  802c58:	df000017 	ldw	fp,0(sp)
  802c5c:	dec00104 	addi	sp,sp,4
  802c60:	f800283a 	ret

00802c64 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  802c64:	defffb04 	addi	sp,sp,-20
  802c68:	df000415 	stw	fp,16(sp)
  802c6c:	df000404 	addi	fp,sp,16
  802c70:	e13ffc15 	stw	r4,-16(fp)
  802c74:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  802c78:	e0bffc17 	ldw	r2,-16(fp)
  802c7c:	10c00417 	ldw	r3,16(r2)
  802c80:	e0bffc17 	ldw	r2,-16(fp)
  802c84:	10800517 	ldw	r2,20(r2)
  802c88:	18803226 	beq	r3,r2,802d54 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  802c8c:	e0bffc17 	ldw	r2,-16(fp)
  802c90:	10800617 	ldw	r2,24(r2)
  802c94:	1080008c 	andi	r2,r2,2
  802c98:	10000326 	beq	r2,zero,802ca8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802c9c:	e0bffd17 	ldw	r2,-12(fp)
  802ca0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  802ca4:	10001d26 	beq	r2,zero,802d1c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  802ca8:	e0bffc17 	ldw	r2,-16(fp)
  802cac:	10800417 	ldw	r2,16(r2)
  802cb0:	e0bffc17 	ldw	r2,-16(fp)
  802cb4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  802cb8:	e0bffc17 	ldw	r2,-16(fp)
  802cbc:	10800017 	ldw	r2,0(r2)
  802cc0:	10800104 	addi	r2,r2,4
  802cc4:	e0fffc17 	ldw	r3,-16(fp)
  802cc8:	18c00417 	ldw	r3,16(r3)
  802ccc:	e13ffc17 	ldw	r4,-16(fp)
  802cd0:	20c7883a 	add	r3,r4,r3
  802cd4:	18c01704 	addi	r3,r3,92
  802cd8:	18c00003 	ldbu	r3,0(r3)
  802cdc:	18c03fcc 	andi	r3,r3,255
  802ce0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  802ce4:	e0bffc17 	ldw	r2,-16(fp)
  802ce8:	10800417 	ldw	r2,16(r2)
  802cec:	10800044 	addi	r2,r2,1
  802cf0:	e0fffc17 	ldw	r3,-16(fp)
  802cf4:	18800415 	stw	r2,16(r3)
  802cf8:	10c00fcc 	andi	r3,r2,63
  802cfc:	e0bffc17 	ldw	r2,-16(fp)
  802d00:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802d04:	e0bffc17 	ldw	r2,-16(fp)
  802d08:	10800117 	ldw	r2,4(r2)
  802d0c:	10c01014 	ori	r3,r2,64
  802d10:	e0bffc17 	ldw	r2,-16(fp)
  802d14:	10c00115 	stw	r3,4(r2)
  802d18:	00000e06 	br	802d54 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	10800017 	ldw	r2,0(r2)
  802d24:	10800204 	addi	r2,r2,8
  802d28:	10800037 	ldwio	r2,0(r2)
  802d2c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802d30:	e0bffd17 	ldw	r2,-12(fp)
  802d34:	1082000c 	andi	r2,r2,2048
  802d38:	1000061e 	bne	r2,zero,802d54 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802d3c:	e0bffc17 	ldw	r2,-16(fp)
  802d40:	10c00117 	ldw	r3,4(r2)
  802d44:	00bfefc4 	movi	r2,-65
  802d48:	1886703a 	and	r3,r3,r2
  802d4c:	e0bffc17 	ldw	r2,-16(fp)
  802d50:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  802d54:	e0bffc17 	ldw	r2,-16(fp)
  802d58:	10c00417 	ldw	r3,16(r2)
  802d5c:	e0bffc17 	ldw	r2,-16(fp)
  802d60:	10800517 	ldw	r2,20(r2)
  802d64:	1880061e 	bne	r3,r2,802d80 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	10c00117 	ldw	r3,4(r2)
  802d70:	00beefc4 	movi	r2,-1089
  802d74:	1886703a 	and	r3,r3,r2
  802d78:	e0bffc17 	ldw	r2,-16(fp)
  802d7c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802d80:	e0bffc17 	ldw	r2,-16(fp)
  802d84:	10800017 	ldw	r2,0(r2)
  802d88:	10800304 	addi	r2,r2,12
  802d8c:	e0fffc17 	ldw	r3,-16(fp)
  802d90:	18c00117 	ldw	r3,4(r3)
  802d94:	10c00035 	stwio	r3,0(r2)
}
  802d98:	0001883a 	nop
  802d9c:	e037883a 	mov	sp,fp
  802da0:	df000017 	ldw	fp,0(sp)
  802da4:	dec00104 	addi	sp,sp,4
  802da8:	f800283a 	ret

00802dac <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  802dac:	defffd04 	addi	sp,sp,-12
  802db0:	df000215 	stw	fp,8(sp)
  802db4:	df000204 	addi	fp,sp,8
  802db8:	e13ffe15 	stw	r4,-8(fp)
  802dbc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802dc0:	00000506 	br	802dd8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  802dc4:	e0bfff17 	ldw	r2,-4(fp)
  802dc8:	1090000c 	andi	r2,r2,16384
  802dcc:	10000226 	beq	r2,zero,802dd8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  802dd0:	00bffd44 	movi	r2,-11
  802dd4:	00000606 	br	802df0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802dd8:	e0bffe17 	ldw	r2,-8(fp)
  802ddc:	10c00417 	ldw	r3,16(r2)
  802de0:	e0bffe17 	ldw	r2,-8(fp)
  802de4:	10800517 	ldw	r2,20(r2)
  802de8:	18bff61e 	bne	r3,r2,802dc4 <__alt_mem_onchip_mem+0xff7fadc4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  802dec:	0005883a 	mov	r2,zero
}
  802df0:	e037883a 	mov	sp,fp
  802df4:	df000017 	ldw	fp,0(sp)
  802df8:	dec00104 	addi	sp,sp,4
  802dfc:	f800283a 	ret

00802e00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802e00:	defffe04 	addi	sp,sp,-8
  802e04:	dfc00115 	stw	ra,4(sp)
  802e08:	df000015 	stw	fp,0(sp)
  802e0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802e10:	d0a00717 	ldw	r2,-32740(gp)
  802e14:	10000326 	beq	r2,zero,802e24 <alt_get_errno+0x24>
  802e18:	d0a00717 	ldw	r2,-32740(gp)
  802e1c:	103ee83a 	callr	r2
  802e20:	00000106 	br	802e28 <alt_get_errno+0x28>
  802e24:	d0a62504 	addi	r2,gp,-26476
}
  802e28:	e037883a 	mov	sp,fp
  802e2c:	dfc00117 	ldw	ra,4(sp)
  802e30:	df000017 	ldw	fp,0(sp)
  802e34:	dec00204 	addi	sp,sp,8
  802e38:	f800283a 	ret

00802e3c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  802e3c:	defff204 	addi	sp,sp,-56
  802e40:	dfc00d15 	stw	ra,52(sp)
  802e44:	df000c15 	stw	fp,48(sp)
  802e48:	df000c04 	addi	fp,sp,48
  802e4c:	e13ffc15 	stw	r4,-16(fp)
  802e50:	e17ffd15 	stw	r5,-12(fp)
  802e54:	e1bffe15 	stw	r6,-8(fp)
  802e58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  802e5c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  802e60:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  802e64:	e0bfff17 	ldw	r2,-4(fp)
  802e68:	1090000c 	andi	r2,r2,16384
  802e6c:	1005003a 	cmpeq	r2,r2,zero
  802e70:	10803fcc 	andi	r2,r2,255
  802e74:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  802e78:	00001306 	br	802ec8 <altera_avalon_uart_read+0x8c>
    {
      count++;
  802e7c:	e0bff517 	ldw	r2,-44(fp)
  802e80:	10800044 	addi	r2,r2,1
  802e84:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  802e88:	e0bffd17 	ldw	r2,-12(fp)
  802e8c:	10c00044 	addi	r3,r2,1
  802e90:	e0fffd15 	stw	r3,-12(fp)
  802e94:	e0fffc17 	ldw	r3,-16(fp)
  802e98:	18c00217 	ldw	r3,8(r3)
  802e9c:	e13ffc17 	ldw	r4,-16(fp)
  802ea0:	20c7883a 	add	r3,r4,r3
  802ea4:	18c00704 	addi	r3,r3,28
  802ea8:	18c00003 	ldbu	r3,0(r3)
  802eac:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  802eb0:	e0bffc17 	ldw	r2,-16(fp)
  802eb4:	10800217 	ldw	r2,8(r2)
  802eb8:	10800044 	addi	r2,r2,1
  802ebc:	10c00fcc 	andi	r3,r2,63
  802ec0:	e0bffc17 	ldw	r2,-16(fp)
  802ec4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  802ec8:	e0fff517 	ldw	r3,-44(fp)
  802ecc:	e0bffe17 	ldw	r2,-8(fp)
  802ed0:	1880050e 	bge	r3,r2,802ee8 <altera_avalon_uart_read+0xac>
  802ed4:	e0bffc17 	ldw	r2,-16(fp)
  802ed8:	10c00217 	ldw	r3,8(r2)
  802edc:	e0bffc17 	ldw	r2,-16(fp)
  802ee0:	10800317 	ldw	r2,12(r2)
  802ee4:	18bfe51e 	bne	r3,r2,802e7c <__alt_mem_onchip_mem+0xff7fae7c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  802ee8:	e0bff517 	ldw	r2,-44(fp)
  802eec:	1000251e 	bne	r2,zero,802f84 <altera_avalon_uart_read+0x148>
  802ef0:	e0bffc17 	ldw	r2,-16(fp)
  802ef4:	10c00217 	ldw	r3,8(r2)
  802ef8:	e0bffc17 	ldw	r2,-16(fp)
  802efc:	10800317 	ldw	r2,12(r2)
  802f00:	1880201e 	bne	r3,r2,802f84 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  802f04:	e0bff617 	ldw	r2,-40(fp)
  802f08:	1000071e 	bne	r2,zero,802f28 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  802f0c:	0802e000 	call	802e00 <alt_get_errno>
  802f10:	1007883a 	mov	r3,r2
  802f14:	008002c4 	movi	r2,11
  802f18:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  802f1c:	00800044 	movi	r2,1
  802f20:	e0bff405 	stb	r2,-48(fp)
        break;
  802f24:	00001b06 	br	802f94 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802f28:	0005303a 	rdctl	r2,status
  802f2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802f30:	e0fff917 	ldw	r3,-28(fp)
  802f34:	00bfff84 	movi	r2,-2
  802f38:	1884703a 	and	r2,r3,r2
  802f3c:	1001703a 	wrctl	status,r2
  
  return context;
  802f40:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  802f44:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802f48:	e0bffc17 	ldw	r2,-16(fp)
  802f4c:	10800117 	ldw	r2,4(r2)
  802f50:	10c02014 	ori	r3,r2,128
  802f54:	e0bffc17 	ldw	r2,-16(fp)
  802f58:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802f5c:	e0bffc17 	ldw	r2,-16(fp)
  802f60:	10800017 	ldw	r2,0(r2)
  802f64:	10800304 	addi	r2,r2,12
  802f68:	e0fffc17 	ldw	r3,-16(fp)
  802f6c:	18c00117 	ldw	r3,4(r3)
  802f70:	10c00035 	stwio	r3,0(r2)
  802f74:	e0bff817 	ldw	r2,-32(fp)
  802f78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f7c:	e0bffa17 	ldw	r2,-24(fp)
  802f80:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  802f84:	e0bff517 	ldw	r2,-44(fp)
  802f88:	1000021e 	bne	r2,zero,802f94 <altera_avalon_uart_read+0x158>
  802f8c:	e0bffe17 	ldw	r2,-8(fp)
  802f90:	103fcd1e 	bne	r2,zero,802ec8 <__alt_mem_onchip_mem+0xff7faec8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802f94:	0005303a 	rdctl	r2,status
  802f98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802f9c:	e0fffb17 	ldw	r3,-20(fp)
  802fa0:	00bfff84 	movi	r2,-2
  802fa4:	1884703a 	and	r2,r3,r2
  802fa8:	1001703a 	wrctl	status,r2
  
  return context;
  802fac:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  802fb0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802fb4:	e0bffc17 	ldw	r2,-16(fp)
  802fb8:	10800117 	ldw	r2,4(r2)
  802fbc:	10c02014 	ori	r3,r2,128
  802fc0:	e0bffc17 	ldw	r2,-16(fp)
  802fc4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802fc8:	e0bffc17 	ldw	r2,-16(fp)
  802fcc:	10800017 	ldw	r2,0(r2)
  802fd0:	10800304 	addi	r2,r2,12
  802fd4:	e0fffc17 	ldw	r3,-16(fp)
  802fd8:	18c00117 	ldw	r3,4(r3)
  802fdc:	10c00035 	stwio	r3,0(r2)
  802fe0:	e0bff817 	ldw	r2,-32(fp)
  802fe4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802fe8:	e0bff717 	ldw	r2,-36(fp)
  802fec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  802ff0:	e0bff403 	ldbu	r2,-48(fp)
  802ff4:	10000226 	beq	r2,zero,803000 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  802ff8:	00bffd44 	movi	r2,-11
  802ffc:	00000106 	br	803004 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  803000:	e0bff517 	ldw	r2,-44(fp)
  }
}
  803004:	e037883a 	mov	sp,fp
  803008:	dfc00117 	ldw	ra,4(sp)
  80300c:	df000017 	ldw	fp,0(sp)
  803010:	dec00204 	addi	sp,sp,8
  803014:	f800283a 	ret

00803018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803018:	defffe04 	addi	sp,sp,-8
  80301c:	dfc00115 	stw	ra,4(sp)
  803020:	df000015 	stw	fp,0(sp)
  803024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803028:	d0a00717 	ldw	r2,-32740(gp)
  80302c:	10000326 	beq	r2,zero,80303c <alt_get_errno+0x24>
  803030:	d0a00717 	ldw	r2,-32740(gp)
  803034:	103ee83a 	callr	r2
  803038:	00000106 	br	803040 <alt_get_errno+0x28>
  80303c:	d0a62504 	addi	r2,gp,-26476
}
  803040:	e037883a 	mov	sp,fp
  803044:	dfc00117 	ldw	ra,4(sp)
  803048:	df000017 	ldw	fp,0(sp)
  80304c:	dec00204 	addi	sp,sp,8
  803050:	f800283a 	ret

00803054 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  803054:	defff204 	addi	sp,sp,-56
  803058:	dfc00d15 	stw	ra,52(sp)
  80305c:	df000c15 	stw	fp,48(sp)
  803060:	df000c04 	addi	fp,sp,48
  803064:	e13ffc15 	stw	r4,-16(fp)
  803068:	e17ffd15 	stw	r5,-12(fp)
  80306c:	e1bffe15 	stw	r6,-8(fp)
  803070:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  803074:	e0bffe17 	ldw	r2,-8(fp)
  803078:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80307c:	e0bfff17 	ldw	r2,-4(fp)
  803080:	1090000c 	andi	r2,r2,16384
  803084:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  803088:	00003c06 	br	80317c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80308c:	e0bffc17 	ldw	r2,-16(fp)
  803090:	10800517 	ldw	r2,20(r2)
  803094:	10800044 	addi	r2,r2,1
  803098:	10800fcc 	andi	r2,r2,63
  80309c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8030a0:	e0bffc17 	ldw	r2,-16(fp)
  8030a4:	10c00417 	ldw	r3,16(r2)
  8030a8:	e0bff717 	ldw	r2,-36(fp)
  8030ac:	1880221e 	bne	r3,r2,803138 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8030b0:	e0bff517 	ldw	r2,-44(fp)
  8030b4:	10000526 	beq	r2,zero,8030cc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8030b8:	08030180 	call	803018 <alt_get_errno>
  8030bc:	1007883a 	mov	r3,r2
  8030c0:	008002c4 	movi	r2,11
  8030c4:	18800015 	stw	r2,0(r3)
        break;
  8030c8:	00002e06 	br	803184 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8030cc:	0005303a 	rdctl	r2,status
  8030d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8030d4:	e0fff917 	ldw	r3,-28(fp)
  8030d8:	00bfff84 	movi	r2,-2
  8030dc:	1884703a 	and	r2,r3,r2
  8030e0:	1001703a 	wrctl	status,r2
  
  return context;
  8030e4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8030e8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8030ec:	e0bffc17 	ldw	r2,-16(fp)
  8030f0:	10800117 	ldw	r2,4(r2)
  8030f4:	10c11014 	ori	r3,r2,1088
  8030f8:	e0bffc17 	ldw	r2,-16(fp)
  8030fc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  803100:	e0bffc17 	ldw	r2,-16(fp)
  803104:	10800017 	ldw	r2,0(r2)
  803108:	10800304 	addi	r2,r2,12
  80310c:	e0fffc17 	ldw	r3,-16(fp)
  803110:	18c00117 	ldw	r3,4(r3)
  803114:	10c00035 	stwio	r3,0(r2)
  803118:	e0bff817 	ldw	r2,-32(fp)
  80311c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803120:	e0bff617 	ldw	r2,-40(fp)
  803124:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  803128:	e0bffc17 	ldw	r2,-16(fp)
  80312c:	10c00417 	ldw	r3,16(r2)
  803130:	e0bff717 	ldw	r2,-36(fp)
  803134:	18bffc26 	beq	r3,r2,803128 <__alt_mem_onchip_mem+0xff7fb128>
      }
    }

    count--;
  803138:	e0bff417 	ldw	r2,-48(fp)
  80313c:	10bfffc4 	addi	r2,r2,-1
  803140:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  803144:	e0bffc17 	ldw	r2,-16(fp)
  803148:	10c00517 	ldw	r3,20(r2)
  80314c:	e0bffd17 	ldw	r2,-12(fp)
  803150:	11000044 	addi	r4,r2,1
  803154:	e13ffd15 	stw	r4,-12(fp)
  803158:	10800003 	ldbu	r2,0(r2)
  80315c:	1009883a 	mov	r4,r2
  803160:	e0bffc17 	ldw	r2,-16(fp)
  803164:	10c5883a 	add	r2,r2,r3
  803168:	10801704 	addi	r2,r2,92
  80316c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  803170:	e0bffc17 	ldw	r2,-16(fp)
  803174:	e0fff717 	ldw	r3,-36(fp)
  803178:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80317c:	e0bff417 	ldw	r2,-48(fp)
  803180:	103fc21e 	bne	r2,zero,80308c <__alt_mem_onchip_mem+0xff7fb08c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803184:	0005303a 	rdctl	r2,status
  803188:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80318c:	e0fffb17 	ldw	r3,-20(fp)
  803190:	00bfff84 	movi	r2,-2
  803194:	1884703a 	and	r2,r3,r2
  803198:	1001703a 	wrctl	status,r2
  
  return context;
  80319c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8031a0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8031a4:	e0bffc17 	ldw	r2,-16(fp)
  8031a8:	10800117 	ldw	r2,4(r2)
  8031ac:	10c11014 	ori	r3,r2,1088
  8031b0:	e0bffc17 	ldw	r2,-16(fp)
  8031b4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8031b8:	e0bffc17 	ldw	r2,-16(fp)
  8031bc:	10800017 	ldw	r2,0(r2)
  8031c0:	10800304 	addi	r2,r2,12
  8031c4:	e0fffc17 	ldw	r3,-16(fp)
  8031c8:	18c00117 	ldw	r3,4(r3)
  8031cc:	10c00035 	stwio	r3,0(r2)
  8031d0:	e0bff817 	ldw	r2,-32(fp)
  8031d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8031d8:	e0bffa17 	ldw	r2,-24(fp)
  8031dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8031e0:	e0fffe17 	ldw	r3,-8(fp)
  8031e4:	e0bff417 	ldw	r2,-48(fp)
  8031e8:	1885c83a 	sub	r2,r3,r2
}
  8031ec:	e037883a 	mov	sp,fp
  8031f0:	dfc00117 	ldw	ra,4(sp)
  8031f4:	df000017 	ldw	fp,0(sp)
  8031f8:	dec00204 	addi	sp,sp,8
  8031fc:	f800283a 	ret

00803200 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  803200:	defff504 	addi	sp,sp,-44
  803204:	df000a15 	stw	fp,40(sp)
  803208:	df000a04 	addi	fp,sp,40
  80320c:	e13ffc15 	stw	r4,-16(fp)
  803210:	e17ffd15 	stw	r5,-12(fp)
  803214:	e1bffe15 	stw	r6,-8(fp)
  803218:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80321c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803220:	d0a62217 	ldw	r2,-26488(gp)
  
  if (alt_ticks_per_second ())
  803224:	10003c26 	beq	r2,zero,803318 <alt_alarm_start+0x118>
  {
    if (alarm)
  803228:	e0bffc17 	ldw	r2,-16(fp)
  80322c:	10003826 	beq	r2,zero,803310 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  803230:	e0bffc17 	ldw	r2,-16(fp)
  803234:	e0fffe17 	ldw	r3,-8(fp)
  803238:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80323c:	e0bffc17 	ldw	r2,-16(fp)
  803240:	e0ffff17 	ldw	r3,-4(fp)
  803244:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803248:	0005303a 	rdctl	r2,status
  80324c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803250:	e0fff917 	ldw	r3,-28(fp)
  803254:	00bfff84 	movi	r2,-2
  803258:	1884703a 	and	r2,r3,r2
  80325c:	1001703a 	wrctl	status,r2
  
  return context;
  803260:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  803264:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  803268:	d0a62317 	ldw	r2,-26484(gp)
      
      current_nticks = alt_nticks();
  80326c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  803270:	e0fffd17 	ldw	r3,-12(fp)
  803274:	e0bff617 	ldw	r2,-40(fp)
  803278:	1885883a 	add	r2,r3,r2
  80327c:	10c00044 	addi	r3,r2,1
  803280:	e0bffc17 	ldw	r2,-16(fp)
  803284:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  803288:	e0bffc17 	ldw	r2,-16(fp)
  80328c:	10c00217 	ldw	r3,8(r2)
  803290:	e0bff617 	ldw	r2,-40(fp)
  803294:	1880042e 	bgeu	r3,r2,8032a8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  803298:	e0bffc17 	ldw	r2,-16(fp)
  80329c:	00c00044 	movi	r3,1
  8032a0:	10c00405 	stb	r3,16(r2)
  8032a4:	00000206 	br	8032b0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8032a8:	e0bffc17 	ldw	r2,-16(fp)
  8032ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8032b0:	e0bffc17 	ldw	r2,-16(fp)
  8032b4:	d0e00804 	addi	r3,gp,-32736
  8032b8:	e0fffa15 	stw	r3,-24(fp)
  8032bc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8032c0:	e0bffb17 	ldw	r2,-20(fp)
  8032c4:	e0fffa17 	ldw	r3,-24(fp)
  8032c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8032cc:	e0bffa17 	ldw	r2,-24(fp)
  8032d0:	10c00017 	ldw	r3,0(r2)
  8032d4:	e0bffb17 	ldw	r2,-20(fp)
  8032d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8032dc:	e0bffa17 	ldw	r2,-24(fp)
  8032e0:	10800017 	ldw	r2,0(r2)
  8032e4:	e0fffb17 	ldw	r3,-20(fp)
  8032e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8032ec:	e0bffa17 	ldw	r2,-24(fp)
  8032f0:	e0fffb17 	ldw	r3,-20(fp)
  8032f4:	10c00015 	stw	r3,0(r2)
  8032f8:	e0bff817 	ldw	r2,-32(fp)
  8032fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803300:	e0bff717 	ldw	r2,-36(fp)
  803304:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  803308:	0005883a 	mov	r2,zero
  80330c:	00000306 	br	80331c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  803310:	00bffa84 	movi	r2,-22
  803314:	00000106 	br	80331c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  803318:	00bfde84 	movi	r2,-134
  }
}
  80331c:	e037883a 	mov	sp,fp
  803320:	df000017 	ldw	fp,0(sp)
  803324:	dec00104 	addi	sp,sp,4
  803328:	f800283a 	ret

0080332c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80332c:	defffe04 	addi	sp,sp,-8
  803330:	dfc00115 	stw	ra,4(sp)
  803334:	df000015 	stw	fp,0(sp)
  803338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80333c:	d0a00717 	ldw	r2,-32740(gp)
  803340:	10000326 	beq	r2,zero,803350 <alt_get_errno+0x24>
  803344:	d0a00717 	ldw	r2,-32740(gp)
  803348:	103ee83a 	callr	r2
  80334c:	00000106 	br	803354 <alt_get_errno+0x28>
  803350:	d0a62504 	addi	r2,gp,-26476
}
  803354:	e037883a 	mov	sp,fp
  803358:	dfc00117 	ldw	ra,4(sp)
  80335c:	df000017 	ldw	fp,0(sp)
  803360:	dec00204 	addi	sp,sp,8
  803364:	f800283a 	ret

00803368 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  803368:	defffb04 	addi	sp,sp,-20
  80336c:	dfc00415 	stw	ra,16(sp)
  803370:	df000315 	stw	fp,12(sp)
  803374:	df000304 	addi	fp,sp,12
  803378:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80337c:	e0bfff17 	ldw	r2,-4(fp)
  803380:	10000616 	blt	r2,zero,80339c <close+0x34>
  803384:	e0bfff17 	ldw	r2,-4(fp)
  803388:	10c00324 	muli	r3,r2,12
  80338c:	00802034 	movhi	r2,128
  803390:	10985504 	addi	r2,r2,24916
  803394:	1885883a 	add	r2,r3,r2
  803398:	00000106 	br	8033a0 <close+0x38>
  80339c:	0005883a 	mov	r2,zero
  8033a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8033a4:	e0bffd17 	ldw	r2,-12(fp)
  8033a8:	10001926 	beq	r2,zero,803410 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8033ac:	e0bffd17 	ldw	r2,-12(fp)
  8033b0:	10800017 	ldw	r2,0(r2)
  8033b4:	10800417 	ldw	r2,16(r2)
  8033b8:	10000626 	beq	r2,zero,8033d4 <close+0x6c>
  8033bc:	e0bffd17 	ldw	r2,-12(fp)
  8033c0:	10800017 	ldw	r2,0(r2)
  8033c4:	10800417 	ldw	r2,16(r2)
  8033c8:	e13ffd17 	ldw	r4,-12(fp)
  8033cc:	103ee83a 	callr	r2
  8033d0:	00000106 	br	8033d8 <close+0x70>
  8033d4:	0005883a 	mov	r2,zero
  8033d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8033dc:	e13fff17 	ldw	r4,-4(fp)
  8033e0:	0803cb40 	call	803cb4 <alt_release_fd>
    if (rval < 0)
  8033e4:	e0bffe17 	ldw	r2,-8(fp)
  8033e8:	1000070e 	bge	r2,zero,803408 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8033ec:	080332c0 	call	80332c <alt_get_errno>
  8033f0:	1007883a 	mov	r3,r2
  8033f4:	e0bffe17 	ldw	r2,-8(fp)
  8033f8:	0085c83a 	sub	r2,zero,r2
  8033fc:	18800015 	stw	r2,0(r3)
      return -1;
  803400:	00bfffc4 	movi	r2,-1
  803404:	00000706 	br	803424 <close+0xbc>
    }
    return 0;
  803408:	0005883a 	mov	r2,zero
  80340c:	00000506 	br	803424 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803410:	080332c0 	call	80332c <alt_get_errno>
  803414:	1007883a 	mov	r3,r2
  803418:	00801444 	movi	r2,81
  80341c:	18800015 	stw	r2,0(r3)
    return -1;
  803420:	00bfffc4 	movi	r2,-1
  }
}
  803424:	e037883a 	mov	sp,fp
  803428:	dfc00117 	ldw	ra,4(sp)
  80342c:	df000017 	ldw	fp,0(sp)
  803430:	dec00204 	addi	sp,sp,8
  803434:	f800283a 	ret

00803438 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  803438:	defffe04 	addi	sp,sp,-8
  80343c:	df000115 	stw	fp,4(sp)
  803440:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  803444:	e03fff15 	stw	zero,-4(fp)
  803448:	00000506 	br	803460 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80344c:	e0bfff17 	ldw	r2,-4(fp)
  803450:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  803454:	e0bfff17 	ldw	r2,-4(fp)
  803458:	10800804 	addi	r2,r2,32
  80345c:	e0bfff15 	stw	r2,-4(fp)
  803460:	e0bfff17 	ldw	r2,-4(fp)
  803464:	10820030 	cmpltui	r2,r2,2048
  803468:	103ff81e 	bne	r2,zero,80344c <__alt_mem_onchip_mem+0xff7fb44c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80346c:	0001883a 	nop
  803470:	e037883a 	mov	sp,fp
  803474:	df000017 	ldw	fp,0(sp)
  803478:	dec00104 	addi	sp,sp,4
  80347c:	f800283a 	ret

00803480 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803480:	defffc04 	addi	sp,sp,-16
  803484:	df000315 	stw	fp,12(sp)
  803488:	df000304 	addi	fp,sp,12
  80348c:	e13ffd15 	stw	r4,-12(fp)
  803490:	e17ffe15 	stw	r5,-8(fp)
  803494:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803498:	e0bfff17 	ldw	r2,-4(fp)
}
  80349c:	e037883a 	mov	sp,fp
  8034a0:	df000017 	ldw	fp,0(sp)
  8034a4:	dec00104 	addi	sp,sp,4
  8034a8:	f800283a 	ret

008034ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8034ac:	defffe04 	addi	sp,sp,-8
  8034b0:	dfc00115 	stw	ra,4(sp)
  8034b4:	df000015 	stw	fp,0(sp)
  8034b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8034bc:	d0a00717 	ldw	r2,-32740(gp)
  8034c0:	10000326 	beq	r2,zero,8034d0 <alt_get_errno+0x24>
  8034c4:	d0a00717 	ldw	r2,-32740(gp)
  8034c8:	103ee83a 	callr	r2
  8034cc:	00000106 	br	8034d4 <alt_get_errno+0x28>
  8034d0:	d0a62504 	addi	r2,gp,-26476
}
  8034d4:	e037883a 	mov	sp,fp
  8034d8:	dfc00117 	ldw	ra,4(sp)
  8034dc:	df000017 	ldw	fp,0(sp)
  8034e0:	dec00204 	addi	sp,sp,8
  8034e4:	f800283a 	ret

008034e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8034e8:	defffa04 	addi	sp,sp,-24
  8034ec:	dfc00515 	stw	ra,20(sp)
  8034f0:	df000415 	stw	fp,16(sp)
  8034f4:	df000404 	addi	fp,sp,16
  8034f8:	e13ffe15 	stw	r4,-8(fp)
  8034fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  803500:	e0bffe17 	ldw	r2,-8(fp)
  803504:	10000326 	beq	r2,zero,803514 <alt_dev_llist_insert+0x2c>
  803508:	e0bffe17 	ldw	r2,-8(fp)
  80350c:	10800217 	ldw	r2,8(r2)
  803510:	1000061e 	bne	r2,zero,80352c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  803514:	08034ac0 	call	8034ac <alt_get_errno>
  803518:	1007883a 	mov	r3,r2
  80351c:	00800584 	movi	r2,22
  803520:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  803524:	00bffa84 	movi	r2,-22
  803528:	00001306 	br	803578 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80352c:	e0bffe17 	ldw	r2,-8(fp)
  803530:	e0ffff17 	ldw	r3,-4(fp)
  803534:	e0fffc15 	stw	r3,-16(fp)
  803538:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80353c:	e0bffd17 	ldw	r2,-12(fp)
  803540:	e0fffc17 	ldw	r3,-16(fp)
  803544:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  803548:	e0bffc17 	ldw	r2,-16(fp)
  80354c:	10c00017 	ldw	r3,0(r2)
  803550:	e0bffd17 	ldw	r2,-12(fp)
  803554:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  803558:	e0bffc17 	ldw	r2,-16(fp)
  80355c:	10800017 	ldw	r2,0(r2)
  803560:	e0fffd17 	ldw	r3,-12(fp)
  803564:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  803568:	e0bffc17 	ldw	r2,-16(fp)
  80356c:	e0fffd17 	ldw	r3,-12(fp)
  803570:	10c00015 	stw	r3,0(r2)

  return 0;  
  803574:	0005883a 	mov	r2,zero
}
  803578:	e037883a 	mov	sp,fp
  80357c:	dfc00117 	ldw	ra,4(sp)
  803580:	df000017 	ldw	fp,0(sp)
  803584:	dec00204 	addi	sp,sp,8
  803588:	f800283a 	ret

0080358c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80358c:	defffd04 	addi	sp,sp,-12
  803590:	dfc00215 	stw	ra,8(sp)
  803594:	df000115 	stw	fp,4(sp)
  803598:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80359c:	00802034 	movhi	r2,128
  8035a0:	10930704 	addi	r2,r2,19484
  8035a4:	e0bfff15 	stw	r2,-4(fp)
  8035a8:	00000606 	br	8035c4 <_do_ctors+0x38>
        (*ctor) (); 
  8035ac:	e0bfff17 	ldw	r2,-4(fp)
  8035b0:	10800017 	ldw	r2,0(r2)
  8035b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8035b8:	e0bfff17 	ldw	r2,-4(fp)
  8035bc:	10bfff04 	addi	r2,r2,-4
  8035c0:	e0bfff15 	stw	r2,-4(fp)
  8035c4:	e0ffff17 	ldw	r3,-4(fp)
  8035c8:	00802034 	movhi	r2,128
  8035cc:	10930804 	addi	r2,r2,19488
  8035d0:	18bff62e 	bgeu	r3,r2,8035ac <__alt_mem_onchip_mem+0xff7fb5ac>
        (*ctor) (); 
}
  8035d4:	0001883a 	nop
  8035d8:	e037883a 	mov	sp,fp
  8035dc:	dfc00117 	ldw	ra,4(sp)
  8035e0:	df000017 	ldw	fp,0(sp)
  8035e4:	dec00204 	addi	sp,sp,8
  8035e8:	f800283a 	ret

008035ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8035ec:	defffd04 	addi	sp,sp,-12
  8035f0:	dfc00215 	stw	ra,8(sp)
  8035f4:	df000115 	stw	fp,4(sp)
  8035f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8035fc:	00802034 	movhi	r2,128
  803600:	10930704 	addi	r2,r2,19484
  803604:	e0bfff15 	stw	r2,-4(fp)
  803608:	00000606 	br	803624 <_do_dtors+0x38>
        (*dtor) (); 
  80360c:	e0bfff17 	ldw	r2,-4(fp)
  803610:	10800017 	ldw	r2,0(r2)
  803614:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  803618:	e0bfff17 	ldw	r2,-4(fp)
  80361c:	10bfff04 	addi	r2,r2,-4
  803620:	e0bfff15 	stw	r2,-4(fp)
  803624:	e0ffff17 	ldw	r3,-4(fp)
  803628:	00802034 	movhi	r2,128
  80362c:	10930804 	addi	r2,r2,19488
  803630:	18bff62e 	bgeu	r3,r2,80360c <__alt_mem_onchip_mem+0xff7fb60c>
        (*dtor) (); 
}
  803634:	0001883a 	nop
  803638:	e037883a 	mov	sp,fp
  80363c:	dfc00117 	ldw	ra,4(sp)
  803640:	df000017 	ldw	fp,0(sp)
  803644:	dec00204 	addi	sp,sp,8
  803648:	f800283a 	ret

0080364c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80364c:	defffe04 	addi	sp,sp,-8
  803650:	dfc00115 	stw	ra,4(sp)
  803654:	df000015 	stw	fp,0(sp)
  803658:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80365c:	01440004 	movi	r5,4096
  803660:	0009883a 	mov	r4,zero
  803664:	08042a40 	call	8042a4 <alt_icache_flush>
#endif
}
  803668:	0001883a 	nop
  80366c:	e037883a 	mov	sp,fp
  803670:	dfc00117 	ldw	ra,4(sp)
  803674:	df000017 	ldw	fp,0(sp)
  803678:	dec00204 	addi	sp,sp,8
  80367c:	f800283a 	ret

00803680 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803680:	defff904 	addi	sp,sp,-28
  803684:	dfc00615 	stw	ra,24(sp)
  803688:	df000515 	stw	fp,20(sp)
  80368c:	df000504 	addi	fp,sp,20
  803690:	e13ffc15 	stw	r4,-16(fp)
  803694:	e17ffd15 	stw	r5,-12(fp)
  803698:	e1bffe15 	stw	r6,-8(fp)
  80369c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8036a0:	e0800217 	ldw	r2,8(fp)
  8036a4:	d8800015 	stw	r2,0(sp)
  8036a8:	e1ffff17 	ldw	r7,-4(fp)
  8036ac:	e1bffe17 	ldw	r6,-8(fp)
  8036b0:	e17ffd17 	ldw	r5,-12(fp)
  8036b4:	e13ffc17 	ldw	r4,-16(fp)
  8036b8:	08038300 	call	803830 <alt_iic_isr_register>
}  
  8036bc:	e037883a 	mov	sp,fp
  8036c0:	dfc00117 	ldw	ra,4(sp)
  8036c4:	df000017 	ldw	fp,0(sp)
  8036c8:	dec00204 	addi	sp,sp,8
  8036cc:	f800283a 	ret

008036d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8036d0:	defff904 	addi	sp,sp,-28
  8036d4:	df000615 	stw	fp,24(sp)
  8036d8:	df000604 	addi	fp,sp,24
  8036dc:	e13ffe15 	stw	r4,-8(fp)
  8036e0:	e17fff15 	stw	r5,-4(fp)
  8036e4:	e0bfff17 	ldw	r2,-4(fp)
  8036e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8036ec:	0005303a 	rdctl	r2,status
  8036f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8036f4:	e0fffb17 	ldw	r3,-20(fp)
  8036f8:	00bfff84 	movi	r2,-2
  8036fc:	1884703a 	and	r2,r3,r2
  803700:	1001703a 	wrctl	status,r2
  
  return context;
  803704:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803708:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80370c:	00c00044 	movi	r3,1
  803710:	e0bffa17 	ldw	r2,-24(fp)
  803714:	1884983a 	sll	r2,r3,r2
  803718:	1007883a 	mov	r3,r2
  80371c:	d0a61e17 	ldw	r2,-26504(gp)
  803720:	1884b03a 	or	r2,r3,r2
  803724:	d0a61e15 	stw	r2,-26504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803728:	d0a61e17 	ldw	r2,-26504(gp)
  80372c:	100170fa 	wrctl	ienable,r2
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803738:	e0bffd17 	ldw	r2,-12(fp)
  80373c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803740:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  803744:	0001883a 	nop
}
  803748:	e037883a 	mov	sp,fp
  80374c:	df000017 	ldw	fp,0(sp)
  803750:	dec00104 	addi	sp,sp,4
  803754:	f800283a 	ret

00803758 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  803758:	defff904 	addi	sp,sp,-28
  80375c:	df000615 	stw	fp,24(sp)
  803760:	df000604 	addi	fp,sp,24
  803764:	e13ffe15 	stw	r4,-8(fp)
  803768:	e17fff15 	stw	r5,-4(fp)
  80376c:	e0bfff17 	ldw	r2,-4(fp)
  803770:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803774:	0005303a 	rdctl	r2,status
  803778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80377c:	e0fffb17 	ldw	r3,-20(fp)
  803780:	00bfff84 	movi	r2,-2
  803784:	1884703a 	and	r2,r3,r2
  803788:	1001703a 	wrctl	status,r2
  
  return context;
  80378c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803790:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  803794:	00c00044 	movi	r3,1
  803798:	e0bffa17 	ldw	r2,-24(fp)
  80379c:	1884983a 	sll	r2,r3,r2
  8037a0:	0084303a 	nor	r2,zero,r2
  8037a4:	1007883a 	mov	r3,r2
  8037a8:	d0a61e17 	ldw	r2,-26504(gp)
  8037ac:	1884703a 	and	r2,r3,r2
  8037b0:	d0a61e15 	stw	r2,-26504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8037b4:	d0a61e17 	ldw	r2,-26504(gp)
  8037b8:	100170fa 	wrctl	ienable,r2
  8037bc:	e0bffc17 	ldw	r2,-16(fp)
  8037c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8037c4:	e0bffd17 	ldw	r2,-12(fp)
  8037c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8037cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8037d0:	0001883a 	nop
}
  8037d4:	e037883a 	mov	sp,fp
  8037d8:	df000017 	ldw	fp,0(sp)
  8037dc:	dec00104 	addi	sp,sp,4
  8037e0:	f800283a 	ret

008037e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8037e4:	defffc04 	addi	sp,sp,-16
  8037e8:	df000315 	stw	fp,12(sp)
  8037ec:	df000304 	addi	fp,sp,12
  8037f0:	e13ffe15 	stw	r4,-8(fp)
  8037f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8037f8:	000530fa 	rdctl	r2,ienable
  8037fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  803800:	00c00044 	movi	r3,1
  803804:	e0bfff17 	ldw	r2,-4(fp)
  803808:	1884983a 	sll	r2,r3,r2
  80380c:	1007883a 	mov	r3,r2
  803810:	e0bffd17 	ldw	r2,-12(fp)
  803814:	1884703a 	and	r2,r3,r2
  803818:	1004c03a 	cmpne	r2,r2,zero
  80381c:	10803fcc 	andi	r2,r2,255
}
  803820:	e037883a 	mov	sp,fp
  803824:	df000017 	ldw	fp,0(sp)
  803828:	dec00104 	addi	sp,sp,4
  80382c:	f800283a 	ret

00803830 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803830:	defff504 	addi	sp,sp,-44
  803834:	dfc00a15 	stw	ra,40(sp)
  803838:	df000915 	stw	fp,36(sp)
  80383c:	df000904 	addi	fp,sp,36
  803840:	e13ffc15 	stw	r4,-16(fp)
  803844:	e17ffd15 	stw	r5,-12(fp)
  803848:	e1bffe15 	stw	r6,-8(fp)
  80384c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  803850:	00bffa84 	movi	r2,-22
  803854:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  803858:	e0bffd17 	ldw	r2,-12(fp)
  80385c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803860:	e0bff817 	ldw	r2,-32(fp)
  803864:	10800808 	cmpgei	r2,r2,32
  803868:	1000271e 	bne	r2,zero,803908 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80386c:	0005303a 	rdctl	r2,status
  803870:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803874:	e0fffb17 	ldw	r3,-20(fp)
  803878:	00bfff84 	movi	r2,-2
  80387c:	1884703a 	and	r2,r3,r2
  803880:	1001703a 	wrctl	status,r2
  
  return context;
  803884:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  803888:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80388c:	00802034 	movhi	r2,128
  803890:	109fe404 	addi	r2,r2,32656
  803894:	e0fff817 	ldw	r3,-32(fp)
  803898:	180690fa 	slli	r3,r3,3
  80389c:	10c5883a 	add	r2,r2,r3
  8038a0:	e0fffe17 	ldw	r3,-8(fp)
  8038a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8038a8:	00802034 	movhi	r2,128
  8038ac:	109fe404 	addi	r2,r2,32656
  8038b0:	e0fff817 	ldw	r3,-32(fp)
  8038b4:	180690fa 	slli	r3,r3,3
  8038b8:	10c5883a 	add	r2,r2,r3
  8038bc:	10800104 	addi	r2,r2,4
  8038c0:	e0ffff17 	ldw	r3,-4(fp)
  8038c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8038c8:	e0bffe17 	ldw	r2,-8(fp)
  8038cc:	10000526 	beq	r2,zero,8038e4 <alt_iic_isr_register+0xb4>
  8038d0:	e0bff817 	ldw	r2,-32(fp)
  8038d4:	100b883a 	mov	r5,r2
  8038d8:	e13ffc17 	ldw	r4,-16(fp)
  8038dc:	08036d00 	call	8036d0 <alt_ic_irq_enable>
  8038e0:	00000406 	br	8038f4 <alt_iic_isr_register+0xc4>
  8038e4:	e0bff817 	ldw	r2,-32(fp)
  8038e8:	100b883a 	mov	r5,r2
  8038ec:	e13ffc17 	ldw	r4,-16(fp)
  8038f0:	08037580 	call	803758 <alt_ic_irq_disable>
  8038f4:	e0bff715 	stw	r2,-36(fp)
  8038f8:	e0bffa17 	ldw	r2,-24(fp)
  8038fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803900:	e0bff917 	ldw	r2,-28(fp)
  803904:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  803908:	e0bff717 	ldw	r2,-36(fp)
}
  80390c:	e037883a 	mov	sp,fp
  803910:	dfc00117 	ldw	ra,4(sp)
  803914:	df000017 	ldw	fp,0(sp)
  803918:	dec00204 	addi	sp,sp,8
  80391c:	f800283a 	ret

00803920 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  803920:	defff904 	addi	sp,sp,-28
  803924:	dfc00615 	stw	ra,24(sp)
  803928:	df000515 	stw	fp,20(sp)
  80392c:	df000504 	addi	fp,sp,20
  803930:	e13ffc15 	stw	r4,-16(fp)
  803934:	e17ffd15 	stw	r5,-12(fp)
  803938:	e1bffe15 	stw	r6,-8(fp)
  80393c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  803940:	e1bfff17 	ldw	r6,-4(fp)
  803944:	e17ffe17 	ldw	r5,-8(fp)
  803948:	e13ffd17 	ldw	r4,-12(fp)
  80394c:	0803b600 	call	803b60 <open>
  803950:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  803954:	e0bffb17 	ldw	r2,-20(fp)
  803958:	10001c16 	blt	r2,zero,8039cc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80395c:	00802034 	movhi	r2,128
  803960:	10985504 	addi	r2,r2,24916
  803964:	e0fffb17 	ldw	r3,-20(fp)
  803968:	18c00324 	muli	r3,r3,12
  80396c:	10c5883a 	add	r2,r2,r3
  803970:	10c00017 	ldw	r3,0(r2)
  803974:	e0bffc17 	ldw	r2,-16(fp)
  803978:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80397c:	00802034 	movhi	r2,128
  803980:	10985504 	addi	r2,r2,24916
  803984:	e0fffb17 	ldw	r3,-20(fp)
  803988:	18c00324 	muli	r3,r3,12
  80398c:	10c5883a 	add	r2,r2,r3
  803990:	10800104 	addi	r2,r2,4
  803994:	10c00017 	ldw	r3,0(r2)
  803998:	e0bffc17 	ldw	r2,-16(fp)
  80399c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8039a0:	00802034 	movhi	r2,128
  8039a4:	10985504 	addi	r2,r2,24916
  8039a8:	e0fffb17 	ldw	r3,-20(fp)
  8039ac:	18c00324 	muli	r3,r3,12
  8039b0:	10c5883a 	add	r2,r2,r3
  8039b4:	10800204 	addi	r2,r2,8
  8039b8:	10c00017 	ldw	r3,0(r2)
  8039bc:	e0bffc17 	ldw	r2,-16(fp)
  8039c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8039c4:	e13ffb17 	ldw	r4,-20(fp)
  8039c8:	0803cb40 	call	803cb4 <alt_release_fd>
  }
} 
  8039cc:	0001883a 	nop
  8039d0:	e037883a 	mov	sp,fp
  8039d4:	dfc00117 	ldw	ra,4(sp)
  8039d8:	df000017 	ldw	fp,0(sp)
  8039dc:	dec00204 	addi	sp,sp,8
  8039e0:	f800283a 	ret

008039e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8039e4:	defffb04 	addi	sp,sp,-20
  8039e8:	dfc00415 	stw	ra,16(sp)
  8039ec:	df000315 	stw	fp,12(sp)
  8039f0:	df000304 	addi	fp,sp,12
  8039f4:	e13ffd15 	stw	r4,-12(fp)
  8039f8:	e17ffe15 	stw	r5,-8(fp)
  8039fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  803a00:	01c07fc4 	movi	r7,511
  803a04:	01800044 	movi	r6,1
  803a08:	e17ffd17 	ldw	r5,-12(fp)
  803a0c:	01002034 	movhi	r4,128
  803a10:	21185804 	addi	r4,r4,24928
  803a14:	08039200 	call	803920 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  803a18:	01c07fc4 	movi	r7,511
  803a1c:	000d883a 	mov	r6,zero
  803a20:	e17ffe17 	ldw	r5,-8(fp)
  803a24:	01002034 	movhi	r4,128
  803a28:	21185504 	addi	r4,r4,24916
  803a2c:	08039200 	call	803920 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  803a30:	01c07fc4 	movi	r7,511
  803a34:	01800044 	movi	r6,1
  803a38:	e17fff17 	ldw	r5,-4(fp)
  803a3c:	01002034 	movhi	r4,128
  803a40:	21185b04 	addi	r4,r4,24940
  803a44:	08039200 	call	803920 <alt_open_fd>
}  
  803a48:	0001883a 	nop
  803a4c:	e037883a 	mov	sp,fp
  803a50:	dfc00117 	ldw	ra,4(sp)
  803a54:	df000017 	ldw	fp,0(sp)
  803a58:	dec00204 	addi	sp,sp,8
  803a5c:	f800283a 	ret

00803a60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803a60:	defffe04 	addi	sp,sp,-8
  803a64:	dfc00115 	stw	ra,4(sp)
  803a68:	df000015 	stw	fp,0(sp)
  803a6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803a70:	d0a00717 	ldw	r2,-32740(gp)
  803a74:	10000326 	beq	r2,zero,803a84 <alt_get_errno+0x24>
  803a78:	d0a00717 	ldw	r2,-32740(gp)
  803a7c:	103ee83a 	callr	r2
  803a80:	00000106 	br	803a88 <alt_get_errno+0x28>
  803a84:	d0a62504 	addi	r2,gp,-26476
}
  803a88:	e037883a 	mov	sp,fp
  803a8c:	dfc00117 	ldw	ra,4(sp)
  803a90:	df000017 	ldw	fp,0(sp)
  803a94:	dec00204 	addi	sp,sp,8
  803a98:	f800283a 	ret

00803a9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  803a9c:	defffd04 	addi	sp,sp,-12
  803aa0:	df000215 	stw	fp,8(sp)
  803aa4:	df000204 	addi	fp,sp,8
  803aa8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803aac:	e0bfff17 	ldw	r2,-4(fp)
  803ab0:	10800217 	ldw	r2,8(r2)
  803ab4:	10d00034 	orhi	r3,r2,16384
  803ab8:	e0bfff17 	ldw	r2,-4(fp)
  803abc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803ac0:	e03ffe15 	stw	zero,-8(fp)
  803ac4:	00001d06 	br	803b3c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803ac8:	00802034 	movhi	r2,128
  803acc:	10985504 	addi	r2,r2,24916
  803ad0:	e0fffe17 	ldw	r3,-8(fp)
  803ad4:	18c00324 	muli	r3,r3,12
  803ad8:	10c5883a 	add	r2,r2,r3
  803adc:	10c00017 	ldw	r3,0(r2)
  803ae0:	e0bfff17 	ldw	r2,-4(fp)
  803ae4:	10800017 	ldw	r2,0(r2)
  803ae8:	1880111e 	bne	r3,r2,803b30 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803aec:	00802034 	movhi	r2,128
  803af0:	10985504 	addi	r2,r2,24916
  803af4:	e0fffe17 	ldw	r3,-8(fp)
  803af8:	18c00324 	muli	r3,r3,12
  803afc:	10c5883a 	add	r2,r2,r3
  803b00:	10800204 	addi	r2,r2,8
  803b04:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803b08:	1000090e 	bge	r2,zero,803b30 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  803b0c:	e0bffe17 	ldw	r2,-8(fp)
  803b10:	10c00324 	muli	r3,r2,12
  803b14:	00802034 	movhi	r2,128
  803b18:	10985504 	addi	r2,r2,24916
  803b1c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803b20:	e0bfff17 	ldw	r2,-4(fp)
  803b24:	18800226 	beq	r3,r2,803b30 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  803b28:	00bffcc4 	movi	r2,-13
  803b2c:	00000806 	br	803b50 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803b30:	e0bffe17 	ldw	r2,-8(fp)
  803b34:	10800044 	addi	r2,r2,1
  803b38:	e0bffe15 	stw	r2,-8(fp)
  803b3c:	d0a00617 	ldw	r2,-32744(gp)
  803b40:	1007883a 	mov	r3,r2
  803b44:	e0bffe17 	ldw	r2,-8(fp)
  803b48:	18bfdf2e 	bgeu	r3,r2,803ac8 <__alt_mem_onchip_mem+0xff7fbac8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  803b4c:	0005883a 	mov	r2,zero
}
  803b50:	e037883a 	mov	sp,fp
  803b54:	df000017 	ldw	fp,0(sp)
  803b58:	dec00104 	addi	sp,sp,4
  803b5c:	f800283a 	ret

00803b60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  803b60:	defff604 	addi	sp,sp,-40
  803b64:	dfc00915 	stw	ra,36(sp)
  803b68:	df000815 	stw	fp,32(sp)
  803b6c:	df000804 	addi	fp,sp,32
  803b70:	e13ffd15 	stw	r4,-12(fp)
  803b74:	e17ffe15 	stw	r5,-8(fp)
  803b78:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  803b7c:	00bfffc4 	movi	r2,-1
  803b80:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  803b84:	00bffb44 	movi	r2,-19
  803b88:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  803b8c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803b90:	d1600404 	addi	r5,gp,-32752
  803b94:	e13ffd17 	ldw	r4,-12(fp)
  803b98:	08040680 	call	804068 <alt_find_dev>
  803b9c:	e0bff815 	stw	r2,-32(fp)
  803ba0:	e0bff817 	ldw	r2,-32(fp)
  803ba4:	1000051e 	bne	r2,zero,803bbc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  803ba8:	e13ffd17 	ldw	r4,-12(fp)
  803bac:	08040f80 	call	8040f8 <alt_find_file>
  803bb0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  803bb4:	00800044 	movi	r2,1
  803bb8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803bbc:	e0bff817 	ldw	r2,-32(fp)
  803bc0:	10002926 	beq	r2,zero,803c68 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  803bc4:	e13ff817 	ldw	r4,-32(fp)
  803bc8:	08042000 	call	804200 <alt_get_fd>
  803bcc:	e0bff915 	stw	r2,-28(fp)
  803bd0:	e0bff917 	ldw	r2,-28(fp)
  803bd4:	1000030e 	bge	r2,zero,803be4 <open+0x84>
    {
      status = index;
  803bd8:	e0bff917 	ldw	r2,-28(fp)
  803bdc:	e0bffa15 	stw	r2,-24(fp)
  803be0:	00002306 	br	803c70 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  803be4:	e0bff917 	ldw	r2,-28(fp)
  803be8:	10c00324 	muli	r3,r2,12
  803bec:	00802034 	movhi	r2,128
  803bf0:	10985504 	addi	r2,r2,24916
  803bf4:	1885883a 	add	r2,r3,r2
  803bf8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  803bfc:	e0fffe17 	ldw	r3,-8(fp)
  803c00:	00900034 	movhi	r2,16384
  803c04:	10bfffc4 	addi	r2,r2,-1
  803c08:	1886703a 	and	r3,r3,r2
  803c0c:	e0bffc17 	ldw	r2,-16(fp)
  803c10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  803c14:	e0bffb17 	ldw	r2,-20(fp)
  803c18:	1000051e 	bne	r2,zero,803c30 <open+0xd0>
  803c1c:	e13ffc17 	ldw	r4,-16(fp)
  803c20:	0803a9c0 	call	803a9c <alt_file_locked>
  803c24:	e0bffa15 	stw	r2,-24(fp)
  803c28:	e0bffa17 	ldw	r2,-24(fp)
  803c2c:	10001016 	blt	r2,zero,803c70 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  803c30:	e0bff817 	ldw	r2,-32(fp)
  803c34:	10800317 	ldw	r2,12(r2)
  803c38:	10000826 	beq	r2,zero,803c5c <open+0xfc>
  803c3c:	e0bff817 	ldw	r2,-32(fp)
  803c40:	10800317 	ldw	r2,12(r2)
  803c44:	e1ffff17 	ldw	r7,-4(fp)
  803c48:	e1bffe17 	ldw	r6,-8(fp)
  803c4c:	e17ffd17 	ldw	r5,-12(fp)
  803c50:	e13ffc17 	ldw	r4,-16(fp)
  803c54:	103ee83a 	callr	r2
  803c58:	00000106 	br	803c60 <open+0x100>
  803c5c:	0005883a 	mov	r2,zero
  803c60:	e0bffa15 	stw	r2,-24(fp)
  803c64:	00000206 	br	803c70 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803c68:	00bffb44 	movi	r2,-19
  803c6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  803c70:	e0bffa17 	ldw	r2,-24(fp)
  803c74:	1000090e 	bge	r2,zero,803c9c <open+0x13c>
  {
    alt_release_fd (index);  
  803c78:	e13ff917 	ldw	r4,-28(fp)
  803c7c:	0803cb40 	call	803cb4 <alt_release_fd>
    ALT_ERRNO = -status;
  803c80:	0803a600 	call	803a60 <alt_get_errno>
  803c84:	1007883a 	mov	r3,r2
  803c88:	e0bffa17 	ldw	r2,-24(fp)
  803c8c:	0085c83a 	sub	r2,zero,r2
  803c90:	18800015 	stw	r2,0(r3)
    return -1;
  803c94:	00bfffc4 	movi	r2,-1
  803c98:	00000106 	br	803ca0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  803c9c:	e0bff917 	ldw	r2,-28(fp)
}
  803ca0:	e037883a 	mov	sp,fp
  803ca4:	dfc00117 	ldw	ra,4(sp)
  803ca8:	df000017 	ldw	fp,0(sp)
  803cac:	dec00204 	addi	sp,sp,8
  803cb0:	f800283a 	ret

00803cb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803cb4:	defffe04 	addi	sp,sp,-8
  803cb8:	df000115 	stw	fp,4(sp)
  803cbc:	df000104 	addi	fp,sp,4
  803cc0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803cc4:	e0bfff17 	ldw	r2,-4(fp)
  803cc8:	108000d0 	cmplti	r2,r2,3
  803ccc:	10000d1e 	bne	r2,zero,803d04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803cd0:	00802034 	movhi	r2,128
  803cd4:	10985504 	addi	r2,r2,24916
  803cd8:	e0ffff17 	ldw	r3,-4(fp)
  803cdc:	18c00324 	muli	r3,r3,12
  803ce0:	10c5883a 	add	r2,r2,r3
  803ce4:	10800204 	addi	r2,r2,8
  803ce8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803cec:	00802034 	movhi	r2,128
  803cf0:	10985504 	addi	r2,r2,24916
  803cf4:	e0ffff17 	ldw	r3,-4(fp)
  803cf8:	18c00324 	muli	r3,r3,12
  803cfc:	10c5883a 	add	r2,r2,r3
  803d00:	10000015 	stw	zero,0(r2)
  }
}
  803d04:	0001883a 	nop
  803d08:	e037883a 	mov	sp,fp
  803d0c:	df000017 	ldw	fp,0(sp)
  803d10:	dec00104 	addi	sp,sp,4
  803d14:	f800283a 	ret

00803d18 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  803d18:	defffa04 	addi	sp,sp,-24
  803d1c:	df000515 	stw	fp,20(sp)
  803d20:	df000504 	addi	fp,sp,20
  803d24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803d28:	0005303a 	rdctl	r2,status
  803d2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803d30:	e0fffc17 	ldw	r3,-16(fp)
  803d34:	00bfff84 	movi	r2,-2
  803d38:	1884703a 	and	r2,r3,r2
  803d3c:	1001703a 	wrctl	status,r2
  
  return context;
  803d40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  803d44:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  803d48:	e0bfff17 	ldw	r2,-4(fp)
  803d4c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  803d50:	e0bffd17 	ldw	r2,-12(fp)
  803d54:	10800017 	ldw	r2,0(r2)
  803d58:	e0fffd17 	ldw	r3,-12(fp)
  803d5c:	18c00117 	ldw	r3,4(r3)
  803d60:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  803d64:	e0bffd17 	ldw	r2,-12(fp)
  803d68:	10800117 	ldw	r2,4(r2)
  803d6c:	e0fffd17 	ldw	r3,-12(fp)
  803d70:	18c00017 	ldw	r3,0(r3)
  803d74:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  803d78:	e0bffd17 	ldw	r2,-12(fp)
  803d7c:	e0fffd17 	ldw	r3,-12(fp)
  803d80:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  803d84:	e0bffd17 	ldw	r2,-12(fp)
  803d88:	e0fffd17 	ldw	r3,-12(fp)
  803d8c:	10c00015 	stw	r3,0(r2)
  803d90:	e0bffb17 	ldw	r2,-20(fp)
  803d94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803d98:	e0bffe17 	ldw	r2,-8(fp)
  803d9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  803da0:	0001883a 	nop
  803da4:	e037883a 	mov	sp,fp
  803da8:	df000017 	ldw	fp,0(sp)
  803dac:	dec00104 	addi	sp,sp,4
  803db0:	f800283a 	ret

00803db4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803db4:	defffb04 	addi	sp,sp,-20
  803db8:	dfc00415 	stw	ra,16(sp)
  803dbc:	df000315 	stw	fp,12(sp)
  803dc0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803dc4:	d0a00817 	ldw	r2,-32736(gp)
  803dc8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803dcc:	d0a62317 	ldw	r2,-26484(gp)
  803dd0:	10800044 	addi	r2,r2,1
  803dd4:	d0a62315 	stw	r2,-26484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803dd8:	00002e06 	br	803e94 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  803ddc:	e0bffd17 	ldw	r2,-12(fp)
  803de0:	10800017 	ldw	r2,0(r2)
  803de4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803de8:	e0bffd17 	ldw	r2,-12(fp)
  803dec:	10800403 	ldbu	r2,16(r2)
  803df0:	10803fcc 	andi	r2,r2,255
  803df4:	10000426 	beq	r2,zero,803e08 <alt_tick+0x54>
  803df8:	d0a62317 	ldw	r2,-26484(gp)
  803dfc:	1000021e 	bne	r2,zero,803e08 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  803e00:	e0bffd17 	ldw	r2,-12(fp)
  803e04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  803e08:	e0bffd17 	ldw	r2,-12(fp)
  803e0c:	10800217 	ldw	r2,8(r2)
  803e10:	d0e62317 	ldw	r3,-26484(gp)
  803e14:	18801d36 	bltu	r3,r2,803e8c <alt_tick+0xd8>
  803e18:	e0bffd17 	ldw	r2,-12(fp)
  803e1c:	10800403 	ldbu	r2,16(r2)
  803e20:	10803fcc 	andi	r2,r2,255
  803e24:	1000191e 	bne	r2,zero,803e8c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  803e28:	e0bffd17 	ldw	r2,-12(fp)
  803e2c:	10800317 	ldw	r2,12(r2)
  803e30:	e0fffd17 	ldw	r3,-12(fp)
  803e34:	18c00517 	ldw	r3,20(r3)
  803e38:	1809883a 	mov	r4,r3
  803e3c:	103ee83a 	callr	r2
  803e40:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803e44:	e0bfff17 	ldw	r2,-4(fp)
  803e48:	1000031e 	bne	r2,zero,803e58 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  803e4c:	e13ffd17 	ldw	r4,-12(fp)
  803e50:	0803d180 	call	803d18 <alt_alarm_stop>
  803e54:	00000d06 	br	803e8c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  803e58:	e0bffd17 	ldw	r2,-12(fp)
  803e5c:	10c00217 	ldw	r3,8(r2)
  803e60:	e0bfff17 	ldw	r2,-4(fp)
  803e64:	1887883a 	add	r3,r3,r2
  803e68:	e0bffd17 	ldw	r2,-12(fp)
  803e6c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803e70:	e0bffd17 	ldw	r2,-12(fp)
  803e74:	10c00217 	ldw	r3,8(r2)
  803e78:	d0a62317 	ldw	r2,-26484(gp)
  803e7c:	1880032e 	bgeu	r3,r2,803e8c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  803e80:	e0bffd17 	ldw	r2,-12(fp)
  803e84:	00c00044 	movi	r3,1
  803e88:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  803e8c:	e0bffe17 	ldw	r2,-8(fp)
  803e90:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803e94:	e0fffd17 	ldw	r3,-12(fp)
  803e98:	d0a00804 	addi	r2,gp,-32736
  803e9c:	18bfcf1e 	bne	r3,r2,803ddc <__alt_mem_onchip_mem+0xff7fbddc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  803ea0:	0001883a 	nop
}
  803ea4:	0001883a 	nop
  803ea8:	e037883a 	mov	sp,fp
  803eac:	dfc00117 	ldw	ra,4(sp)
  803eb0:	df000017 	ldw	fp,0(sp)
  803eb4:	dec00204 	addi	sp,sp,8
  803eb8:	f800283a 	ret

00803ebc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  803ebc:	defffd04 	addi	sp,sp,-12
  803ec0:	dfc00215 	stw	ra,8(sp)
  803ec4:	df000115 	stw	fp,4(sp)
  803ec8:	df000104 	addi	fp,sp,4
  803ecc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803ed0:	e13fff17 	ldw	r4,-4(fp)
  803ed4:	0803f100 	call	803f10 <alt_busy_sleep>
}
  803ed8:	e037883a 	mov	sp,fp
  803edc:	dfc00117 	ldw	ra,4(sp)
  803ee0:	df000017 	ldw	fp,0(sp)
  803ee4:	dec00204 	addi	sp,sp,8
  803ee8:	f800283a 	ret

00803eec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  803eec:	deffff04 	addi	sp,sp,-4
  803ef0:	df000015 	stw	fp,0(sp)
  803ef4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803ef8:	000170fa 	wrctl	ienable,zero
}
  803efc:	0001883a 	nop
  803f00:	e037883a 	mov	sp,fp
  803f04:	df000017 	ldw	fp,0(sp)
  803f08:	dec00104 	addi	sp,sp,4
  803f0c:	f800283a 	ret

00803f10 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  803f10:	defffa04 	addi	sp,sp,-24
  803f14:	dfc00515 	stw	ra,20(sp)
  803f18:	df000415 	stw	fp,16(sp)
  803f1c:	df000404 	addi	fp,sp,16
  803f20:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  803f24:	008000c4 	movi	r2,3
  803f28:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  803f2c:	e0fffd17 	ldw	r3,-12(fp)
  803f30:	008003f4 	movhi	r2,15
  803f34:	10909004 	addi	r2,r2,16960
  803f38:	1885383a 	mul	r2,r3,r2
  803f3c:	100b883a 	mov	r5,r2
  803f40:	0100bef4 	movhi	r4,763
  803f44:	213c2004 	addi	r4,r4,-3968
  803f48:	0804b300 	call	804b30 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  803f4c:	100b883a 	mov	r5,r2
  803f50:	01200034 	movhi	r4,32768
  803f54:	213fffc4 	addi	r4,r4,-1
  803f58:	0804b300 	call	804b30 <__udivsi3>
  803f5c:	100b883a 	mov	r5,r2
  803f60:	e13fff17 	ldw	r4,-4(fp)
  803f64:	0804b300 	call	804b30 <__udivsi3>
  803f68:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  803f6c:	e0bffe17 	ldw	r2,-8(fp)
  803f70:	10002a26 	beq	r2,zero,80401c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  803f74:	e03ffc15 	stw	zero,-16(fp)
  803f78:	00001706 	br	803fd8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  803f7c:	00a00034 	movhi	r2,32768
  803f80:	10bfffc4 	addi	r2,r2,-1
  803f84:	10bfffc4 	addi	r2,r2,-1
  803f88:	103ffe1e 	bne	r2,zero,803f84 <__alt_mem_onchip_mem+0xff7fbf84>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  803f8c:	e0fffd17 	ldw	r3,-12(fp)
  803f90:	008003f4 	movhi	r2,15
  803f94:	10909004 	addi	r2,r2,16960
  803f98:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  803f9c:	100b883a 	mov	r5,r2
  803fa0:	0100bef4 	movhi	r4,763
  803fa4:	213c2004 	addi	r4,r4,-3968
  803fa8:	0804b300 	call	804b30 <__udivsi3>
  803fac:	100b883a 	mov	r5,r2
  803fb0:	01200034 	movhi	r4,32768
  803fb4:	213fffc4 	addi	r4,r4,-1
  803fb8:	0804b300 	call	804b30 <__udivsi3>
  803fbc:	1007883a 	mov	r3,r2
  803fc0:	e0bfff17 	ldw	r2,-4(fp)
  803fc4:	10c5c83a 	sub	r2,r2,r3
  803fc8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803fcc:	e0bffc17 	ldw	r2,-16(fp)
  803fd0:	10800044 	addi	r2,r2,1
  803fd4:	e0bffc15 	stw	r2,-16(fp)
  803fd8:	e0fffc17 	ldw	r3,-16(fp)
  803fdc:	e0bffe17 	ldw	r2,-8(fp)
  803fe0:	18bfe616 	blt	r3,r2,803f7c <__alt_mem_onchip_mem+0xff7fbf7c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803fe4:	e0fffd17 	ldw	r3,-12(fp)
  803fe8:	008003f4 	movhi	r2,15
  803fec:	10909004 	addi	r2,r2,16960
  803ff0:	1885383a 	mul	r2,r3,r2
  803ff4:	100b883a 	mov	r5,r2
  803ff8:	0100bef4 	movhi	r4,763
  803ffc:	213c2004 	addi	r4,r4,-3968
  804000:	0804b300 	call	804b30 <__udivsi3>
  804004:	1007883a 	mov	r3,r2
  804008:	e0bfff17 	ldw	r2,-4(fp)
  80400c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  804010:	10bfffc4 	addi	r2,r2,-1
  804014:	103ffe1e 	bne	r2,zero,804010 <__alt_mem_onchip_mem+0xff7fc010>
  804018:	00000d06 	br	804050 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80401c:	e0fffd17 	ldw	r3,-12(fp)
  804020:	008003f4 	movhi	r2,15
  804024:	10909004 	addi	r2,r2,16960
  804028:	1885383a 	mul	r2,r3,r2
  80402c:	100b883a 	mov	r5,r2
  804030:	0100bef4 	movhi	r4,763
  804034:	213c2004 	addi	r4,r4,-3968
  804038:	0804b300 	call	804b30 <__udivsi3>
  80403c:	1007883a 	mov	r3,r2
  804040:	e0bfff17 	ldw	r2,-4(fp)
  804044:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  804048:	10bfffc4 	addi	r2,r2,-1
  80404c:	00bffe16 	blt	zero,r2,804048 <__alt_mem_onchip_mem+0xff7fc048>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  804050:	0005883a 	mov	r2,zero
}
  804054:	e037883a 	mov	sp,fp
  804058:	dfc00117 	ldw	ra,4(sp)
  80405c:	df000017 	ldw	fp,0(sp)
  804060:	dec00204 	addi	sp,sp,8
  804064:	f800283a 	ret

00804068 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  804068:	defffa04 	addi	sp,sp,-24
  80406c:	dfc00515 	stw	ra,20(sp)
  804070:	df000415 	stw	fp,16(sp)
  804074:	df000404 	addi	fp,sp,16
  804078:	e13ffe15 	stw	r4,-8(fp)
  80407c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  804080:	e0bfff17 	ldw	r2,-4(fp)
  804084:	10800017 	ldw	r2,0(r2)
  804088:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80408c:	e13ffe17 	ldw	r4,-8(fp)
  804090:	08047080 	call	804708 <strlen>
  804094:	10800044 	addi	r2,r2,1
  804098:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80409c:	00000d06 	br	8040d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8040a0:	e0bffc17 	ldw	r2,-16(fp)
  8040a4:	10800217 	ldw	r2,8(r2)
  8040a8:	e0fffd17 	ldw	r3,-12(fp)
  8040ac:	180d883a 	mov	r6,r3
  8040b0:	e17ffe17 	ldw	r5,-8(fp)
  8040b4:	1009883a 	mov	r4,r2
  8040b8:	080441c0 	call	80441c <memcmp>
  8040bc:	1000021e 	bne	r2,zero,8040c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8040c0:	e0bffc17 	ldw	r2,-16(fp)
  8040c4:	00000706 	br	8040e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8040c8:	e0bffc17 	ldw	r2,-16(fp)
  8040cc:	10800017 	ldw	r2,0(r2)
  8040d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8040d4:	e0fffc17 	ldw	r3,-16(fp)
  8040d8:	e0bfff17 	ldw	r2,-4(fp)
  8040dc:	18bff01e 	bne	r3,r2,8040a0 <__alt_mem_onchip_mem+0xff7fc0a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8040e0:	0005883a 	mov	r2,zero
}
  8040e4:	e037883a 	mov	sp,fp
  8040e8:	dfc00117 	ldw	ra,4(sp)
  8040ec:	df000017 	ldw	fp,0(sp)
  8040f0:	dec00204 	addi	sp,sp,8
  8040f4:	f800283a 	ret

008040f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8040f8:	defffb04 	addi	sp,sp,-20
  8040fc:	dfc00415 	stw	ra,16(sp)
  804100:	df000315 	stw	fp,12(sp)
  804104:	df000304 	addi	fp,sp,12
  804108:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80410c:	d0a00217 	ldw	r2,-32760(gp)
  804110:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  804114:	00003106 	br	8041dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  804118:	e0bffd17 	ldw	r2,-12(fp)
  80411c:	10800217 	ldw	r2,8(r2)
  804120:	1009883a 	mov	r4,r2
  804124:	08047080 	call	804708 <strlen>
  804128:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80412c:	e0bffd17 	ldw	r2,-12(fp)
  804130:	10c00217 	ldw	r3,8(r2)
  804134:	e0bffe17 	ldw	r2,-8(fp)
  804138:	10bfffc4 	addi	r2,r2,-1
  80413c:	1885883a 	add	r2,r3,r2
  804140:	10800003 	ldbu	r2,0(r2)
  804144:	10803fcc 	andi	r2,r2,255
  804148:	1080201c 	xori	r2,r2,128
  80414c:	10bfe004 	addi	r2,r2,-128
  804150:	10800bd8 	cmpnei	r2,r2,47
  804154:	1000031e 	bne	r2,zero,804164 <alt_find_file+0x6c>
    {
      len -= 1;
  804158:	e0bffe17 	ldw	r2,-8(fp)
  80415c:	10bfffc4 	addi	r2,r2,-1
  804160:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  804164:	e0bffe17 	ldw	r2,-8(fp)
  804168:	e0ffff17 	ldw	r3,-4(fp)
  80416c:	1885883a 	add	r2,r3,r2
  804170:	10800003 	ldbu	r2,0(r2)
  804174:	10803fcc 	andi	r2,r2,255
  804178:	1080201c 	xori	r2,r2,128
  80417c:	10bfe004 	addi	r2,r2,-128
  804180:	10800be0 	cmpeqi	r2,r2,47
  804184:	1000081e 	bne	r2,zero,8041a8 <alt_find_file+0xb0>
  804188:	e0bffe17 	ldw	r2,-8(fp)
  80418c:	e0ffff17 	ldw	r3,-4(fp)
  804190:	1885883a 	add	r2,r3,r2
  804194:	10800003 	ldbu	r2,0(r2)
  804198:	10803fcc 	andi	r2,r2,255
  80419c:	1080201c 	xori	r2,r2,128
  8041a0:	10bfe004 	addi	r2,r2,-128
  8041a4:	10000a1e 	bne	r2,zero,8041d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8041a8:	e0bffd17 	ldw	r2,-12(fp)
  8041ac:	10800217 	ldw	r2,8(r2)
  8041b0:	e0fffe17 	ldw	r3,-8(fp)
  8041b4:	180d883a 	mov	r6,r3
  8041b8:	e17fff17 	ldw	r5,-4(fp)
  8041bc:	1009883a 	mov	r4,r2
  8041c0:	080441c0 	call	80441c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8041c4:	1000021e 	bne	r2,zero,8041d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8041c8:	e0bffd17 	ldw	r2,-12(fp)
  8041cc:	00000706 	br	8041ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8041d0:	e0bffd17 	ldw	r2,-12(fp)
  8041d4:	10800017 	ldw	r2,0(r2)
  8041d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8041dc:	e0fffd17 	ldw	r3,-12(fp)
  8041e0:	d0a00204 	addi	r2,gp,-32760
  8041e4:	18bfcc1e 	bne	r3,r2,804118 <__alt_mem_onchip_mem+0xff7fc118>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8041e8:	0005883a 	mov	r2,zero
}
  8041ec:	e037883a 	mov	sp,fp
  8041f0:	dfc00117 	ldw	ra,4(sp)
  8041f4:	df000017 	ldw	fp,0(sp)
  8041f8:	dec00204 	addi	sp,sp,8
  8041fc:	f800283a 	ret

00804200 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  804200:	defffc04 	addi	sp,sp,-16
  804204:	df000315 	stw	fp,12(sp)
  804208:	df000304 	addi	fp,sp,12
  80420c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  804210:	00bffa04 	movi	r2,-24
  804214:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  804218:	e03ffd15 	stw	zero,-12(fp)
  80421c:	00001906 	br	804284 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  804220:	00802034 	movhi	r2,128
  804224:	10985504 	addi	r2,r2,24916
  804228:	e0fffd17 	ldw	r3,-12(fp)
  80422c:	18c00324 	muli	r3,r3,12
  804230:	10c5883a 	add	r2,r2,r3
  804234:	10800017 	ldw	r2,0(r2)
  804238:	10000f1e 	bne	r2,zero,804278 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80423c:	00802034 	movhi	r2,128
  804240:	10985504 	addi	r2,r2,24916
  804244:	e0fffd17 	ldw	r3,-12(fp)
  804248:	18c00324 	muli	r3,r3,12
  80424c:	10c5883a 	add	r2,r2,r3
  804250:	e0ffff17 	ldw	r3,-4(fp)
  804254:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  804258:	d0e00617 	ldw	r3,-32744(gp)
  80425c:	e0bffd17 	ldw	r2,-12(fp)
  804260:	1880020e 	bge	r3,r2,80426c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  804264:	e0bffd17 	ldw	r2,-12(fp)
  804268:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
  80426c:	e0bffd17 	ldw	r2,-12(fp)
  804270:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  804274:	00000606 	br	804290 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  804278:	e0bffd17 	ldw	r2,-12(fp)
  80427c:	10800044 	addi	r2,r2,1
  804280:	e0bffd15 	stw	r2,-12(fp)
  804284:	e0bffd17 	ldw	r2,-12(fp)
  804288:	10800810 	cmplti	r2,r2,32
  80428c:	103fe41e 	bne	r2,zero,804220 <__alt_mem_onchip_mem+0xff7fc220>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  804290:	e0bffe17 	ldw	r2,-8(fp)
}
  804294:	e037883a 	mov	sp,fp
  804298:	df000017 	ldw	fp,0(sp)
  80429c:	dec00104 	addi	sp,sp,4
  8042a0:	f800283a 	ret

008042a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8042a4:	defffb04 	addi	sp,sp,-20
  8042a8:	df000415 	stw	fp,16(sp)
  8042ac:	df000404 	addi	fp,sp,16
  8042b0:	e13ffe15 	stw	r4,-8(fp)
  8042b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8042b8:	e0bfff17 	ldw	r2,-4(fp)
  8042bc:	10840070 	cmpltui	r2,r2,4097
  8042c0:	1000021e 	bne	r2,zero,8042cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8042c4:	00840004 	movi	r2,4096
  8042c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8042cc:	e0fffe17 	ldw	r3,-8(fp)
  8042d0:	e0bfff17 	ldw	r2,-4(fp)
  8042d4:	1885883a 	add	r2,r3,r2
  8042d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8042dc:	e0bffe17 	ldw	r2,-8(fp)
  8042e0:	e0bffc15 	stw	r2,-16(fp)
  8042e4:	00000506 	br	8042fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8042e8:	e0bffc17 	ldw	r2,-16(fp)
  8042ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8042f0:	e0bffc17 	ldw	r2,-16(fp)
  8042f4:	10800804 	addi	r2,r2,32
  8042f8:	e0bffc15 	stw	r2,-16(fp)
  8042fc:	e0fffc17 	ldw	r3,-16(fp)
  804300:	e0bffd17 	ldw	r2,-12(fp)
  804304:	18bff836 	bltu	r3,r2,8042e8 <__alt_mem_onchip_mem+0xff7fc2e8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  804308:	e0bffe17 	ldw	r2,-8(fp)
  80430c:	108007cc 	andi	r2,r2,31
  804310:	10000226 	beq	r2,zero,80431c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  804314:	e0bffc17 	ldw	r2,-16(fp)
  804318:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80431c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  804320:	0001883a 	nop
  804324:	e037883a 	mov	sp,fp
  804328:	df000017 	ldw	fp,0(sp)
  80432c:	dec00104 	addi	sp,sp,4
  804330:	f800283a 	ret

00804334 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  804334:	defffe04 	addi	sp,sp,-8
  804338:	df000115 	stw	fp,4(sp)
  80433c:	df000104 	addi	fp,sp,4
  804340:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  804344:	e0bfff17 	ldw	r2,-4(fp)
  804348:	10bffe84 	addi	r2,r2,-6
  80434c:	10c00428 	cmpgeui	r3,r2,16
  804350:	18001a1e 	bne	r3,zero,8043bc <alt_exception_cause_generated_bad_addr+0x88>
  804354:	100690ba 	slli	r3,r2,2
  804358:	00802034 	movhi	r2,128
  80435c:	1090db04 	addi	r2,r2,17260
  804360:	1885883a 	add	r2,r3,r2
  804364:	10800017 	ldw	r2,0(r2)
  804368:	1000683a 	jmp	r2
  80436c:	008043ac 	andhi	r2,zero,270
  804370:	008043ac 	andhi	r2,zero,270
  804374:	008043bc 	xorhi	r2,zero,270
  804378:	008043bc 	xorhi	r2,zero,270
  80437c:	008043bc 	xorhi	r2,zero,270
  804380:	008043ac 	andhi	r2,zero,270
  804384:	008043b4 	movhi	r2,270
  804388:	008043bc 	xorhi	r2,zero,270
  80438c:	008043ac 	andhi	r2,zero,270
  804390:	008043ac 	andhi	r2,zero,270
  804394:	008043bc 	xorhi	r2,zero,270
  804398:	008043ac 	andhi	r2,zero,270
  80439c:	008043b4 	movhi	r2,270
  8043a0:	008043bc 	xorhi	r2,zero,270
  8043a4:	008043bc 	xorhi	r2,zero,270
  8043a8:	008043ac 	andhi	r2,zero,270
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8043ac:	00800044 	movi	r2,1
  8043b0:	00000306 	br	8043c0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8043b4:	0005883a 	mov	r2,zero
  8043b8:	00000106 	br	8043c0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8043bc:	0005883a 	mov	r2,zero
  }
}
  8043c0:	e037883a 	mov	sp,fp
  8043c4:	df000017 	ldw	fp,0(sp)
  8043c8:	dec00104 	addi	sp,sp,4
  8043cc:	f800283a 	ret

008043d0 <atexit>:
  8043d0:	200b883a 	mov	r5,r4
  8043d4:	000f883a 	mov	r7,zero
  8043d8:	000d883a 	mov	r6,zero
  8043dc:	0009883a 	mov	r4,zero
  8043e0:	08047a01 	jmpi	8047a0 <__register_exitproc>

008043e4 <exit>:
  8043e4:	defffe04 	addi	sp,sp,-8
  8043e8:	000b883a 	mov	r5,zero
  8043ec:	dc000015 	stw	r16,0(sp)
  8043f0:	dfc00115 	stw	ra,4(sp)
  8043f4:	2021883a 	mov	r16,r4
  8043f8:	08048b80 	call	8048b8 <__call_exitprocs>
  8043fc:	00802034 	movhi	r2,128
  804400:	1099c904 	addi	r2,r2,26404
  804404:	11000017 	ldw	r4,0(r2)
  804408:	20800f17 	ldw	r2,60(r4)
  80440c:	10000126 	beq	r2,zero,804414 <exit+0x30>
  804410:	103ee83a 	callr	r2
  804414:	8009883a 	mov	r4,r16
  804418:	0804bec0 	call	804bec <_exit>

0080441c <memcmp>:
  80441c:	01c000c4 	movi	r7,3
  804420:	3980192e 	bgeu	r7,r6,804488 <memcmp+0x6c>
  804424:	2144b03a 	or	r2,r4,r5
  804428:	11c4703a 	and	r2,r2,r7
  80442c:	10000f26 	beq	r2,zero,80446c <memcmp+0x50>
  804430:	20800003 	ldbu	r2,0(r4)
  804434:	28c00003 	ldbu	r3,0(r5)
  804438:	10c0151e 	bne	r2,r3,804490 <memcmp+0x74>
  80443c:	31bfff84 	addi	r6,r6,-2
  804440:	01ffffc4 	movi	r7,-1
  804444:	00000406 	br	804458 <memcmp+0x3c>
  804448:	20800003 	ldbu	r2,0(r4)
  80444c:	28c00003 	ldbu	r3,0(r5)
  804450:	31bfffc4 	addi	r6,r6,-1
  804454:	10c00e1e 	bne	r2,r3,804490 <memcmp+0x74>
  804458:	21000044 	addi	r4,r4,1
  80445c:	29400044 	addi	r5,r5,1
  804460:	31fff91e 	bne	r6,r7,804448 <__alt_mem_onchip_mem+0xff7fc448>
  804464:	0005883a 	mov	r2,zero
  804468:	f800283a 	ret
  80446c:	20c00017 	ldw	r3,0(r4)
  804470:	28800017 	ldw	r2,0(r5)
  804474:	18bfee1e 	bne	r3,r2,804430 <__alt_mem_onchip_mem+0xff7fc430>
  804478:	31bfff04 	addi	r6,r6,-4
  80447c:	21000104 	addi	r4,r4,4
  804480:	29400104 	addi	r5,r5,4
  804484:	39bff936 	bltu	r7,r6,80446c <__alt_mem_onchip_mem+0xff7fc46c>
  804488:	303fe91e 	bne	r6,zero,804430 <__alt_mem_onchip_mem+0xff7fc430>
  80448c:	003ff506 	br	804464 <__alt_mem_onchip_mem+0xff7fc464>
  804490:	10c5c83a 	sub	r2,r2,r3
  804494:	f800283a 	ret

00804498 <memcpy>:
  804498:	defffd04 	addi	sp,sp,-12
  80449c:	dfc00215 	stw	ra,8(sp)
  8044a0:	dc400115 	stw	r17,4(sp)
  8044a4:	dc000015 	stw	r16,0(sp)
  8044a8:	00c003c4 	movi	r3,15
  8044ac:	2005883a 	mov	r2,r4
  8044b0:	1980452e 	bgeu	r3,r6,8045c8 <memcpy+0x130>
  8044b4:	2906b03a 	or	r3,r5,r4
  8044b8:	18c000cc 	andi	r3,r3,3
  8044bc:	1800441e 	bne	r3,zero,8045d0 <memcpy+0x138>
  8044c0:	347ffc04 	addi	r17,r6,-16
  8044c4:	8822d13a 	srli	r17,r17,4
  8044c8:	28c00104 	addi	r3,r5,4
  8044cc:	23400104 	addi	r13,r4,4
  8044d0:	8820913a 	slli	r16,r17,4
  8044d4:	2b000204 	addi	r12,r5,8
  8044d8:	22c00204 	addi	r11,r4,8
  8044dc:	84000504 	addi	r16,r16,20
  8044e0:	2a800304 	addi	r10,r5,12
  8044e4:	22400304 	addi	r9,r4,12
  8044e8:	2c21883a 	add	r16,r5,r16
  8044ec:	2811883a 	mov	r8,r5
  8044f0:	200f883a 	mov	r7,r4
  8044f4:	41000017 	ldw	r4,0(r8)
  8044f8:	1fc00017 	ldw	ra,0(r3)
  8044fc:	63c00017 	ldw	r15,0(r12)
  804500:	39000015 	stw	r4,0(r7)
  804504:	53800017 	ldw	r14,0(r10)
  804508:	6fc00015 	stw	ra,0(r13)
  80450c:	5bc00015 	stw	r15,0(r11)
  804510:	4b800015 	stw	r14,0(r9)
  804514:	18c00404 	addi	r3,r3,16
  804518:	39c00404 	addi	r7,r7,16
  80451c:	42000404 	addi	r8,r8,16
  804520:	6b400404 	addi	r13,r13,16
  804524:	63000404 	addi	r12,r12,16
  804528:	5ac00404 	addi	r11,r11,16
  80452c:	52800404 	addi	r10,r10,16
  804530:	4a400404 	addi	r9,r9,16
  804534:	1c3fef1e 	bne	r3,r16,8044f4 <__alt_mem_onchip_mem+0xff7fc4f4>
  804538:	89c00044 	addi	r7,r17,1
  80453c:	380e913a 	slli	r7,r7,4
  804540:	310003cc 	andi	r4,r6,15
  804544:	02c000c4 	movi	r11,3
  804548:	11c7883a 	add	r3,r2,r7
  80454c:	29cb883a 	add	r5,r5,r7
  804550:	5900212e 	bgeu	r11,r4,8045d8 <memcpy+0x140>
  804554:	1813883a 	mov	r9,r3
  804558:	2811883a 	mov	r8,r5
  80455c:	200f883a 	mov	r7,r4
  804560:	42800017 	ldw	r10,0(r8)
  804564:	4a400104 	addi	r9,r9,4
  804568:	39ffff04 	addi	r7,r7,-4
  80456c:	4abfff15 	stw	r10,-4(r9)
  804570:	42000104 	addi	r8,r8,4
  804574:	59fffa36 	bltu	r11,r7,804560 <__alt_mem_onchip_mem+0xff7fc560>
  804578:	213fff04 	addi	r4,r4,-4
  80457c:	2008d0ba 	srli	r4,r4,2
  804580:	318000cc 	andi	r6,r6,3
  804584:	21000044 	addi	r4,r4,1
  804588:	2109883a 	add	r4,r4,r4
  80458c:	2109883a 	add	r4,r4,r4
  804590:	1907883a 	add	r3,r3,r4
  804594:	290b883a 	add	r5,r5,r4
  804598:	30000626 	beq	r6,zero,8045b4 <memcpy+0x11c>
  80459c:	198d883a 	add	r6,r3,r6
  8045a0:	29c00003 	ldbu	r7,0(r5)
  8045a4:	18c00044 	addi	r3,r3,1
  8045a8:	29400044 	addi	r5,r5,1
  8045ac:	19ffffc5 	stb	r7,-1(r3)
  8045b0:	19bffb1e 	bne	r3,r6,8045a0 <__alt_mem_onchip_mem+0xff7fc5a0>
  8045b4:	dfc00217 	ldw	ra,8(sp)
  8045b8:	dc400117 	ldw	r17,4(sp)
  8045bc:	dc000017 	ldw	r16,0(sp)
  8045c0:	dec00304 	addi	sp,sp,12
  8045c4:	f800283a 	ret
  8045c8:	2007883a 	mov	r3,r4
  8045cc:	003ff206 	br	804598 <__alt_mem_onchip_mem+0xff7fc598>
  8045d0:	2007883a 	mov	r3,r4
  8045d4:	003ff106 	br	80459c <__alt_mem_onchip_mem+0xff7fc59c>
  8045d8:	200d883a 	mov	r6,r4
  8045dc:	003fee06 	br	804598 <__alt_mem_onchip_mem+0xff7fc598>

008045e0 <memset>:
  8045e0:	20c000cc 	andi	r3,r4,3
  8045e4:	2005883a 	mov	r2,r4
  8045e8:	18004426 	beq	r3,zero,8046fc <memset+0x11c>
  8045ec:	31ffffc4 	addi	r7,r6,-1
  8045f0:	30004026 	beq	r6,zero,8046f4 <memset+0x114>
  8045f4:	2813883a 	mov	r9,r5
  8045f8:	200d883a 	mov	r6,r4
  8045fc:	2007883a 	mov	r3,r4
  804600:	00000406 	br	804614 <memset+0x34>
  804604:	3a3fffc4 	addi	r8,r7,-1
  804608:	31800044 	addi	r6,r6,1
  80460c:	38003926 	beq	r7,zero,8046f4 <memset+0x114>
  804610:	400f883a 	mov	r7,r8
  804614:	18c00044 	addi	r3,r3,1
  804618:	32400005 	stb	r9,0(r6)
  80461c:	1a0000cc 	andi	r8,r3,3
  804620:	403ff81e 	bne	r8,zero,804604 <__alt_mem_onchip_mem+0xff7fc604>
  804624:	010000c4 	movi	r4,3
  804628:	21c02d2e 	bgeu	r4,r7,8046e0 <memset+0x100>
  80462c:	29003fcc 	andi	r4,r5,255
  804630:	200c923a 	slli	r6,r4,8
  804634:	3108b03a 	or	r4,r6,r4
  804638:	200c943a 	slli	r6,r4,16
  80463c:	218cb03a 	or	r6,r4,r6
  804640:	010003c4 	movi	r4,15
  804644:	21c0182e 	bgeu	r4,r7,8046a8 <memset+0xc8>
  804648:	3b3ffc04 	addi	r12,r7,-16
  80464c:	6018d13a 	srli	r12,r12,4
  804650:	1a000104 	addi	r8,r3,4
  804654:	1ac00204 	addi	r11,r3,8
  804658:	6008913a 	slli	r4,r12,4
  80465c:	1a800304 	addi	r10,r3,12
  804660:	1813883a 	mov	r9,r3
  804664:	21000504 	addi	r4,r4,20
  804668:	1909883a 	add	r4,r3,r4
  80466c:	49800015 	stw	r6,0(r9)
  804670:	41800015 	stw	r6,0(r8)
  804674:	59800015 	stw	r6,0(r11)
  804678:	51800015 	stw	r6,0(r10)
  80467c:	42000404 	addi	r8,r8,16
  804680:	4a400404 	addi	r9,r9,16
  804684:	5ac00404 	addi	r11,r11,16
  804688:	52800404 	addi	r10,r10,16
  80468c:	413ff71e 	bne	r8,r4,80466c <__alt_mem_onchip_mem+0xff7fc66c>
  804690:	63000044 	addi	r12,r12,1
  804694:	6018913a 	slli	r12,r12,4
  804698:	39c003cc 	andi	r7,r7,15
  80469c:	010000c4 	movi	r4,3
  8046a0:	1b07883a 	add	r3,r3,r12
  8046a4:	21c00e2e 	bgeu	r4,r7,8046e0 <memset+0x100>
  8046a8:	1813883a 	mov	r9,r3
  8046ac:	3811883a 	mov	r8,r7
  8046b0:	010000c4 	movi	r4,3
  8046b4:	49800015 	stw	r6,0(r9)
  8046b8:	423fff04 	addi	r8,r8,-4
  8046bc:	4a400104 	addi	r9,r9,4
  8046c0:	223ffc36 	bltu	r4,r8,8046b4 <__alt_mem_onchip_mem+0xff7fc6b4>
  8046c4:	393fff04 	addi	r4,r7,-4
  8046c8:	2008d0ba 	srli	r4,r4,2
  8046cc:	39c000cc 	andi	r7,r7,3
  8046d0:	21000044 	addi	r4,r4,1
  8046d4:	2109883a 	add	r4,r4,r4
  8046d8:	2109883a 	add	r4,r4,r4
  8046dc:	1907883a 	add	r3,r3,r4
  8046e0:	38000526 	beq	r7,zero,8046f8 <memset+0x118>
  8046e4:	19cf883a 	add	r7,r3,r7
  8046e8:	19400005 	stb	r5,0(r3)
  8046ec:	18c00044 	addi	r3,r3,1
  8046f0:	38fffd1e 	bne	r7,r3,8046e8 <__alt_mem_onchip_mem+0xff7fc6e8>
  8046f4:	f800283a 	ret
  8046f8:	f800283a 	ret
  8046fc:	2007883a 	mov	r3,r4
  804700:	300f883a 	mov	r7,r6
  804704:	003fc706 	br	804624 <__alt_mem_onchip_mem+0xff7fc624>

00804708 <strlen>:
  804708:	208000cc 	andi	r2,r4,3
  80470c:	10002026 	beq	r2,zero,804790 <strlen+0x88>
  804710:	20800007 	ldb	r2,0(r4)
  804714:	10002026 	beq	r2,zero,804798 <strlen+0x90>
  804718:	2005883a 	mov	r2,r4
  80471c:	00000206 	br	804728 <strlen+0x20>
  804720:	10c00007 	ldb	r3,0(r2)
  804724:	18001826 	beq	r3,zero,804788 <strlen+0x80>
  804728:	10800044 	addi	r2,r2,1
  80472c:	10c000cc 	andi	r3,r2,3
  804730:	183ffb1e 	bne	r3,zero,804720 <__alt_mem_onchip_mem+0xff7fc720>
  804734:	10c00017 	ldw	r3,0(r2)
  804738:	01ffbff4 	movhi	r7,65279
  80473c:	39ffbfc4 	addi	r7,r7,-257
  804740:	00ca303a 	nor	r5,zero,r3
  804744:	01a02074 	movhi	r6,32897
  804748:	19c7883a 	add	r3,r3,r7
  80474c:	31a02004 	addi	r6,r6,-32640
  804750:	1946703a 	and	r3,r3,r5
  804754:	1986703a 	and	r3,r3,r6
  804758:	1800091e 	bne	r3,zero,804780 <strlen+0x78>
  80475c:	10800104 	addi	r2,r2,4
  804760:	10c00017 	ldw	r3,0(r2)
  804764:	19cb883a 	add	r5,r3,r7
  804768:	00c6303a 	nor	r3,zero,r3
  80476c:	28c6703a 	and	r3,r5,r3
  804770:	1986703a 	and	r3,r3,r6
  804774:	183ff926 	beq	r3,zero,80475c <__alt_mem_onchip_mem+0xff7fc75c>
  804778:	00000106 	br	804780 <strlen+0x78>
  80477c:	10800044 	addi	r2,r2,1
  804780:	10c00007 	ldb	r3,0(r2)
  804784:	183ffd1e 	bne	r3,zero,80477c <__alt_mem_onchip_mem+0xff7fc77c>
  804788:	1105c83a 	sub	r2,r2,r4
  80478c:	f800283a 	ret
  804790:	2005883a 	mov	r2,r4
  804794:	003fe706 	br	804734 <__alt_mem_onchip_mem+0xff7fc734>
  804798:	0005883a 	mov	r2,zero
  80479c:	f800283a 	ret

008047a0 <__register_exitproc>:
  8047a0:	defffa04 	addi	sp,sp,-24
  8047a4:	dc000315 	stw	r16,12(sp)
  8047a8:	04002034 	movhi	r16,128
  8047ac:	8419c904 	addi	r16,r16,26404
  8047b0:	80c00017 	ldw	r3,0(r16)
  8047b4:	dc400415 	stw	r17,16(sp)
  8047b8:	dfc00515 	stw	ra,20(sp)
  8047bc:	18805217 	ldw	r2,328(r3)
  8047c0:	2023883a 	mov	r17,r4
  8047c4:	10003726 	beq	r2,zero,8048a4 <__register_exitproc+0x104>
  8047c8:	10c00117 	ldw	r3,4(r2)
  8047cc:	010007c4 	movi	r4,31
  8047d0:	20c00e16 	blt	r4,r3,80480c <__register_exitproc+0x6c>
  8047d4:	1a000044 	addi	r8,r3,1
  8047d8:	8800221e 	bne	r17,zero,804864 <__register_exitproc+0xc4>
  8047dc:	18c00084 	addi	r3,r3,2
  8047e0:	18c7883a 	add	r3,r3,r3
  8047e4:	18c7883a 	add	r3,r3,r3
  8047e8:	12000115 	stw	r8,4(r2)
  8047ec:	10c7883a 	add	r3,r2,r3
  8047f0:	19400015 	stw	r5,0(r3)
  8047f4:	0005883a 	mov	r2,zero
  8047f8:	dfc00517 	ldw	ra,20(sp)
  8047fc:	dc400417 	ldw	r17,16(sp)
  804800:	dc000317 	ldw	r16,12(sp)
  804804:	dec00604 	addi	sp,sp,24
  804808:	f800283a 	ret
  80480c:	00800034 	movhi	r2,0
  804810:	10800004 	addi	r2,r2,0
  804814:	10002626 	beq	r2,zero,8048b0 <__register_exitproc+0x110>
  804818:	01006404 	movi	r4,400
  80481c:	d9400015 	stw	r5,0(sp)
  804820:	d9800115 	stw	r6,4(sp)
  804824:	d9c00215 	stw	r7,8(sp)
  804828:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80482c:	d9400017 	ldw	r5,0(sp)
  804830:	d9800117 	ldw	r6,4(sp)
  804834:	d9c00217 	ldw	r7,8(sp)
  804838:	10001d26 	beq	r2,zero,8048b0 <__register_exitproc+0x110>
  80483c:	81000017 	ldw	r4,0(r16)
  804840:	10000115 	stw	zero,4(r2)
  804844:	02000044 	movi	r8,1
  804848:	22405217 	ldw	r9,328(r4)
  80484c:	0007883a 	mov	r3,zero
  804850:	12400015 	stw	r9,0(r2)
  804854:	20805215 	stw	r2,328(r4)
  804858:	10006215 	stw	zero,392(r2)
  80485c:	10006315 	stw	zero,396(r2)
  804860:	883fde26 	beq	r17,zero,8047dc <__alt_mem_onchip_mem+0xff7fc7dc>
  804864:	18c9883a 	add	r4,r3,r3
  804868:	2109883a 	add	r4,r4,r4
  80486c:	1109883a 	add	r4,r2,r4
  804870:	21802215 	stw	r6,136(r4)
  804874:	01800044 	movi	r6,1
  804878:	12406217 	ldw	r9,392(r2)
  80487c:	30cc983a 	sll	r6,r6,r3
  804880:	4992b03a 	or	r9,r9,r6
  804884:	12406215 	stw	r9,392(r2)
  804888:	21c04215 	stw	r7,264(r4)
  80488c:	01000084 	movi	r4,2
  804890:	893fd21e 	bne	r17,r4,8047dc <__alt_mem_onchip_mem+0xff7fc7dc>
  804894:	11006317 	ldw	r4,396(r2)
  804898:	218cb03a 	or	r6,r4,r6
  80489c:	11806315 	stw	r6,396(r2)
  8048a0:	003fce06 	br	8047dc <__alt_mem_onchip_mem+0xff7fc7dc>
  8048a4:	18805304 	addi	r2,r3,332
  8048a8:	18805215 	stw	r2,328(r3)
  8048ac:	003fc606 	br	8047c8 <__alt_mem_onchip_mem+0xff7fc7c8>
  8048b0:	00bfffc4 	movi	r2,-1
  8048b4:	003fd006 	br	8047f8 <__alt_mem_onchip_mem+0xff7fc7f8>

008048b8 <__call_exitprocs>:
  8048b8:	defff504 	addi	sp,sp,-44
  8048bc:	df000915 	stw	fp,36(sp)
  8048c0:	dd400615 	stw	r21,24(sp)
  8048c4:	dc800315 	stw	r18,12(sp)
  8048c8:	dfc00a15 	stw	ra,40(sp)
  8048cc:	ddc00815 	stw	r23,32(sp)
  8048d0:	dd800715 	stw	r22,28(sp)
  8048d4:	dd000515 	stw	r20,20(sp)
  8048d8:	dcc00415 	stw	r19,16(sp)
  8048dc:	dc400215 	stw	r17,8(sp)
  8048e0:	dc000115 	stw	r16,4(sp)
  8048e4:	d9000015 	stw	r4,0(sp)
  8048e8:	2839883a 	mov	fp,r5
  8048ec:	04800044 	movi	r18,1
  8048f0:	057fffc4 	movi	r21,-1
  8048f4:	00802034 	movhi	r2,128
  8048f8:	1099c904 	addi	r2,r2,26404
  8048fc:	12000017 	ldw	r8,0(r2)
  804900:	45005217 	ldw	r20,328(r8)
  804904:	44c05204 	addi	r19,r8,328
  804908:	a0001c26 	beq	r20,zero,80497c <__call_exitprocs+0xc4>
  80490c:	a0800117 	ldw	r2,4(r20)
  804910:	15ffffc4 	addi	r23,r2,-1
  804914:	b8000d16 	blt	r23,zero,80494c <__call_exitprocs+0x94>
  804918:	14000044 	addi	r16,r2,1
  80491c:	8421883a 	add	r16,r16,r16
  804920:	8421883a 	add	r16,r16,r16
  804924:	84402004 	addi	r17,r16,128
  804928:	a463883a 	add	r17,r20,r17
  80492c:	a421883a 	add	r16,r20,r16
  804930:	e0001e26 	beq	fp,zero,8049ac <__call_exitprocs+0xf4>
  804934:	80804017 	ldw	r2,256(r16)
  804938:	e0801c26 	beq	fp,r2,8049ac <__call_exitprocs+0xf4>
  80493c:	bdffffc4 	addi	r23,r23,-1
  804940:	843fff04 	addi	r16,r16,-4
  804944:	8c7fff04 	addi	r17,r17,-4
  804948:	bd7ff91e 	bne	r23,r21,804930 <__alt_mem_onchip_mem+0xff7fc930>
  80494c:	00800034 	movhi	r2,0
  804950:	10800004 	addi	r2,r2,0
  804954:	10000926 	beq	r2,zero,80497c <__call_exitprocs+0xc4>
  804958:	a0800117 	ldw	r2,4(r20)
  80495c:	1000301e 	bne	r2,zero,804a20 <__call_exitprocs+0x168>
  804960:	a0800017 	ldw	r2,0(r20)
  804964:	10003226 	beq	r2,zero,804a30 <__call_exitprocs+0x178>
  804968:	a009883a 	mov	r4,r20
  80496c:	98800015 	stw	r2,0(r19)
  804970:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  804974:	9d000017 	ldw	r20,0(r19)
  804978:	a03fe41e 	bne	r20,zero,80490c <__alt_mem_onchip_mem+0xff7fc90c>
  80497c:	dfc00a17 	ldw	ra,40(sp)
  804980:	df000917 	ldw	fp,36(sp)
  804984:	ddc00817 	ldw	r23,32(sp)
  804988:	dd800717 	ldw	r22,28(sp)
  80498c:	dd400617 	ldw	r21,24(sp)
  804990:	dd000517 	ldw	r20,20(sp)
  804994:	dcc00417 	ldw	r19,16(sp)
  804998:	dc800317 	ldw	r18,12(sp)
  80499c:	dc400217 	ldw	r17,8(sp)
  8049a0:	dc000117 	ldw	r16,4(sp)
  8049a4:	dec00b04 	addi	sp,sp,44
  8049a8:	f800283a 	ret
  8049ac:	a0800117 	ldw	r2,4(r20)
  8049b0:	80c00017 	ldw	r3,0(r16)
  8049b4:	10bfffc4 	addi	r2,r2,-1
  8049b8:	15c01426 	beq	r2,r23,804a0c <__call_exitprocs+0x154>
  8049bc:	80000015 	stw	zero,0(r16)
  8049c0:	183fde26 	beq	r3,zero,80493c <__alt_mem_onchip_mem+0xff7fc93c>
  8049c4:	95c8983a 	sll	r4,r18,r23
  8049c8:	a0806217 	ldw	r2,392(r20)
  8049cc:	a5800117 	ldw	r22,4(r20)
  8049d0:	2084703a 	and	r2,r4,r2
  8049d4:	10000b26 	beq	r2,zero,804a04 <__call_exitprocs+0x14c>
  8049d8:	a0806317 	ldw	r2,396(r20)
  8049dc:	2088703a 	and	r4,r4,r2
  8049e0:	20000c1e 	bne	r4,zero,804a14 <__call_exitprocs+0x15c>
  8049e4:	89400017 	ldw	r5,0(r17)
  8049e8:	d9000017 	ldw	r4,0(sp)
  8049ec:	183ee83a 	callr	r3
  8049f0:	a0800117 	ldw	r2,4(r20)
  8049f4:	15bfbf1e 	bne	r2,r22,8048f4 <__alt_mem_onchip_mem+0xff7fc8f4>
  8049f8:	98800017 	ldw	r2,0(r19)
  8049fc:	153fcf26 	beq	r2,r20,80493c <__alt_mem_onchip_mem+0xff7fc93c>
  804a00:	003fbc06 	br	8048f4 <__alt_mem_onchip_mem+0xff7fc8f4>
  804a04:	183ee83a 	callr	r3
  804a08:	003ff906 	br	8049f0 <__alt_mem_onchip_mem+0xff7fc9f0>
  804a0c:	a5c00115 	stw	r23,4(r20)
  804a10:	003feb06 	br	8049c0 <__alt_mem_onchip_mem+0xff7fc9c0>
  804a14:	89000017 	ldw	r4,0(r17)
  804a18:	183ee83a 	callr	r3
  804a1c:	003ff406 	br	8049f0 <__alt_mem_onchip_mem+0xff7fc9f0>
  804a20:	a0800017 	ldw	r2,0(r20)
  804a24:	a027883a 	mov	r19,r20
  804a28:	1029883a 	mov	r20,r2
  804a2c:	003fb606 	br	804908 <__alt_mem_onchip_mem+0xff7fc908>
  804a30:	0005883a 	mov	r2,zero
  804a34:	003ffb06 	br	804a24 <__alt_mem_onchip_mem+0xff7fca24>

00804a38 <__divsi3>:
  804a38:	20001b16 	blt	r4,zero,804aa8 <__divsi3+0x70>
  804a3c:	000f883a 	mov	r7,zero
  804a40:	28001616 	blt	r5,zero,804a9c <__divsi3+0x64>
  804a44:	200d883a 	mov	r6,r4
  804a48:	29001a2e 	bgeu	r5,r4,804ab4 <__divsi3+0x7c>
  804a4c:	00800804 	movi	r2,32
  804a50:	00c00044 	movi	r3,1
  804a54:	00000106 	br	804a5c <__divsi3+0x24>
  804a58:	10000d26 	beq	r2,zero,804a90 <__divsi3+0x58>
  804a5c:	294b883a 	add	r5,r5,r5
  804a60:	10bfffc4 	addi	r2,r2,-1
  804a64:	18c7883a 	add	r3,r3,r3
  804a68:	293ffb36 	bltu	r5,r4,804a58 <__alt_mem_onchip_mem+0xff7fca58>
  804a6c:	0005883a 	mov	r2,zero
  804a70:	18000726 	beq	r3,zero,804a90 <__divsi3+0x58>
  804a74:	0005883a 	mov	r2,zero
  804a78:	31400236 	bltu	r6,r5,804a84 <__divsi3+0x4c>
  804a7c:	314dc83a 	sub	r6,r6,r5
  804a80:	10c4b03a 	or	r2,r2,r3
  804a84:	1806d07a 	srli	r3,r3,1
  804a88:	280ad07a 	srli	r5,r5,1
  804a8c:	183ffa1e 	bne	r3,zero,804a78 <__alt_mem_onchip_mem+0xff7fca78>
  804a90:	38000126 	beq	r7,zero,804a98 <__divsi3+0x60>
  804a94:	0085c83a 	sub	r2,zero,r2
  804a98:	f800283a 	ret
  804a9c:	014bc83a 	sub	r5,zero,r5
  804aa0:	39c0005c 	xori	r7,r7,1
  804aa4:	003fe706 	br	804a44 <__alt_mem_onchip_mem+0xff7fca44>
  804aa8:	0109c83a 	sub	r4,zero,r4
  804aac:	01c00044 	movi	r7,1
  804ab0:	003fe306 	br	804a40 <__alt_mem_onchip_mem+0xff7fca40>
  804ab4:	00c00044 	movi	r3,1
  804ab8:	003fee06 	br	804a74 <__alt_mem_onchip_mem+0xff7fca74>

00804abc <__modsi3>:
  804abc:	20001716 	blt	r4,zero,804b1c <__modsi3+0x60>
  804ac0:	000f883a 	mov	r7,zero
  804ac4:	2005883a 	mov	r2,r4
  804ac8:	28001216 	blt	r5,zero,804b14 <__modsi3+0x58>
  804acc:	2900162e 	bgeu	r5,r4,804b28 <__modsi3+0x6c>
  804ad0:	01800804 	movi	r6,32
  804ad4:	00c00044 	movi	r3,1
  804ad8:	00000106 	br	804ae0 <__modsi3+0x24>
  804adc:	30000a26 	beq	r6,zero,804b08 <__modsi3+0x4c>
  804ae0:	294b883a 	add	r5,r5,r5
  804ae4:	31bfffc4 	addi	r6,r6,-1
  804ae8:	18c7883a 	add	r3,r3,r3
  804aec:	293ffb36 	bltu	r5,r4,804adc <__alt_mem_onchip_mem+0xff7fcadc>
  804af0:	18000526 	beq	r3,zero,804b08 <__modsi3+0x4c>
  804af4:	1806d07a 	srli	r3,r3,1
  804af8:	11400136 	bltu	r2,r5,804b00 <__modsi3+0x44>
  804afc:	1145c83a 	sub	r2,r2,r5
  804b00:	280ad07a 	srli	r5,r5,1
  804b04:	183ffb1e 	bne	r3,zero,804af4 <__alt_mem_onchip_mem+0xff7fcaf4>
  804b08:	38000126 	beq	r7,zero,804b10 <__modsi3+0x54>
  804b0c:	0085c83a 	sub	r2,zero,r2
  804b10:	f800283a 	ret
  804b14:	014bc83a 	sub	r5,zero,r5
  804b18:	003fec06 	br	804acc <__alt_mem_onchip_mem+0xff7fcacc>
  804b1c:	0109c83a 	sub	r4,zero,r4
  804b20:	01c00044 	movi	r7,1
  804b24:	003fe706 	br	804ac4 <__alt_mem_onchip_mem+0xff7fcac4>
  804b28:	00c00044 	movi	r3,1
  804b2c:	003ff106 	br	804af4 <__alt_mem_onchip_mem+0xff7fcaf4>

00804b30 <__udivsi3>:
  804b30:	200d883a 	mov	r6,r4
  804b34:	2900152e 	bgeu	r5,r4,804b8c <__udivsi3+0x5c>
  804b38:	28001416 	blt	r5,zero,804b8c <__udivsi3+0x5c>
  804b3c:	00800804 	movi	r2,32
  804b40:	00c00044 	movi	r3,1
  804b44:	00000206 	br	804b50 <__udivsi3+0x20>
  804b48:	10000e26 	beq	r2,zero,804b84 <__udivsi3+0x54>
  804b4c:	28000516 	blt	r5,zero,804b64 <__udivsi3+0x34>
  804b50:	294b883a 	add	r5,r5,r5
  804b54:	10bfffc4 	addi	r2,r2,-1
  804b58:	18c7883a 	add	r3,r3,r3
  804b5c:	293ffa36 	bltu	r5,r4,804b48 <__alt_mem_onchip_mem+0xff7fcb48>
  804b60:	18000826 	beq	r3,zero,804b84 <__udivsi3+0x54>
  804b64:	0005883a 	mov	r2,zero
  804b68:	31400236 	bltu	r6,r5,804b74 <__udivsi3+0x44>
  804b6c:	314dc83a 	sub	r6,r6,r5
  804b70:	10c4b03a 	or	r2,r2,r3
  804b74:	1806d07a 	srli	r3,r3,1
  804b78:	280ad07a 	srli	r5,r5,1
  804b7c:	183ffa1e 	bne	r3,zero,804b68 <__alt_mem_onchip_mem+0xff7fcb68>
  804b80:	f800283a 	ret
  804b84:	0005883a 	mov	r2,zero
  804b88:	f800283a 	ret
  804b8c:	00c00044 	movi	r3,1
  804b90:	003ff406 	br	804b64 <__alt_mem_onchip_mem+0xff7fcb64>

00804b94 <__umodsi3>:
  804b94:	2005883a 	mov	r2,r4
  804b98:	2900122e 	bgeu	r5,r4,804be4 <__umodsi3+0x50>
  804b9c:	28001116 	blt	r5,zero,804be4 <__umodsi3+0x50>
  804ba0:	01800804 	movi	r6,32
  804ba4:	00c00044 	movi	r3,1
  804ba8:	00000206 	br	804bb4 <__umodsi3+0x20>
  804bac:	30000c26 	beq	r6,zero,804be0 <__umodsi3+0x4c>
  804bb0:	28000516 	blt	r5,zero,804bc8 <__umodsi3+0x34>
  804bb4:	294b883a 	add	r5,r5,r5
  804bb8:	31bfffc4 	addi	r6,r6,-1
  804bbc:	18c7883a 	add	r3,r3,r3
  804bc0:	293ffa36 	bltu	r5,r4,804bac <__alt_mem_onchip_mem+0xff7fcbac>
  804bc4:	18000626 	beq	r3,zero,804be0 <__umodsi3+0x4c>
  804bc8:	1806d07a 	srli	r3,r3,1
  804bcc:	11400136 	bltu	r2,r5,804bd4 <__umodsi3+0x40>
  804bd0:	1145c83a 	sub	r2,r2,r5
  804bd4:	280ad07a 	srli	r5,r5,1
  804bd8:	183ffb1e 	bne	r3,zero,804bc8 <__alt_mem_onchip_mem+0xff7fcbc8>
  804bdc:	f800283a 	ret
  804be0:	f800283a 	ret
  804be4:	00c00044 	movi	r3,1
  804be8:	003ff706 	br	804bc8 <__alt_mem_onchip_mem+0xff7fcbc8>

00804bec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  804bec:	defffd04 	addi	sp,sp,-12
  804bf0:	df000215 	stw	fp,8(sp)
  804bf4:	df000204 	addi	fp,sp,8
  804bf8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  804bfc:	0001883a 	nop
  804c00:	e0bfff17 	ldw	r2,-4(fp)
  804c04:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  804c08:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  804c0c:	10000226 	beq	r2,zero,804c18 <_exit+0x2c>
    ALT_SIM_FAIL();
  804c10:	002af070 	cmpltui	zero,zero,43969
  804c14:	00000106 	br	804c1c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  804c18:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  804c1c:	003fff06 	br	804c1c <__alt_mem_onchip_mem+0xff7fcc1c>
